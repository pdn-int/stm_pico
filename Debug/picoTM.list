
picoTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa08  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800aca8  0800aca8  0000bca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b258  0800b258  0000c258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b260  0800b260  0000c260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b264  0800b264  0000c264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800b268  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000824  240001d8  0800b440  0000d1d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240009fc  0800b440  0000d9fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b2c8  00000000  00000000  0000d206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030a1  00000000  00000000  000284ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011f8  00000000  00000000  0002b570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000de0  00000000  00000000  0002c768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039285  00000000  00000000  0002d548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017fec  00000000  00000000  000667cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00161600  00000000  00000000  0007e7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001dfdb9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005a08  00000000  00000000  001dfdfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001e5804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ac90 	.word	0x0800ac90

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800ac90 	.word	0x0800ac90

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <apds9250_init>:
//extern IC3Daemon ic3;

char colors[4][4] = {"IR", "GRN", "RED", "BLU"};

bool apds9250_init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
	// Check Device ID
	if(!apds9250_get_part_id()) {
 8000686:	f000 f8dd 	bl	8000844 <apds9250_get_part_id>
 800068a:	4603      	mov	r3, r0
 800068c:	f083 0301 	eor.w	r3, r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <apds9250_init+0x1a>
		return false;
 8000696:	2300      	movs	r3, #0
 8000698:	e066      	b.n	8000768 <apds9250_init+0xe8>
	}
  
	// Read MAIN_STATUS Register to clear Power-On Status
	apds9250_get_main_status();
 800069a:	f000 f8fd 	bl	8000898 <apds9250_get_main_status>
	
	// Note: These are set to default for now
	// Set Resolution/Bit Width and Meausrement Rate
  apds9250_set_meas_rate(BIT18_100MS, RATE_100MS);
 800069e:	2102      	movs	r1, #2
 80006a0:	2002      	movs	r0, #2
 80006a2:	f000 f895 	bl	80007d0 <apds9250_set_meas_rate>

	
	// Set Gain Range
  apds9250_set_gain(GAIN1);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f8b4 	bl	8000814 <apds9250_set_gain>

	// Select Threshold Interrupt Mode
  if(ic3.light_sensor_int_mode > LIGHT_INT_DISABLED) {
 80006ac:	4b30      	ldr	r3, [pc, #192]	@ (8000770 <apds9250_init+0xf0>)
 80006ae:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d052      	beq.n	800075c <apds9250_init+0xdc>
    //L_INFO("Light sensor interrupt enabled. Setting configurations for interrupt...");
    
    // Set Interrupt
    apds9250_set_int_en(LS_INT_ENABLED);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 f9c2 	bl	8000a40 <apds9250_set_int_en>
    
    // Configure GPIO for external interrupt
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80006bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <apds9250_init+0xf4>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c2:	4a2c      	ldr	r2, [pc, #176]	@ (8000774 <apds9250_init+0xf4>)
 80006c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006cc:	4b29      	ldr	r3, [pc, #164]	@ (8000774 <apds9250_init+0xf4>)
 80006ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = APDS9250_INT_PIN;
 80006e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ec:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006f2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(APDS9250_INT_PORT, &GPIO_InitStruct);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	481e      	ldr	r0, [pc, #120]	@ (8000778 <apds9250_init+0xf8>)
 80006fe:	f002 fb65 	bl	8002dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(APDS9250_EXTI_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2017      	movs	r0, #23
 8000708:	f002 fab3 	bl	8002c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(APDS9250_EXTI_IRQn);
 800070c:	2017      	movs	r0, #23
 800070e:	f002 faca 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
    
    // Select Red Channels for Interrupt
    //L_INFO("Setting light sensor interrupt channel to %s", colors[ic3.light_sensor_int_ch]);
    apds9250_set_int_sel(ic3.light_sensor_int_ch);
 8000712:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <apds9250_init+0xf0>)
 8000714:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f92d 	bl	8000978 <apds9250_set_int_sel>
    
    if(ic3.light_sensor_int_mode == LIGHT_INT_VARIANCE) {
 800071e:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <apds9250_init+0xf0>)
 8000720:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8000724:	2b02      	cmp	r3, #2
 8000726:	d10a      	bne.n	800073e <apds9250_init+0xbe>
      //L_INFO("Light sensor interrupt set to variance mode.");
      
      // Set interrupt to variance mode
      apds9250_set_var_mode(LS_VAR_INT_MODE);
 8000728:	2001      	movs	r0, #1
 800072a:	f000 f957 	bl	80009dc <apds9250_set_var_mode>
      
      // Set variance threshold
      apds9250_set_ls_thres_var(ic3.light_sensor_var_thres);
 800072e:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <apds9250_init+0xf0>)
 8000730:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8000734:	b2db      	uxtb	r3, r3
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f9fc 	bl	8000b34 <apds9250_set_ls_thres_var>
 800073c:	e00e      	b.n	800075c <apds9250_init+0xdc>
      
    } else {
      //L_INFO("Light sensor interrupt set to threshold mode.");
      
      // Set interrupt to threshold mode
      apds9250_set_var_mode(LS_THRES_INT_MODE);
 800073e:	2000      	movs	r0, #0
 8000740:	f000 f94c 	bl	80009dc <apds9250_set_var_mode>
	
      // Set Upper Threshold
      apds9250_set_ls_thres_up(ic3.light_sensor_upper_thres);
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <apds9250_init+0xf0>)
 8000746:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f9aa 	bl	8000aa4 <apds9250_set_ls_thres_up>
    
      // Set Lower Threshold
      apds9250_set_ls_thres_low(ic3.light_sensor_lower_thres);
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <apds9250_init+0xf0>)
 8000752:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f9c8 	bl	8000aec <apds9250_set_ls_thres_low>
    }
  }
  
	// Set CS Mode to RGB and enable Light Sensor
  apds9250_set_main_ctrl(0, ALL_RGB_IR_COMP_ACTIVATED, LS_ACTIVE);
 800075c:	2201      	movs	r2, #1
 800075e:	2101      	movs	r1, #1
 8000760:	2000      	movs	r0, #0
 8000762:	f000 f80b 	bl	800077c <apds9250_set_main_ctrl>

	//L_INFO("Light Sensor initialization completed");
	return true;
 8000766:	2301      	movs	r3, #1
}
 8000768:	4618      	mov	r0, r3
 800076a:	3718      	adds	r7, #24
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	240001f8 	.word	0x240001f8
 8000774:	58024400 	.word	0x58024400
 8000778:	58022000 	.word	0x58022000

0800077c <apds9250_set_main_ctrl>:

/********************************************************
 * MAIN_CTRL
 ********************************************************/
void apds9250_set_main_ctrl(bool sw_reset, bool cs_mode, bool ls_en)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af02      	add	r7, sp, #8
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	460b      	mov	r3, r1
 8000788:	71bb      	strb	r3, [r7, #6]
 800078a:	4613      	mov	r3, r2
 800078c:	717b      	strb	r3, [r7, #5]
  uint8_t main_ctrl = ((uint8_t)sw_reset<<4) + ((uint8_t)cs_mode<<2) + ((uint8_t)ls_en<<1);
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	011b      	lsls	r3, r3, #4
 8000792:	b2da      	uxtb	r2, r3
 8000794:	79bb      	ldrb	r3, [r7, #6]
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	b2db      	uxtb	r3, r3
 800079a:	4413      	add	r3, r2
 800079c:	b2da      	uxtb	r2, r3
 800079e:	797b      	ldrb	r3, [r7, #5]
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	4413      	add	r3, r2
 80007a6:	73fb      	strb	r3, [r7, #15]
	uint8_t wData[2] = {APDS9250_MAIN_CTRL_ADDR, main_ctrl};
 80007a8:	2300      	movs	r3, #0
 80007aa:	733b      	strb	r3, [r7, #12]
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	737b      	strb	r3, [r7, #13]
  
	//L_DEBUG("main_ctrl = %02X", wData[1]);
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 2, 100);
 80007b0:	f107 020c 	add.w	r2, r7, #12
 80007b4:	2364      	movs	r3, #100	@ 0x64
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2302      	movs	r3, #2
 80007ba:	21a4      	movs	r1, #164	@ 0xa4
 80007bc:	4803      	ldr	r0, [pc, #12]	@ (80007cc <apds9250_set_main_ctrl+0x50>)
 80007be:	f002 fd51 	bl	8003264 <HAL_I2C_Master_Transmit>
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	24000588 	.word	0x24000588

080007d0 <apds9250_set_meas_rate>:

/********************************************************
 * MEAS_RATE
 ********************************************************/
void apds9250_set_meas_rate(uint8_t resolution, uint8_t rate)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	4603      	mov	r3, r0
 80007d8:	460a      	mov	r2, r1
 80007da:	71fb      	strb	r3, [r7, #7]
 80007dc:	4613      	mov	r3, r2
 80007de:	71bb      	strb	r3, [r7, #6]
  uint8_t meas_rate = (resolution<<4) + rate;
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	4413      	add	r3, r2
 80007ea:	73fb      	strb	r3, [r7, #15]
	uint8_t wData[2] = {APDS9250_LS_MEAS_RATE_ADDR, meas_rate};
 80007ec:	2304      	movs	r3, #4
 80007ee:	733b      	strb	r3, [r7, #12]
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	737b      	strb	r3, [r7, #13]
  
	//L_DEBUG("main_ctrl = %02X", wData[1]);
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 2, 100);
 80007f4:	f107 020c 	add.w	r2, r7, #12
 80007f8:	2364      	movs	r3, #100	@ 0x64
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2302      	movs	r3, #2
 80007fe:	21a4      	movs	r1, #164	@ 0xa4
 8000800:	4803      	ldr	r0, [pc, #12]	@ (8000810 <apds9250_set_meas_rate+0x40>)
 8000802:	f002 fd2f 	bl	8003264 <HAL_I2C_Master_Transmit>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	24000588 	.word	0x24000588

08000814 <apds9250_set_gain>:

/********************************************************
 * GAIN
 ********************************************************/
void apds9250_set_gain(uint8_t gain)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af02      	add	r7, sp, #8
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	uint8_t wData[2] = {APDS9250_LS_GAIN_ADDR, gain};
 800081e:	2305      	movs	r3, #5
 8000820:	733b      	strb	r3, [r7, #12]
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	737b      	strb	r3, [r7, #13]
  
	//L_DEBUG("main_ctrl = %02X", wData[1]);
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 2, 100);
 8000826:	f107 020c 	add.w	r2, r7, #12
 800082a:	2364      	movs	r3, #100	@ 0x64
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2302      	movs	r3, #2
 8000830:	21a4      	movs	r1, #164	@ 0xa4
 8000832:	4803      	ldr	r0, [pc, #12]	@ (8000840 <apds9250_set_gain+0x2c>)
 8000834:	f002 fd16 	bl	8003264 <HAL_I2C_Master_Transmit>
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000588 	.word	0x24000588

08000844 <apds9250_get_part_id>:

/********************************************************
 * PART_ID (Read Only)
 ********************************************************/
bool apds9250_get_part_id(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af04      	add	r7, sp, #16
	uint8_t reg;
	if(HAL_I2C_IsDeviceReady(&apds9250_i2c, APDS9250_I2C_ADDR, 2, 0xFFFF) != HAL_OK) {
 800084a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800084e:	2202      	movs	r2, #2
 8000850:	21a4      	movs	r1, #164	@ 0xa4
 8000852:	4810      	ldr	r0, [pc, #64]	@ (8000894 <apds9250_get_part_id+0x50>)
 8000854:	f003 f82e 	bl	80038b4 <HAL_I2C_IsDeviceReady>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <apds9250_get_part_id+0x1e>
		//L_DEBUG("Light Sensor Reading Part ID ERROR");
		return false;
 800085e:	2300      	movs	r3, #0
 8000860:	e013      	b.n	800088a <apds9250_get_part_id+0x46>
	} else {
		HAL_I2C_Mem_Read(&apds9250_i2c, APDS9250_I2C_ADDR, APDS9250_PART_ID_ADDR, 1, &reg, 1, 100);
 8000862:	2364      	movs	r3, #100	@ 0x64
 8000864:	9302      	str	r3, [sp, #8]
 8000866:	2301      	movs	r3, #1
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2301      	movs	r3, #1
 8000870:	2206      	movs	r2, #6
 8000872:	21a4      	movs	r1, #164	@ 0xa4
 8000874:	4807      	ldr	r0, [pc, #28]	@ (8000894 <apds9250_get_part_id+0x50>)
 8000876:	f002 ff03 	bl	8003680 <HAL_I2C_Mem_Read>
		if((reg & 0xF0) == APDS9250_PART_ID) {
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000880:	2bb0      	cmp	r3, #176	@ 0xb0
 8000882:	d101      	bne.n	8000888 <apds9250_get_part_id+0x44>
//			//L_DEBUG("APDS9250 Part ID = %X (valid)", reg);
			return true;
 8000884:	2301      	movs	r3, #1
 8000886:	e000      	b.n	800088a <apds9250_get_part_id+0x46>
		} else {
			//L_DEBUG("APDS9250 Part ID = %X (invalid)", reg);
			return false;
 8000888:	2300      	movs	r3, #0
		}
	}
	
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	24000588 	.word	0x24000588

08000898 <apds9250_get_main_status>:
 * MAIN_STATUS (Read Only)
 * Note read the register after it is powered on to clear the power-on status
 * If power-on status is HIGH after it has been cleared, there is a power supply disturbance
 ********************************************************/
uint8_t apds9250_get_main_status(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af04      	add	r7, sp, #16
	uint8_t reg;
	
	// Read MAIN_STATUS register
	HAL_I2C_Mem_Read(&apds9250_i2c, APDS9250_I2C_ADDR, APDS9250_MAIN_STATUS_ADDR, 1, &reg, 1, 100);
 800089e:	2364      	movs	r3, #100	@ 0x64
 80008a0:	9302      	str	r3, [sp, #8]
 80008a2:	2301      	movs	r3, #1
 80008a4:	9301      	str	r3, [sp, #4]
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2301      	movs	r3, #1
 80008ac:	2207      	movs	r2, #7
 80008ae:	21a4      	movs	r1, #164	@ 0xa4
 80008b0:	4803      	ldr	r0, [pc, #12]	@ (80008c0 <apds9250_get_main_status+0x28>)
 80008b2:	f002 fee5 	bl	8003680 <HAL_I2C_Mem_Read>
	return reg;
 80008b6:	79fb      	ldrb	r3, [r7, #7]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	24000588 	.word	0x24000588

080008c4 <apds9250_get_rgb>:
/********************************************************
 * LS_DATA_IR/GREEN/BLUE/RED (Read Only)
 ********************************************************/
// Get all four color (ir, green, blue, red)
void apds9250_get_rgb(COT_DATA *data)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af04      	add	r7, sp, #16
 80008ca:	6078      	str	r0, [r7, #4]
	uint8_t rData[12];
	
	if(HAL_I2C_IsDeviceReady(&apds9250_i2c, APDS9250_I2C_ADDR, 2, 0xFFFF) != HAL_OK) {
 80008cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008d0:	2202      	movs	r2, #2
 80008d2:	21a4      	movs	r1, #164	@ 0xa4
 80008d4:	4827      	ldr	r0, [pc, #156]	@ (8000974 <apds9250_get_rgb+0xb0>)
 80008d6:	f002 ffed 	bl	80038b4 <HAL_I2C_IsDeviceReady>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d010      	beq.n	8000902 <apds9250_get_rgb+0x3e>
		data->light.ir = 0;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
		data->light.green = 0;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
		data->light.blue = 0;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
		data->light.red = 0;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
		data->light.green	= ((uint32_t)rData[5]<<16) + ((uint32_t)rData[4]<<8) + (uint32_t)rData[3];
		data->light.blue	= ((uint32_t)rData[8]<<16) + ((uint32_t)rData[7]<<8) + (uint32_t)rData[6];
		data->light.red		= ((uint32_t)rData[11]<<16) + ((uint32_t)rData[10]<<8) + (uint32_t)rData[9];
	}
//	//L_DEBUG("IR-RGB = [%d, %d, %d, %d]", data->light.ir, data->light.green, data->light.blue, data->light.red);
}
 8000900:	e034      	b.n	800096c <apds9250_get_rgb+0xa8>
		HAL_I2C_Mem_Read(&apds9250_i2c, APDS9250_I2C_ADDR, APDS9250_LS_DATA_IR_0_ADDR, 1, rData, 12, 100);
 8000902:	2364      	movs	r3, #100	@ 0x64
 8000904:	9302      	str	r3, [sp, #8]
 8000906:	230c      	movs	r3, #12
 8000908:	9301      	str	r3, [sp, #4]
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	2301      	movs	r3, #1
 8000912:	220a      	movs	r2, #10
 8000914:	21a4      	movs	r1, #164	@ 0xa4
 8000916:	4817      	ldr	r0, [pc, #92]	@ (8000974 <apds9250_get_rgb+0xb0>)
 8000918:	f002 feb2 	bl	8003680 <HAL_I2C_Mem_Read>
		data->light.ir		= ((uint32_t)rData[2]<<16) + ((uint32_t)rData[1]<<8) + (uint32_t)rData[0];
 800091c:	7bbb      	ldrb	r3, [r7, #14]
 800091e:	041a      	lsls	r2, r3, #16
 8000920:	7b7b      	ldrb	r3, [r7, #13]
 8000922:	021b      	lsls	r3, r3, #8
 8000924:	4413      	add	r3, r2
 8000926:	7b3a      	ldrb	r2, [r7, #12]
 8000928:	441a      	add	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
		data->light.green	= ((uint32_t)rData[5]<<16) + ((uint32_t)rData[4]<<8) + (uint32_t)rData[3];
 8000930:	7c7b      	ldrb	r3, [r7, #17]
 8000932:	041a      	lsls	r2, r3, #16
 8000934:	7c3b      	ldrb	r3, [r7, #16]
 8000936:	021b      	lsls	r3, r3, #8
 8000938:	4413      	add	r3, r2
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	441a      	add	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
		data->light.blue	= ((uint32_t)rData[8]<<16) + ((uint32_t)rData[7]<<8) + (uint32_t)rData[6];
 8000944:	7d3b      	ldrb	r3, [r7, #20]
 8000946:	041a      	lsls	r2, r3, #16
 8000948:	7cfb      	ldrb	r3, [r7, #19]
 800094a:	021b      	lsls	r3, r3, #8
 800094c:	4413      	add	r3, r2
 800094e:	7cba      	ldrb	r2, [r7, #18]
 8000950:	441a      	add	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
		data->light.red		= ((uint32_t)rData[11]<<16) + ((uint32_t)rData[10]<<8) + (uint32_t)rData[9];
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	041a      	lsls	r2, r3, #16
 800095c:	7dbb      	ldrb	r3, [r7, #22]
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	4413      	add	r3, r2
 8000962:	7d7a      	ldrb	r2, [r7, #21]
 8000964:	441a      	add	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
}
 800096c:	bf00      	nop
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	24000588 	.word	0x24000588

08000978 <apds9250_set_int_sel>:
	HAL_I2C_Mem_Read(&apds9250_i2c, APDS9250_I2C_ADDR, APDS9250_INT_CFG_ADDR, 1, &rData, 1, 100);
	return rData;
}

void apds9250_set_int_sel(uint8_t sel)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af04      	add	r7, sp, #16
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
	uint8_t int_cfg_reg;
	uint8_t wData[2] = {APDS9250_INT_CFG_ADDR, 0};
 8000982:	2319      	movs	r3, #25
 8000984:	81bb      	strh	r3, [r7, #12]
	
	HAL_I2C_Mem_Read(&apds9250_i2c, APDS9250_I2C_ADDR, APDS9250_INT_CFG_ADDR, 1, &int_cfg_reg, 1, 100);
 8000986:	2364      	movs	r3, #100	@ 0x64
 8000988:	9302      	str	r3, [sp, #8]
 800098a:	2301      	movs	r3, #1
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	f107 030f 	add.w	r3, r7, #15
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2301      	movs	r3, #1
 8000996:	2219      	movs	r2, #25
 8000998:	21a4      	movs	r1, #164	@ 0xa4
 800099a:	480f      	ldr	r0, [pc, #60]	@ (80009d8 <apds9250_set_int_sel+0x60>)
 800099c:	f002 fe70 	bl	8003680 <HAL_I2C_Mem_Read>
	int_cfg_reg = (int_cfg_reg & ~0x30) | (sel << 4);
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80009a8:	b25a      	sxtb	r2, r3
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	011b      	lsls	r3, r3, #4
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	73fb      	strb	r3, [r7, #15]
	wData[1] = int_cfg_reg;
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 2, 100);
 80009bc:	f107 020c 	add.w	r2, r7, #12
 80009c0:	2364      	movs	r3, #100	@ 0x64
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2302      	movs	r3, #2
 80009c6:	21a4      	movs	r1, #164	@ 0xa4
 80009c8:	4803      	ldr	r0, [pc, #12]	@ (80009d8 <apds9250_set_int_sel+0x60>)
 80009ca:	f002 fc4b 	bl	8003264 <HAL_I2C_Master_Transmit>
}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	24000588 	.word	0x24000588

080009dc <apds9250_set_var_mode>:

void apds9250_set_var_mode(bool mode)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af04      	add	r7, sp, #16
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	uint8_t int_cfg_reg;
	uint8_t wData[2] = {APDS9250_INT_CFG_ADDR, 0};
 80009e6:	2319      	movs	r3, #25
 80009e8:	81bb      	strh	r3, [r7, #12]
	
	HAL_I2C_Mem_Read(&apds9250_i2c, APDS9250_I2C_ADDR, APDS9250_INT_CFG_ADDR, 1, &int_cfg_reg, 1, 100);
 80009ea:	2364      	movs	r3, #100	@ 0x64
 80009ec:	9302      	str	r3, [sp, #8]
 80009ee:	2301      	movs	r3, #1
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	f107 030f 	add.w	r3, r7, #15
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2301      	movs	r3, #1
 80009fa:	2219      	movs	r2, #25
 80009fc:	21a4      	movs	r1, #164	@ 0xa4
 80009fe:	480f      	ldr	r0, [pc, #60]	@ (8000a3c <apds9250_set_var_mode+0x60>)
 8000a00:	f002 fe3e 	bl	8003680 <HAL_I2C_Mem_Read>
	int_cfg_reg = (int_cfg_reg & ~0x08) | (mode << 3);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	b25b      	sxtb	r3, r3
 8000a08:	f023 0308 	bic.w	r3, r3, #8
 8000a0c:	b25a      	sxtb	r2, r3
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	b25b      	sxtb	r3, r3
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b25b      	sxtb	r3, r3
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	73fb      	strb	r3, [r7, #15]
	wData[1] = int_cfg_reg;
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 2, 100);
 8000a20:	f107 020c 	add.w	r2, r7, #12
 8000a24:	2364      	movs	r3, #100	@ 0x64
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2302      	movs	r3, #2
 8000a2a:	21a4      	movs	r1, #164	@ 0xa4
 8000a2c:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <apds9250_set_var_mode+0x60>)
 8000a2e:	f002 fc19 	bl	8003264 <HAL_I2C_Master_Transmit>
}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	24000588 	.word	0x24000588

08000a40 <apds9250_set_int_en>:

void apds9250_set_int_en(bool en)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af04      	add	r7, sp, #16
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	uint8_t int_cfg_reg;
	uint8_t wData[2] = {APDS9250_INT_CFG_ADDR, 0};
 8000a4a:	2319      	movs	r3, #25
 8000a4c:	81bb      	strh	r3, [r7, #12]
	
	HAL_I2C_Mem_Read(&apds9250_i2c, APDS9250_I2C_ADDR, APDS9250_INT_CFG_ADDR, 1, &int_cfg_reg, 1, 100);
 8000a4e:	2364      	movs	r3, #100	@ 0x64
 8000a50:	9302      	str	r3, [sp, #8]
 8000a52:	2301      	movs	r3, #1
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	f107 030f 	add.w	r3, r7, #15
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	2219      	movs	r2, #25
 8000a60:	21a4      	movs	r1, #164	@ 0xa4
 8000a62:	480f      	ldr	r0, [pc, #60]	@ (8000aa0 <apds9250_set_int_en+0x60>)
 8000a64:	f002 fe0c 	bl	8003680 <HAL_I2C_Mem_Read>
	int_cfg_reg = (int_cfg_reg & ~0x04) | (en << 2);
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	f023 0304 	bic.w	r3, r3, #4
 8000a70:	b25a      	sxtb	r2, r3
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	b25b      	sxtb	r3, r3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	73fb      	strb	r3, [r7, #15]
	wData[1] = int_cfg_reg;
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 2, 100);
 8000a84:	f107 020c 	add.w	r2, r7, #12
 8000a88:	2364      	movs	r3, #100	@ 0x64
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	21a4      	movs	r1, #164	@ 0xa4
 8000a90:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <apds9250_set_int_en+0x60>)
 8000a92:	f002 fbe7 	bl	8003264 <HAL_I2C_Master_Transmit>
}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	24000588 	.word	0x24000588

08000aa4 <apds9250_set_ls_thres_up>:
/********************************************************
 * LS_THRES_UP (0/1/2)
 * max 20-bits unsigned integer
 ********************************************************/
void apds9250_set_ls_thres_up(uint32_t thres)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af02      	add	r7, sp, #8
 8000aaa:	6078      	str	r0, [r7, #4]
	uint8_t wData[4] = {APDS9250_LS_THRES_UP_0_ADDR, thres&0xFF, (thres>>8)&0xFF, (thres>>16)&0x0F};
 8000aac:	2321      	movs	r3, #33	@ 0x21
 8000aae:	733b      	strb	r3, [r7, #12]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	737b      	strb	r3, [r7, #13]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	73bb      	strb	r3, [r7, #14]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	0c1b      	lsrs	r3, r3, #16
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	f003 030f 	and.w	r3, r3, #15
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	73fb      	strb	r3, [r7, #15]
	
	//L_DEBUG("thres_up = [%02X, %02X, %02X]", wData[3], wData[2], wData[1]);
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 4, 100);
 8000acc:	f107 020c 	add.w	r2, r7, #12
 8000ad0:	2364      	movs	r3, #100	@ 0x64
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	21a4      	movs	r1, #164	@ 0xa4
 8000ad8:	4803      	ldr	r0, [pc, #12]	@ (8000ae8 <apds9250_set_ls_thres_up+0x44>)
 8000ada:	f002 fbc3 	bl	8003264 <HAL_I2C_Master_Transmit>
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	24000588 	.word	0x24000588

08000aec <apds9250_set_ls_thres_low>:
/********************************************************
 * LS_THRES_LOW (0/1/2)
 * max 20-bits unsigned integer
 ********************************************************/
void apds9250_set_ls_thres_low(uint32_t thres)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	6078      	str	r0, [r7, #4]
	uint8_t wData[4] = {APDS9250_LS_THRES_LOW_0_ADDR, thres&0xFF, (thres>>8)&0xFF, (thres>>16)&0x0F};
 8000af4:	2324      	movs	r3, #36	@ 0x24
 8000af6:	733b      	strb	r3, [r7, #12]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	737b      	strb	r3, [r7, #13]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	73bb      	strb	r3, [r7, #14]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	0c1b      	lsrs	r3, r3, #16
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	f003 030f 	and.w	r3, r3, #15
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	73fb      	strb	r3, [r7, #15]
	
	//L_DEBUG("thres_low = [%X, %X, %X]", wData[3], wData[2], wData[1]);
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 4, 100);
 8000b14:	f107 020c 	add.w	r2, r7, #12
 8000b18:	2364      	movs	r3, #100	@ 0x64
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	21a4      	movs	r1, #164	@ 0xa4
 8000b20:	4803      	ldr	r0, [pc, #12]	@ (8000b30 <apds9250_set_ls_thres_low+0x44>)
 8000b22:	f002 fb9f 	bl	8003264 <HAL_I2C_Master_Transmit>
}
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	24000588 	.word	0x24000588

08000b34 <apds9250_set_ls_thres_var>:
 * INT set when difference between previous and current
 * is above variance threshold (LS_THRES_VAR) for specified number of
 * consecutive mesurements (INT_PERSISTENCE)
 ********************************************************/
void apds9250_set_ls_thres_var(uint8_t vary)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	uint8_t wData[2] = {APDS9250_THRES_VAR_ADDR, vary&0x07};
 8000b3e:	2327      	movs	r3, #39	@ 0x27
 8000b40:	733b      	strb	r3, [r7, #12]
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f003 0307 	and.w	r3, r3, #7
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 2, 100);
 8000b4c:	f107 020c 	add.w	r2, r7, #12
 8000b50:	2364      	movs	r3, #100	@ 0x64
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2302      	movs	r3, #2
 8000b56:	21a4      	movs	r1, #164	@ 0xa4
 8000b58:	4803      	ldr	r0, [pc, #12]	@ (8000b68 <apds9250_set_ls_thres_var+0x34>)
 8000b5a:	f002 fb83 	bl	8003264 <HAL_I2C_Master_Transmit>
}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	24000588 	.word	0x24000588

08000b6c <osDelay>:
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
#include "daemon.h"
#include "cotfactory.h"
void osDelay(uint32_t delay){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f001 ff71 	bl	8002a5c <HAL_Delay>
};
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <__io_putchar>:


/* USER CODE BEGIN PFP */

int __io_putchar (int ch)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit (&huart8, (uint8_t *) &ch, 1, 0xFFFF);
 8000b8c:	1d39      	adds	r1, r7, #4
 8000b8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b92:	2201      	movs	r2, #1
 8000b94:	4803      	ldr	r0, [pc, #12]	@ (8000ba4 <__io_putchar+0x20>)
 8000b96:	f006 fb00 	bl	800719a <HAL_UART_Transmit>
 return ch;
 8000b9a:	687b      	ldr	r3, [r7, #4]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	24000664 	.word	0x24000664

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af04      	add	r7, sp, #16
//	uint16_t red, green, blue, clear;
//	float temperature, pressure, humidity;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000bae:	f000 fa17 	bl	8000fe0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb2:	f001 fec1 	bl	8002938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb6:	f000 f87d 	bl	8000cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bba:	f000 f9c9 	bl	8000f50 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000bbe:	f000 f8e5 	bl	8000d8c <MX_I2C3_Init>
  MX_SPI5_Init();
 8000bc2:	f000 f923 	bl	8000e0c <MX_SPI5_Init>
  MX_UART8_Init();
 8000bc6:	f000 f977 	bl	8000eb8 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
  apds9250_init();
 8000bca:	f7ff fd59 	bl	8000680 <apds9250_init>
  ms8607_init();
 8000bce:	f000 fd81 	bl	80016d4 <ms8607_init>
  max1704x_init();
 8000bd2:	f000 fa37 	bl	8001044 <max1704x_init>
  printf("after all init\r\n\n");
 8000bd6:	4830      	ldr	r0, [pc, #192]	@ (8000c98 <main+0xf0>)
 8000bd8:	f008 fa10 	bl	8008ffc <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char* anm = "Hello world\r\n";
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8000c9c <main+0xf4>)
 8000bde:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  max1704x_get_vcell(&data);
 8000be0:	482f      	ldr	r0, [pc, #188]	@ (8000ca0 <main+0xf8>)
 8000be2:	f000 fab9 	bl	8001158 <max1704x_get_vcell>
	  max1704x_get_soc(&data);
 8000be6:	482e      	ldr	r0, [pc, #184]	@ (8000ca0 <main+0xf8>)
 8000be8:	f000 fb02 	bl	80011f0 <max1704x_get_soc>
	  max1704x_get_crate(&data);
 8000bec:	482c      	ldr	r0, [pc, #176]	@ (8000ca0 <main+0xf8>)
 8000bee:	f000 fb43 	bl	8001278 <max1704x_get_crate>
	  ms8607_get_pt(&data);
 8000bf2:	482b      	ldr	r0, [pc, #172]	@ (8000ca0 <main+0xf8>)
 8000bf4:	f000 fe72 	bl	80018dc <ms8607_get_pt>
	  ms8607_get_rh(&data);
 8000bf8:	4829      	ldr	r0, [pc, #164]	@ (8000ca0 <main+0xf8>)
 8000bfa:	f001 fa4d 	bl	8002098 <ms8607_get_rh>
	  apds9250_get_rgb(&data);
 8000bfe:	4828      	ldr	r0, [pc, #160]	@ (8000ca0 <main+0xf8>)
 8000c00:	f7ff fe60 	bl	80008c4 <apds9250_get_rgb>
	  /* Read light sensor data */
//	  APDS9250_ReadLight(&hi2c3, &red, &green, &blue, &clear);
	  /* Read MS8607 sensor data */
//	  MS8607_ReadSensor(&hi2c3, &temperature, &pressure, &humidity);
	  printf("hello in main \r\n\n");
 8000c04:	4827      	ldr	r0, [pc, #156]	@ (8000ca4 <main+0xfc>)
 8000c06:	f008 f9f9 	bl	8008ffc <puts>
	  /* Format and transmit sensor data over UART */
	  printf("---------------\r\nVcell: %.2f, SOC: %.2f, Crate: %.2f, \r\n---------------\r\n",
			  data.fgauge.vcell, data.fgauge.soc, data.fgauge.crate);
 8000c0a:	4b25      	ldr	r3, [pc, #148]	@ (8000ca0 <main+0xf8>)
 8000c0c:	edd3 7a5e 	vldr	s15, [r3, #376]	@ 0x178
	  printf("---------------\r\nVcell: %.2f, SOC: %.2f, Crate: %.2f, \r\n---------------\r\n",
 8000c10:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  data.fgauge.vcell, data.fgauge.soc, data.fgauge.crate);
 8000c14:	4b22      	ldr	r3, [pc, #136]	@ (8000ca0 <main+0xf8>)
 8000c16:	edd3 7a5f 	vldr	s15, [r3, #380]	@ 0x17c
	  printf("---------------\r\nVcell: %.2f, SOC: %.2f, Crate: %.2f, \r\n---------------\r\n",
 8000c1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  data.fgauge.vcell, data.fgauge.soc, data.fgauge.crate);
 8000c1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ca0 <main+0xf8>)
 8000c20:	edd3 6a60 	vldr	s13, [r3, #384]	@ 0x180
	  printf("---------------\r\nVcell: %.2f, SOC: %.2f, Crate: %.2f, \r\n---------------\r\n",
 8000c24:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000c28:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c2c:	ed8d 7b00 	vstr	d7, [sp]
 8000c30:	ec53 2b15 	vmov	r2, r3, d5
 8000c34:	481c      	ldr	r0, [pc, #112]	@ (8000ca8 <main+0x100>)
 8000c36:	f008 f979 	bl	8008f2c <iprintf>
	  printf("---------------\r\nTemp: %.2f C, P: %.2f hPa \r\nH: %.2f%%\r\n---------------\r\n",
	  			  data.pth.temperature, data.pth.pressure, data.pth.humidity);
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <main+0xf8>)
 8000c3c:	edd3 7a5c 	vldr	s15, [r3, #368]	@ 0x170
	  printf("---------------\r\nTemp: %.2f C, P: %.2f hPa \r\nH: %.2f%%\r\n---------------\r\n",
 8000c40:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
	  			  data.pth.temperature, data.pth.pressure, data.pth.humidity);
 8000c44:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <main+0xf8>)
 8000c46:	edd3 7a5b 	vldr	s15, [r3, #364]	@ 0x16c
	  printf("---------------\r\nTemp: %.2f C, P: %.2f hPa \r\nH: %.2f%%\r\n---------------\r\n",
 8000c4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	  			  data.pth.temperature, data.pth.pressure, data.pth.humidity);
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <main+0xf8>)
 8000c50:	edd3 6a5d 	vldr	s13, [r3, #372]	@ 0x174
	  printf("---------------\r\nTemp: %.2f C, P: %.2f hPa \r\nH: %.2f%%\r\n---------------\r\n",
 8000c54:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000c58:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c5c:	ed8d 7b00 	vstr	d7, [sp]
 8000c60:	ec53 2b15 	vmov	r2, r3, d5
 8000c64:	4811      	ldr	r0, [pc, #68]	@ (8000cac <main+0x104>)
 8000c66:	f008 f961 	bl	8008f2c <iprintf>
	  printf("---------------\r\nR:%lu G:%lu B:%lu IR:%lu\r\n---------------\r\n",
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <main+0xf8>)
 8000c6c:	f8d3 1150 	ldr.w	r1, [r3, #336]	@ 0x150
 8000c70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <main+0xf8>)
 8000c72:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <main+0xf8>)
 8000c78:	f8d3 014c 	ldr.w	r0, [r3, #332]	@ 0x14c
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <main+0xf8>)
 8000c7e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	4603      	mov	r3, r0
 8000c86:	480a      	ldr	r0, [pc, #40]	@ (8000cb0 <main+0x108>)
 8000c88:	f008 f950 	bl	8008f2c <iprintf>
	  			  data.light.red, data.light.green, data.light.blue, data.light.ir);
//	  HAL_UART_Transmit(&huart8, buf, strlen((char*)buf), HAL_MAX_DELAY);

//	  HAL_UART_Transmit(&huart8, anm, strlen(anm), HAL_MAX_DELAY);
	  HAL_Delay(1000);
 8000c8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c90:	f001 fee4 	bl	8002a5c <HAL_Delay>
	  max1704x_get_vcell(&data);
 8000c94:	bf00      	nop
 8000c96:	e7a3      	b.n	8000be0 <main+0x38>
 8000c98:	0800aca8 	.word	0x0800aca8
 8000c9c:	0800acbc 	.word	0x0800acbc
 8000ca0:	240006f8 	.word	0x240006f8
 8000ca4:	0800accc 	.word	0x0800accc
 8000ca8:	0800ace0 	.word	0x0800ace0
 8000cac:	0800ad2c 	.word	0x0800ad2c
 8000cb0:	0800ad78 	.word	0x0800ad78

08000cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b09c      	sub	sp, #112	@ 0x70
 8000cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbe:	224c      	movs	r2, #76	@ 0x4c
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f008 fa7a 	bl	80091bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2220      	movs	r2, #32
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f008 fa74 	bl	80091bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f003 fa85 	bl	80041e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4b29      	ldr	r3, [pc, #164]	@ (8000d84 <SystemClock_Config+0xd0>)
 8000ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ce2:	4a28      	ldr	r2, [pc, #160]	@ (8000d84 <SystemClock_Config+0xd0>)
 8000ce4:	f023 0301 	bic.w	r3, r3, #1
 8000ce8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cea:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <SystemClock_Config+0xd0>)
 8000cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	4b24      	ldr	r3, [pc, #144]	@ (8000d88 <SystemClock_Config+0xd4>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cfc:	4a22      	ldr	r2, [pc, #136]	@ (8000d88 <SystemClock_Config+0xd4>)
 8000cfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b20      	ldr	r3, [pc, #128]	@ (8000d88 <SystemClock_Config+0xd4>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d10:	bf00      	nop
 8000d12:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <SystemClock_Config+0xd4>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d1e:	d1f8      	bne.n	8000d12 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d20:	2302      	movs	r3, #2
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d28:	2340      	movs	r3, #64	@ 0x40
 8000d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d34:	4618      	mov	r0, r3
 8000d36:	f003 fa8f 	bl	8004258 <HAL_RCC_OscConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d40:	f000 f97a 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d44:	233f      	movs	r3, #63	@ 0x3f
 8000d46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d58:	2340      	movs	r3, #64	@ 0x40
 8000d5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2101      	movs	r1, #1
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f003 fece 	bl	8004b0c <HAL_RCC_ClockConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d76:	f000 f95f 	bl	8001038 <Error_Handler>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3770      	adds	r7, #112	@ 0x70
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	58000400 	.word	0x58000400
 8000d88:	58024800 	.word	0x58024800

08000d8c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <MX_I2C3_Init+0x74>)
 8000d92:	4a1c      	ldr	r2, [pc, #112]	@ (8000e04 <MX_I2C3_Init+0x78>)
 8000d94:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <MX_I2C3_Init+0x74>)
 8000d98:	4a1b      	ldr	r2, [pc, #108]	@ (8000e08 <MX_I2C3_Init+0x7c>)
 8000d9a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <MX_I2C3_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da2:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <MX_I2C3_Init+0x74>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <MX_I2C3_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000dae:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <MX_I2C3_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <MX_I2C3_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_I2C3_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <MX_I2C3_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000dc6:	480e      	ldr	r0, [pc, #56]	@ (8000e00 <MX_I2C3_Init+0x74>)
 8000dc8:	f002 f9b0 	bl	800312c <HAL_I2C_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000dd2:	f000 f931 	bl	8001038 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4809      	ldr	r0, [pc, #36]	@ (8000e00 <MX_I2C3_Init+0x74>)
 8000dda:	f003 f96b 	bl	80040b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000de4:	f000 f928 	bl	8001038 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000de8:	2100      	movs	r1, #0
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_I2C3_Init+0x74>)
 8000dec:	f003 f9ad 	bl	800414a <HAL_I2CEx_ConfigDigitalFilter>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000df6:	f000 f91f 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	24000588 	.word	0x24000588
 8000e04:	40005c00 	.word	0x40005c00
 8000e08:	00707cbb 	.word	0x00707cbb

08000e0c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000e10:	4b27      	ldr	r3, [pc, #156]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e12:	4a28      	ldr	r2, [pc, #160]	@ (8000eb4 <MX_SPI5_Init+0xa8>)
 8000e14:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000e16:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e18:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e1c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000e1e:	4b24      	ldr	r3, [pc, #144]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e24:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e26:	2203      	movs	r2, #3
 8000e28:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e2a:	4b21      	ldr	r3, [pc, #132]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e30:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e36:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e38:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000e3c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e44:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e50:	4b17      	ldr	r3, [pc, #92]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000e56:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e62:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e88:	4b09      	ldr	r3, [pc, #36]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_SPI5_Init+0xa4>)
 8000e9c:	f005 ffee 	bl	8006e7c <HAL_SPI_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 8000ea6:	f000 f8c7 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	240005dc 	.word	0x240005dc
 8000eb4:	40015000 	.word	0x40015000

08000eb8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000ebc:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <MX_UART8_Init+0x90>)
 8000ebe:	4a23      	ldr	r2, [pc, #140]	@ (8000f4c <MX_UART8_Init+0x94>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <MX_UART8_Init+0x90>)
 8000ec4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ec8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <MX_UART8_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <MX_UART8_Init+0x90>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <MX_UART8_Init+0x90>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_UART8_Init+0x90>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <MX_UART8_Init+0x90>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <MX_UART8_Init+0x90>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eee:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <MX_UART8_Init+0x90>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <MX_UART8_Init+0x90>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000efa:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <MX_UART8_Init+0x90>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000f00:	4811      	ldr	r0, [pc, #68]	@ (8000f48 <MX_UART8_Init+0x90>)
 8000f02:	f006 f8fa 	bl	80070fa <HAL_UART_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000f0c:	f000 f894 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f10:	2100      	movs	r1, #0
 8000f12:	480d      	ldr	r0, [pc, #52]	@ (8000f48 <MX_UART8_Init+0x90>)
 8000f14:	f007 f991 	bl	800823a <HAL_UARTEx_SetTxFifoThreshold>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000f1e:	f000 f88b 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f22:	2100      	movs	r1, #0
 8000f24:	4808      	ldr	r0, [pc, #32]	@ (8000f48 <MX_UART8_Init+0x90>)
 8000f26:	f007 f9c6 	bl	80082b6 <HAL_UARTEx_SetRxFifoThreshold>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000f30:	f000 f882 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <MX_UART8_Init+0x90>)
 8000f36:	f007 f947 	bl	80081c8 <HAL_UARTEx_DisableFifoMode>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000f40:	f000 f87a 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	24000664 	.word	0x24000664
 8000f4c:	40007c00 	.word	0x40007c00

08000f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b21      	ldr	r3, [pc, #132]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f66:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f74:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7a:	4a18      	ldr	r2, [pc, #96]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f84:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f92:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f98:	4a10      	ldr	r2, [pc, #64]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb6:	4a09      	ldr	r2, [pc, #36]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	58024400 	.word	0x58024400

08000fe0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ff2:	f001 fe73 	bl	8002cdc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001002:	231f      	movs	r3, #31
 8001004:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001006:	2387      	movs	r3, #135	@ 0x87
 8001008:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800100a:	2300      	movs	r3, #0
 800100c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800100e:	2300      	movs	r3, #0
 8001010:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001012:	2301      	movs	r3, #1
 8001014:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001016:	2301      	movs	r3, #1
 8001018:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001022:	463b      	mov	r3, r7
 8001024:	4618      	mov	r0, r3
 8001026:	f001 fe91 	bl	8002d4c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800102a:	2004      	movs	r0, #4
 800102c:	f001 fe6e 	bl	8002d0c <HAL_MPU_Enable>

}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <Error_Handler+0x8>

08001044 <max1704x_init>:
/*************************************************************************
 * Initialization
 *************************************************************************/
extern IC3Daemon ic3;

bool max1704x_init(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
	uint8_t id;

	id = max1704x_get_id();
 800104a:	f000 f86b 	bl	8001124 <max1704x_get_id>
 800104e:	4603      	mov	r3, r0
 8001050:	77fb      	strb	r3, [r7, #31]
	if(id != MAX1704X_ID) {
 8001052:	7ffb      	ldrb	r3, [r7, #31]
 8001054:	2b0c      	cmp	r3, #12
 8001056:	d001      	beq.n	800105c <max1704x_init+0x18>
//		L_ERROR("Error: Failed to read MAX1704x Fuel gauge sensor - incorrect MAX1704X ID (%d)", id);
		return false;
 8001058:	2300      	movs	r3, #0
 800105a:	e059      	b.n	8001110 <max1704x_init+0xcc>
	}

  // Configure fuel gauge interrupts
  if(ic3.fgauge_int_enabled) {
 800105c:	4b2e      	ldr	r3, [pc, #184]	@ (8001118 <max1704x_init+0xd4>)
 800105e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8001062:	2b00      	cmp	r3, #0
 8001064:	d053      	beq.n	800110e <max1704x_init+0xca>
//    L_INFO("Fuel gauge interrupt enabled. Setting configurations for interrupt...");

    // Configure GPIO for external interrupt
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001066:	4b2d      	ldr	r3, [pc, #180]	@ (800111c <max1704x_init+0xd8>)
 8001068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106c:	4a2b      	ldr	r2, [pc, #172]	@ (800111c <max1704x_init+0xd8>)
 800106e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001072:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001076:	4b29      	ldr	r3, [pc, #164]	@ (800111c <max1704x_init+0xd8>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = MAX1704X_INT_PIN;
 8001092:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001096:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001098:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800109c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109e:	2301      	movs	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(MAX1704X_INT_PORT, &GPIO_InitStruct);
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	4619      	mov	r1, r3
 80010a6:	481e      	ldr	r0, [pc, #120]	@ (8001120 <max1704x_init+0xdc>)
 80010a8:	f001 fe90 	bl	8002dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(MAX1704X_EXTI_IRQn, 0, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	2028      	movs	r0, #40	@ 0x28
 80010b2:	f001 fdde 	bl	8002c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(MAX1704X_EXTI_IRQn);
 80010b6:	2028      	movs	r0, #40	@ 0x28
 80010b8:	f001 fdf5 	bl	8002ca6 <HAL_NVIC_EnableIRQ>

    // clear STATUS alerts
    uint16_t status = max1704x_get_status();
 80010bc:	f000 fa74 	bl	80015a8 <max1704x_get_status>
 80010c0:	4603      	mov	r3, r0
 80010c2:	83bb      	strh	r3, [r7, #28]
    max1704x_clear_status_alerts(MAX1704X_STATUS_RI_BIT + MAX1704X_STATUS_VH_BIT +
 80010c4:	f44f 507c 	mov.w	r0, #16128	@ 0x3f00
 80010c8:	f000 fa9c 	bl	8001604 <max1704x_clear_status_alerts>
            MAX1704X_STATUS_VL_BIT + MAX1704X_STATUS_VR_BIT +
            MAX1704X_STATUS_HD_BIT + MAX1704X_STATUS_SC_BIT);

    // Enable STATUS.EnVr (battery removal/reinsertion detection)
    max1704x_set_status_envr(true);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f000 facd 	bl	800166c <max1704x_set_status_envr>

    // Set VALRT.MIN/MAX (volage low/high)
    max1704x_set_valrt_min(ic3.fgauge_valrt_min);
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <max1704x_init+0xd4>)
 80010d4:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fa31 	bl	8001540 <max1704x_set_valrt_min>
    max1704x_set_valrt_max(ic3.fgauge_valrt_max);
 80010de:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <max1704x_init+0xd4>)
 80010e0:	f893 3339 	ldrb.w	r3, [r3, #825]	@ 0x339
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 f9f9 	bl	80014dc <max1704x_set_valrt_max>

    // Set CONFIG.ATHD (SOC low)
    uint8_t athd = 32 - ic3.fgauge_soc_low;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <max1704x_init+0xd4>)
 80010ec:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80010f0:	f1c3 0320 	rsb	r3, r3, #32
 80010f4:	76fb      	strb	r3, [r7, #27]
    max1704x_set_config_athd(athd);
 80010f6:	7efb      	ldrb	r3, [r7, #27]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f961 	bl	80013c0 <max1704x_set_config_athd>

    // Enable CONFIG.ALSC (SOC change alert)
    max1704x_set_config_alsc(ic3.fgauge_soc_change_enabled);
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <max1704x_init+0xd4>)
 8001100:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f927 	bl	8001358 <max1704x_set_config_alsc>

    // Clear CONFIG.ALRT bit
    max1704x_clear_config_alrt();
 800110a:	f000 f98f 	bl	800142c <max1704x_clear_config_alrt>

  }

//	L_INFO("Fuel Gauge initialization completed");

	return true;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	240001f8 	.word	0x240001f8
 800111c:	58024400 	.word	0x58024400
 8001120:	58022000 	.word	0x58022000

08001124 <max1704x_get_id>:
}

/*************************************************************************
 * ID
 *************************************************************************/
uint8_t max1704x_get_id(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af04      	add	r7, sp, #16
	uint8_t rData[2] = {0};
 800112a:	2300      	movs	r3, #0
 800112c:	80bb      	strh	r3, [r7, #4]

	HAL_I2C_Mem_Read(&max1704x_i2c, MAX1704X_I2C_ADDR, MAX1704X_VRESET_ID_ADDR, 1, rData, 2, 10);
 800112e:	230a      	movs	r3, #10
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2302      	movs	r3, #2
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	2218      	movs	r2, #24
 800113e:	216c      	movs	r1, #108	@ 0x6c
 8001140:	4803      	ldr	r0, [pc, #12]	@ (8001150 <max1704x_get_id+0x2c>)
 8001142:	f002 fa9d 	bl	8003680 <HAL_I2C_Mem_Read>
//	L_DEBUG("Vreset/Id = %02X/%02X", rData[0], rData[1]);
	return rData[1];
 8001146:	797b      	ldrb	r3, [r7, #5]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	24000588 	.word	0x24000588
 8001154:	00000000 	.word	0x00000000

08001158 <max1704x_get_vcell>:
}

/*************************************************************************
 * VCELL
 *************************************************************************/
void max1704x_get_vcell(COT_DATA *data) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af02      	add	r7, sp, #8
 800115e:	6078      	str	r0, [r7, #4]
	uint8_t rData[2] = {0};
 8001160:	2300      	movs	r3, #0
 8001162:	81bb      	strh	r3, [r7, #12]
	uint8_t wData[1] = {MAX1704X_VCELL_ADDR};
 8001164:	2302      	movs	r3, #2
 8001166:	723b      	strb	r3, [r7, #8]

	// Problem using HAL_I2C_Mem_Read() where HAL_ERROR returned after 5 mins
	HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 1, 100);
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	216c      	movs	r1, #108	@ 0x6c
 8001174:	481c      	ldr	r0, [pc, #112]	@ (80011e8 <max1704x_get_vcell+0x90>)
 8001176:	f002 f875 	bl	8003264 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(&max1704x_i2c, MAX1704X_I2C_ADDR, rData, 2, 100);
 800117a:	f107 020c 	add.w	r2, r7, #12
 800117e:	2364      	movs	r3, #100	@ 0x64
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2302      	movs	r3, #2
 8001184:	216c      	movs	r1, #108	@ 0x6c
 8001186:	4818      	ldr	r0, [pc, #96]	@ (80011e8 <max1704x_get_vcell+0x90>)
 8001188:	f002 f984 	bl	8003494 <HAL_I2C_Master_Receive>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
	if(hal_status != HAL_OK) {
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d005      	beq.n	80011a2 <max1704x_get_vcell+0x4a>
//		L_ERROR("ERROR: Cannot read VCELL from MAX17048 Fuel Gauge sensor %d", hal_status);
		data->fgauge.vcell = 0;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
	} else {
    data->fgauge.vcell = (((uint16_t)rData[0]<<8) + (uint16_t)rData[1]) * 78.125 / 1000000;
//    L_DEBUG("VCELL = %f V (%02X, %02X)", data->fgauge.vcell, rData[0], rData[1]);
  }
}
 80011a0:	e014      	b.n	80011cc <max1704x_get_vcell+0x74>
    data->fgauge.vcell = (((uint16_t)rData[0]<<8) + (uint16_t)rData[1]) * 78.125 / 1000000;
 80011a2:	7b3b      	ldrb	r3, [r7, #12]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	7b7a      	ldrb	r2, [r7, #13]
 80011a8:	4413      	add	r3, r2
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011b2:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80011d8 <max1704x_get_vcell+0x80>
 80011b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011ba:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80011e0 <max1704x_get_vcell+0x88>
 80011be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	f3af 8000 	nop.w
 80011d8:	00000000 	.word	0x00000000
 80011dc:	40538800 	.word	0x40538800
 80011e0:	00000000 	.word	0x00000000
 80011e4:	412e8480 	.word	0x412e8480
 80011e8:	24000588 	.word	0x24000588
 80011ec:	00000000 	.word	0x00000000

080011f0 <max1704x_get_soc>:

/*************************************************************************
 * SOC
 *************************************************************************/
void max1704x_get_soc(COT_DATA *data) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	6078      	str	r0, [r7, #4]
	uint8_t rData[2] = {0};
 80011f8:	2300      	movs	r3, #0
 80011fa:	81bb      	strh	r3, [r7, #12]
	uint8_t wData[1] = {MAX1704X_SOC_ADDR};
 80011fc:	2304      	movs	r3, #4
 80011fe:	723b      	strb	r3, [r7, #8]

	HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 1, 100);
 8001200:	f107 0208 	add.w	r2, r7, #8
 8001204:	2364      	movs	r3, #100	@ 0x64
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	216c      	movs	r1, #108	@ 0x6c
 800120c:	4818      	ldr	r0, [pc, #96]	@ (8001270 <max1704x_get_soc+0x80>)
 800120e:	f002 f829 	bl	8003264 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(&max1704x_i2c, MAX1704X_I2C_ADDR, rData, 2, 100);
 8001212:	f107 020c 	add.w	r2, r7, #12
 8001216:	2364      	movs	r3, #100	@ 0x64
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2302      	movs	r3, #2
 800121c:	216c      	movs	r1, #108	@ 0x6c
 800121e:	4814      	ldr	r0, [pc, #80]	@ (8001270 <max1704x_get_soc+0x80>)
 8001220:	f002 f938 	bl	8003494 <HAL_I2C_Master_Receive>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
	if(hal_status != HAL_OK) {
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <max1704x_get_soc+0x4a>
//		L_ERROR("ERROR: Cannot read SOC from MAX17048 Fuel Gauge sensor %d", hal_status);
		data->fgauge.soc = 0;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
	} else {
    data->fgauge.soc = (((uint16_t)rData[0]<<8) + (uint16_t)rData[1]) / 256.0;
//    L_DEBUG("SOC = %f %% (%02X, %02X)", data->fgauge.soc, rData[0], rData[1]);
  }
}
 8001238:	e010      	b.n	800125c <max1704x_get_soc+0x6c>
    data->fgauge.soc = (((uint16_t)rData[0]<<8) + (uint16_t)rData[1]) / 256.0;
 800123a:	7b3b      	ldrb	r3, [r7, #12]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	7b7a      	ldrb	r2, [r7, #13]
 8001240:	4413      	add	r3, r2
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800124a:	ed9f 5b07 	vldr	d5, [pc, #28]	@ 8001268 <max1704x_get_soc+0x78>
 800124e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001252:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	edc3 7a5f 	vstr	s15, [r3, #380]	@ 0x17c
}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	f3af 8000 	nop.w
 8001268:	00000000 	.word	0x00000000
 800126c:	40700000 	.word	0x40700000
 8001270:	24000588 	.word	0x24000588
 8001274:	00000000 	.word	0x00000000

08001278 <max1704x_get_crate>:

/*************************************************************************
 * CRATE
 *************************************************************************/
void max1704x_get_crate(COT_DATA *data) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	6078      	str	r0, [r7, #4]
	uint8_t rData[2];
	uint8_t wData[1] = {MAX1704X_CRATE_ADDR};
 8001280:	2316      	movs	r3, #22
 8001282:	723b      	strb	r3, [r7, #8]

	HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 1, 100);
 8001284:	f107 0208 	add.w	r2, r7, #8
 8001288:	2364      	movs	r3, #100	@ 0x64
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2301      	movs	r3, #1
 800128e:	216c      	movs	r1, #108	@ 0x6c
 8001290:	4819      	ldr	r0, [pc, #100]	@ (80012f8 <max1704x_get_crate+0x80>)
 8001292:	f001 ffe7 	bl	8003264 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(&max1704x_i2c, MAX1704X_I2C_ADDR, rData, 2, 100);
 8001296:	f107 020c 	add.w	r2, r7, #12
 800129a:	2364      	movs	r3, #100	@ 0x64
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2302      	movs	r3, #2
 80012a0:	216c      	movs	r1, #108	@ 0x6c
 80012a2:	4815      	ldr	r0, [pc, #84]	@ (80012f8 <max1704x_get_crate+0x80>)
 80012a4:	f002 f8f6 	bl	8003494 <HAL_I2C_Master_Receive>
 80012a8:	4603      	mov	r3, r0
 80012aa:	73fb      	strb	r3, [r7, #15]
	if(hal_status != HAL_OK) {
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <max1704x_get_crate+0x46>
//		L_ERROR("ERROR: Cannot read CRATE from MAX17048 Fuel Gauge sensor %d", hal_status);
		data->fgauge.crate = 0;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
	} else {
    data->fgauge.crate = (int16_t)(((uint16_t)rData[0]<<8) + (uint16_t)rData[1]) * 0.208;
//    L_DEBUG("CRATE = %f %%/hr (%02X, %02X)", data->fgauge.crate, rData[0], rData[1]);
  }
}
 80012bc:	e013      	b.n	80012e6 <max1704x_get_crate+0x6e>
    data->fgauge.crate = (int16_t)(((uint16_t)rData[0]<<8) + (uint16_t)rData[1]) * 0.208;
 80012be:	7b3b      	ldrb	r3, [r7, #12]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	7b7a      	ldrb	r2, [r7, #13]
 80012c6:	4413      	add	r3, r2
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	ee07 3a90 	vmov	s15, r3
 80012d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80012d4:	ed9f 6b06 	vldr	d6, [pc, #24]	@ 80012f0 <max1704x_get_crate+0x78>
 80012d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edc3 7a60 	vstr	s15, [r3, #384]	@ 0x180
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	76c8b439 	.word	0x76c8b439
 80012f4:	3fca9fbe 	.word	0x3fca9fbe
 80012f8:	24000588 	.word	0x24000588

080012fc <max1704x_get_config>:
}

/*************************************************************************
 * CONFIG
 *************************************************************************/
uint16_t max1704x_get_config(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af02      	add	r7, sp, #8
  uint8_t rData[2];
  uint8_t wData[1] = {MAX1704X_CONFIG_ADDR};
 8001302:	230c      	movs	r3, #12
 8001304:	713b      	strb	r3, [r7, #4]
  uint16_t config = 0x0000;
 8001306:	2300      	movs	r3, #0
 8001308:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 1, 100);
 800130a:	1d3a      	adds	r2, r7, #4
 800130c:	2364      	movs	r3, #100	@ 0x64
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2301      	movs	r3, #1
 8001312:	216c      	movs	r1, #108	@ 0x6c
 8001314:	480f      	ldr	r0, [pc, #60]	@ (8001354 <max1704x_get_config+0x58>)
 8001316:	f001 ffa5 	bl	8003264 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(&max1704x_i2c, MAX1704X_I2C_ADDR, rData, 2, 100);
 800131a:	f107 0208 	add.w	r2, r7, #8
 800131e:	2364      	movs	r3, #100	@ 0x64
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2302      	movs	r3, #2
 8001324:	216c      	movs	r1, #108	@ 0x6c
 8001326:	480b      	ldr	r0, [pc, #44]	@ (8001354 <max1704x_get_config+0x58>)
 8001328:	f002 f8b4 	bl	8003494 <HAL_I2C_Master_Receive>
 800132c:	4603      	mov	r3, r0
 800132e:	737b      	strb	r3, [r7, #13]
	if(hal_status != HAL_OK) {
 8001330:	7b7b      	ldrb	r3, [r7, #13]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <max1704x_get_config+0x40>
//		L_ERROR("ERROR: Cannot read CONFIG from MAX17048 Fuel Gauge sensor %d", hal_status);
		config = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	81fb      	strh	r3, [r7, #14]
 800133a:	e005      	b.n	8001348 <max1704x_get_config+0x4c>
	} else {
    config = ((uint16_t)rData[0]<<8) + (uint16_t)rData[1];
 800133c:	7a3b      	ldrb	r3, [r7, #8]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b29b      	uxth	r3, r3
 8001342:	7a7a      	ldrb	r2, [r7, #9]
 8001344:	4413      	add	r3, r2
 8001346:	81fb      	strh	r3, [r7, #14]
//    L_DEBUG("CONFIG = %04X (%02X, %02X)", config, rData[0], rData[1]);
  }
  return config;
 8001348:	89fb      	ldrh	r3, [r7, #14]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	24000588 	.word	0x24000588

08001358 <max1704x_set_config_alsc>:
		return false;
	}
	return true;
}

bool max1704x_set_config_alsc(bool alsc) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af02      	add	r7, sp, #8
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  uint16_t config = max1704x_get_config();
 8001362:	f7ff ffcb 	bl	80012fc <max1704x_get_config>
 8001366:	4603      	mov	r3, r0
 8001368:	81fb      	strh	r3, [r7, #14]
  config &= ~0x0040; // clear alsc bit
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001370:	81fb      	strh	r3, [r7, #14]
  config |= (alsc<<6); // set alsc bit
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	019b      	lsls	r3, r3, #6
 8001376:	b21a      	sxth	r2, r3
 8001378:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800137c:	4313      	orrs	r3, r2
 800137e:	b21b      	sxth	r3, r3
 8001380:	81fb      	strh	r3, [r7, #14]
	uint8_t wData[3] = {MAX1704X_CONFIG_ADDR, (uint8_t)(config>>8), (uint8_t)(config&0x00FF)};
 8001382:	230c      	movs	r3, #12
 8001384:	723b      	strb	r3, [r7, #8]
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	b29b      	uxth	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	727b      	strb	r3, [r7, #9]
 8001390:	89fb      	ldrh	r3, [r7, #14]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	72bb      	strb	r3, [r7, #10]

//  L_DEBUG("CONFIG: 0x%02X%02X", wData[1], wData[2]);

	if(HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 3, 10) != HAL_OK) {
 8001396:	f107 0208 	add.w	r2, r7, #8
 800139a:	230a      	movs	r3, #10
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2303      	movs	r3, #3
 80013a0:	216c      	movs	r1, #108	@ 0x6c
 80013a2:	4806      	ldr	r0, [pc, #24]	@ (80013bc <max1704x_set_config_alsc+0x64>)
 80013a4:	f001 ff5e 	bl	8003264 <HAL_I2C_Master_Transmit>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <max1704x_set_config_alsc+0x5a>
//		L_ERROR("Error: Failed to set CONFIG.ALSC to %04X", config);
		return false;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <max1704x_set_config_alsc+0x5c>
	}
	return true;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	24000588 	.word	0x24000588

080013c0 <max1704x_set_config_athd>:

bool max1704x_set_config_athd(uint8_t athd) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  uint16_t config = max1704x_get_config();
 80013ca:	f7ff ff97 	bl	80012fc <max1704x_get_config>
 80013ce:	4603      	mov	r3, r0
 80013d0:	81fb      	strh	r3, [r7, #14]
  config &= ~0x001F; // clear athd bits
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	f023 031f 	bic.w	r3, r3, #31
 80013d8:	81fb      	strh	r3, [r7, #14]
  config |= athd&0x1F; // set athd bits
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	b21b      	sxth	r3, r3
 80013de:	f003 031f 	and.w	r3, r3, #31
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	81fb      	strh	r3, [r7, #14]
	uint8_t wData[3] = {MAX1704X_CONFIG_ADDR, (uint8_t)(config>>8), (uint8_t)(config&0x00FF)};
 80013ee:	230c      	movs	r3, #12
 80013f0:	723b      	strb	r3, [r7, #8]
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	727b      	strb	r3, [r7, #9]
 80013fc:	89fb      	ldrh	r3, [r7, #14]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	72bb      	strb	r3, [r7, #10]

//  L_DEBUG("CONFIG: 0x%02X%02X", wData[1], wData[2]);

	if(HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 3, 10) != HAL_OK) {
 8001402:	f107 0208 	add.w	r2, r7, #8
 8001406:	230a      	movs	r3, #10
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2303      	movs	r3, #3
 800140c:	216c      	movs	r1, #108	@ 0x6c
 800140e:	4806      	ldr	r0, [pc, #24]	@ (8001428 <max1704x_set_config_athd+0x68>)
 8001410:	f001 ff28 	bl	8003264 <HAL_I2C_Master_Transmit>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <max1704x_set_config_athd+0x5e>
//		L_ERROR("Error: Failed to set CONFIG.ATHD to %04X", config);
		return false;
 800141a:	2300      	movs	r3, #0
 800141c:	e000      	b.n	8001420 <max1704x_set_config_athd+0x60>
	}
	return true;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	24000588 	.word	0x24000588

0800142c <max1704x_clear_config_alrt>:
	percent = 32 - ((uint8_t)config & 0x1F);
	return percent;
}
#endif

bool max1704x_clear_config_alrt(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af02      	add	r7, sp, #8
  uint16_t config = max1704x_get_config();
 8001432:	f7ff ff63 	bl	80012fc <max1704x_get_config>
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]
  config &= ~0x0020; // clear alrt bit
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	f023 0320 	bic.w	r3, r3, #32
 8001440:	80fb      	strh	r3, [r7, #6]
	uint8_t wData[3] = {MAX1704X_CONFIG_ADDR, (uint8_t)(config>>8), (uint8_t)(config&0x00FF)};
 8001442:	230c      	movs	r3, #12
 8001444:	703b      	strb	r3, [r7, #0]
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	b29b      	uxth	r3, r3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	707b      	strb	r3, [r7, #1]
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	70bb      	strb	r3, [r7, #2]

//  L_DEBUG("CONFIG: 0x%02X%02X", wData[1], wData[2]);

	if(HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 3, 10) != HAL_OK) {
 8001456:	463a      	mov	r2, r7
 8001458:	230a      	movs	r3, #10
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2303      	movs	r3, #3
 800145e:	216c      	movs	r1, #108	@ 0x6c
 8001460:	4806      	ldr	r0, [pc, #24]	@ (800147c <max1704x_clear_config_alrt+0x50>)
 8001462:	f001 feff 	bl	8003264 <HAL_I2C_Master_Transmit>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <max1704x_clear_config_alrt+0x44>
//		L_ERROR("Error: Failed to clear CONFIG.ALRT to %04X", config);
		return false;
 800146c:	2300      	movs	r3, #0
 800146e:	e000      	b.n	8001472 <max1704x_clear_config_alrt+0x46>
	}
	return true;
 8001470:	2301      	movs	r3, #1
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	24000588 	.word	0x24000588

08001480 <max1704x_get_vlrt>:

/*************************************************************************
 * VALRT (Read/Write)
 *************************************************************************/
uint16_t max1704x_get_vlrt(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af02      	add	r7, sp, #8
  uint8_t rData[2];
  uint8_t wData[1] = {MAX1704X_VALRT_ADDR};
 8001486:	2314      	movs	r3, #20
 8001488:	713b      	strb	r3, [r7, #4]
  uint16_t vlrt = 0x0000;
 800148a:	2300      	movs	r3, #0
 800148c:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 1, 100);
 800148e:	1d3a      	adds	r2, r7, #4
 8001490:	2364      	movs	r3, #100	@ 0x64
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2301      	movs	r3, #1
 8001496:	216c      	movs	r1, #108	@ 0x6c
 8001498:	480f      	ldr	r0, [pc, #60]	@ (80014d8 <max1704x_get_vlrt+0x58>)
 800149a:	f001 fee3 	bl	8003264 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(&max1704x_i2c, MAX1704X_I2C_ADDR, rData, 2, 100);
 800149e:	f107 0208 	add.w	r2, r7, #8
 80014a2:	2364      	movs	r3, #100	@ 0x64
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2302      	movs	r3, #2
 80014a8:	216c      	movs	r1, #108	@ 0x6c
 80014aa:	480b      	ldr	r0, [pc, #44]	@ (80014d8 <max1704x_get_vlrt+0x58>)
 80014ac:	f001 fff2 	bl	8003494 <HAL_I2C_Master_Receive>
 80014b0:	4603      	mov	r3, r0
 80014b2:	737b      	strb	r3, [r7, #13]
	if(hal_status != HAL_OK) {
 80014b4:	7b7b      	ldrb	r3, [r7, #13]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <max1704x_get_vlrt+0x40>
//		L_ERROR("ERROR: Cannot read VALRT from MAX17048 Fuel Gauge sensor %d", hal_status);
		vlrt = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	81fb      	strh	r3, [r7, #14]
 80014be:	e005      	b.n	80014cc <max1704x_get_vlrt+0x4c>
	} else {
    vlrt = ((uint16_t)rData[0]<<8) + (uint16_t)rData[1];
 80014c0:	7a3b      	ldrb	r3, [r7, #8]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	7a7a      	ldrb	r2, [r7, #9]
 80014c8:	4413      	add	r3, r2
 80014ca:	81fb      	strh	r3, [r7, #14]
//    L_DEBUG("VALRT = %04X (%02X, %02X)", vlrt, rData[0], rData[1]);
  }
  return vlrt;
 80014cc:	89fb      	ldrh	r3, [r7, #14]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	24000588 	.word	0x24000588

080014dc <max1704x_set_valrt_max>:

bool max1704x_set_valrt_max(uint8_t max) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  uint16_t valrt = max1704x_get_vlrt();
 80014e6:	f7ff ffcb 	bl	8001480 <max1704x_get_vlrt>
 80014ea:	4603      	mov	r3, r0
 80014ec:	81fb      	strh	r3, [r7, #14]
  valrt &= ~0x00FF; // clear max bits
 80014ee:	89fb      	ldrh	r3, [r7, #14]
 80014f0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80014f4:	81fb      	strh	r3, [r7, #14]
  valrt |= (uint16_t)max; // set max bits
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	81fb      	strh	r3, [r7, #14]
	uint8_t wData[3] = {MAX1704X_VALRT_ADDR, (uint8_t)(valrt>>8), (uint8_t)(valrt&0x00FF)};
 8001500:	2314      	movs	r3, #20
 8001502:	723b      	strb	r3, [r7, #8]
 8001504:	89fb      	ldrh	r3, [r7, #14]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	b29b      	uxth	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	727b      	strb	r3, [r7, #9]
 800150e:	89fb      	ldrh	r3, [r7, #14]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	72bb      	strb	r3, [r7, #10]

//  L_DEBUG("VALRT: 0x%02X%02X", wData[1], wData[2]);

	if(HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 3, 10) != HAL_OK) {
 8001514:	f107 0208 	add.w	r2, r7, #8
 8001518:	230a      	movs	r3, #10
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2303      	movs	r3, #3
 800151e:	216c      	movs	r1, #108	@ 0x6c
 8001520:	4806      	ldr	r0, [pc, #24]	@ (800153c <max1704x_set_valrt_max+0x60>)
 8001522:	f001 fe9f 	bl	8003264 <HAL_I2C_Master_Transmit>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <max1704x_set_valrt_max+0x54>
//		L_ERROR("Error: Failed to set VALRT.MAX to %04X", valrt);
		return false;
 800152c:	2300      	movs	r3, #0
 800152e:	e000      	b.n	8001532 <max1704x_set_valrt_max+0x56>
	}
	return true;
 8001530:	2301      	movs	r3, #1
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	24000588 	.word	0x24000588

08001540 <max1704x_set_valrt_min>:

bool max1704x_set_valrt_min(uint8_t min) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af02      	add	r7, sp, #8
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  uint16_t valrt = max1704x_get_vlrt();
 800154a:	f7ff ff99 	bl	8001480 <max1704x_get_vlrt>
 800154e:	4603      	mov	r3, r0
 8001550:	81fb      	strh	r3, [r7, #14]
  valrt &= ~0xFF00; // clear min bits
 8001552:	89fb      	ldrh	r3, [r7, #14]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	81fb      	strh	r3, [r7, #14]
  valrt |= (((uint16_t)min)<<8); // set min bits
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	b21a      	sxth	r2, r3
 800155e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001562:	4313      	orrs	r3, r2
 8001564:	b21b      	sxth	r3, r3
 8001566:	81fb      	strh	r3, [r7, #14]
	uint8_t wData[3] = {MAX1704X_VALRT_ADDR, (uint8_t)(valrt>>8), (uint8_t)(valrt&0x00FF)};
 8001568:	2314      	movs	r3, #20
 800156a:	723b      	strb	r3, [r7, #8]
 800156c:	89fb      	ldrh	r3, [r7, #14]
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	b29b      	uxth	r3, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	727b      	strb	r3, [r7, #9]
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	72bb      	strb	r3, [r7, #10]

//  L_DEBUG("VALRT: 0x%02X%02X", wData[1], wData[2]);

	if(HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 3, 10) != HAL_OK) {
 800157c:	f107 0208 	add.w	r2, r7, #8
 8001580:	230a      	movs	r3, #10
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2303      	movs	r3, #3
 8001586:	216c      	movs	r1, #108	@ 0x6c
 8001588:	4806      	ldr	r0, [pc, #24]	@ (80015a4 <max1704x_set_valrt_min+0x64>)
 800158a:	f001 fe6b 	bl	8003264 <HAL_I2C_Master_Transmit>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <max1704x_set_valrt_min+0x58>
//		L_ERROR("Error: Failed to set VALRT.MAX to %04X", valrt);
		return false;
 8001594:	2300      	movs	r3, #0
 8001596:	e000      	b.n	800159a <max1704x_set_valrt_min+0x5a>
	}
	return true;
 8001598:	2301      	movs	r3, #1
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	24000588 	.word	0x24000588

080015a8 <max1704x_get_status>:

/*************************************************************************
 * STATUS
 *************************************************************************/
uint16_t max1704x_get_status(void) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af02      	add	r7, sp, #8
  uint8_t rData[2];
  uint8_t wData[1] = {MAX1704X_STATUS_ADDR};
 80015ae:	231a      	movs	r3, #26
 80015b0:	713b      	strb	r3, [r7, #4]
  uint16_t status = 0x0000;
 80015b2:	2300      	movs	r3, #0
 80015b4:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 1, 100);
 80015b6:	1d3a      	adds	r2, r7, #4
 80015b8:	2364      	movs	r3, #100	@ 0x64
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2301      	movs	r3, #1
 80015be:	216c      	movs	r1, #108	@ 0x6c
 80015c0:	480f      	ldr	r0, [pc, #60]	@ (8001600 <max1704x_get_status+0x58>)
 80015c2:	f001 fe4f 	bl	8003264 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(&max1704x_i2c, MAX1704X_I2C_ADDR, rData, 2, 100);
 80015c6:	f107 0208 	add.w	r2, r7, #8
 80015ca:	2364      	movs	r3, #100	@ 0x64
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2302      	movs	r3, #2
 80015d0:	216c      	movs	r1, #108	@ 0x6c
 80015d2:	480b      	ldr	r0, [pc, #44]	@ (8001600 <max1704x_get_status+0x58>)
 80015d4:	f001 ff5e 	bl	8003494 <HAL_I2C_Master_Receive>
 80015d8:	4603      	mov	r3, r0
 80015da:	737b      	strb	r3, [r7, #13]
	if(hal_status != HAL_OK) {
 80015dc:	7b7b      	ldrb	r3, [r7, #13]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <max1704x_get_status+0x40>
//		L_ERROR("ERROR: Cannot read STATUS from MAX17048 Fuel Gauge sensor %d", hal_status);
		status = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	81fb      	strh	r3, [r7, #14]
 80015e6:	e005      	b.n	80015f4 <max1704x_get_status+0x4c>
	} else {
    status = ((uint16_t)rData[0]<<8) + (uint16_t)rData[1];
 80015e8:	7a3b      	ldrb	r3, [r7, #8]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	7a7a      	ldrb	r2, [r7, #9]
 80015f0:	4413      	add	r3, r2
 80015f2:	81fb      	strh	r3, [r7, #14]
//    L_DEBUG("STATUS = %04X (%02X, %02X)", status, rData[0], rData[1]);
  }
  return status;
 80015f4:	89fb      	ldrh	r3, [r7, #14]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	24000588 	.word	0x24000588

08001604 <max1704x_clear_status_alerts>:

// just for clearing alerts
bool max1704x_clear_status_alerts(uint16_t alerts) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af02      	add	r7, sp, #8
 800160a:	4603      	mov	r3, r0
 800160c:	80fb      	strh	r3, [r7, #6]
  uint16_t status = max1704x_get_status();
 800160e:	f7ff ffcb 	bl	80015a8 <max1704x_get_status>
 8001612:	4603      	mov	r3, r0
 8001614:	81fb      	strh	r3, [r7, #14]
  status &= ~(alerts&0x3F00);
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800161c:	b29b      	uxth	r3, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	b29b      	uxth	r3, r3
 8001622:	b21a      	sxth	r2, r3
 8001624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001628:	4013      	ands	r3, r2
 800162a:	b21b      	sxth	r3, r3
 800162c:	81fb      	strh	r3, [r7, #14]

	uint8_t wData[3] = {MAX1704X_STATUS_ADDR, (uint8_t)(status>>8), 0x00};
 800162e:	231a      	movs	r3, #26
 8001630:	723b      	strb	r3, [r7, #8]
 8001632:	89fb      	ldrh	r3, [r7, #14]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	b29b      	uxth	r3, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	727b      	strb	r3, [r7, #9]
 800163c:	2300      	movs	r3, #0
 800163e:	72bb      	strb	r3, [r7, #10]

//  L_DEBUG("STATUS: 0x%02X%02X", (uint8_t)(status>>8), (uint8_t)status);

	if(HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 3, 10) != HAL_OK) {
 8001640:	f107 0208 	add.w	r2, r7, #8
 8001644:	230a      	movs	r3, #10
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2303      	movs	r3, #3
 800164a:	216c      	movs	r1, #108	@ 0x6c
 800164c:	4806      	ldr	r0, [pc, #24]	@ (8001668 <max1704x_clear_status_alerts+0x64>)
 800164e:	f001 fe09 	bl	8003264 <HAL_I2C_Master_Transmit>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <max1704x_clear_status_alerts+0x58>
//		L_ERROR("Error: Failed to set STATUS to %04X", status);
		return false;
 8001658:	2300      	movs	r3, #0
 800165a:	e000      	b.n	800165e <max1704x_clear_status_alerts+0x5a>
	}
	return true;
 800165c:	2301      	movs	r3, #1
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	24000588 	.word	0x24000588

0800166c <max1704x_set_status_envr>:

bool max1704x_set_status_envr(bool envr) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af02      	add	r7, sp, #8
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  uint16_t status = max1704x_get_status();
 8001676:	f7ff ff97 	bl	80015a8 <max1704x_get_status>
 800167a:	4603      	mov	r3, r0
 800167c:	81fb      	strh	r3, [r7, #14]
  status &= ~0x4000; // clear envr bit
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001684:	81fb      	strh	r3, [r7, #14]
  status |= (envr<<14); // set envr bit
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	039b      	lsls	r3, r3, #14
 800168a:	b21a      	sxth	r2, r3
 800168c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001690:	4313      	orrs	r3, r2
 8001692:	b21b      	sxth	r3, r3
 8001694:	81fb      	strh	r3, [r7, #14]
	uint8_t wData[3] = {MAX1704X_STATUS_ADDR, (uint8_t)(status>>8), 0x00};
 8001696:	231a      	movs	r3, #26
 8001698:	723b      	strb	r3, [r7, #8]
 800169a:	89fb      	ldrh	r3, [r7, #14]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	727b      	strb	r3, [r7, #9]
 80016a4:	2300      	movs	r3, #0
 80016a6:	72bb      	strb	r3, [r7, #10]

//  L_DEBUG("STATUS: 0x%02X%02X", wData[1], wData[2]);

	if(HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 3, 10) != HAL_OK) {
 80016a8:	f107 0208 	add.w	r2, r7, #8
 80016ac:	230a      	movs	r3, #10
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2303      	movs	r3, #3
 80016b2:	216c      	movs	r1, #108	@ 0x6c
 80016b4:	4806      	ldr	r0, [pc, #24]	@ (80016d0 <max1704x_set_status_envr+0x64>)
 80016b6:	f001 fdd5 	bl	8003264 <HAL_I2C_Master_Transmit>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <max1704x_set_status_envr+0x58>
//		L_ERROR("Error: Failed to set STATUS.EnVR to %04X", status);
		return false;
 80016c0:	2300      	movs	r3, #0
 80016c2:	e000      	b.n	80016c6 <max1704x_set_status_envr+0x5a>
	}
	return true;
 80016c4:	2301      	movs	r3, #1
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	24000588 	.word	0x24000588

080016d4 <ms8607_init>:
#define MS8607_RH_HEATER					MS8607_RH_HEATER_DISABLED

ms8607_pt_calib_t calib;

bool ms8607_init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
  ms8607_reset_pt(); // set once after power-on to make sure calibration PROM is loaded
 80016da:	f000 f84f 	bl	800177c <ms8607_reset_pt>
  printf("this is before if statement\r\n");
 80016de:	4820      	ldr	r0, [pc, #128]	@ (8001760 <ms8607_init+0x8c>)
 80016e0:	f007 fc8c 	bl	8008ffc <puts>
  if(HAL_I2C_IsDeviceReady(&ms8607_i2c, MS8607_PT_I2C_ADDR, 2, 1000) != HAL_OK){
 80016e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e8:	2202      	movs	r2, #2
 80016ea:	21ec      	movs	r1, #236	@ 0xec
 80016ec:	481d      	ldr	r0, [pc, #116]	@ (8001764 <ms8607_init+0x90>)
 80016ee:	f002 f8e1 	bl	80038b4 <HAL_I2C_IsDeviceReady>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <ms8607_init+0x2e>
		printf("ERROR: Cannot initialize PTH Sensor. Device not ready (PT)");
 80016f8:	481b      	ldr	r0, [pc, #108]	@ (8001768 <ms8607_init+0x94>)
 80016fa:	f007 fc17 	bl	8008f2c <iprintf>
		return false;
 80016fe:	2300      	movs	r3, #0
 8001700:	e029      	b.n	8001756 <ms8607_init+0x82>
	}
  if(HAL_I2C_IsDeviceReady(&ms8607_i2c, MS8607_RH_I2C_ADDR, 2, 1000) != HAL_OK){
 8001702:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001706:	2202      	movs	r2, #2
 8001708:	2180      	movs	r1, #128	@ 0x80
 800170a:	4816      	ldr	r0, [pc, #88]	@ (8001764 <ms8607_init+0x90>)
 800170c:	f002 f8d2 	bl	80038b4 <HAL_I2C_IsDeviceReady>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d004      	beq.n	8001720 <ms8607_init+0x4c>
		printf("ERROR: Cannot initialize PTH Sensor. Device not ready (RH)");
 8001716:	4815      	ldr	r0, [pc, #84]	@ (800176c <ms8607_init+0x98>)
 8001718:	f007 fc08 	bl	8008f2c <iprintf>
		return false;
 800171c:	2300      	movs	r3, #0
 800171e:	e01a      	b.n	8001756 <ms8607_init+0x82>
	}
  
	// Read calibration data from PROM after power-on or reset
	if(!ms8607_prom_read_all_addr_pt(&calib)) {
 8001720:	4813      	ldr	r0, [pc, #76]	@ (8001770 <ms8607_init+0x9c>)
 8001722:	f000 f861 	bl	80017e8 <ms8607_prom_read_all_addr_pt>
 8001726:	4603      	mov	r3, r0
 8001728:	f083 0301 	eor.w	r3, r3, #1
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <ms8607_init+0x68>
		printf("ERROR: Failed to read PT PROM");
 8001732:	4810      	ldr	r0, [pc, #64]	@ (8001774 <ms8607_init+0xa0>)
 8001734:	f007 fbfa 	bl	8008f2c <iprintf>
		return false;
 8001738:	2300      	movs	r3, #0
 800173a:	e00c      	b.n	8001756 <ms8607_init+0x82>
//	log_debug(__func__, "c4 = %04X -> TCO", calib.tco);
//	log_debug(__func__, "c5 = %04X -> TREF", calib.tref);
//	log_debug(__func__, "c6 = %04X -> TEMPSENS", calib.tempsens);
  
  // Configure User Register
	uint8_t user_reg = ms8607_read_usr_reg_rh();
 800173c:	f000 fc5a 	bl	8001ff4 <ms8607_read_usr_reg_rh>
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
//  log_debug(__func__, "user_reg = %02X", user_reg);
	ms8607_write_usr_reg_rh(MS8607_RH_OSR, MS8607_RH_BATT_STATE, MS8607_RH_HEATER);
 8001744:	2200      	movs	r2, #0
 8001746:	2100      	movs	r1, #0
 8001748:	2001      	movs	r0, #1
 800174a:	f000 fc21 	bl	8001f90 <ms8607_write_usr_reg_rh>

	printf("Pressure/Temperature/Humidity sensor initialization completed\r\n");
 800174e:	480a      	ldr	r0, [pc, #40]	@ (8001778 <ms8607_init+0xa4>)
 8001750:	f007 fc54 	bl	8008ffc <puts>
  return true;
 8001754:	2301      	movs	r3, #1
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	0800adb8 	.word	0x0800adb8
 8001764:	24000588 	.word	0x24000588
 8001768:	0800add8 	.word	0x0800add8
 800176c:	0800ae14 	.word	0x0800ae14
 8001770:	24000898 	.word	0x24000898
 8001774:	0800ae50 	.word	0x0800ae50
 8001778:	0800ae70 	.word	0x0800ae70

0800177c <ms8607_reset_pt>:
 ********************************************************************/
/********************************************************************
 * Reset Sequence
 ********************************************************************/
void ms8607_reset_pt(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af02      	add	r7, sp, #8
  //L_INFO("Resetting the Pressure/Temperature sensor");
	uint8_t wData = MS8607_PT_RESET_CMD;
 8001782:	231e      	movs	r3, #30
 8001784:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&ms8607_i2c, MS8607_PT_I2C_ADDR, &wData, 1, 100);
 8001786:	1dfa      	adds	r2, r7, #7
 8001788:	2364      	movs	r3, #100	@ 0x64
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2301      	movs	r3, #1
 800178e:	21ec      	movs	r1, #236	@ 0xec
 8001790:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <ms8607_reset_pt+0x24>)
 8001792:	f001 fd67 	bl	8003264 <HAL_I2C_Master_Transmit>
//	printf("%d",HAL_I2C_Master_Transmit(&ms8607_i2c, MS8607_PT_I2C_ADDR, &wData, 1, 100));
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	24000588 	.word	0x24000588

080017a4 <ms8607_prom_read_one_addr_pt>:

/********************************************************************
 * PROM Read P&T Sequence
 ********************************************************************/
uint16_t ms8607_prom_read_one_addr_pt(uint8_t prom_addr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
	//uint8_t wData;
	uint8_t rData[2];
	
	HAL_I2C_Master_Transmit(&ms8607_i2c, MS8607_PT_I2C_ADDR, &prom_addr, 1, 100);
 80017ae:	1dfa      	adds	r2, r7, #7
 80017b0:	2364      	movs	r3, #100	@ 0x64
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2301      	movs	r3, #1
 80017b6:	21ec      	movs	r1, #236	@ 0xec
 80017b8:	480a      	ldr	r0, [pc, #40]	@ (80017e4 <ms8607_prom_read_one_addr_pt+0x40>)
 80017ba:	f001 fd53 	bl	8003264 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&ms8607_i2c, MS8607_PT_I2C_ADDR, rData, 2, 100);
 80017be:	f107 020c 	add.w	r2, r7, #12
 80017c2:	2364      	movs	r3, #100	@ 0x64
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2302      	movs	r3, #2
 80017c8:	21ec      	movs	r1, #236	@ 0xec
 80017ca:	4806      	ldr	r0, [pc, #24]	@ (80017e4 <ms8607_prom_read_one_addr_pt+0x40>)
 80017cc:	f001 fe62 	bl	8003494 <HAL_I2C_Master_Receive>
//	log_debug(__func__, "rData[0] = %02X | ", rData[0]);
//	log_debug(__func__, "rData[1] = %02X | ", rData[1]);
//	log_debug(__func__, "PROM[ %02X ] = %04X", prom_addr, (uint16_t)(rData[0]<<8) + (uint16_t)rData[1]);
	return (uint16_t)(rData[0]<<8) + (uint16_t)rData[1];
 80017d0:	7b3b      	ldrb	r3, [r7, #12]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	7b7a      	ldrb	r2, [r7, #13]
 80017d8:	4413      	add	r3, r2
 80017da:	b29b      	uxth	r3, r3
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	24000588 	.word	0x24000588

080017e8 <ms8607_prom_read_all_addr_pt>:

bool ms8607_prom_read_all_addr_pt(ms8607_pt_calib_t *calib)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	@ 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	uint16_t temp[14];
	uint8_t crc_check;
	uint8_t crc;
	
	temp[0] = ms8607_prom_read_one_addr_pt(0xA0);
 80017f0:	20a0      	movs	r0, #160	@ 0xa0
 80017f2:	f7ff ffd7 	bl	80017a4 <ms8607_prom_read_one_addr_pt>
 80017f6:	4603      	mov	r3, r0
 80017f8:	813b      	strh	r3, [r7, #8]
	temp[1] = ms8607_prom_read_one_addr_pt(0xA2);
 80017fa:	20a2      	movs	r0, #162	@ 0xa2
 80017fc:	f7ff ffd2 	bl	80017a4 <ms8607_prom_read_one_addr_pt>
 8001800:	4603      	mov	r3, r0
 8001802:	817b      	strh	r3, [r7, #10]
	temp[2] = ms8607_prom_read_one_addr_pt(0xA4);
 8001804:	20a4      	movs	r0, #164	@ 0xa4
 8001806:	f7ff ffcd 	bl	80017a4 <ms8607_prom_read_one_addr_pt>
 800180a:	4603      	mov	r3, r0
 800180c:	81bb      	strh	r3, [r7, #12]
	temp[3] = ms8607_prom_read_one_addr_pt(0xA6);
 800180e:	20a6      	movs	r0, #166	@ 0xa6
 8001810:	f7ff ffc8 	bl	80017a4 <ms8607_prom_read_one_addr_pt>
 8001814:	4603      	mov	r3, r0
 8001816:	81fb      	strh	r3, [r7, #14]
	temp[4] = ms8607_prom_read_one_addr_pt(0xA8);
 8001818:	20a8      	movs	r0, #168	@ 0xa8
 800181a:	f7ff ffc3 	bl	80017a4 <ms8607_prom_read_one_addr_pt>
 800181e:	4603      	mov	r3, r0
 8001820:	823b      	strh	r3, [r7, #16]
	temp[5] = ms8607_prom_read_one_addr_pt(0xAA);
 8001822:	20aa      	movs	r0, #170	@ 0xaa
 8001824:	f7ff ffbe 	bl	80017a4 <ms8607_prom_read_one_addr_pt>
 8001828:	4603      	mov	r3, r0
 800182a:	827b      	strh	r3, [r7, #18]
	temp[6] = ms8607_prom_read_one_addr_pt(0xAC);
 800182c:	20ac      	movs	r0, #172	@ 0xac
 800182e:	f7ff ffb9 	bl	80017a4 <ms8607_prom_read_one_addr_pt>
 8001832:	4603      	mov	r3, r0
 8001834:	82bb      	strh	r3, [r7, #20]
	
	// check CRC
	crc = ((temp[0] & 0xF000)>>12);
 8001836:	893b      	ldrh	r3, [r7, #8]
 8001838:	0b1b      	lsrs	r3, r3, #12
 800183a:	b29b      	uxth	r3, r3
 800183c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	crc_check = ms8607_crc4_pt(temp);
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fc83 	bl	8002150 <ms8607_crc4_pt>
 800184a:	4603      	mov	r3, r0
 800184c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
//	log_debug(__func__, "crc = %X | crc_check = %X", crc, crc_check);
	
	if(crc_check != crc) {
 8001850:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001854:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <ms8607_prom_read_all_addr_pt+0x78>
		//L_ERROR("ERROR: PT CRC (%02X) does not match remainder (%02X)", crc, crc_check);
		return false;
 800185c:	2300      	movs	r3, #0
 800185e:	e007      	b.n	8001870 <ms8607_prom_read_all_addr_pt+0x88>
	} 
	memcpy(calib, temp, sizeof(temp)+1);
 8001860:	f107 0308 	add.w	r3, r7, #8
 8001864:	221d      	movs	r2, #29
 8001866:	4619      	mov	r1, r3
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f007 fd36 	bl	80092da <memcpy>
	return true;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	3728      	adds	r7, #40	@ 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <ms8607_read_adc_pt>:

/********************************************************************
 * Conversion Sequence
 ********************************************************************/
uint32_t ms8607_read_adc_pt(uint8_t convert_cmd)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af02      	add	r7, sp, #8
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
	uint8_t wData;
	uint8_t rData[3];
	
	// Send command to start conversion
	HAL_I2C_Master_Transmit(&ms8607_i2c, MS8607_PT_I2C_ADDR, &convert_cmd, 1, 100);
 8001882:	1dfa      	adds	r2, r7, #7
 8001884:	2364      	movs	r3, #100	@ 0x64
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2301      	movs	r3, #1
 800188a:	21ec      	movs	r1, #236	@ 0xec
 800188c:	4812      	ldr	r0, [pc, #72]	@ (80018d8 <ms8607_read_adc_pt+0x60>)
 800188e:	f001 fce9 	bl	8003264 <HAL_I2C_Master_Transmit>
	// Wait for conversion to finish
	osDelay(MS8607_PT_CONVERT_DELAY);
 8001892:	2001      	movs	r0, #1
 8001894:	f7ff f96a 	bl	8000b6c <osDelay>
	// Read ADC
	wData = MS8607_PT_ADC_READ_CMD;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&ms8607_i2c, MS8607_PT_I2C_ADDR, &wData, 1, 100);
 800189c:	f107 020f 	add.w	r2, r7, #15
 80018a0:	2364      	movs	r3, #100	@ 0x64
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2301      	movs	r3, #1
 80018a6:	21ec      	movs	r1, #236	@ 0xec
 80018a8:	480b      	ldr	r0, [pc, #44]	@ (80018d8 <ms8607_read_adc_pt+0x60>)
 80018aa:	f001 fcdb 	bl	8003264 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&ms8607_i2c, MS8607_PT_I2C_ADDR, rData, 3, 100);
 80018ae:	f107 020c 	add.w	r2, r7, #12
 80018b2:	2364      	movs	r3, #100	@ 0x64
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2303      	movs	r3, #3
 80018b8:	21ec      	movs	r1, #236	@ 0xec
 80018ba:	4807      	ldr	r0, [pc, #28]	@ (80018d8 <ms8607_read_adc_pt+0x60>)
 80018bc:	f001 fdea 	bl	8003494 <HAL_I2C_Master_Receive>
	
	return ((uint32_t)rData[0]<<16) + ((uint32_t)rData[1]<<8)+ (uint32_t)rData[2];
 80018c0:	7b3b      	ldrb	r3, [r7, #12]
 80018c2:	041a      	lsls	r2, r3, #16
 80018c4:	7b7b      	ldrb	r3, [r7, #13]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	4413      	add	r3, r2
 80018ca:	7bba      	ldrb	r2, [r7, #14]
 80018cc:	4413      	add	r3, r2
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	24000588 	.word	0x24000588

080018dc <ms8607_get_pt>:

bool ms8607_get_pt(COT_DATA *data)
{
 80018dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e0:	b0e6      	sub	sp, #408	@ 0x198
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
	uint32_t d1, d2;
	int32_t dT, T2;
	int64_t off, sens, off2, sens2;
	int32_t temp, pres;
	
	if(HAL_I2C_IsDeviceReady(&ms8607_i2c, MS8607_PT_I2C_ADDR, 2, 1000) != HAL_OK){
 80018e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ec:	2202      	movs	r2, #2
 80018ee:	21ec      	movs	r1, #236	@ 0xec
 80018f0:	4803      	ldr	r0, [pc, #12]	@ (8001900 <ms8607_get_pt+0x24>)
 80018f2:	f001 ffdf 	bl	80038b4 <HAL_I2C_IsDeviceReady>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <ms8607_get_pt+0x28>
		//L_ERROR("ERROR: PTH Sensor not ready (PT)");
		return false;
 80018fc:	2300      	movs	r3, #0
 80018fe:	e340      	b.n	8001f82 <ms8607_get_pt+0x6a6>
 8001900:	24000588 	.word	0x24000588
	}
	
	// Read digital pressure and temperature data
	d1 = ms8607_read_adc_pt(MS8607_PT_OSR_D1_CMD);
 8001904:	2040      	movs	r0, #64	@ 0x40
 8001906:	f7ff ffb7 	bl	8001878 <ms8607_read_adc_pt>
 800190a:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
	d2 = ms8607_read_adc_pt(MS8607_PT_OSR_D2_CMD);
 800190e:	2050      	movs	r0, #80	@ 0x50
 8001910:	f7ff ffb2 	bl	8001878 <ms8607_read_adc_pt>
 8001914:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
//	log_debug(__func__, "P_ADC = %X", d1);
//	log_debug(__func__, "T_ADC = %X", d2);
	
	// Calculate temperature
	dT = (int32_t)d2 - ((int32_t)calib.tref << 8);
 8001918:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800191c:	4bd9      	ldr	r3, [pc, #868]	@ (8001c84 <ms8607_get_pt+0x3a8>)
 800191e:	895b      	ldrh	r3, [r3, #10]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
//	log_debug(__func__, "dT = %d", dT);
	temp = 2000 + (((int64_t)dT * (int64_t)calib.tempsens) >> 23);
 8001928:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800192c:	17da      	asrs	r2, r3, #31
 800192e:	469a      	mov	sl, r3
 8001930:	4693      	mov	fp, r2
 8001932:	4bd4      	ldr	r3, [pc, #848]	@ (8001c84 <ms8607_get_pt+0x3a8>)
 8001934:	899b      	ldrh	r3, [r3, #12]
 8001936:	b29b      	uxth	r3, r3
 8001938:	2200      	movs	r2, #0
 800193a:	4698      	mov	r8, r3
 800193c:	4691      	mov	r9, r2
 800193e:	fb08 f20b 	mul.w	r2, r8, fp
 8001942:	fb0a f309 	mul.w	r3, sl, r9
 8001946:	4413      	add	r3, r2
 8001948:	fbaa 4508 	umull	r4, r5, sl, r8
 800194c:	442b      	add	r3, r5
 800194e:	461d      	mov	r5, r3
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	0de2      	lsrs	r2, r4, #23
 800195a:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 800195e:	15eb      	asrs	r3, r5, #23
 8001960:	4613      	mov	r3, r2
 8001962:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001966:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
	
//	data->pth.temperature  = (float)temp / 100;
//	log_debug(__func__, "temperature = %f degC", data->pth.temperature );
	
	// Calculate temperature compensated pressure (first order)
	off = ((int64_t)calib.off << 17) + ((int64_t)(calib.tco * dT) >> 6);
 800196a:	4bc6      	ldr	r3, [pc, #792]	@ (8001c84 <ms8607_get_pt+0x3a8>)
 800196c:	889b      	ldrh	r3, [r3, #4]
 800196e:	b29b      	uxth	r3, r3
 8001970:	2200      	movs	r2, #0
 8001972:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001976:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 800197a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800197e:	460b      	mov	r3, r1
 8001980:	0bdb      	lsrs	r3, r3, #15
 8001982:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001986:	460b      	mov	r3, r1
 8001988:	045b      	lsls	r3, r3, #17
 800198a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800198e:	4bbd      	ldr	r3, [pc, #756]	@ (8001c84 <ms8607_get_pt+0x3a8>)
 8001990:	891b      	ldrh	r3, [r3, #8]
 8001992:	461a      	mov	r2, r3
 8001994:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001998:	fb02 f303 	mul.w	r3, r2, r3
 800199c:	119b      	asrs	r3, r3, #6
 800199e:	17da      	asrs	r2, r3, #31
 80019a0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80019a4:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80019a8:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80019ac:	4623      	mov	r3, r4
 80019ae:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 80019b2:	4602      	mov	r2, r0
 80019b4:	189b      	adds	r3, r3, r2
 80019b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80019b8:	460b      	mov	r3, r1
 80019ba:	462a      	mov	r2, r5
 80019bc:	eb42 0303 	adc.w	r3, r2, r3
 80019c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80019c2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80019c6:	e9c7 345a 	strd	r3, r4, [r7, #360]	@ 0x168
	sens = ((int64_t)calib.sens << 16) + ((int64_t)(calib.tcs * dT) >> 7);
 80019ca:	4bae      	ldr	r3, [pc, #696]	@ (8001c84 <ms8607_get_pt+0x3a8>)
 80019cc:	885b      	ldrh	r3, [r3, #2]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	2200      	movs	r2, #0
 80019d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80019d6:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80019da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80019de:	460b      	mov	r3, r1
 80019e0:	0c1b      	lsrs	r3, r3, #16
 80019e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80019e6:	460b      	mov	r3, r1
 80019e8:	041b      	lsls	r3, r3, #16
 80019ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80019ee:	4ba5      	ldr	r3, [pc, #660]	@ (8001c84 <ms8607_get_pt+0x3a8>)
 80019f0:	88db      	ldrh	r3, [r3, #6]
 80019f2:	461a      	mov	r2, r3
 80019f4:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	11db      	asrs	r3, r3, #7
 80019fe:	17da      	asrs	r2, r3, #31
 8001a00:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001a04:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001a08:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001a0c:	4623      	mov	r3, r4
 8001a0e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8001a12:	4602      	mov	r2, r0
 8001a14:	189b      	adds	r3, r3, r2
 8001a16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a18:	460b      	mov	r3, r1
 8001a1a:	462a      	mov	r2, r5
 8001a1c:	eb42 0303 	adc.w	r3, r2, r3
 8001a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a22:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001a26:	e9c7 3458 	strd	r3, r4, [r7, #352]	@ 0x160
//	log_debug(__func__, "off = %lld", off);
//	log_debug(__func__, "sens = %lld", sens);
	
	// Calculate temperature compensated pressure (second order)
	if(temp < 2000) { // 20 degC
 8001a2a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001a2e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001a32:	f280 81d0 	bge.w	8001dd6 <ms8607_get_pt+0x4fa>
		T2 = (3 * (int64_t)dT * (int64_t)dT) >> 33;
 8001a36:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001a3a:	17da      	asrs	r2, r3, #31
 8001a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001a40:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001a44:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001a48:	17da      	asrs	r2, r3, #31
 8001a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001a4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001a52:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001a56:	462b      	mov	r3, r5
 8001a58:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8001a5c:	4642      	mov	r2, r8
 8001a5e:	fb02 f203 	mul.w	r2, r2, r3
 8001a62:	464b      	mov	r3, r9
 8001a64:	4621      	mov	r1, r4
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4622      	mov	r2, r4
 8001a6e:	4641      	mov	r1, r8
 8001a70:	fba2 1201 	umull	r1, r2, r2, r1
 8001a74:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001a78:	460a      	mov	r2, r1
 8001a7a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001a7e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001a82:	4413      	add	r3, r2
 8001a84:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001a88:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	462b      	mov	r3, r5
 8001a90:	1891      	adds	r1, r2, r2
 8001a92:	6339      	str	r1, [r7, #48]	@ 0x30
 8001a94:	415b      	adcs	r3, r3
 8001a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	1851      	adds	r1, r2, r1
 8001aa0:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	eb43 0101 	adc.w	r1, r3, r1
 8001aaa:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001aba:	4629      	mov	r1, r5
 8001abc:	104a      	asrs	r2, r1, #1
 8001abe:	4629      	mov	r1, r5
 8001ac0:	17cb      	asrs	r3, r1, #31
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
		off2 = (61 * (int64_t)(temp - 2000) * (int64_t)(temp - 2000)) >> 4;
 8001ac8:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001acc:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001ad0:	17da      	asrs	r2, r3, #31
 8001ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001ad6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001ada:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001ade:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001ae2:	17da      	asrs	r2, r3, #31
 8001ae4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001ae8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001aec:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001af0:	462b      	mov	r3, r5
 8001af2:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8001af6:	4642      	mov	r2, r8
 8001af8:	fb02 f203 	mul.w	r2, r2, r3
 8001afc:	464b      	mov	r3, r9
 8001afe:	4621      	mov	r1, r4
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	4622      	mov	r2, r4
 8001b08:	4641      	mov	r1, r8
 8001b0a:	fba2 1201 	umull	r1, r2, r2, r1
 8001b0e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8001b12:	460a      	mov	r2, r1
 8001b14:	f8c7 2140 	str.w	r2, [r7, #320]	@ 0x140
 8001b18:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001b22:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8001b26:	4622      	mov	r2, r4
 8001b28:	462b      	mov	r3, r5
 8001b2a:	f04f 0000 	mov.w	r0, #0
 8001b2e:	f04f 0100 	mov.w	r1, #0
 8001b32:	0119      	lsls	r1, r3, #4
 8001b34:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001b38:	0110      	lsls	r0, r2, #4
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4621      	mov	r1, r4
 8001b40:	1a51      	subs	r1, r2, r1
 8001b42:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001b44:	4629      	mov	r1, r5
 8001b46:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001b58:	4649      	mov	r1, r9
 8001b5a:	008b      	lsls	r3, r1, #2
 8001b5c:	4641      	mov	r1, r8
 8001b5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001b62:	4641      	mov	r1, r8
 8001b64:	008a      	lsls	r2, r1, #2
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4622      	mov	r2, r4
 8001b6e:	189b      	adds	r3, r3, r2
 8001b70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001b74:	462b      	mov	r3, r5
 8001b76:	460a      	mov	r2, r1
 8001b78:	eb42 0303 	adc.w	r3, r2, r3
 8001b7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001b8c:	4621      	mov	r1, r4
 8001b8e:	090a      	lsrs	r2, r1, #4
 8001b90:	4629      	mov	r1, r5
 8001b92:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8001b96:	4629      	mov	r1, r5
 8001b98:	110b      	asrs	r3, r1, #4
 8001b9a:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
		sens2 = (29 * (int64_t)(temp - 2000) * (int64_t)(temp- 2000)) >> 4;
 8001b9e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001ba2:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001ba6:	17da      	asrs	r2, r3, #31
 8001ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001bac:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001bb0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001bb4:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001bb8:	17da      	asrs	r2, r3, #31
 8001bba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001bbe:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001bc2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001bc6:	462b      	mov	r3, r5
 8001bc8:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001bcc:	4642      	mov	r2, r8
 8001bce:	fb02 f203 	mul.w	r2, r2, r3
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	4622      	mov	r2, r4
 8001bde:	4641      	mov	r1, r8
 8001be0:	fba2 1201 	umull	r1, r2, r2, r1
 8001be4:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8001be8:	460a      	mov	r2, r1
 8001bea:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 8001bee:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001bf8:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8001bfc:	4622      	mov	r2, r4
 8001bfe:	462b      	mov	r3, r5
 8001c00:	f04f 0000 	mov.w	r0, #0
 8001c04:	f04f 0100 	mov.w	r1, #0
 8001c08:	00d9      	lsls	r1, r3, #3
 8001c0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c0e:	00d0      	lsls	r0, r2, #3
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4621      	mov	r1, r4
 8001c16:	1a51      	subs	r1, r2, r1
 8001c18:	6239      	str	r1, [r7, #32]
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	eb63 0301 	sbc.w	r3, r3, r1
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c2e:	4649      	mov	r1, r9
 8001c30:	008b      	lsls	r3, r1, #2
 8001c32:	4641      	mov	r1, r8
 8001c34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c38:	4641      	mov	r1, r8
 8001c3a:	008a      	lsls	r2, r1, #2
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4603      	mov	r3, r0
 8001c42:	4622      	mov	r2, r4
 8001c44:	189b      	adds	r3, r3, r2
 8001c46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001c4a:	462b      	mov	r3, r5
 8001c4c:	460a      	mov	r2, r1
 8001c4e:	eb42 0303 	adc.w	r3, r2, r3
 8001c52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8001c62:	4621      	mov	r1, r4
 8001c64:	090a      	lsrs	r2, r1, #4
 8001c66:	4629      	mov	r1, r5
 8001c68:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	110b      	asrs	r3, r1, #4
 8001c70:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
//		log_debug(__func__, "<20 : T2 = %d", T2);
//		log_debug(__func__, "<20 : OFF2 = %lld", off2);
//		log_debug(__func__, "<20 : SENS2 = %lld", sens2);
		if(temp < -1500) { // -15 degC
 8001c74:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8001c78:	4b03      	ldr	r3, [pc, #12]	@ (8001c88 <ms8607_get_pt+0x3ac>)
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	f280 80fe 	bge.w	8001e7c <ms8607_get_pt+0x5a0>
 8001c80:	e006      	b.n	8001c90 <ms8607_get_pt+0x3b4>
 8001c82:	bf00      	nop
 8001c84:	24000898 	.word	0x24000898
 8001c88:	fffffa24 	.word	0xfffffa24
 8001c8c:	42c80000 	.word	0x42c80000
			off2 += (17 * (int64_t)(temp + 1500) * (int64_t)(temp + 1500));
 8001c90:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001c94:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001c98:	17da      	asrs	r2, r3, #31
 8001c9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001c9e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001ca2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001ca6:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001caa:	17da      	asrs	r2, r3, #31
 8001cac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001cb0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001cb4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001cb8:	462b      	mov	r3, r5
 8001cba:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001cbe:	4642      	mov	r2, r8
 8001cc0:	fb02 f203 	mul.w	r2, r2, r3
 8001cc4:	464b      	mov	r3, r9
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	fb01 f303 	mul.w	r3, r1, r3
 8001ccc:	4413      	add	r3, r2
 8001cce:	4622      	mov	r2, r4
 8001cd0:	4641      	mov	r1, r8
 8001cd2:	fba2 1201 	umull	r1, r2, r2, r1
 8001cd6:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8001cda:	460a      	mov	r2, r1
 8001cdc:	f8c7 2130 	str.w	r2, [r7, #304]	@ 0x130
 8001ce0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001cea:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 8001cee:	4622      	mov	r2, r4
 8001cf0:	462b      	mov	r3, r5
 8001cf2:	f04f 0000 	mov.w	r0, #0
 8001cf6:	f04f 0100 	mov.w	r1, #0
 8001cfa:	0119      	lsls	r1, r3, #4
 8001cfc:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001d00:	0110      	lsls	r0, r2, #4
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4621      	mov	r1, r4
 8001d08:	1851      	adds	r1, r2, r1
 8001d0a:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001d0e:	4629      	mov	r1, r5
 8001d10:	eb43 0101 	adc.w	r1, r3, r1
 8001d14:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8001d18:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001d1c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001d20:	4621      	mov	r1, r4
 8001d22:	1851      	adds	r1, r2, r1
 8001d24:	61b9      	str	r1, [r7, #24]
 8001d26:	4629      	mov	r1, r5
 8001d28:	eb43 0101 	adc.w	r1, r3, r1
 8001d2c:	61f9      	str	r1, [r7, #28]
 8001d2e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001d32:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
			sens2 += (9 * (int64_t)(temp + 1500) * (int64_t)(temp + 1500));
 8001d36:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001d3a:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001d3e:	17da      	asrs	r2, r3, #31
 8001d40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d44:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001d48:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001d4c:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001d50:	17da      	asrs	r2, r3, #31
 8001d52:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d54:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001d56:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001d5a:	462b      	mov	r3, r5
 8001d5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001d60:	4642      	mov	r2, r8
 8001d62:	fb02 f203 	mul.w	r2, r2, r3
 8001d66:	464b      	mov	r3, r9
 8001d68:	4621      	mov	r1, r4
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	4622      	mov	r2, r4
 8001d72:	4641      	mov	r1, r8
 8001d74:	fba2 1201 	umull	r1, r2, r2, r1
 8001d78:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 8001d82:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001d86:	4413      	add	r3, r2
 8001d88:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001d8c:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 8001d90:	4622      	mov	r2, r4
 8001d92:	462b      	mov	r3, r5
 8001d94:	f04f 0000 	mov.w	r0, #0
 8001d98:	f04f 0100 	mov.w	r1, #0
 8001d9c:	00d9      	lsls	r1, r3, #3
 8001d9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001da2:	00d0      	lsls	r0, r2, #3
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4621      	mov	r1, r4
 8001daa:	1851      	adds	r1, r2, r1
 8001dac:	6739      	str	r1, [r7, #112]	@ 0x70
 8001dae:	4629      	mov	r1, r5
 8001db0:	eb43 0101 	adc.w	r1, r3, r1
 8001db4:	6779      	str	r1, [r7, #116]	@ 0x74
 8001db6:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8001dba:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	1851      	adds	r1, r2, r1
 8001dc2:	6139      	str	r1, [r7, #16]
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	eb43 0101 	adc.w	r1, r3, r1
 8001dca:	6179      	str	r1, [r7, #20]
 8001dcc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001dd0:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
 8001dd4:	e052      	b.n	8001e7c <ms8607_get_pt+0x5a0>
//			log_debug(__func__, "<-15 : OFF2 = %lld", off2);
//			log_debug(__func__, "<-15 : SENS2 = %lld", sens2);
		}
	} else {
		T2 = (5 * (int64_t)dT * (int64_t)dT) >> 38;
 8001dd6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001dda:	17da      	asrs	r2, r3, #31
 8001ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001dde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001de0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001de4:	17da      	asrs	r2, r3, #31
 8001de6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001de8:	667a      	str	r2, [r7, #100]	@ 0x64
 8001dea:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001dee:	462b      	mov	r3, r5
 8001df0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001df4:	4642      	mov	r2, r8
 8001df6:	fb02 f203 	mul.w	r2, r2, r3
 8001dfa:	464b      	mov	r3, r9
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	4622      	mov	r2, r4
 8001e06:	4641      	mov	r1, r8
 8001e08:	fba2 1201 	umull	r1, r2, r2, r1
 8001e0c:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001e10:	460a      	mov	r2, r1
 8001e12:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 8001e16:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001e20:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 8001e24:	4622      	mov	r2, r4
 8001e26:	462b      	mov	r3, r5
 8001e28:	f04f 0000 	mov.w	r0, #0
 8001e2c:	f04f 0100 	mov.w	r1, #0
 8001e30:	0099      	lsls	r1, r3, #2
 8001e32:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001e36:	0090      	lsls	r0, r2, #2
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	1851      	adds	r1, r2, r1
 8001e40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e42:	4629      	mov	r1, r5
 8001e44:	eb43 0101 	adc.w	r1, r3, r1
 8001e48:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001e56:	4629      	mov	r1, r5
 8001e58:	118a      	asrs	r2, r1, #6
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	17cb      	asrs	r3, r1, #31
 8001e5e:	4613      	mov	r3, r2
 8001e60:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
//		log_debug(__func__, ">20 : T2 = %d", T2);
		off2 = 0;
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
		sens2 = 0;
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	}
//	log_debug(__func__, "T2 = %d", T2);
//	log_debug(__func__, "OFF2 = %lld", off2);
//	log_debug(__func__, "SENS2 = %lld", sens2);
	
	temp -= T2;
 8001e7c:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8001e80:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
	off -= off2;
 8001e8a:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8001e8e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001e92:	1a84      	subs	r4, r0, r2
 8001e94:	60bc      	str	r4, [r7, #8]
 8001e96:	eb61 0303 	sbc.w	r3, r1, r3
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001ea0:	e9c7 345a 	strd	r3, r4, [r7, #360]	@ 0x168
	sens -= sens2;
 8001ea4:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 8001ea8:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8001eac:	1a84      	subs	r4, r0, r2
 8001eae:	603c      	str	r4, [r7, #0]
 8001eb0:	eb61 0303 	sbc.w	r3, r1, r3
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001eba:	e9c7 3458 	strd	r3, r4, [r7, #352]	@ 0x160
	
	data->pth.temperature = (float)temp/ 100;
 8001ebe:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eca:	ed5f 6a90 	vldr	s13, [pc, #-576]	@ 8001c8c <ms8607_get_pt+0x3b0>
 8001ece:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ed2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001ed6:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
//	log_debug(__func__, "temperature (2nd order) = %f (%d)", data->pth.temperature , temp);
	
	pres = (((int64_t)(d1 * sens) >> 21) - off) >> 15;
 8001eda:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001ede:	2200      	movs	r2, #0
 8001ee0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ee2:	657a      	str	r2, [r7, #84]	@ 0x54
 8001ee4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001ee8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001eec:	462a      	mov	r2, r5
 8001eee:	fb02 f203 	mul.w	r2, r2, r3
 8001ef2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8001f02:	4621      	mov	r1, r4
 8001f04:	fba2 1201 	umull	r1, r2, r2, r1
 8001f08:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001f0c:	460a      	mov	r2, r1
 8001f0e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001f12:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001f16:	4413      	add	r3, r2
 8001f18:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8001f28:	4621      	mov	r1, r4
 8001f2a:	0d4a      	lsrs	r2, r1, #21
 8001f2c:	4629      	mov	r1, r5
 8001f2e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8001f32:	4629      	mov	r1, r5
 8001f34:	154b      	asrs	r3, r1, #21
 8001f36:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8001f3a:	1a14      	subs	r4, r2, r0
 8001f3c:	64bc      	str	r4, [r7, #72]	@ 0x48
 8001f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001f50:	4621      	mov	r1, r4
 8001f52:	0bca      	lsrs	r2, r1, #15
 8001f54:	4629      	mov	r1, r5
 8001f56:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	13cb      	asrs	r3, r1, #15
 8001f5e:	4613      	mov	r3, r2
 8001f60:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	data->pth.pressure = (float)pres / 100;
 8001f64:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f70:	ed5f 6aba 	vldr	s13, [pc, #-744]	@ 8001c8c <ms8607_get_pt+0x3b0>
 8001f74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f78:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001f7c:	edc3 7a5b 	vstr	s15, [r3, #364]	@ 0x16c
//	log_debug(__func__, "pressure = %f (%d)", data->pth.pressure, pres);
	// atmospheric pressure ~ 1013.25 mbar
	
	return true;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f8e:	bf00      	nop

08001f90 <ms8607_write_usr_reg_rh>:

/********************************************************************
 * Read and Wrtie to User Register Sequence
 ********************************************************************/
void ms8607_write_usr_reg_rh(uint8_t res, uint8_t batt, uint8_t heat)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af04      	add	r7, sp, #16
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	71bb      	strb	r3, [r7, #6]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	717b      	strb	r3, [r7, #5]
	uint8_t rData;
	uint8_t usr_reg;
	uint8_t wData[2] = {MS8607_RH_WRTIE_USER_REG_CMD, 0};
 8001fa2:	23e6      	movs	r3, #230	@ 0xe6
 8001fa4:	81bb      	strh	r3, [r7, #12]
	
	// Read
	HAL_I2C_Mem_Read(&ms8607_i2c, MS8607_RH_I2C_ADDR, MS8607_RH_READ_USER_REG_CMD, 1, &rData, 1, 100);
 8001fa6:	2364      	movs	r3, #100	@ 0x64
 8001fa8:	9302      	str	r3, [sp, #8]
 8001faa:	2301      	movs	r3, #1
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	f107 030e 	add.w	r3, r7, #14
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	22e7      	movs	r2, #231	@ 0xe7
 8001fb8:	2180      	movs	r1, #128	@ 0x80
 8001fba:	480d      	ldr	r0, [pc, #52]	@ (8001ff0 <ms8607_write_usr_reg_rh+0x60>)
 8001fbc:	f001 fb60 	bl	8003680 <HAL_I2C_Mem_Read>
	wData[0] = MS8607_RH_WRTIE_USER_REG_CMD;
 8001fc0:	23e6      	movs	r3, #230	@ 0xe6
 8001fc2:	733b      	strb	r3, [r7, #12]
	usr_reg = res | batt | heat;
 8001fc4:	79fa      	ldrb	r2, [r7, #7]
 8001fc6:	79bb      	ldrb	r3, [r7, #6]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	797b      	ldrb	r3, [r7, #5]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	73fb      	strb	r3, [r7, #15]
	wData[1] = usr_reg;
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	737b      	strb	r3, [r7, #13]
//	log_debug(__func__, "res = %X, batt = %X, heat = %X, user_reg = %X", res, batt, heat, wData[1]);
	
	// Write
	HAL_I2C_Master_Transmit(&ms8607_i2c, MS8607_RH_I2C_ADDR, wData, 2, 100);
 8001fd6:	f107 020c 	add.w	r2, r7, #12
 8001fda:	2364      	movs	r3, #100	@ 0x64
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2302      	movs	r3, #2
 8001fe0:	2180      	movs	r1, #128	@ 0x80
 8001fe2:	4803      	ldr	r0, [pc, #12]	@ (8001ff0 <ms8607_write_usr_reg_rh+0x60>)
 8001fe4:	f001 f93e 	bl	8003264 <HAL_I2C_Master_Transmit>
}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	24000588 	.word	0x24000588

08001ff4 <ms8607_read_usr_reg_rh>:

uint8_t ms8607_read_usr_reg_rh(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af04      	add	r7, sp, #16
	uint8_t rData;
	
	HAL_I2C_Mem_Read(&ms8607_i2c, MS8607_RH_I2C_ADDR, MS8607_RH_READ_USER_REG_CMD, 1, &rData, 1, 100);
 8001ffa:	2364      	movs	r3, #100	@ 0x64
 8001ffc:	9302      	str	r3, [sp, #8]
 8001ffe:	2301      	movs	r3, #1
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	1dfb      	adds	r3, r7, #7
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2301      	movs	r3, #1
 8002008:	22e7      	movs	r2, #231	@ 0xe7
 800200a:	2180      	movs	r1, #128	@ 0x80
 800200c:	4803      	ldr	r0, [pc, #12]	@ (800201c <ms8607_read_usr_reg_rh+0x28>)
 800200e:	f001 fb37 	bl	8003680 <HAL_I2C_Mem_Read>
//	log_debug(__func__, "user_reg = %02X", rData);
	return rData;
 8002012:	79fb      	ldrb	r3, [r7, #7]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	24000588 	.word	0x24000588

08002020 <ms8607_read_adc_rh>:

/********************************************************************
 * Measure RH Hold/No Hold Sequence (using no hold)
 ********************************************************************/
 bool ms8607_read_adc_rh(uint16_t *adc_rh)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af02      	add	r7, sp, #8
 8002026:	6078      	str	r0, [r7, #4]
	uint8_t wData = MS8607_RH_MEAS_NO_HOLD_CMD;
 8002028:	23f5      	movs	r3, #245	@ 0xf5
 800202a:	737b      	strb	r3, [r7, #13]
	uint8_t rData[3];
	uint8_t checksum, check;
	
	HAL_I2C_Master_Transmit(&ms8607_i2c, MS8607_RH_I2C_ADDR, &wData, 1, 100);
 800202c:	f107 020d 	add.w	r2, r7, #13
 8002030:	2364      	movs	r3, #100	@ 0x64
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2301      	movs	r3, #1
 8002036:	2180      	movs	r1, #128	@ 0x80
 8002038:	4815      	ldr	r0, [pc, #84]	@ (8002090 <ms8607_read_adc_rh+0x70>)
 800203a:	f001 f913 	bl	8003264 <HAL_I2C_Master_Transmit>
	osDelay(MS8607_RH_CONVERT_DELAY);
 800203e:	2005      	movs	r0, #5
 8002040:	f7fe fd94 	bl	8000b6c <osDelay>
	HAL_I2C_Master_Receive(&ms8607_i2c, MS8607_RH_I2C_ADDR, rData, 3, 1000);
 8002044:	f107 0208 	add.w	r2, r7, #8
 8002048:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2303      	movs	r3, #3
 8002050:	2180      	movs	r1, #128	@ 0x80
 8002052:	480f      	ldr	r0, [pc, #60]	@ (8002090 <ms8607_read_adc_rh+0x70>)
 8002054:	f001 fa1e 	bl	8003494 <HAL_I2C_Master_Receive>
	
	*adc_rh = (uint16_t)(rData[0]<<8) + (uint16_t)rData[1];
 8002058:	7a3b      	ldrb	r3, [r7, #8]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	b29b      	uxth	r3, r3
 800205e:	7a7a      	ldrb	r2, [r7, #9]
 8002060:	4413      	add	r3, r2
 8002062:	b29a      	uxth	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	801a      	strh	r2, [r3, #0]
	checksum = rData[2];
 8002068:	7abb      	ldrb	r3, [r7, #10]
 800206a:	73fb      	strb	r3, [r7, #15]
//	log_debug(__func__, "checksum = %02X", checksum);
//	log_debug(__func__, "adc_rh = %04X", *adc_rh);
//	
	check = ms8607_checksum_rh(*adc_rh);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f8d3 	bl	800221c <ms8607_checksum_rh>
 8002076:	4603      	mov	r3, r0
 8002078:	73bb      	strb	r3, [r7, #14]
//	log_debug(__func__, "check = %02X", check);
	if(check != checksum) {
 800207a:	7bba      	ldrb	r2, [r7, #14]
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	429a      	cmp	r2, r3
 8002080:	d001      	beq.n	8002086 <ms8607_read_adc_rh+0x66>
		//L_ERROR("ERROR: RH CRC (%02X) does not match remainder (%02X)", checksum, check);;
		return false;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <ms8607_read_adc_rh+0x68>
	}
	return true;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	24000588 	.word	0x24000588
 8002094:	00000000 	.word	0x00000000

08002098 <ms8607_get_rh>:

bool ms8607_get_rh(COT_DATA *data)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	uint16_t d3;
	
	if(HAL_I2C_IsDeviceReady(&ms8607_i2c, MS8607_RH_I2C_ADDR, 2, 1000) != HAL_OK){
 80020a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020a4:	2202      	movs	r2, #2
 80020a6:	2180      	movs	r1, #128	@ 0x80
 80020a8:	4827      	ldr	r0, [pc, #156]	@ (8002148 <ms8607_get_rh+0xb0>)
 80020aa:	f001 fc03 	bl	80038b4 <HAL_I2C_IsDeviceReady>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <ms8607_get_rh+0x20>
		//L_ERROR("ERROR: PTH Sensor not ready (RH)");
		return false;
 80020b4:	2300      	movs	r3, #0
 80020b6:	e03c      	b.n	8002132 <ms8607_get_rh+0x9a>
	}
	
	// Read digital relative humidity data
	if(!ms8607_read_adc_rh(&d3)){
 80020b8:	f107 030e 	add.w	r3, r7, #14
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ffaf 	bl	8002020 <ms8607_read_adc_rh>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f083 0301 	eor.w	r3, r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <ms8607_get_rh+0x3a>
		//L_ERROR("ERROR: Failed to read RH ADC");
		return false;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e02f      	b.n	8002132 <ms8607_get_rh+0x9a>
	//d3 >>= 2;
//	log_debug(__func__, "H_ADC = %X", d3);
//	log_debug(__func__, "status = %X", status);
	
	// Calculate relative humidity (in %RH)
	data->pth.humidity = ((float)(125 * d3) / 65536) - 6;
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4613      	mov	r3, r2
 80020d8:	015b      	lsls	r3, r3, #5
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	ee07 3a90 	vmov	s15, r3
 80020e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020e8:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800214c <ms8607_get_rh+0xb4>
 80020ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020f0:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80020f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	edc3 7a5d 	vstr	s15, [r3, #372]	@ 0x174
//	log_debug(__func__, "humidity = %f &&", data->pth.humidity);
	
	// Calculate compensated relative humidity
	data->pth.humidity += (20 - (data->pth.temperature)) * (-0.18);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	edd3 7a5d 	vldr	s15, [r3, #372]	@ 0x174
 8002104:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	edd3 7a5c 	vldr	s15, [r3, #368]	@ 0x170
 800210e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002116:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800211a:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8002140 <ms8607_get_rh+0xa8>
 800211e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002122:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002126:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	edc3 7a5d 	vstr	s15, [r3, #372]	@ 0x174
	
//	log_debug(__func__, "humidity (compensated) = %f %%", data->pth.humidity);
	
	return true;
 8002130:	2301      	movs	r3, #1
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	f3af 8000 	nop.w
 8002140:	70a3d70a 	.word	0x70a3d70a
 8002144:	bfc70a3d 	.word	0xbfc70a3d
 8002148:	24000588 	.word	0x24000588
 800214c:	47800000 	.word	0x47800000

08002150 <ms8607_crc4_pt>:

/********************************************************************
 * CRC (Given in datasheet)
 ********************************************************************/
uint8_t ms8607_crc4_pt(uint16_t *n_prom) 	// n_prom defined as 8x unsigned int (n_prom[8])
{ 
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	uint8_t cnt; 																// simple counter
	uint16_t n_rem=0; 													// crc remainder
 8002158:	2300      	movs	r3, #0
 800215a:	81bb      	strh	r3, [r7, #12]
	uint8_t n_bit;
	uint16_t p0 = n_prom[0];
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	813b      	strh	r3, [r7, #8]
	
	n_prom[0]=((n_prom[0]) & 0x0FFF); 					// CRC byte is replaced by 0 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216a:	b29a      	uxth	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	801a      	strh	r2, [r3, #0]
	n_prom[7]=0;    														// Subsidiary value, set to 0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	330e      	adds	r3, #14
 8002174:	2200      	movs	r2, #0
 8002176:	801a      	strh	r2, [r3, #0]
	for (cnt = 0; cnt < 16; cnt++) 							// operation is performed on bytes
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e03c      	b.n	80021f8 <ms8607_crc4_pt+0xa8>
	{ 																					// choose LSB or MSB
		if (cnt%2==1) 
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00f      	beq.n	80021aa <ms8607_crc4_pt+0x5a>
				n_rem ^= ((n_prom[cnt>>1]) & 0x00FF);
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	085b      	lsrs	r3, r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	b21b      	sxth	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	b21a      	sxth	r2, r3
 800219e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80021a2:	4053      	eors	r3, r2
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	81bb      	strh	r3, [r7, #12]
 80021a8:	e00b      	b.n	80021c2 <ms8607_crc4_pt+0x72>
		else 
				n_rem ^= (n_prom[cnt>>1]>>8);
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	89bb      	ldrh	r3, [r7, #12]
 80021be:	4053      	eors	r3, r2
 80021c0:	81bb      	strh	r3, [r7, #12]
		for (n_bit = 8; n_bit > 0; n_bit--) 
 80021c2:	2308      	movs	r3, #8
 80021c4:	72fb      	strb	r3, [r7, #11]
 80021c6:	e011      	b.n	80021ec <ms8607_crc4_pt+0x9c>
		{ 
			if (n_rem & (0x8000)) 
 80021c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	da07      	bge.n	80021e0 <ms8607_crc4_pt+0x90>
					n_rem = (n_rem << 1) ^ 0x3000;
 80021d0:	89bb      	ldrh	r3, [r7, #12]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80021da:	b21b      	sxth	r3, r3
 80021dc:	81bb      	strh	r3, [r7, #12]
 80021de:	e002      	b.n	80021e6 <ms8607_crc4_pt+0x96>
			else 
					n_rem = (n_rem << 1);
 80021e0:	89bb      	ldrh	r3, [r7, #12]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	81bb      	strh	r3, [r7, #12]
		for (n_bit = 8; n_bit > 0; n_bit--) 
 80021e6:	7afb      	ldrb	r3, [r7, #11]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	72fb      	strb	r3, [r7, #11]
 80021ec:	7afb      	ldrb	r3, [r7, #11]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ea      	bne.n	80021c8 <ms8607_crc4_pt+0x78>
	for (cnt = 0; cnt < 16; cnt++) 							// operation is performed on bytes
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	3301      	adds	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	2b0f      	cmp	r3, #15
 80021fc:	d9bf      	bls.n	800217e <ms8607_crc4_pt+0x2e>
		} 
	} 
	n_rem = ((n_rem >> 12) & 0x000F); 					// final 4-bit remainder is CRC code
 80021fe:	89bb      	ldrh	r3, [r7, #12]
 8002200:	0b1b      	lsrs	r3, r3, #12
 8002202:	81bb      	strh	r3, [r7, #12]
	n_prom[0] = p0;															// restore n_prom[0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	893a      	ldrh	r2, [r7, #8]
 8002208:	801a      	strh	r2, [r3, #0]
	return (n_rem ^ 0x00);
 800220a:	89bb      	ldrh	r3, [r7, #12]
 800220c:	b2db      	uxtb	r3, r3
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <ms8607_checksum_rh>:
#endif

// Note: Was not in datasheet, but found in TE drivers in
//			 https://github.com/TEConnectivity/MS8607_Generic_C_Driver
uint8_t ms8607_checksum_rh(uint16_t rh)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	80fb      	strh	r3, [r7, #6]
	uint32_t polynom = 0x988000;
 8002226:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <ms8607_checksum_rh+0x68>)
 8002228:	617b      	str	r3, [r7, #20]
	uint32_t msb     = 0x800000;
 800222a:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800222e:	613b      	str	r3, [r7, #16]
	uint32_t mask    = 0xFF8000;
 8002230:	4b15      	ldr	r3, [pc, #84]	@ (8002288 <ms8607_checksum_rh+0x6c>)
 8002232:	60fb      	str	r3, [r7, #12]
	uint32_t result  = (uint32_t)rh<<8;
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	60bb      	str	r3, [r7, #8]
	
	while( msb != 0x80 ) {
 800223a:	e018      	b.n	800226e <ms8607_checksum_rh+0x52>
		
		// Check if msb of current value is 1 and apply XOR mask
		if( result & msb )
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <ms8607_checksum_rh+0x40>
			result = ((result ^ polynom) & mask) | ( result & ~mask);
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	405a      	eors	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	401a      	ands	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	43d9      	mvns	r1, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	400b      	ands	r3, r1
 8002258:	4313      	orrs	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
			
		msb >>= 1;
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	613b      	str	r3, [r7, #16]
		mask >>= 1;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
		polynom >>=1;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	085b      	lsrs	r3, r3, #1
 800226c:	617b      	str	r3, [r7, #20]
	while( msb != 0x80 ) {
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b80      	cmp	r3, #128	@ 0x80
 8002272:	d1e3      	bne.n	800223c <ms8607_checksum_rh+0x20>
	}
	return (uint8_t)result;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	b2db      	uxtb	r3, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	371c      	adds	r7, #28
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	00988000 	.word	0x00988000
 8002288:	00ff8000 	.word	0x00ff8000

0800228c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002292:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <HAL_MspInit+0x30>)
 8002294:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002298:	4a08      	ldr	r2, [pc, #32]	@ (80022bc <HAL_MspInit+0x30>)
 800229a:	f043 0302 	orr.w	r3, r3, #2
 800229e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_MspInit+0x30>)
 80022a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	58024400 	.word	0x58024400

080022c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b0ba      	sub	sp, #232	@ 0xe8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	22c0      	movs	r2, #192	@ 0xc0
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f006 ff6b 	bl	80091bc <memset>
  if(hi2c->Instance==I2C3)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a27      	ldr	r2, [pc, #156]	@ (8002388 <HAL_I2C_MspInit+0xc8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d146      	bne.n	800237e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80022f0:	f04f 0208 	mov.w	r2, #8
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002302:	f107 0310 	add.w	r3, r7, #16
 8002306:	4618      	mov	r0, r3
 8002308:	f002 ff8c 	bl	8005224 <HAL_RCCEx_PeriphCLKConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002312:	f7fe fe91 	bl	8001038 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002316:	4b1d      	ldr	r3, [pc, #116]	@ (800238c <HAL_I2C_MspInit+0xcc>)
 8002318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800231c:	4a1b      	ldr	r2, [pc, #108]	@ (800238c <HAL_I2C_MspInit+0xcc>)
 800231e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002322:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002326:	4b19      	ldr	r3, [pc, #100]	@ (800238c <HAL_I2C_MspInit+0xcc>)
 8002328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800232c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH8     ------> I2C3_SDA
    PH7     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8002334:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002338:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800233c:	2312      	movs	r3, #18
 800233e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800234e:	2304      	movs	r3, #4
 8002350:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002354:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002358:	4619      	mov	r1, r3
 800235a:	480d      	ldr	r0, [pc, #52]	@ (8002390 <HAL_I2C_MspInit+0xd0>)
 800235c:	f000 fd36 	bl	8002dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002360:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <HAL_I2C_MspInit+0xcc>)
 8002362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002366:	4a09      	ldr	r2, [pc, #36]	@ (800238c <HAL_I2C_MspInit+0xcc>)
 8002368:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800236c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002370:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_I2C_MspInit+0xcc>)
 8002372:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002376:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800237e:	bf00      	nop
 8002380:	37e8      	adds	r7, #232	@ 0xe8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40005c00 	.word	0x40005c00
 800238c:	58024400 	.word	0x58024400
 8002390:	58021c00 	.word	0x58021c00

08002394 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b0bc      	sub	sp, #240	@ 0xf0
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023ac:	f107 0318 	add.w	r3, r7, #24
 80023b0:	22c0      	movs	r2, #192	@ 0xc0
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f006 ff01 	bl	80091bc <memset>
  if(hspi->Instance==SPI5)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a38      	ldr	r2, [pc, #224]	@ (80024a0 <HAL_SPI_MspInit+0x10c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d169      	bne.n	8002498 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80023c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d4:	f107 0318 	add.w	r3, r7, #24
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 ff23 	bl	8005224 <HAL_RCCEx_PeriphCLKConfig>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80023e4:	f7fe fe28 	bl	8001038 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80023e8:	4b2e      	ldr	r3, [pc, #184]	@ (80024a4 <HAL_SPI_MspInit+0x110>)
 80023ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023ee:	4a2d      	ldr	r2, [pc, #180]	@ (80024a4 <HAL_SPI_MspInit+0x110>)
 80023f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023f8:	4b2a      	ldr	r3, [pc, #168]	@ (80024a4 <HAL_SPI_MspInit+0x110>)
 80023fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002406:	4b27      	ldr	r3, [pc, #156]	@ (80024a4 <HAL_SPI_MspInit+0x110>)
 8002408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800240c:	4a25      	ldr	r2, [pc, #148]	@ (80024a4 <HAL_SPI_MspInit+0x110>)
 800240e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002412:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002416:	4b23      	ldr	r3, [pc, #140]	@ (80024a4 <HAL_SPI_MspInit+0x110>)
 8002418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800241c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002424:	4b1f      	ldr	r3, [pc, #124]	@ (80024a4 <HAL_SPI_MspInit+0x110>)
 8002426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800242a:	4a1e      	ldr	r2, [pc, #120]	@ (80024a4 <HAL_SPI_MspInit+0x110>)
 800242c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002430:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002434:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <HAL_SPI_MspInit+0x110>)
 8002436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800243a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
    PK0     ------> SPI5_SCK
    PK1     ------> SPI5_NSS
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002442:	2303      	movs	r3, #3
 8002444:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002454:	2300      	movs	r3, #0
 8002456:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800245a:	2305      	movs	r3, #5
 800245c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002460:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002464:	4619      	mov	r1, r3
 8002466:	4810      	ldr	r0, [pc, #64]	@ (80024a8 <HAL_SPI_MspInit+0x114>)
 8002468:	f000 fcb0 	bl	8002dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800246c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002470:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002486:	2305      	movs	r3, #5
 8002488:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800248c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002490:	4619      	mov	r1, r3
 8002492:	4806      	ldr	r0, [pc, #24]	@ (80024ac <HAL_SPI_MspInit+0x118>)
 8002494:	f000 fc9a 	bl	8002dcc <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002498:	bf00      	nop
 800249a:	37f0      	adds	r7, #240	@ 0xf0
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40015000 	.word	0x40015000
 80024a4:	58024400 	.word	0x58024400
 80024a8:	58022800 	.word	0x58022800
 80024ac:	58022400 	.word	0x58022400

080024b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b0ba      	sub	sp, #232	@ 0xe8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	22c0      	movs	r2, #192	@ 0xc0
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f006 fe73 	bl	80091bc <memset>
  if(huart->Instance==UART8)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a27      	ldr	r2, [pc, #156]	@ (8002578 <HAL_UART_MspInit+0xc8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d146      	bne.n	800256e <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80024e0:	f04f 0202 	mov.w	r2, #2
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f2:	f107 0310 	add.w	r3, r7, #16
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 fe94 	bl	8005224 <HAL_RCCEx_PeriphCLKConfig>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002502:	f7fe fd99 	bl	8001038 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002506:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <HAL_UART_MspInit+0xcc>)
 8002508:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800250c:	4a1b      	ldr	r2, [pc, #108]	@ (800257c <HAL_UART_MspInit+0xcc>)
 800250e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002512:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002516:	4b19      	ldr	r3, [pc, #100]	@ (800257c <HAL_UART_MspInit+0xcc>)
 8002518:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800251c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002524:	4b15      	ldr	r3, [pc, #84]	@ (800257c <HAL_UART_MspInit+0xcc>)
 8002526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800252a:	4a14      	ldr	r2, [pc, #80]	@ (800257c <HAL_UART_MspInit+0xcc>)
 800252c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002530:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002534:	4b11      	ldr	r3, [pc, #68]	@ (800257c <HAL_UART_MspInit+0xcc>)
 8002536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800253a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8002542:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002546:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002556:	2300      	movs	r3, #0
 8002558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800255c:	2308      	movs	r3, #8
 800255e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002562:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002566:	4619      	mov	r1, r3
 8002568:	4805      	ldr	r0, [pc, #20]	@ (8002580 <HAL_UART_MspInit+0xd0>)
 800256a:	f000 fc2f 	bl	8002dcc <HAL_GPIO_Init>

  /* USER CODE END UART8_MspInit 1 */

  }

}
 800256e:	bf00      	nop
 8002570:	37e8      	adds	r7, #232	@ 0xe8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40007c00 	.word	0x40007c00
 800257c:	58024400 	.word	0x58024400
 8002580:	58022400 	.word	0x58022400

08002584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002588:	bf00      	nop
 800258a:	e7fd      	b.n	8002588 <NMI_Handler+0x4>

0800258c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002590:	bf00      	nop
 8002592:	e7fd      	b.n	8002590 <HardFault_Handler+0x4>

08002594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <MemManage_Handler+0x4>

0800259c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025a0:	bf00      	nop
 80025a2:	e7fd      	b.n	80025a0 <BusFault_Handler+0x4>

080025a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <UsageFault_Handler+0x4>

080025ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025da:	f000 fa1f 	bl	8002a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  return 1;
 80025e6:	2301      	movs	r3, #1
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <_kill>:

int _kill(int pid, int sig)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025fc:	f006 fe40 	bl	8009280 <__errno>
 8002600:	4603      	mov	r3, r0
 8002602:	2216      	movs	r2, #22
 8002604:	601a      	str	r2, [r3, #0]
  return -1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <_exit>:

void _exit (int status)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800261a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ffe7 	bl	80025f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <_exit+0x12>

08002628 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e00a      	b.n	8002650 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800263a:	f3af 8000 	nop.w
 800263e:	4601      	mov	r1, r0
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	60ba      	str	r2, [r7, #8]
 8002646:	b2ca      	uxtb	r2, r1
 8002648:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3301      	adds	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	429a      	cmp	r2, r3
 8002656:	dbf0      	blt.n	800263a <_read+0x12>
  }

  return len;
 8002658:	687b      	ldr	r3, [r7, #4]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	e009      	b.n	8002688 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	60ba      	str	r2, [r7, #8]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe fa81 	bl	8000b84 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3301      	adds	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	429a      	cmp	r2, r3
 800268e:	dbf1      	blt.n	8002674 <_write+0x12>
  }
  return len;
 8002690:	687b      	ldr	r3, [r7, #4]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_close>:

int _close(int file)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026c2:	605a      	str	r2, [r3, #4]
  return 0;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <_isatty>:

int _isatty(int file)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026da:	2301      	movs	r3, #1
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800270c:	4a14      	ldr	r2, [pc, #80]	@ (8002760 <_sbrk+0x5c>)
 800270e:	4b15      	ldr	r3, [pc, #84]	@ (8002764 <_sbrk+0x60>)
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002718:	4b13      	ldr	r3, [pc, #76]	@ (8002768 <_sbrk+0x64>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002720:	4b11      	ldr	r3, [pc, #68]	@ (8002768 <_sbrk+0x64>)
 8002722:	4a12      	ldr	r2, [pc, #72]	@ (800276c <_sbrk+0x68>)
 8002724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002726:	4b10      	ldr	r3, [pc, #64]	@ (8002768 <_sbrk+0x64>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	429a      	cmp	r2, r3
 8002732:	d207      	bcs.n	8002744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002734:	f006 fda4 	bl	8009280 <__errno>
 8002738:	4603      	mov	r3, r0
 800273a:	220c      	movs	r2, #12
 800273c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800273e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002742:	e009      	b.n	8002758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002744:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <_sbrk+0x64>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800274a:	4b07      	ldr	r3, [pc, #28]	@ (8002768 <_sbrk+0x64>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	4a05      	ldr	r2, [pc, #20]	@ (8002768 <_sbrk+0x64>)
 8002754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002756:	68fb      	ldr	r3, [r7, #12]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	24080000 	.word	0x24080000
 8002764:	00000400 	.word	0x00000400
 8002768:	240008a8 	.word	0x240008a8
 800276c:	24000a00 	.word	0x24000a00

08002770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002774:	4b43      	ldr	r3, [pc, #268]	@ (8002884 <SystemInit+0x114>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277a:	4a42      	ldr	r2, [pc, #264]	@ (8002884 <SystemInit+0x114>)
 800277c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002780:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002784:	4b40      	ldr	r3, [pc, #256]	@ (8002888 <SystemInit+0x118>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	2b06      	cmp	r3, #6
 800278e:	d807      	bhi.n	80027a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002790:	4b3d      	ldr	r3, [pc, #244]	@ (8002888 <SystemInit+0x118>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f023 030f 	bic.w	r3, r3, #15
 8002798:	4a3b      	ldr	r2, [pc, #236]	@ (8002888 <SystemInit+0x118>)
 800279a:	f043 0307 	orr.w	r3, r3, #7
 800279e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027a0:	4b3a      	ldr	r3, [pc, #232]	@ (800288c <SystemInit+0x11c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a39      	ldr	r2, [pc, #228]	@ (800288c <SystemInit+0x11c>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027ac:	4b37      	ldr	r3, [pc, #220]	@ (800288c <SystemInit+0x11c>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027b2:	4b36      	ldr	r3, [pc, #216]	@ (800288c <SystemInit+0x11c>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4935      	ldr	r1, [pc, #212]	@ (800288c <SystemInit+0x11c>)
 80027b8:	4b35      	ldr	r3, [pc, #212]	@ (8002890 <SystemInit+0x120>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027be:	4b32      	ldr	r3, [pc, #200]	@ (8002888 <SystemInit+0x118>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002888 <SystemInit+0x118>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 030f 	bic.w	r3, r3, #15
 80027d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002888 <SystemInit+0x118>)
 80027d4:	f043 0307 	orr.w	r3, r3, #7
 80027d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80027da:	4b2c      	ldr	r3, [pc, #176]	@ (800288c <SystemInit+0x11c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80027e0:	4b2a      	ldr	r3, [pc, #168]	@ (800288c <SystemInit+0x11c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80027e6:	4b29      	ldr	r3, [pc, #164]	@ (800288c <SystemInit+0x11c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027ec:	4b27      	ldr	r3, [pc, #156]	@ (800288c <SystemInit+0x11c>)
 80027ee:	4a29      	ldr	r2, [pc, #164]	@ (8002894 <SystemInit+0x124>)
 80027f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027f2:	4b26      	ldr	r3, [pc, #152]	@ (800288c <SystemInit+0x11c>)
 80027f4:	4a28      	ldr	r2, [pc, #160]	@ (8002898 <SystemInit+0x128>)
 80027f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027f8:	4b24      	ldr	r3, [pc, #144]	@ (800288c <SystemInit+0x11c>)
 80027fa:	4a28      	ldr	r2, [pc, #160]	@ (800289c <SystemInit+0x12c>)
 80027fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027fe:	4b23      	ldr	r3, [pc, #140]	@ (800288c <SystemInit+0x11c>)
 8002800:	2200      	movs	r2, #0
 8002802:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002804:	4b21      	ldr	r3, [pc, #132]	@ (800288c <SystemInit+0x11c>)
 8002806:	4a25      	ldr	r2, [pc, #148]	@ (800289c <SystemInit+0x12c>)
 8002808:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800280a:	4b20      	ldr	r3, [pc, #128]	@ (800288c <SystemInit+0x11c>)
 800280c:	2200      	movs	r2, #0
 800280e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002810:	4b1e      	ldr	r3, [pc, #120]	@ (800288c <SystemInit+0x11c>)
 8002812:	4a22      	ldr	r2, [pc, #136]	@ (800289c <SystemInit+0x12c>)
 8002814:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002816:	4b1d      	ldr	r3, [pc, #116]	@ (800288c <SystemInit+0x11c>)
 8002818:	2200      	movs	r2, #0
 800281a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800281c:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <SystemInit+0x11c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1a      	ldr	r2, [pc, #104]	@ (800288c <SystemInit+0x11c>)
 8002822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002826:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002828:	4b18      	ldr	r3, [pc, #96]	@ (800288c <SystemInit+0x11c>)
 800282a:	2200      	movs	r2, #0
 800282c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800282e:	4b1c      	ldr	r3, [pc, #112]	@ (80028a0 <SystemInit+0x130>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4b1c      	ldr	r3, [pc, #112]	@ (80028a4 <SystemInit+0x134>)
 8002834:	4013      	ands	r3, r2
 8002836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800283a:	d202      	bcs.n	8002842 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800283c:	4b1a      	ldr	r3, [pc, #104]	@ (80028a8 <SystemInit+0x138>)
 800283e:	2201      	movs	r2, #1
 8002840:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002842:	4b12      	ldr	r3, [pc, #72]	@ (800288c <SystemInit+0x11c>)
 8002844:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002848:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d113      	bne.n	8002878 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002850:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <SystemInit+0x11c>)
 8002852:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002856:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <SystemInit+0x11c>)
 8002858:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800285c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002860:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <SystemInit+0x13c>)
 8002862:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002866:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002868:	4b08      	ldr	r3, [pc, #32]	@ (800288c <SystemInit+0x11c>)
 800286a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800286e:	4a07      	ldr	r2, [pc, #28]	@ (800288c <SystemInit+0x11c>)
 8002870:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002874:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000ed00 	.word	0xe000ed00
 8002888:	52002000 	.word	0x52002000
 800288c:	58024400 	.word	0x58024400
 8002890:	eaf6ed7f 	.word	0xeaf6ed7f
 8002894:	02020200 	.word	0x02020200
 8002898:	01ff0000 	.word	0x01ff0000
 800289c:	01010280 	.word	0x01010280
 80028a0:	5c001000 	.word	0x5c001000
 80028a4:	ffff0000 	.word	0xffff0000
 80028a8:	51008108 	.word	0x51008108
 80028ac:	52004000 	.word	0x52004000

080028b0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80028b4:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <ExitRun0Mode+0x2c>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a08      	ldr	r2, [pc, #32]	@ (80028dc <ExitRun0Mode+0x2c>)
 80028ba:	f043 0302 	orr.w	r3, r3, #2
 80028be:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80028c0:	bf00      	nop
 80028c2:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <ExitRun0Mode+0x2c>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f9      	beq.n	80028c2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80028ce:	bf00      	nop
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	58024800 	.word	0x58024800

080028e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80028e0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800291c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80028e4:	f7ff ffe4 	bl	80028b0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80028e8:	f7ff ff42 	bl	8002770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028ec:	480c      	ldr	r0, [pc, #48]	@ (8002920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ee:	490d      	ldr	r1, [pc, #52]	@ (8002924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028f4:	e002      	b.n	80028fc <LoopCopyDataInit>

080028f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028fa:	3304      	adds	r3, #4

080028fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002900:	d3f9      	bcc.n	80028f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002902:	4a0a      	ldr	r2, [pc, #40]	@ (800292c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002904:	4c0a      	ldr	r4, [pc, #40]	@ (8002930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002908:	e001      	b.n	800290e <LoopFillZerobss>

0800290a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800290a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800290c:	3204      	adds	r2, #4

0800290e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800290e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002910:	d3fb      	bcc.n	800290a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002912:	f006 fcbb 	bl	800928c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002916:	f7fe f947 	bl	8000ba8 <main>
  bx  lr
 800291a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800291c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002920:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002924:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8002928:	0800b268 	.word	0x0800b268
  ldr r2, =_sbss
 800292c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8002930:	240009fc 	.word	0x240009fc

08002934 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002934:	e7fe      	b.n	8002934 <ADC3_IRQHandler>
	...

08002938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800293e:	2003      	movs	r0, #3
 8002940:	f000 f98c 	bl	8002c5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002944:	f002 fa98 	bl	8004e78 <HAL_RCC_GetSysClockFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b15      	ldr	r3, [pc, #84]	@ (80029a0 <HAL_Init+0x68>)
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	4913      	ldr	r1, [pc, #76]	@ (80029a4 <HAL_Init+0x6c>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
 8002960:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002962:	4b0f      	ldr	r3, [pc, #60]	@ (80029a0 <HAL_Init+0x68>)
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	4a0e      	ldr	r2, [pc, #56]	@ (80029a4 <HAL_Init+0x6c>)
 800296c:	5cd3      	ldrb	r3, [r2, r3]
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
 8002978:	4a0b      	ldr	r2, [pc, #44]	@ (80029a8 <HAL_Init+0x70>)
 800297a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800297c:	4a0b      	ldr	r2, [pc, #44]	@ (80029ac <HAL_Init+0x74>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002982:	200f      	movs	r0, #15
 8002984:	f000 f814 	bl	80029b0 <HAL_InitTick>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e002      	b.n	8002998 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002992:	f7ff fc7b 	bl	800228c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	58024400 	.word	0x58024400
 80029a4:	0800aeb0 	.word	0x0800aeb0
 80029a8:	24000004 	.word	0x24000004
 80029ac:	24000000 	.word	0x24000000

080029b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029b8:	4b15      	ldr	r3, [pc, #84]	@ (8002a10 <HAL_InitTick+0x60>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e021      	b.n	8002a08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80029c4:	4b13      	ldr	r3, [pc, #76]	@ (8002a14 <HAL_InitTick+0x64>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4b11      	ldr	r3, [pc, #68]	@ (8002a10 <HAL_InitTick+0x60>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	4619      	mov	r1, r3
 80029ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 f971 	bl	8002cc2 <HAL_SYSTICK_Config>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00e      	b.n	8002a08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b0f      	cmp	r3, #15
 80029ee:	d80a      	bhi.n	8002a06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f0:	2200      	movs	r2, #0
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029f8:	f000 f93b 	bl	8002c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029fc:	4a06      	ldr	r2, [pc, #24]	@ (8002a18 <HAL_InitTick+0x68>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e000      	b.n	8002a08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	2400000c 	.word	0x2400000c
 8002a14:	24000000 	.word	0x24000000
 8002a18:	24000008 	.word	0x24000008

08002a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a20:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <HAL_IncTick+0x20>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <HAL_IncTick+0x24>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4a04      	ldr	r2, [pc, #16]	@ (8002a40 <HAL_IncTick+0x24>)
 8002a2e:	6013      	str	r3, [r2, #0]
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	2400000c 	.word	0x2400000c
 8002a40:	240008ac 	.word	0x240008ac

08002a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return uwTick;
 8002a48:	4b03      	ldr	r3, [pc, #12]	@ (8002a58 <HAL_GetTick+0x14>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	240008ac 	.word	0x240008ac

08002a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a64:	f7ff ffee 	bl	8002a44 <HAL_GetTick>
 8002a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a74:	d005      	beq.n	8002a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a76:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <HAL_Delay+0x44>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a82:	bf00      	nop
 8002a84:	f7ff ffde 	bl	8002a44 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d8f7      	bhi.n	8002a84 <HAL_Delay+0x28>
  {
  }
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	2400000c 	.word	0x2400000c

08002aa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002aa8:	4b03      	ldr	r3, [pc, #12]	@ (8002ab8 <HAL_GetREVID+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0c1b      	lsrs	r3, r3, #16
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	5c001000 	.word	0x5c001000

08002abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002acc:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <__NVIC_SetPriorityGrouping+0x40>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ae4:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	@ (8002afc <__NVIC_SetPriorityGrouping+0x40>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00
 8002b00:	05fa0000 	.word	0x05fa0000

08002b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b08:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <__NVIC_GetPriorityGrouping+0x18>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	f003 0307 	and.w	r3, r3, #7
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	db0b      	blt.n	8002b4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	f003 021f 	and.w	r2, r3, #31
 8002b38:	4907      	ldr	r1, [pc, #28]	@ (8002b58 <__NVIC_EnableIRQ+0x38>)
 8002b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2001      	movs	r0, #1
 8002b42:	fa00 f202 	lsl.w	r2, r0, r2
 8002b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	e000e100 	.word	0xe000e100

08002b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	6039      	str	r1, [r7, #0]
 8002b66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	db0a      	blt.n	8002b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	490c      	ldr	r1, [pc, #48]	@ (8002ba8 <__NVIC_SetPriority+0x4c>)
 8002b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b7a:	0112      	lsls	r2, r2, #4
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	440b      	add	r3, r1
 8002b80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b84:	e00a      	b.n	8002b9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4908      	ldr	r1, [pc, #32]	@ (8002bac <__NVIC_SetPriority+0x50>)
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	3b04      	subs	r3, #4
 8002b94:	0112      	lsls	r2, r2, #4
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	440b      	add	r3, r1
 8002b9a:	761a      	strb	r2, [r3, #24]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000e100 	.word	0xe000e100
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	@ 0x24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f1c3 0307 	rsb	r3, r3, #7
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	bf28      	it	cs
 8002bce:	2304      	movcs	r3, #4
 8002bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	2b06      	cmp	r3, #6
 8002bd8:	d902      	bls.n	8002be0 <NVIC_EncodePriority+0x30>
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3b03      	subs	r3, #3
 8002bde:	e000      	b.n	8002be2 <NVIC_EncodePriority+0x32>
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002c02:	43d9      	mvns	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	4313      	orrs	r3, r2
         );
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3724      	adds	r7, #36	@ 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c28:	d301      	bcc.n	8002c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e00f      	b.n	8002c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c58 <SysTick_Config+0x40>)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c36:	210f      	movs	r1, #15
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c3c:	f7ff ff8e 	bl	8002b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c40:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <SysTick_Config+0x40>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c46:	4b04      	ldr	r3, [pc, #16]	@ (8002c58 <SysTick_Config+0x40>)
 8002c48:	2207      	movs	r2, #7
 8002c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	e000e010 	.word	0xe000e010

08002c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ff29 	bl	8002abc <__NVIC_SetPriorityGrouping>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b086      	sub	sp, #24
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c80:	f7ff ff40 	bl	8002b04 <__NVIC_GetPriorityGrouping>
 8002c84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	6978      	ldr	r0, [r7, #20]
 8002c8c:	f7ff ff90 	bl	8002bb0 <NVIC_EncodePriority>
 8002c90:	4602      	mov	r2, r0
 8002c92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff5f 	bl	8002b5c <__NVIC_SetPriority>
}
 8002c9e:	bf00      	nop
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff33 	bl	8002b20 <__NVIC_EnableIRQ>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff ffa4 	bl	8002c18 <SysTick_Config>
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002ce0:	f3bf 8f5f 	dmb	sy
}
 8002ce4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002ce6:	4b07      	ldr	r3, [pc, #28]	@ (8002d04 <HAL_MPU_Disable+0x28>)
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	4a06      	ldr	r2, [pc, #24]	@ (8002d04 <HAL_MPU_Disable+0x28>)
 8002cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002cf2:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <HAL_MPU_Disable+0x2c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	605a      	str	r2, [r3, #4]
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000ed00 	.word	0xe000ed00
 8002d08:	e000ed90 	.word	0xe000ed90

08002d0c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002d14:	4a0b      	ldr	r2, [pc, #44]	@ (8002d44 <HAL_MPU_Enable+0x38>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d48 <HAL_MPU_Enable+0x3c>)
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	4a09      	ldr	r2, [pc, #36]	@ (8002d48 <HAL_MPU_Enable+0x3c>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d28:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002d2a:	f3bf 8f4f 	dsb	sy
}
 8002d2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d30:	f3bf 8f6f 	isb	sy
}
 8002d34:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000ed90 	.word	0xe000ed90
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	785a      	ldrb	r2, [r3, #1]
 8002d58:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc8 <HAL_MPU_ConfigRegion+0x7c>)
 8002d5a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc8 <HAL_MPU_ConfigRegion+0x7c>)
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	4a19      	ldr	r2, [pc, #100]	@ (8002dc8 <HAL_MPU_ConfigRegion+0x7c>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002d68:	4a17      	ldr	r2, [pc, #92]	@ (8002dc8 <HAL_MPU_ConfigRegion+0x7c>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	7b1b      	ldrb	r3, [r3, #12]
 8002d74:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	7adb      	ldrb	r3, [r3, #11]
 8002d7a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	7a9b      	ldrb	r3, [r3, #10]
 8002d82:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7b5b      	ldrb	r3, [r3, #13]
 8002d8a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	7b9b      	ldrb	r3, [r3, #14]
 8002d92:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7bdb      	ldrb	r3, [r3, #15]
 8002d9a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	7a5b      	ldrb	r3, [r3, #9]
 8002da2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002da4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7a1b      	ldrb	r3, [r3, #8]
 8002daa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002dac:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	7812      	ldrb	r2, [r2, #0]
 8002db2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002db4:	4a04      	ldr	r2, [pc, #16]	@ (8002dc8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002db6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002db8:	6113      	str	r3, [r2, #16]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000ed90 	.word	0xe000ed90

08002dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b089      	sub	sp, #36	@ 0x24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002dda:	4b89      	ldr	r3, [pc, #548]	@ (8003000 <HAL_GPIO_Init+0x234>)
 8002ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002dde:	e194      	b.n	800310a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	2101      	movs	r1, #1
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 8186 	beq.w	8003104 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d005      	beq.n	8002e10 <HAL_GPIO_Init+0x44>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d130      	bne.n	8002e72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e46:	2201      	movs	r2, #1
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4013      	ands	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	091b      	lsrs	r3, r3, #4
 8002e5c:	f003 0201 	and.w	r2, r3, #1
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d017      	beq.n	8002eae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	2203      	movs	r2, #3
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d123      	bne.n	8002f02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	08da      	lsrs	r2, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3208      	adds	r2, #8
 8002ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	220f      	movs	r2, #15
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	08da      	lsrs	r2, r3, #3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3208      	adds	r2, #8
 8002efc:	69b9      	ldr	r1, [r7, #24]
 8002efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43db      	mvns	r3, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4013      	ands	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 0203 	and.w	r2, r3, #3
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80e0 	beq.w	8003104 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f44:	4b2f      	ldr	r3, [pc, #188]	@ (8003004 <HAL_GPIO_Init+0x238>)
 8002f46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f4a:	4a2e      	ldr	r2, [pc, #184]	@ (8003004 <HAL_GPIO_Init+0x238>)
 8002f4c:	f043 0302 	orr.w	r3, r3, #2
 8002f50:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002f54:	4b2b      	ldr	r3, [pc, #172]	@ (8003004 <HAL_GPIO_Init+0x238>)
 8002f56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f62:	4a29      	ldr	r2, [pc, #164]	@ (8003008 <HAL_GPIO_Init+0x23c>)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	089b      	lsrs	r3, r3, #2
 8002f68:	3302      	adds	r3, #2
 8002f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	220f      	movs	r2, #15
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a20      	ldr	r2, [pc, #128]	@ (800300c <HAL_GPIO_Init+0x240>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d052      	beq.n	8003034 <HAL_GPIO_Init+0x268>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a1f      	ldr	r2, [pc, #124]	@ (8003010 <HAL_GPIO_Init+0x244>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d031      	beq.n	8002ffa <HAL_GPIO_Init+0x22e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a1e      	ldr	r2, [pc, #120]	@ (8003014 <HAL_GPIO_Init+0x248>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d02b      	beq.n	8002ff6 <HAL_GPIO_Init+0x22a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8003018 <HAL_GPIO_Init+0x24c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d025      	beq.n	8002ff2 <HAL_GPIO_Init+0x226>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800301c <HAL_GPIO_Init+0x250>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d01f      	beq.n	8002fee <HAL_GPIO_Init+0x222>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003020 <HAL_GPIO_Init+0x254>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d019      	beq.n	8002fea <HAL_GPIO_Init+0x21e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8003024 <HAL_GPIO_Init+0x258>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d013      	beq.n	8002fe6 <HAL_GPIO_Init+0x21a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a19      	ldr	r2, [pc, #100]	@ (8003028 <HAL_GPIO_Init+0x25c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00d      	beq.n	8002fe2 <HAL_GPIO_Init+0x216>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a18      	ldr	r2, [pc, #96]	@ (800302c <HAL_GPIO_Init+0x260>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d007      	beq.n	8002fde <HAL_GPIO_Init+0x212>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a17      	ldr	r2, [pc, #92]	@ (8003030 <HAL_GPIO_Init+0x264>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d101      	bne.n	8002fda <HAL_GPIO_Init+0x20e>
 8002fd6:	2309      	movs	r3, #9
 8002fd8:	e02d      	b.n	8003036 <HAL_GPIO_Init+0x26a>
 8002fda:	230a      	movs	r3, #10
 8002fdc:	e02b      	b.n	8003036 <HAL_GPIO_Init+0x26a>
 8002fde:	2308      	movs	r3, #8
 8002fe0:	e029      	b.n	8003036 <HAL_GPIO_Init+0x26a>
 8002fe2:	2307      	movs	r3, #7
 8002fe4:	e027      	b.n	8003036 <HAL_GPIO_Init+0x26a>
 8002fe6:	2306      	movs	r3, #6
 8002fe8:	e025      	b.n	8003036 <HAL_GPIO_Init+0x26a>
 8002fea:	2305      	movs	r3, #5
 8002fec:	e023      	b.n	8003036 <HAL_GPIO_Init+0x26a>
 8002fee:	2304      	movs	r3, #4
 8002ff0:	e021      	b.n	8003036 <HAL_GPIO_Init+0x26a>
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e01f      	b.n	8003036 <HAL_GPIO_Init+0x26a>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e01d      	b.n	8003036 <HAL_GPIO_Init+0x26a>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e01b      	b.n	8003036 <HAL_GPIO_Init+0x26a>
 8002ffe:	bf00      	nop
 8003000:	58000080 	.word	0x58000080
 8003004:	58024400 	.word	0x58024400
 8003008:	58000400 	.word	0x58000400
 800300c:	58020000 	.word	0x58020000
 8003010:	58020400 	.word	0x58020400
 8003014:	58020800 	.word	0x58020800
 8003018:	58020c00 	.word	0x58020c00
 800301c:	58021000 	.word	0x58021000
 8003020:	58021400 	.word	0x58021400
 8003024:	58021800 	.word	0x58021800
 8003028:	58021c00 	.word	0x58021c00
 800302c:	58022000 	.word	0x58022000
 8003030:	58022400 	.word	0x58022400
 8003034:	2300      	movs	r3, #0
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	f002 0203 	and.w	r2, r2, #3
 800303c:	0092      	lsls	r2, r2, #2
 800303e:	4093      	lsls	r3, r2
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003046:	4938      	ldr	r1, [pc, #224]	@ (8003128 <HAL_GPIO_Init+0x35c>)
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	3302      	adds	r3, #2
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800307a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003082:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80030a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	3301      	adds	r3, #1
 8003108:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	fa22 f303 	lsr.w	r3, r2, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	f47f ae63 	bne.w	8002de0 <HAL_GPIO_Init+0x14>
  }
}
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	3724      	adds	r7, #36	@ 0x24
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	58000400 	.word	0x58000400

0800312c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e08b      	b.n	8003256 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff f8b4 	bl	80022c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2224      	movs	r2, #36	@ 0x24
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0201 	bic.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800317c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800318c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d107      	bne.n	80031a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	e006      	b.n	80031b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80031b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d108      	bne.n	80031ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031ca:	605a      	str	r2, [r3, #4]
 80031cc:	e007      	b.n	80031de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003260 <HAL_I2C_Init+0x134>)
 80031ea:	430b      	orrs	r3, r1
 80031ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69d9      	ldr	r1, [r3, #28]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1a      	ldr	r2, [r3, #32]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	02008000 	.word	0x02008000

08003264 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	461a      	mov	r2, r3
 8003270:	460b      	mov	r3, r1
 8003272:	817b      	strh	r3, [r7, #10]
 8003274:	4613      	mov	r3, r2
 8003276:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b20      	cmp	r3, #32
 8003282:	f040 80fd 	bne.w	8003480 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_I2C_Master_Transmit+0x30>
 8003290:	2302      	movs	r3, #2
 8003292:	e0f6      	b.n	8003482 <HAL_I2C_Master_Transmit+0x21e>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800329c:	f7ff fbd2 	bl	8002a44 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	2319      	movs	r3, #25
 80032a8:	2201      	movs	r2, #1
 80032aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fc7e 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e0e1      	b.n	8003482 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2221      	movs	r2, #33	@ 0x21
 80032c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2210      	movs	r2, #16
 80032ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	893a      	ldrh	r2, [r7, #8]
 80032de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2bff      	cmp	r3, #255	@ 0xff
 80032ee:	d906      	bls.n	80032fe <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	22ff      	movs	r2, #255	@ 0xff
 80032f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80032f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	e007      	b.n	800330e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003308:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800330c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003312:	2b00      	cmp	r3, #0
 8003314:	d024      	beq.n	8003360 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331a:	781a      	ldrb	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334a:	b2db      	uxtb	r3, r3
 800334c:	3301      	adds	r3, #1
 800334e:	b2da      	uxtb	r2, r3
 8003350:	8979      	ldrh	r1, [r7, #10]
 8003352:	4b4e      	ldr	r3, [pc, #312]	@ (800348c <HAL_I2C_Master_Transmit+0x228>)
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 fe79 	bl	8004050 <I2C_TransferConfig>
 800335e:	e066      	b.n	800342e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003364:	b2da      	uxtb	r2, r3
 8003366:	8979      	ldrh	r1, [r7, #10]
 8003368:	4b48      	ldr	r3, [pc, #288]	@ (800348c <HAL_I2C_Master_Transmit+0x228>)
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 fe6e 	bl	8004050 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003374:	e05b      	b.n	800342e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	6a39      	ldr	r1, [r7, #32]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fc71 	bl	8003c62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e07b      	b.n	8003482 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	781a      	ldrb	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d034      	beq.n	800342e <HAL_I2C_Master_Transmit+0x1ca>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d130      	bne.n	800342e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	2200      	movs	r2, #0
 80033d4:	2180      	movs	r1, #128	@ 0x80
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fbea 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e04d      	b.n	8003482 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2bff      	cmp	r3, #255	@ 0xff
 80033ee:	d90e      	bls.n	800340e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	22ff      	movs	r2, #255	@ 0xff
 80033f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	8979      	ldrh	r1, [r7, #10]
 80033fe:	2300      	movs	r3, #0
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 fe22 	bl	8004050 <I2C_TransferConfig>
 800340c:	e00f      	b.n	800342e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341c:	b2da      	uxtb	r2, r3
 800341e:	8979      	ldrh	r1, [r7, #10]
 8003420:	2300      	movs	r3, #0
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fe11 	bl	8004050 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003432:	b29b      	uxth	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d19e      	bne.n	8003376 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	6a39      	ldr	r1, [r7, #32]
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fc57 	bl	8003cf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e01a      	b.n	8003482 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2220      	movs	r2, #32
 8003452:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b0c      	ldr	r3, [pc, #48]	@ (8003490 <HAL_I2C_Master_Transmit+0x22c>)
 8003460:	400b      	ands	r3, r1
 8003462:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e000      	b.n	8003482 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	80002000 	.word	0x80002000
 8003490:	fe00e800 	.word	0xfe00e800

08003494 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	461a      	mov	r2, r3
 80034a0:	460b      	mov	r3, r1
 80034a2:	817b      	strh	r3, [r7, #10]
 80034a4:	4613      	mov	r3, r2
 80034a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	f040 80db 	bne.w	800366c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_I2C_Master_Receive+0x30>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e0d4      	b.n	800366e <HAL_I2C_Master_Receive+0x1da>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034cc:	f7ff faba 	bl	8002a44 <HAL_GetTick>
 80034d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2319      	movs	r3, #25
 80034d8:	2201      	movs	r2, #1
 80034da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 fb66 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e0bf      	b.n	800366e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2222      	movs	r2, #34	@ 0x22
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2210      	movs	r2, #16
 80034fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	893a      	ldrh	r2, [r7, #8]
 800350e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	2bff      	cmp	r3, #255	@ 0xff
 800351e:	d90e      	bls.n	800353e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	22ff      	movs	r2, #255	@ 0xff
 8003524:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352a:	b2da      	uxtb	r2, r3
 800352c:	8979      	ldrh	r1, [r7, #10]
 800352e:	4b52      	ldr	r3, [pc, #328]	@ (8003678 <HAL_I2C_Master_Receive+0x1e4>)
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 fd8a 	bl	8004050 <I2C_TransferConfig>
 800353c:	e06d      	b.n	800361a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354c:	b2da      	uxtb	r2, r3
 800354e:	8979      	ldrh	r1, [r7, #10]
 8003550:	4b49      	ldr	r3, [pc, #292]	@ (8003678 <HAL_I2C_Master_Receive+0x1e4>)
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 fd79 	bl	8004050 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800355e:	e05c      	b.n	800361a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	6a39      	ldr	r1, [r7, #32]
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fc07 	bl	8003d78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e07c      	b.n	800366e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d034      	beq.n	800361a <HAL_I2C_Master_Receive+0x186>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d130      	bne.n	800361a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	2200      	movs	r2, #0
 80035c0:	2180      	movs	r1, #128	@ 0x80
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 faf4 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e04d      	b.n	800366e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2bff      	cmp	r3, #255	@ 0xff
 80035da:	d90e      	bls.n	80035fa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	22ff      	movs	r2, #255	@ 0xff
 80035e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	8979      	ldrh	r1, [r7, #10]
 80035ea:	2300      	movs	r3, #0
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 fd2c 	bl	8004050 <I2C_TransferConfig>
 80035f8:	e00f      	b.n	800361a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003608:	b2da      	uxtb	r2, r3
 800360a:	8979      	ldrh	r1, [r7, #10]
 800360c:	2300      	movs	r3, #0
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fd1b 	bl	8004050 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d19d      	bne.n	8003560 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	6a39      	ldr	r1, [r7, #32]
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 fb61 	bl	8003cf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e01a      	b.n	800366e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2220      	movs	r2, #32
 800363e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6859      	ldr	r1, [r3, #4]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b0c      	ldr	r3, [pc, #48]	@ (800367c <HAL_I2C_Master_Receive+0x1e8>)
 800364c:	400b      	ands	r3, r1
 800364e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	e000      	b.n	800366e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	80002400 	.word	0x80002400
 800367c:	fe00e800 	.word	0xfe00e800

08003680 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af02      	add	r7, sp, #8
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	4608      	mov	r0, r1
 800368a:	4611      	mov	r1, r2
 800368c:	461a      	mov	r2, r3
 800368e:	4603      	mov	r3, r0
 8003690:	817b      	strh	r3, [r7, #10]
 8003692:	460b      	mov	r3, r1
 8003694:	813b      	strh	r3, [r7, #8]
 8003696:	4613      	mov	r3, r2
 8003698:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	f040 80fd 	bne.w	80038a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_I2C_Mem_Read+0x34>
 80036ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d105      	bne.n	80036c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0f1      	b.n	80038a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_I2C_Mem_Read+0x4e>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e0ea      	b.n	80038a4 <HAL_I2C_Mem_Read+0x224>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036d6:	f7ff f9b5 	bl	8002a44 <HAL_GetTick>
 80036da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	2319      	movs	r3, #25
 80036e2:	2201      	movs	r2, #1
 80036e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 fa61 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0d5      	b.n	80038a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2222      	movs	r2, #34	@ 0x22
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2240      	movs	r2, #64	@ 0x40
 8003704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a3a      	ldr	r2, [r7, #32]
 8003712:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003718:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003720:	88f8      	ldrh	r0, [r7, #6]
 8003722:	893a      	ldrh	r2, [r7, #8]
 8003724:	8979      	ldrh	r1, [r7, #10]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	4603      	mov	r3, r0
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f9c5 	bl	8003ac0 <I2C_RequestMemoryRead>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0ad      	b.n	80038a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	2bff      	cmp	r3, #255	@ 0xff
 8003750:	d90e      	bls.n	8003770 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	22ff      	movs	r2, #255	@ 0xff
 8003756:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375c:	b2da      	uxtb	r2, r3
 800375e:	8979      	ldrh	r1, [r7, #10]
 8003760:	4b52      	ldr	r3, [pc, #328]	@ (80038ac <HAL_I2C_Mem_Read+0x22c>)
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fc71 	bl	8004050 <I2C_TransferConfig>
 800376e:	e00f      	b.n	8003790 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377e:	b2da      	uxtb	r2, r3
 8003780:	8979      	ldrh	r1, [r7, #10]
 8003782:	4b4a      	ldr	r3, [pc, #296]	@ (80038ac <HAL_I2C_Mem_Read+0x22c>)
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 fc60 	bl	8004050 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003796:	2200      	movs	r2, #0
 8003798:	2104      	movs	r1, #4
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fa08 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e07c      	b.n	80038a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d034      	beq.n	8003850 <HAL_I2C_Mem_Read+0x1d0>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d130      	bne.n	8003850 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f4:	2200      	movs	r2, #0
 80037f6:	2180      	movs	r1, #128	@ 0x80
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f9d9 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e04d      	b.n	80038a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	2bff      	cmp	r3, #255	@ 0xff
 8003810:	d90e      	bls.n	8003830 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	22ff      	movs	r2, #255	@ 0xff
 8003816:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381c:	b2da      	uxtb	r2, r3
 800381e:	8979      	ldrh	r1, [r7, #10]
 8003820:	2300      	movs	r3, #0
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fc11 	bl	8004050 <I2C_TransferConfig>
 800382e:	e00f      	b.n	8003850 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383e:	b2da      	uxtb	r2, r3
 8003840:	8979      	ldrh	r1, [r7, #10]
 8003842:	2300      	movs	r3, #0
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fc00 	bl	8004050 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d19a      	bne.n	8003790 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fa46 	bl	8003cf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e01a      	b.n	80038a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2220      	movs	r2, #32
 8003874:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6859      	ldr	r1, [r3, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b0b      	ldr	r3, [pc, #44]	@ (80038b0 <HAL_I2C_Mem_Read+0x230>)
 8003882:	400b      	ands	r3, r1
 8003884:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e000      	b.n	80038a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80038a2:	2302      	movs	r3, #2
  }
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	80002400 	.word	0x80002400
 80038b0:	fe00e800 	.word	0xfe00e800

080038b4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	@ 0x28
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	460b      	mov	r3, r1
 80038c2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	f040 80e9 	bne.w	8003aac <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038e8:	d101      	bne.n	80038ee <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
 80038ec:	e0df      	b.n	8003aae <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_I2C_IsDeviceReady+0x48>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e0d8      	b.n	8003aae <HAL_I2C_IsDeviceReady+0x1fa>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2224      	movs	r2, #36	@ 0x24
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d105      	bne.n	8003926 <HAL_I2C_IsDeviceReady+0x72>
 800391a:	897b      	ldrh	r3, [r7, #10]
 800391c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003920:	4b65      	ldr	r3, [pc, #404]	@ (8003ab8 <HAL_I2C_IsDeviceReady+0x204>)
 8003922:	4313      	orrs	r3, r2
 8003924:	e004      	b.n	8003930 <HAL_I2C_IsDeviceReady+0x7c>
 8003926:	897b      	ldrh	r3, [r7, #10]
 8003928:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800392c:	4b63      	ldr	r3, [pc, #396]	@ (8003abc <HAL_I2C_IsDeviceReady+0x208>)
 800392e:	4313      	orrs	r3, r2
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003936:	f7ff f885 	bl	8002a44 <HAL_GetTick>
 800393a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b20      	cmp	r3, #32
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b10      	cmp	r3, #16
 800395e:	bf0c      	ite	eq
 8003960:	2301      	moveq	r3, #1
 8003962:	2300      	movne	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003968:	e034      	b.n	80039d4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003970:	d01a      	beq.n	80039a8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7ff f867 	bl	8002a44 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <HAL_I2C_IsDeviceReady+0xd4>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10f      	bne.n	80039a8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003994:	f043 0220 	orr.w	r2, r3, #32
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e082      	b.n	8003aae <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	bf0c      	ite	eq
 80039b6:	2301      	moveq	r3, #1
 80039b8:	2300      	movne	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b10      	cmp	r3, #16
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80039d4:	7fbb      	ldrb	r3, [r7, #30]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d102      	bne.n	80039e0 <HAL_I2C_IsDeviceReady+0x12c>
 80039da:	7f7b      	ldrb	r3, [r7, #29]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0c4      	beq.n	800396a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d027      	beq.n	8003a3e <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2200      	movs	r2, #0
 80039f6:	2120      	movs	r1, #32
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f8d9 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00e      	beq.n	8003a22 <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d107      	bne.n	8003a1c <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2220      	movs	r2, #32
 8003a12:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	645a      	str	r2, [r3, #68]	@ 0x44
 8003a1a:	e026      	b.n	8003a6a <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	77fb      	strb	r3, [r7, #31]
 8003a20:	e023      	b.n	8003a6a <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2220      	movs	r2, #32
 8003a28:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e037      	b.n	8003aae <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2210      	movs	r2, #16
 8003a44:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2120      	movs	r1, #32
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f8ad 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	77fb      	strb	r3, [r7, #31]
 8003a60:	e003      	b.n	8003a6a <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2220      	movs	r2, #32
 8003a68:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d904      	bls.n	8003a82 <HAL_I2C_IsDeviceReady+0x1ce>
 8003a78:	7ffb      	ldrb	r3, [r7, #31]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	f63f af43 	bhi.w	8003912 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a98:	f043 0220 	orr.w	r2, r3, #32
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8003aac:	2302      	movs	r3, #2
  }
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	02002000 	.word	0x02002000
 8003abc:	02002800 	.word	0x02002800

08003ac0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	4608      	mov	r0, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	461a      	mov	r2, r3
 8003ace:	4603      	mov	r3, r0
 8003ad0:	817b      	strh	r3, [r7, #10]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	813b      	strh	r3, [r7, #8]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	8979      	ldrh	r1, [r7, #10]
 8003ae0:	4b20      	ldr	r3, [pc, #128]	@ (8003b64 <I2C_RequestMemoryRead+0xa4>)
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 fab2 	bl	8004050 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	69b9      	ldr	r1, [r7, #24]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f8b6 	bl	8003c62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e02c      	b.n	8003b5a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d105      	bne.n	8003b12 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b06:	893b      	ldrh	r3, [r7, #8]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b10:	e015      	b.n	8003b3e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b12:	893b      	ldrh	r3, [r7, #8]
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	69b9      	ldr	r1, [r7, #24]
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f89c 	bl	8003c62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e012      	b.n	8003b5a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b34:	893b      	ldrh	r3, [r7, #8]
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2200      	movs	r2, #0
 8003b46:	2140      	movs	r1, #64	@ 0x40
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f831 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	80002000 	.word	0x80002000

08003b68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d103      	bne.n	8003b86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2200      	movs	r2, #0
 8003b84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d007      	beq.n	8003ba4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	619a      	str	r2, [r3, #24]
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bc0:	e03b      	b.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	6839      	ldr	r1, [r7, #0]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f962 	bl	8003e90 <I2C_IsErrorOccurred>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e041      	b.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bdc:	d02d      	beq.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bde:	f7fe ff31 	bl	8002a44 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d122      	bne.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d113      	bne.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c16:	f043 0220 	orr.w	r2, r3, #32
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e00f      	b.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699a      	ldr	r2, [r3, #24]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d0b4      	beq.n	8003bc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c6e:	e033      	b.n	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f90b 	bl	8003e90 <I2C_IsErrorOccurred>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e031      	b.n	8003ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c8a:	d025      	beq.n	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8c:	f7fe feda 	bl	8002a44 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d302      	bcc.n	8003ca2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d11a      	bne.n	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d013      	beq.n	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb4:	f043 0220 	orr.w	r2, r3, #32
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e007      	b.n	8003ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d1c4      	bne.n	8003c70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cfc:	e02f      	b.n	8003d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f8c4 	bl	8003e90 <I2C_IsErrorOccurred>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e02d      	b.n	8003d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d12:	f7fe fe97 	bl	8002a44 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d302      	bcc.n	8003d28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d11a      	bne.n	8003d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d013      	beq.n	8003d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3a:	f043 0220 	orr.w	r2, r3, #32
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e007      	b.n	8003d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d1c8      	bne.n	8003cfe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003d88:	e071      	b.n	8003e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f87e 	bl	8003e90 <I2C_IsErrorOccurred>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d13b      	bne.n	8003e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d138      	bne.n	8003e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d105      	bne.n	8003dcc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f003 0310 	and.w	r3, r3, #16
 8003dd6:	2b10      	cmp	r3, #16
 8003dd8:	d121      	bne.n	8003e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2210      	movs	r2, #16
 8003de0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2204      	movs	r2, #4
 8003de6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2220      	movs	r2, #32
 8003dee:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6859      	ldr	r1, [r3, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4b24      	ldr	r3, [pc, #144]	@ (8003e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003dfc:	400b      	ands	r3, r1
 8003dfe:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	75fb      	strb	r3, [r7, #23]
 8003e1c:	e002      	b.n	8003e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003e24:	f7fe fe0e 	bl	8002a44 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d302      	bcc.n	8003e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d119      	bne.n	8003e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d116      	bne.n	8003e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d00f      	beq.n	8003e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e52:	f043 0220 	orr.w	r2, r3, #32
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d002      	beq.n	8003e82 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d083      	beq.n	8003d8a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	fe00e800 	.word	0xfe00e800

08003e90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	@ 0x28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d068      	beq.n	8003f8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2210      	movs	r2, #16
 8003ec2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ec4:	e049      	b.n	8003f5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ecc:	d045      	beq.n	8003f5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ece:	f7fe fdb9 	bl	8002a44 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d302      	bcc.n	8003ee4 <I2C_IsErrorOccurred+0x54>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d13a      	bne.n	8003f5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ef6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f06:	d121      	bne.n	8003f4c <I2C_IsErrorOccurred+0xbc>
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f0e:	d01d      	beq.n	8003f4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f10:	7cfb      	ldrb	r3, [r7, #19]
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d01a      	beq.n	8003f4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f26:	f7fe fd8d 	bl	8002a44 <HAL_GetTick>
 8003f2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f2c:	e00e      	b.n	8003f4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f2e:	f7fe fd89 	bl	8002a44 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b19      	cmp	r3, #25
 8003f3a:	d907      	bls.n	8003f4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	f043 0320 	orr.w	r3, r3, #32
 8003f42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003f4a:	e006      	b.n	8003f5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d1e9      	bne.n	8003f2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d003      	beq.n	8003f70 <I2C_IsErrorOccurred+0xe0>
 8003f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0aa      	beq.n	8003ec6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d103      	bne.n	8003f80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00b      	beq.n	8003fb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	f043 0308 	orr.w	r3, r3, #8
 8003fc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	f043 0302 	orr.w	r3, r3, #2
 8003fea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ff4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01c      	beq.n	800403e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f7ff fdaf 	bl	8003b68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	4b0d      	ldr	r3, [pc, #52]	@ (800404c <I2C_IsErrorOccurred+0x1bc>)
 8004016:	400b      	ands	r3, r1
 8004018:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800403e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004042:	4618      	mov	r0, r3
 8004044:	3728      	adds	r7, #40	@ 0x28
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	fe00e800 	.word	0xfe00e800

08004050 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	607b      	str	r3, [r7, #4]
 800405a:	460b      	mov	r3, r1
 800405c:	817b      	strh	r3, [r7, #10]
 800405e:	4613      	mov	r3, r2
 8004060:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004062:	897b      	ldrh	r3, [r7, #10]
 8004064:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004068:	7a7b      	ldrb	r3, [r7, #9]
 800406a:	041b      	lsls	r3, r3, #16
 800406c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004070:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	4313      	orrs	r3, r2
 800407a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800407e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	0d5b      	lsrs	r3, r3, #21
 800408a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800408e:	4b08      	ldr	r3, [pc, #32]	@ (80040b0 <I2C_TransferConfig+0x60>)
 8004090:	430b      	orrs	r3, r1
 8004092:	43db      	mvns	r3, r3
 8004094:	ea02 0103 	and.w	r1, r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040a2:	bf00      	nop
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	03ff63ff 	.word	0x03ff63ff

080040b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b20      	cmp	r3, #32
 80040c8:	d138      	bne.n	800413c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e032      	b.n	800413e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2224      	movs	r2, #36	@ 0x24
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0201 	bic.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004106:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6819      	ldr	r1, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	e000      	b.n	800413e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800413c:	2302      	movs	r3, #2
  }
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800414a:	b480      	push	{r7}
 800414c:	b085      	sub	sp, #20
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b20      	cmp	r3, #32
 800415e:	d139      	bne.n	80041d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800416a:	2302      	movs	r3, #2
 800416c:	e033      	b.n	80041d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2224      	movs	r2, #36	@ 0x24
 800417a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800419c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e000      	b.n	80041d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
  }
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
	...

080041e4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80041ec:	4b19      	ldr	r3, [pc, #100]	@ (8004254 <HAL_PWREx_ConfigSupply+0x70>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d00a      	beq.n	800420e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80041f8:	4b16      	ldr	r3, [pc, #88]	@ (8004254 <HAL_PWREx_ConfigSupply+0x70>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	d001      	beq.n	800420a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e01f      	b.n	800424a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	e01d      	b.n	800424a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800420e:	4b11      	ldr	r3, [pc, #68]	@ (8004254 <HAL_PWREx_ConfigSupply+0x70>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f023 0207 	bic.w	r2, r3, #7
 8004216:	490f      	ldr	r1, [pc, #60]	@ (8004254 <HAL_PWREx_ConfigSupply+0x70>)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4313      	orrs	r3, r2
 800421c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800421e:	f7fe fc11 	bl	8002a44 <HAL_GetTick>
 8004222:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004224:	e009      	b.n	800423a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004226:	f7fe fc0d 	bl	8002a44 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004234:	d901      	bls.n	800423a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e007      	b.n	800424a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800423a:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <HAL_PWREx_ConfigSupply+0x70>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004246:	d1ee      	bne.n	8004226 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	58024800 	.word	0x58024800

08004258 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08c      	sub	sp, #48	@ 0x30
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	f000 bc48 	b.w	8004afc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8088 	beq.w	800438a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800427a:	4b99      	ldr	r3, [pc, #612]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004282:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004284:	4b96      	ldr	r3, [pc, #600]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004288:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800428a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428c:	2b10      	cmp	r3, #16
 800428e:	d007      	beq.n	80042a0 <HAL_RCC_OscConfig+0x48>
 8004290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004292:	2b18      	cmp	r3, #24
 8004294:	d111      	bne.n	80042ba <HAL_RCC_OscConfig+0x62>
 8004296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d10c      	bne.n	80042ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a0:	4b8f      	ldr	r3, [pc, #572]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d06d      	beq.n	8004388 <HAL_RCC_OscConfig+0x130>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d169      	bne.n	8004388 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f000 bc21 	b.w	8004afc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c2:	d106      	bne.n	80042d2 <HAL_RCC_OscConfig+0x7a>
 80042c4:	4b86      	ldr	r3, [pc, #536]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a85      	ldr	r2, [pc, #532]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 80042ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	e02e      	b.n	8004330 <HAL_RCC_OscConfig+0xd8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCC_OscConfig+0x9c>
 80042da:	4b81      	ldr	r3, [pc, #516]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a80      	ldr	r2, [pc, #512]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 80042e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b7e      	ldr	r3, [pc, #504]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a7d      	ldr	r2, [pc, #500]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 80042ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e01d      	b.n	8004330 <HAL_RCC_OscConfig+0xd8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042fc:	d10c      	bne.n	8004318 <HAL_RCC_OscConfig+0xc0>
 80042fe:	4b78      	ldr	r3, [pc, #480]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a77      	ldr	r2, [pc, #476]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004304:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	4b75      	ldr	r3, [pc, #468]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a74      	ldr	r2, [pc, #464]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e00b      	b.n	8004330 <HAL_RCC_OscConfig+0xd8>
 8004318:	4b71      	ldr	r3, [pc, #452]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a70      	ldr	r2, [pc, #448]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 800431e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	4b6e      	ldr	r3, [pc, #440]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a6d      	ldr	r2, [pc, #436]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 800432a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800432e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d013      	beq.n	8004360 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7fe fb84 	bl	8002a44 <HAL_GetTick>
 800433c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004340:	f7fe fb80 	bl	8002a44 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	@ 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e3d4      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004352:	4b63      	ldr	r3, [pc, #396]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0xe8>
 800435e:	e014      	b.n	800438a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fe fb70 	bl	8002a44 <HAL_GetTick>
 8004364:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004368:	f7fe fb6c 	bl	8002a44 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	@ 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e3c0      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800437a:	4b59      	ldr	r3, [pc, #356]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x110>
 8004386:	e000      	b.n	800438a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80ca 	beq.w	800452c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004398:	4b51      	ldr	r3, [pc, #324]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043a2:	4b4f      	ldr	r3, [pc, #316]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 80043a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_RCC_OscConfig+0x166>
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	2b18      	cmp	r3, #24
 80043b2:	d156      	bne.n	8004462 <HAL_RCC_OscConfig+0x20a>
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d151      	bne.n	8004462 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043be:	4b48      	ldr	r3, [pc, #288]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_RCC_OscConfig+0x17e>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e392      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043d6:	4b42      	ldr	r3, [pc, #264]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 0219 	bic.w	r2, r3, #25
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	493f      	ldr	r1, [pc, #252]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fe fb2c 	bl	8002a44 <HAL_GetTick>
 80043ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f0:	f7fe fb28 	bl	8002a44 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e37c      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004402:	4b37      	ldr	r3, [pc, #220]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440e:	f7fe fb49 	bl	8002aa4 <HAL_GetREVID>
 8004412:	4603      	mov	r3, r0
 8004414:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004418:	4293      	cmp	r3, r2
 800441a:	d817      	bhi.n	800444c <HAL_RCC_OscConfig+0x1f4>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	2b40      	cmp	r3, #64	@ 0x40
 8004422:	d108      	bne.n	8004436 <HAL_RCC_OscConfig+0x1de>
 8004424:	4b2e      	ldr	r3, [pc, #184]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800442c:	4a2c      	ldr	r2, [pc, #176]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 800442e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004432:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004434:	e07a      	b.n	800452c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004436:	4b2a      	ldr	r3, [pc, #168]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	031b      	lsls	r3, r3, #12
 8004444:	4926      	ldr	r1, [pc, #152]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004446:	4313      	orrs	r3, r2
 8004448:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800444a:	e06f      	b.n	800452c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444c:	4b24      	ldr	r3, [pc, #144]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	061b      	lsls	r3, r3, #24
 800445a:	4921      	ldr	r1, [pc, #132]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 800445c:	4313      	orrs	r3, r2
 800445e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004460:	e064      	b.n	800452c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d047      	beq.n	80044fa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800446a:	4b1d      	ldr	r3, [pc, #116]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 0219 	bic.w	r2, r3, #25
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	491a      	ldr	r1, [pc, #104]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004478:	4313      	orrs	r3, r2
 800447a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fe fae2 	bl	8002a44 <HAL_GetTick>
 8004480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004484:	f7fe fade 	bl	8002a44 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e332      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004496:	4b12      	ldr	r3, [pc, #72]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a2:	f7fe faff 	bl	8002aa4 <HAL_GetREVID>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d819      	bhi.n	80044e4 <HAL_RCC_OscConfig+0x28c>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b40      	cmp	r3, #64	@ 0x40
 80044b6:	d108      	bne.n	80044ca <HAL_RCC_OscConfig+0x272>
 80044b8:	4b09      	ldr	r3, [pc, #36]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80044c0:	4a07      	ldr	r2, [pc, #28]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 80044c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044c6:	6053      	str	r3, [r2, #4]
 80044c8:	e030      	b.n	800452c <HAL_RCC_OscConfig+0x2d4>
 80044ca:	4b05      	ldr	r3, [pc, #20]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	031b      	lsls	r3, r3, #12
 80044d8:	4901      	ldr	r1, [pc, #4]	@ (80044e0 <HAL_RCC_OscConfig+0x288>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	604b      	str	r3, [r1, #4]
 80044de:	e025      	b.n	800452c <HAL_RCC_OscConfig+0x2d4>
 80044e0:	58024400 	.word	0x58024400
 80044e4:	4b9a      	ldr	r3, [pc, #616]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	061b      	lsls	r3, r3, #24
 80044f2:	4997      	ldr	r1, [pc, #604]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	604b      	str	r3, [r1, #4]
 80044f8:	e018      	b.n	800452c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044fa:	4b95      	ldr	r3, [pc, #596]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a94      	ldr	r2, [pc, #592]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004506:	f7fe fa9d 	bl	8002a44 <HAL_GetTick>
 800450a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800450e:	f7fe fa99 	bl	8002a44 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e2ed      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004520:	4b8b      	ldr	r3, [pc, #556]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f0      	bne.n	800450e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80a9 	beq.w	800468c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800453a:	4b85      	ldr	r3, [pc, #532]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004542:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004544:	4b82      	ldr	r3, [pc, #520]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 8004546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004548:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2b08      	cmp	r3, #8
 800454e:	d007      	beq.n	8004560 <HAL_RCC_OscConfig+0x308>
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b18      	cmp	r3, #24
 8004554:	d13a      	bne.n	80045cc <HAL_RCC_OscConfig+0x374>
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	2b01      	cmp	r3, #1
 800455e:	d135      	bne.n	80045cc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004560:	4b7b      	ldr	r3, [pc, #492]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <HAL_RCC_OscConfig+0x320>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	2b80      	cmp	r3, #128	@ 0x80
 8004572:	d001      	beq.n	8004578 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e2c1      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004578:	f7fe fa94 	bl	8002aa4 <HAL_GetREVID>
 800457c:	4603      	mov	r3, r0
 800457e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004582:	4293      	cmp	r3, r2
 8004584:	d817      	bhi.n	80045b6 <HAL_RCC_OscConfig+0x35e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	2b20      	cmp	r3, #32
 800458c:	d108      	bne.n	80045a0 <HAL_RCC_OscConfig+0x348>
 800458e:	4b70      	ldr	r3, [pc, #448]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004596:	4a6e      	ldr	r2, [pc, #440]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 8004598:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800459c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800459e:	e075      	b.n	800468c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	069b      	lsls	r3, r3, #26
 80045ae:	4968      	ldr	r1, [pc, #416]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045b4:	e06a      	b.n	800468c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045b6:	4b66      	ldr	r3, [pc, #408]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	061b      	lsls	r3, r3, #24
 80045c4:	4962      	ldr	r1, [pc, #392]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045ca:	e05f      	b.n	800468c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d042      	beq.n	800465a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80045d4:	4b5e      	ldr	r3, [pc, #376]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a5d      	ldr	r2, [pc, #372]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 80045da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fe fa30 	bl	8002a44 <HAL_GetTick>
 80045e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80045e8:	f7fe fa2c 	bl	8002a44 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e280      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045fa:	4b55      	ldr	r3, [pc, #340]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004606:	f7fe fa4d 	bl	8002aa4 <HAL_GetREVID>
 800460a:	4603      	mov	r3, r0
 800460c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004610:	4293      	cmp	r3, r2
 8004612:	d817      	bhi.n	8004644 <HAL_RCC_OscConfig+0x3ec>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	2b20      	cmp	r3, #32
 800461a:	d108      	bne.n	800462e <HAL_RCC_OscConfig+0x3d6>
 800461c:	4b4c      	ldr	r3, [pc, #304]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004624:	4a4a      	ldr	r2, [pc, #296]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 8004626:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800462a:	6053      	str	r3, [r2, #4]
 800462c:	e02e      	b.n	800468c <HAL_RCC_OscConfig+0x434>
 800462e:	4b48      	ldr	r3, [pc, #288]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	069b      	lsls	r3, r3, #26
 800463c:	4944      	ldr	r1, [pc, #272]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 800463e:	4313      	orrs	r3, r2
 8004640:	604b      	str	r3, [r1, #4]
 8004642:	e023      	b.n	800468c <HAL_RCC_OscConfig+0x434>
 8004644:	4b42      	ldr	r3, [pc, #264]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	061b      	lsls	r3, r3, #24
 8004652:	493f      	ldr	r1, [pc, #252]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 8004654:	4313      	orrs	r3, r2
 8004656:	60cb      	str	r3, [r1, #12]
 8004658:	e018      	b.n	800468c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800465a:	4b3d      	ldr	r3, [pc, #244]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a3c      	ldr	r2, [pc, #240]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 8004660:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004666:	f7fe f9ed 	bl	8002a44 <HAL_GetTick>
 800466a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800466e:	f7fe f9e9 	bl	8002a44 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e23d      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004680:	4b33      	ldr	r3, [pc, #204]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d036      	beq.n	8004706 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d019      	beq.n	80046d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 80046a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ac:	f7fe f9ca 	bl	8002a44 <HAL_GetTick>
 80046b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b4:	f7fe f9c6 	bl	8002a44 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e21a      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046c6:	4b22      	ldr	r3, [pc, #136]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 80046c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0x45c>
 80046d2:	e018      	b.n	8004706 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 80046d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 80046da:	f023 0301 	bic.w	r3, r3, #1
 80046de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e0:	f7fe f9b0 	bl	8002a44 <HAL_GetTick>
 80046e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e8:	f7fe f9ac 	bl	8002a44 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e200      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046fa:	4b15      	ldr	r3, [pc, #84]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 80046fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d039      	beq.n	8004786 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d01c      	beq.n	8004754 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800471a:	4b0d      	ldr	r3, [pc, #52]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a0c      	ldr	r2, [pc, #48]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 8004720:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004724:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004726:	f7fe f98d 	bl	8002a44 <HAL_GetTick>
 800472a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800472e:	f7fe f989 	bl	8002a44 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e1dd      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004740:	4b03      	ldr	r3, [pc, #12]	@ (8004750 <HAL_RCC_OscConfig+0x4f8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0f0      	beq.n	800472e <HAL_RCC_OscConfig+0x4d6>
 800474c:	e01b      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
 800474e:	bf00      	nop
 8004750:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004754:	4b9b      	ldr	r3, [pc, #620]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a9a      	ldr	r2, [pc, #616]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 800475a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800475e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004760:	f7fe f970 	bl	8002a44 <HAL_GetTick>
 8004764:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004768:	f7fe f96c 	bl	8002a44 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e1c0      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800477a:	4b92      	ldr	r3, [pc, #584]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f0      	bne.n	8004768 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 8081 	beq.w	8004896 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004794:	4b8c      	ldr	r3, [pc, #560]	@ (80049c8 <HAL_RCC_OscConfig+0x770>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a8b      	ldr	r2, [pc, #556]	@ (80049c8 <HAL_RCC_OscConfig+0x770>)
 800479a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800479e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047a0:	f7fe f950 	bl	8002a44 <HAL_GetTick>
 80047a4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a8:	f7fe f94c 	bl	8002a44 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	@ 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e1a0      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ba:	4b83      	ldr	r3, [pc, #524]	@ (80049c8 <HAL_RCC_OscConfig+0x770>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d106      	bne.n	80047dc <HAL_RCC_OscConfig+0x584>
 80047ce:	4b7d      	ldr	r3, [pc, #500]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 80047d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d2:	4a7c      	ldr	r2, [pc, #496]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047da:	e02d      	b.n	8004838 <HAL_RCC_OscConfig+0x5e0>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10c      	bne.n	80047fe <HAL_RCC_OscConfig+0x5a6>
 80047e4:	4b77      	ldr	r3, [pc, #476]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 80047e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e8:	4a76      	ldr	r2, [pc, #472]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f0:	4b74      	ldr	r3, [pc, #464]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f4:	4a73      	ldr	r2, [pc, #460]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 80047f6:	f023 0304 	bic.w	r3, r3, #4
 80047fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80047fc:	e01c      	b.n	8004838 <HAL_RCC_OscConfig+0x5e0>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b05      	cmp	r3, #5
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0x5c8>
 8004806:	4b6f      	ldr	r3, [pc, #444]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480a:	4a6e      	ldr	r2, [pc, #440]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 800480c:	f043 0304 	orr.w	r3, r3, #4
 8004810:	6713      	str	r3, [r2, #112]	@ 0x70
 8004812:	4b6c      	ldr	r3, [pc, #432]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004816:	4a6b      	ldr	r2, [pc, #428]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	6713      	str	r3, [r2, #112]	@ 0x70
 800481e:	e00b      	b.n	8004838 <HAL_RCC_OscConfig+0x5e0>
 8004820:	4b68      	ldr	r3, [pc, #416]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004824:	4a67      	ldr	r2, [pc, #412]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	6713      	str	r3, [r2, #112]	@ 0x70
 800482c:	4b65      	ldr	r3, [pc, #404]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004830:	4a64      	ldr	r2, [pc, #400]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004832:	f023 0304 	bic.w	r3, r3, #4
 8004836:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d015      	beq.n	800486c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fe f900 	bl	8002a44 <HAL_GetTick>
 8004844:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004846:	e00a      	b.n	800485e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004848:	f7fe f8fc 	bl	8002a44 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e14e      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800485e:	4b59      	ldr	r3, [pc, #356]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ee      	beq.n	8004848 <HAL_RCC_OscConfig+0x5f0>
 800486a:	e014      	b.n	8004896 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486c:	f7fe f8ea 	bl	8002a44 <HAL_GetTick>
 8004870:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004872:	e00a      	b.n	800488a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004874:	f7fe f8e6 	bl	8002a44 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e138      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800488a:	4b4e      	ldr	r3, [pc, #312]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ee      	bne.n	8004874 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 812d 	beq.w	8004afa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80048a0:	4b48      	ldr	r3, [pc, #288]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048a8:	2b18      	cmp	r3, #24
 80048aa:	f000 80bd 	beq.w	8004a28 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	f040 809e 	bne.w	80049f4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b8:	4b42      	ldr	r3, [pc, #264]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a41      	ldr	r2, [pc, #260]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 80048be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fe f8be 	bl	8002a44 <HAL_GetTick>
 80048c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048cc:	f7fe f8ba 	bl	8002a44 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e10e      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048de:	4b39      	ldr	r3, [pc, #228]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ea:	4b36      	ldr	r3, [pc, #216]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 80048ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048ee:	4b37      	ldr	r3, [pc, #220]	@ (80049cc <HAL_RCC_OscConfig+0x774>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80048fa:	0112      	lsls	r2, r2, #4
 80048fc:	430a      	orrs	r2, r1
 80048fe:	4931      	ldr	r1, [pc, #196]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004900:	4313      	orrs	r3, r2
 8004902:	628b      	str	r3, [r1, #40]	@ 0x28
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004908:	3b01      	subs	r3, #1
 800490a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004912:	3b01      	subs	r3, #1
 8004914:	025b      	lsls	r3, r3, #9
 8004916:	b29b      	uxth	r3, r3
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491e:	3b01      	subs	r3, #1
 8004920:	041b      	lsls	r3, r3, #16
 8004922:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492c:	3b01      	subs	r3, #1
 800492e:	061b      	lsls	r3, r3, #24
 8004930:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004934:	4923      	ldr	r1, [pc, #140]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004936:	4313      	orrs	r3, r2
 8004938:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800493a:	4b22      	ldr	r3, [pc, #136]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 800493c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493e:	4a21      	ldr	r2, [pc, #132]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004940:	f023 0301 	bic.w	r3, r3, #1
 8004944:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004946:	4b1f      	ldr	r3, [pc, #124]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800494a:	4b21      	ldr	r3, [pc, #132]	@ (80049d0 <HAL_RCC_OscConfig+0x778>)
 800494c:	4013      	ands	r3, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004952:	00d2      	lsls	r2, r2, #3
 8004954:	491b      	ldr	r1, [pc, #108]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004956:	4313      	orrs	r3, r2
 8004958:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800495a:	4b1a      	ldr	r3, [pc, #104]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 800495c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495e:	f023 020c 	bic.w	r2, r3, #12
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004966:	4917      	ldr	r1, [pc, #92]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004968:	4313      	orrs	r3, r2
 800496a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800496c:	4b15      	ldr	r3, [pc, #84]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 800496e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004970:	f023 0202 	bic.w	r2, r3, #2
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004978:	4912      	ldr	r1, [pc, #72]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 800497a:	4313      	orrs	r3, r2
 800497c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800497e:	4b11      	ldr	r3, [pc, #68]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004982:	4a10      	ldr	r2, [pc, #64]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004988:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800498a:	4b0e      	ldr	r3, [pc, #56]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 800498c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498e:	4a0d      	ldr	r2, [pc, #52]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004996:	4b0b      	ldr	r3, [pc, #44]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 8004998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499a:	4a0a      	ldr	r2, [pc, #40]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 800499c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80049a2:	4b08      	ldr	r3, [pc, #32]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 80049a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a6:	4a07      	ldr	r2, [pc, #28]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ae:	4b05      	ldr	r3, [pc, #20]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a04      	ldr	r2, [pc, #16]	@ (80049c4 <HAL_RCC_OscConfig+0x76c>)
 80049b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ba:	f7fe f843 	bl	8002a44 <HAL_GetTick>
 80049be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049c0:	e011      	b.n	80049e6 <HAL_RCC_OscConfig+0x78e>
 80049c2:	bf00      	nop
 80049c4:	58024400 	.word	0x58024400
 80049c8:	58024800 	.word	0x58024800
 80049cc:	fffffc0c 	.word	0xfffffc0c
 80049d0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d4:	f7fe f836 	bl	8002a44 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e08a      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049e6:	4b47      	ldr	r3, [pc, #284]	@ (8004b04 <HAL_RCC_OscConfig+0x8ac>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f0      	beq.n	80049d4 <HAL_RCC_OscConfig+0x77c>
 80049f2:	e082      	b.n	8004afa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f4:	4b43      	ldr	r3, [pc, #268]	@ (8004b04 <HAL_RCC_OscConfig+0x8ac>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a42      	ldr	r2, [pc, #264]	@ (8004b04 <HAL_RCC_OscConfig+0x8ac>)
 80049fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a00:	f7fe f820 	bl	8002a44 <HAL_GetTick>
 8004a04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a08:	f7fe f81c 	bl	8002a44 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e070      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b04 <HAL_RCC_OscConfig+0x8ac>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0x7b0>
 8004a26:	e068      	b.n	8004afa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a28:	4b36      	ldr	r3, [pc, #216]	@ (8004b04 <HAL_RCC_OscConfig+0x8ac>)
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a2e:	4b35      	ldr	r3, [pc, #212]	@ (8004b04 <HAL_RCC_OscConfig+0x8ac>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a32:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d031      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f003 0203 	and.w	r2, r3, #3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d12a      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d122      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a64:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d11a      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	0a5b      	lsrs	r3, r3, #9
 8004a6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a76:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d111      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	0c1b      	lsrs	r3, r3, #16
 8004a80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d108      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	0e1b      	lsrs	r3, r3, #24
 8004a92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a9a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e02b      	b.n	8004afc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004aa4:	4b17      	ldr	r3, [pc, #92]	@ (8004b04 <HAL_RCC_OscConfig+0x8ac>)
 8004aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa8:	08db      	lsrs	r3, r3, #3
 8004aaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d01f      	beq.n	8004afa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004aba:	4b12      	ldr	r3, [pc, #72]	@ (8004b04 <HAL_RCC_OscConfig+0x8ac>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abe:	4a11      	ldr	r2, [pc, #68]	@ (8004b04 <HAL_RCC_OscConfig+0x8ac>)
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ac6:	f7fd ffbd 	bl	8002a44 <HAL_GetTick>
 8004aca:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004acc:	bf00      	nop
 8004ace:	f7fd ffb9 	bl	8002a44 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d0f9      	beq.n	8004ace <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ada:	4b0a      	ldr	r3, [pc, #40]	@ (8004b04 <HAL_RCC_OscConfig+0x8ac>)
 8004adc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ade:	4b0a      	ldr	r3, [pc, #40]	@ (8004b08 <HAL_RCC_OscConfig+0x8b0>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ae6:	00d2      	lsls	r2, r2, #3
 8004ae8:	4906      	ldr	r1, [pc, #24]	@ (8004b04 <HAL_RCC_OscConfig+0x8ac>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004aee:	4b05      	ldr	r3, [pc, #20]	@ (8004b04 <HAL_RCC_OscConfig+0x8ac>)
 8004af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af2:	4a04      	ldr	r2, [pc, #16]	@ (8004b04 <HAL_RCC_OscConfig+0x8ac>)
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3730      	adds	r7, #48	@ 0x30
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	58024400 	.word	0x58024400
 8004b08:	ffff0007 	.word	0xffff0007

08004b0c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e19c      	b.n	8004e5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b20:	4b8a      	ldr	r3, [pc, #552]	@ (8004d4c <HAL_RCC_ClockConfig+0x240>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d910      	bls.n	8004b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b87      	ldr	r3, [pc, #540]	@ (8004d4c <HAL_RCC_ClockConfig+0x240>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 020f 	bic.w	r2, r3, #15
 8004b36:	4985      	ldr	r1, [pc, #532]	@ (8004d4c <HAL_RCC_ClockConfig+0x240>)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b83      	ldr	r3, [pc, #524]	@ (8004d4c <HAL_RCC_ClockConfig+0x240>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e184      	b.n	8004e5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d010      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	4b7b      	ldr	r3, [pc, #492]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d908      	bls.n	8004b7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b6c:	4b78      	ldr	r3, [pc, #480]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	4975      	ldr	r1, [pc, #468]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d010      	beq.n	8004bac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695a      	ldr	r2, [r3, #20]
 8004b8e:	4b70      	ldr	r3, [pc, #448]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d908      	bls.n	8004bac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	496a      	ldr	r1, [pc, #424]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d010      	beq.n	8004bda <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699a      	ldr	r2, [r3, #24]
 8004bbc:	4b64      	ldr	r3, [pc, #400]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d908      	bls.n	8004bda <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004bc8:	4b61      	ldr	r3, [pc, #388]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	495e      	ldr	r1, [pc, #376]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d010      	beq.n	8004c08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69da      	ldr	r2, [r3, #28]
 8004bea:	4b59      	ldr	r3, [pc, #356]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d908      	bls.n	8004c08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004bf6:	4b56      	ldr	r3, [pc, #344]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	4953      	ldr	r1, [pc, #332]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d010      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	4b4d      	ldr	r3, [pc, #308]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d908      	bls.n	8004c36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c24:	4b4a      	ldr	r3, [pc, #296]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f023 020f 	bic.w	r2, r3, #15
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4947      	ldr	r1, [pc, #284]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d055      	beq.n	8004cee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c42:	4b43      	ldr	r3, [pc, #268]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	4940      	ldr	r1, [pc, #256]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d107      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d121      	bne.n	8004cac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0f6      	b.n	8004e5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d107      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c74:	4b36      	ldr	r3, [pc, #216]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d115      	bne.n	8004cac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0ea      	b.n	8004e5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d107      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c8c:	4b30      	ldr	r3, [pc, #192]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d109      	bne.n	8004cac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0de      	b.n	8004e5a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c9c:	4b2c      	ldr	r3, [pc, #176]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0d6      	b.n	8004e5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cac:	4b28      	ldr	r3, [pc, #160]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f023 0207 	bic.w	r2, r3, #7
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4925      	ldr	r1, [pc, #148]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cbe:	f7fd fec1 	bl	8002a44 <HAL_GetTick>
 8004cc2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc4:	e00a      	b.n	8004cdc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc6:	f7fd febd 	bl	8002a44 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e0be      	b.n	8004e5a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d1eb      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d010      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	4b14      	ldr	r3, [pc, #80]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d208      	bcs.n	8004d1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d0a:	4b11      	ldr	r3, [pc, #68]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	f023 020f 	bic.w	r2, r3, #15
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	490e      	ldr	r1, [pc, #56]	@ (8004d50 <HAL_RCC_ClockConfig+0x244>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <HAL_RCC_ClockConfig+0x240>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d214      	bcs.n	8004d54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2a:	4b08      	ldr	r3, [pc, #32]	@ (8004d4c <HAL_RCC_ClockConfig+0x240>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f023 020f 	bic.w	r2, r3, #15
 8004d32:	4906      	ldr	r1, [pc, #24]	@ (8004d4c <HAL_RCC_ClockConfig+0x240>)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3a:	4b04      	ldr	r3, [pc, #16]	@ (8004d4c <HAL_RCC_ClockConfig+0x240>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d005      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e086      	b.n	8004e5a <HAL_RCC_ClockConfig+0x34e>
 8004d4c:	52002000 	.word	0x52002000
 8004d50:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d010      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	4b3f      	ldr	r3, [pc, #252]	@ (8004e64 <HAL_RCC_ClockConfig+0x358>)
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d208      	bcs.n	8004d82 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d70:	4b3c      	ldr	r3, [pc, #240]	@ (8004e64 <HAL_RCC_ClockConfig+0x358>)
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	4939      	ldr	r1, [pc, #228]	@ (8004e64 <HAL_RCC_ClockConfig+0x358>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d010      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695a      	ldr	r2, [r3, #20]
 8004d92:	4b34      	ldr	r3, [pc, #208]	@ (8004e64 <HAL_RCC_ClockConfig+0x358>)
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d208      	bcs.n	8004db0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d9e:	4b31      	ldr	r3, [pc, #196]	@ (8004e64 <HAL_RCC_ClockConfig+0x358>)
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	492e      	ldr	r1, [pc, #184]	@ (8004e64 <HAL_RCC_ClockConfig+0x358>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d010      	beq.n	8004dde <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699a      	ldr	r2, [r3, #24]
 8004dc0:	4b28      	ldr	r3, [pc, #160]	@ (8004e64 <HAL_RCC_ClockConfig+0x358>)
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d208      	bcs.n	8004dde <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004dcc:	4b25      	ldr	r3, [pc, #148]	@ (8004e64 <HAL_RCC_ClockConfig+0x358>)
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	4922      	ldr	r1, [pc, #136]	@ (8004e64 <HAL_RCC_ClockConfig+0x358>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d010      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69da      	ldr	r2, [r3, #28]
 8004dee:	4b1d      	ldr	r3, [pc, #116]	@ (8004e64 <HAL_RCC_ClockConfig+0x358>)
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d208      	bcs.n	8004e0c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8004e64 <HAL_RCC_ClockConfig+0x358>)
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	4917      	ldr	r1, [pc, #92]	@ (8004e64 <HAL_RCC_ClockConfig+0x358>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e0c:	f000 f834 	bl	8004e78 <HAL_RCC_GetSysClockFreq>
 8004e10:	4602      	mov	r2, r0
 8004e12:	4b14      	ldr	r3, [pc, #80]	@ (8004e64 <HAL_RCC_ClockConfig+0x358>)
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	0a1b      	lsrs	r3, r3, #8
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	4912      	ldr	r1, [pc, #72]	@ (8004e68 <HAL_RCC_ClockConfig+0x35c>)
 8004e1e:	5ccb      	ldrb	r3, [r1, r3]
 8004e20:	f003 031f 	and.w	r3, r3, #31
 8004e24:	fa22 f303 	lsr.w	r3, r2, r3
 8004e28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e64 <HAL_RCC_ClockConfig+0x358>)
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	4a0d      	ldr	r2, [pc, #52]	@ (8004e68 <HAL_RCC_ClockConfig+0x35c>)
 8004e34:	5cd3      	ldrb	r3, [r2, r3]
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e40:	4a0a      	ldr	r2, [pc, #40]	@ (8004e6c <HAL_RCC_ClockConfig+0x360>)
 8004e42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e44:	4a0a      	ldr	r2, [pc, #40]	@ (8004e70 <HAL_RCC_ClockConfig+0x364>)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e74 <HAL_RCC_ClockConfig+0x368>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fd fdae 	bl	80029b0 <HAL_InitTick>
 8004e54:	4603      	mov	r3, r0
 8004e56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	58024400 	.word	0x58024400
 8004e68:	0800aeb0 	.word	0x0800aeb0
 8004e6c:	24000004 	.word	0x24000004
 8004e70:	24000000 	.word	0x24000000
 8004e74:	24000008 	.word	0x24000008

08004e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	@ 0x24
 8004e7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e7e:	4bb3      	ldr	r3, [pc, #716]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e86:	2b18      	cmp	r3, #24
 8004e88:	f200 8155 	bhi.w	8005136 <HAL_RCC_GetSysClockFreq+0x2be>
 8004e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e92:	bf00      	nop
 8004e94:	08004ef9 	.word	0x08004ef9
 8004e98:	08005137 	.word	0x08005137
 8004e9c:	08005137 	.word	0x08005137
 8004ea0:	08005137 	.word	0x08005137
 8004ea4:	08005137 	.word	0x08005137
 8004ea8:	08005137 	.word	0x08005137
 8004eac:	08005137 	.word	0x08005137
 8004eb0:	08005137 	.word	0x08005137
 8004eb4:	08004f1f 	.word	0x08004f1f
 8004eb8:	08005137 	.word	0x08005137
 8004ebc:	08005137 	.word	0x08005137
 8004ec0:	08005137 	.word	0x08005137
 8004ec4:	08005137 	.word	0x08005137
 8004ec8:	08005137 	.word	0x08005137
 8004ecc:	08005137 	.word	0x08005137
 8004ed0:	08005137 	.word	0x08005137
 8004ed4:	08004f25 	.word	0x08004f25
 8004ed8:	08005137 	.word	0x08005137
 8004edc:	08005137 	.word	0x08005137
 8004ee0:	08005137 	.word	0x08005137
 8004ee4:	08005137 	.word	0x08005137
 8004ee8:	08005137 	.word	0x08005137
 8004eec:	08005137 	.word	0x08005137
 8004ef0:	08005137 	.word	0x08005137
 8004ef4:	08004f2b 	.word	0x08004f2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ef8:	4b94      	ldr	r3, [pc, #592]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d009      	beq.n	8004f18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f04:	4b91      	ldr	r3, [pc, #580]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	08db      	lsrs	r3, r3, #3
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	4a90      	ldr	r2, [pc, #576]	@ (8005150 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
 8004f14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004f16:	e111      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f18:	4b8d      	ldr	r3, [pc, #564]	@ (8005150 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f1a:	61bb      	str	r3, [r7, #24]
      break;
 8004f1c:	e10e      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004f1e:	4b8d      	ldr	r3, [pc, #564]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f20:	61bb      	str	r3, [r7, #24]
      break;
 8004f22:	e10b      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004f24:	4b8c      	ldr	r3, [pc, #560]	@ (8005158 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f26:	61bb      	str	r3, [r7, #24]
      break;
 8004f28:	e108      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f2a:	4b88      	ldr	r3, [pc, #544]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f34:	4b85      	ldr	r3, [pc, #532]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f38:	091b      	lsrs	r3, r3, #4
 8004f3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f3e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f40:	4b82      	ldr	r3, [pc, #520]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f4a:	4b80      	ldr	r3, [pc, #512]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f4e:	08db      	lsrs	r3, r3, #3
 8004f50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	fb02 f303 	mul.w	r3, r2, r3
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f62:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 80e1 	beq.w	8005130 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	f000 8083 	beq.w	800507c <HAL_RCC_GetSysClockFreq+0x204>
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	f200 80a1 	bhi.w	80050c0 <HAL_RCC_GetSysClockFreq+0x248>
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_RCC_GetSysClockFreq+0x114>
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d056      	beq.n	8005038 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004f8a:	e099      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f8c:	4b6f      	ldr	r3, [pc, #444]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d02d      	beq.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f98:	4b6c      	ldr	r3, [pc, #432]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	08db      	lsrs	r3, r3, #3
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	4a6b      	ldr	r2, [pc, #428]	@ (8005150 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	ee07 3a90 	vmov	s15, r3
 8004fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fc2:	4b62      	ldr	r3, [pc, #392]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fd6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800515c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004ff2:	e087      	b.n	8005104 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005160 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005006:	4b51      	ldr	r3, [pc, #324]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005016:	ed97 6a02 	vldr	s12, [r7, #8]
 800501a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800515c <HAL_RCC_GetSysClockFreq+0x2e4>
 800501e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800502a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800502e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005032:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005036:	e065      	b.n	8005104 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005042:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005164 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800504a:	4b40      	ldr	r3, [pc, #256]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800504c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800505a:	ed97 6a02 	vldr	s12, [r7, #8]
 800505e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800515c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800506a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800506e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005076:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800507a:	e043      	b.n	8005104 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005086:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005168 <HAL_RCC_GetSysClockFreq+0x2f0>
 800508a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800508e:	4b2f      	ldr	r3, [pc, #188]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509e:	ed97 6a02 	vldr	s12, [r7, #8]
 80050a2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800515c <HAL_RCC_GetSysClockFreq+0x2e4>
 80050a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050be:	e021      	b.n	8005104 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005164 <HAL_RCC_GetSysClockFreq+0x2ec>
 80050ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d2:	4b1e      	ldr	r3, [pc, #120]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80050e6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800515c <HAL_RCC_GetSysClockFreq+0x2e4>
 80050ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005102:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005104:	4b11      	ldr	r3, [pc, #68]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005108:	0a5b      	lsrs	r3, r3, #9
 800510a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800510e:	3301      	adds	r3, #1
 8005110:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	ee07 3a90 	vmov	s15, r3
 8005118:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800511c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005128:	ee17 3a90 	vmov	r3, s15
 800512c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800512e:	e005      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]
      break;
 8005134:	e002      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005136:	4b07      	ldr	r3, [pc, #28]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005138:	61bb      	str	r3, [r7, #24]
      break;
 800513a:	bf00      	nop
  }

  return sysclockfreq;
 800513c:	69bb      	ldr	r3, [r7, #24]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3724      	adds	r7, #36	@ 0x24
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	58024400 	.word	0x58024400
 8005150:	03d09000 	.word	0x03d09000
 8005154:	003d0900 	.word	0x003d0900
 8005158:	017d7840 	.word	0x017d7840
 800515c:	46000000 	.word	0x46000000
 8005160:	4c742400 	.word	0x4c742400
 8005164:	4a742400 	.word	0x4a742400
 8005168:	4bbebc20 	.word	0x4bbebc20

0800516c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005172:	f7ff fe81 	bl	8004e78 <HAL_RCC_GetSysClockFreq>
 8005176:	4602      	mov	r2, r0
 8005178:	4b10      	ldr	r3, [pc, #64]	@ (80051bc <HAL_RCC_GetHCLKFreq+0x50>)
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	0a1b      	lsrs	r3, r3, #8
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	490f      	ldr	r1, [pc, #60]	@ (80051c0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005184:	5ccb      	ldrb	r3, [r1, r3]
 8005186:	f003 031f 	and.w	r3, r3, #31
 800518a:	fa22 f303 	lsr.w	r3, r2, r3
 800518e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005190:	4b0a      	ldr	r3, [pc, #40]	@ (80051bc <HAL_RCC_GetHCLKFreq+0x50>)
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	4a09      	ldr	r2, [pc, #36]	@ (80051c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800519a:	5cd3      	ldrb	r3, [r2, r3]
 800519c:	f003 031f 	and.w	r3, r3, #31
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	fa22 f303 	lsr.w	r3, r2, r3
 80051a6:	4a07      	ldr	r2, [pc, #28]	@ (80051c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80051a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051aa:	4a07      	ldr	r2, [pc, #28]	@ (80051c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80051b0:	4b04      	ldr	r3, [pc, #16]	@ (80051c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80051b2:	681b      	ldr	r3, [r3, #0]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	58024400 	.word	0x58024400
 80051c0:	0800aeb0 	.word	0x0800aeb0
 80051c4:	24000004 	.word	0x24000004
 80051c8:	24000000 	.word	0x24000000

080051cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80051d0:	f7ff ffcc 	bl	800516c <HAL_RCC_GetHCLKFreq>
 80051d4:	4602      	mov	r2, r0
 80051d6:	4b06      	ldr	r3, [pc, #24]	@ (80051f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	091b      	lsrs	r3, r3, #4
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	4904      	ldr	r1, [pc, #16]	@ (80051f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051e2:	5ccb      	ldrb	r3, [r1, r3]
 80051e4:	f003 031f 	and.w	r3, r3, #31
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	58024400 	.word	0x58024400
 80051f4:	0800aeb0 	.word	0x0800aeb0

080051f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80051fc:	f7ff ffb6 	bl	800516c <HAL_RCC_GetHCLKFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	4b06      	ldr	r3, [pc, #24]	@ (800521c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	0a1b      	lsrs	r3, r3, #8
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	4904      	ldr	r1, [pc, #16]	@ (8005220 <HAL_RCC_GetPCLK2Freq+0x28>)
 800520e:	5ccb      	ldrb	r3, [r1, r3]
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005218:	4618      	mov	r0, r3
 800521a:	bd80      	pop	{r7, pc}
 800521c:	58024400 	.word	0x58024400
 8005220:	0800aeb0 	.word	0x0800aeb0

08005224 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005228:	b0ca      	sub	sp, #296	@ 0x128
 800522a:	af00      	add	r7, sp, #0
 800522c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005230:	2300      	movs	r3, #0
 8005232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005236:	2300      	movs	r3, #0
 8005238:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800523c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005248:	2500      	movs	r5, #0
 800524a:	ea54 0305 	orrs.w	r3, r4, r5
 800524e:	d049      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005254:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005256:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800525a:	d02f      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800525c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005260:	d828      	bhi.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005262:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005266:	d01a      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005268:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800526c:	d822      	bhi.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005276:	d007      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005278:	e01c      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800527a:	4bb8      	ldr	r3, [pc, #736]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800527c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527e:	4ab7      	ldr	r2, [pc, #732]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005284:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005286:	e01a      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528c:	3308      	adds	r3, #8
 800528e:	2102      	movs	r1, #2
 8005290:	4618      	mov	r0, r3
 8005292:	f001 fc8f 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005296:	4603      	mov	r3, r0
 8005298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800529c:	e00f      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800529e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a2:	3328      	adds	r3, #40	@ 0x28
 80052a4:	2102      	movs	r1, #2
 80052a6:	4618      	mov	r0, r3
 80052a8:	f001 fd36 	bl	8006d18 <RCCEx_PLL3_Config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052b2:	e004      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052ba:	e000      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80052bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80052c6:	4ba5      	ldr	r3, [pc, #660]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80052ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052d4:	4aa1      	ldr	r2, [pc, #644]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052d6:	430b      	orrs	r3, r1
 80052d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80052da:	e003      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80052f0:	f04f 0900 	mov.w	r9, #0
 80052f4:	ea58 0309 	orrs.w	r3, r8, r9
 80052f8:	d047      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80052fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005300:	2b04      	cmp	r3, #4
 8005302:	d82a      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005304:	a201      	add	r2, pc, #4	@ (adr r2, 800530c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530a:	bf00      	nop
 800530c:	08005321 	.word	0x08005321
 8005310:	0800532f 	.word	0x0800532f
 8005314:	08005345 	.word	0x08005345
 8005318:	08005363 	.word	0x08005363
 800531c:	08005363 	.word	0x08005363
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005320:	4b8e      	ldr	r3, [pc, #568]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005324:	4a8d      	ldr	r2, [pc, #564]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800532a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800532c:	e01a      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800532e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005332:	3308      	adds	r3, #8
 8005334:	2100      	movs	r1, #0
 8005336:	4618      	mov	r0, r3
 8005338:	f001 fc3c 	bl	8006bb4 <RCCEx_PLL2_Config>
 800533c:	4603      	mov	r3, r0
 800533e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005342:	e00f      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005348:	3328      	adds	r3, #40	@ 0x28
 800534a:	2100      	movs	r1, #0
 800534c:	4618      	mov	r0, r3
 800534e:	f001 fce3 	bl	8006d18 <RCCEx_PLL3_Config>
 8005352:	4603      	mov	r3, r0
 8005354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005358:	e004      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005360:	e000      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10a      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800536c:	4b7b      	ldr	r3, [pc, #492]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800536e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005370:	f023 0107 	bic.w	r1, r3, #7
 8005374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800537a:	4a78      	ldr	r2, [pc, #480]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800537c:	430b      	orrs	r3, r1
 800537e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005380:	e003      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005386:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800538a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005396:	f04f 0b00 	mov.w	fp, #0
 800539a:	ea5a 030b 	orrs.w	r3, sl, fp
 800539e:	d04c      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80053a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053aa:	d030      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80053ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053b0:	d829      	bhi.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80053b4:	d02d      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80053b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80053b8:	d825      	bhi.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053ba:	2b80      	cmp	r3, #128	@ 0x80
 80053bc:	d018      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80053be:	2b80      	cmp	r3, #128	@ 0x80
 80053c0:	d821      	bhi.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80053c6:	2b40      	cmp	r3, #64	@ 0x40
 80053c8:	d007      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80053ca:	e01c      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053cc:	4b63      	ldr	r3, [pc, #396]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d0:	4a62      	ldr	r2, [pc, #392]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053d8:	e01c      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053de:	3308      	adds	r3, #8
 80053e0:	2100      	movs	r1, #0
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 fbe6 	bl	8006bb4 <RCCEx_PLL2_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053ee:	e011      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f4:	3328      	adds	r3, #40	@ 0x28
 80053f6:	2100      	movs	r1, #0
 80053f8:	4618      	mov	r0, r3
 80053fa:	f001 fc8d 	bl	8006d18 <RCCEx_PLL3_Config>
 80053fe:	4603      	mov	r3, r0
 8005400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005404:	e006      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800540c:	e002      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800540e:	bf00      	nop
 8005410:	e000      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10a      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800541c:	4b4f      	ldr	r3, [pc, #316]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800541e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005420:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800542a:	4a4c      	ldr	r2, [pc, #304]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800542c:	430b      	orrs	r3, r1
 800542e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005430:	e003      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800543a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005446:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800544a:	2300      	movs	r3, #0
 800544c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005450:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005454:	460b      	mov	r3, r1
 8005456:	4313      	orrs	r3, r2
 8005458:	d053      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800545a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005462:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005466:	d035      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005468:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800546c:	d82e      	bhi.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800546e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005472:	d031      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005474:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005478:	d828      	bhi.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800547a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800547e:	d01a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005480:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005484:	d822      	bhi.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800548a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800548e:	d007      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005490:	e01c      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005492:	4b32      	ldr	r3, [pc, #200]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005496:	4a31      	ldr	r2, [pc, #196]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800549c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800549e:	e01c      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a4:	3308      	adds	r3, #8
 80054a6:	2100      	movs	r1, #0
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 fb83 	bl	8006bb4 <RCCEx_PLL2_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054b4:	e011      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ba:	3328      	adds	r3, #40	@ 0x28
 80054bc:	2100      	movs	r1, #0
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 fc2a 	bl	8006d18 <RCCEx_PLL3_Config>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054ca:	e006      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054d2:	e002      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80054d4:	bf00      	nop
 80054d6:	e000      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80054d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80054e2:	4b1e      	ldr	r3, [pc, #120]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80054ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80054f2:	4a1a      	ldr	r2, [pc, #104]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80054f8:	e003      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800550e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005512:	2300      	movs	r3, #0
 8005514:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005518:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800551c:	460b      	mov	r3, r1
 800551e:	4313      	orrs	r3, r2
 8005520:	d056      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005526:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800552a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800552e:	d038      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005530:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005534:	d831      	bhi.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005536:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800553a:	d034      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800553c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005540:	d82b      	bhi.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005542:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005546:	d01d      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005548:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800554c:	d825      	bhi.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d006      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005552:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005556:	d00a      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005558:	e01f      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800555a:	bf00      	nop
 800555c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005560:	4ba2      	ldr	r3, [pc, #648]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	4aa1      	ldr	r2, [pc, #644]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800556a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800556c:	e01c      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800556e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005572:	3308      	adds	r3, #8
 8005574:	2100      	movs	r1, #0
 8005576:	4618      	mov	r0, r3
 8005578:	f001 fb1c 	bl	8006bb4 <RCCEx_PLL2_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005582:	e011      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005588:	3328      	adds	r3, #40	@ 0x28
 800558a:	2100      	movs	r1, #0
 800558c:	4618      	mov	r0, r3
 800558e:	f001 fbc3 	bl	8006d18 <RCCEx_PLL3_Config>
 8005592:	4603      	mov	r3, r0
 8005594:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005598:	e006      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055a0:	e002      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80055a2:	bf00      	nop
 80055a4:	e000      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80055a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10b      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80055b0:	4b8e      	ldr	r3, [pc, #568]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80055b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80055c0:	4a8a      	ldr	r2, [pc, #552]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055c2:	430b      	orrs	r3, r1
 80055c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80055c6:	e003      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80055d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80055dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80055e0:	2300      	movs	r3, #0
 80055e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80055e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80055ea:	460b      	mov	r3, r1
 80055ec:	4313      	orrs	r3, r2
 80055ee:	d03a      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80055f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055f6:	2b30      	cmp	r3, #48	@ 0x30
 80055f8:	d01f      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80055fa:	2b30      	cmp	r3, #48	@ 0x30
 80055fc:	d819      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d00c      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005602:	2b20      	cmp	r3, #32
 8005604:	d815      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005606:	2b00      	cmp	r3, #0
 8005608:	d019      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800560a:	2b10      	cmp	r3, #16
 800560c:	d111      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800560e:	4b77      	ldr	r3, [pc, #476]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005612:	4a76      	ldr	r2, [pc, #472]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005618:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800561a:	e011      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005620:	3308      	adds	r3, #8
 8005622:	2102      	movs	r1, #2
 8005624:	4618      	mov	r0, r3
 8005626:	f001 fac5 	bl	8006bb4 <RCCEx_PLL2_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005630:	e006      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005638:	e002      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800563a:	bf00      	nop
 800563c:	e000      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800563e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005648:	4b68      	ldr	r3, [pc, #416]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800564a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800564c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005656:	4a65      	ldr	r2, [pc, #404]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005658:	430b      	orrs	r3, r1
 800565a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800565c:	e003      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005662:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005672:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005676:	2300      	movs	r3, #0
 8005678:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800567c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005680:	460b      	mov	r3, r1
 8005682:	4313      	orrs	r3, r2
 8005684:	d051      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800568c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005690:	d035      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005692:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005696:	d82e      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005698:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800569c:	d031      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800569e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056a2:	d828      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056a8:	d01a      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80056aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ae:	d822      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80056b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056b8:	d007      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80056ba:	e01c      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056bc:	4b4b      	ldr	r3, [pc, #300]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c0:	4a4a      	ldr	r2, [pc, #296]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056c8:	e01c      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ce:	3308      	adds	r3, #8
 80056d0:	2100      	movs	r1, #0
 80056d2:	4618      	mov	r0, r3
 80056d4:	f001 fa6e 	bl	8006bb4 <RCCEx_PLL2_Config>
 80056d8:	4603      	mov	r3, r0
 80056da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056de:	e011      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e4:	3328      	adds	r3, #40	@ 0x28
 80056e6:	2100      	movs	r1, #0
 80056e8:	4618      	mov	r0, r3
 80056ea:	f001 fb15 	bl	8006d18 <RCCEx_PLL3_Config>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056f4:	e006      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056fc:	e002      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80056fe:	bf00      	nop
 8005700:	e000      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005704:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800570c:	4b37      	ldr	r3, [pc, #220]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800570e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005710:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800571a:	4a34      	ldr	r2, [pc, #208]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800571c:	430b      	orrs	r3, r1
 800571e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005720:	e003      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800572a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005736:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800573a:	2300      	movs	r3, #0
 800573c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005740:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005744:	460b      	mov	r3, r1
 8005746:	4313      	orrs	r3, r2
 8005748:	d056      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800574a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005754:	d033      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005756:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800575a:	d82c      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800575c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005760:	d02f      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005762:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005766:	d826      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005768:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800576c:	d02b      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800576e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005772:	d820      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005778:	d012      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800577a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800577e:	d81a      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d022      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005788:	d115      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578e:	3308      	adds	r3, #8
 8005790:	2101      	movs	r1, #1
 8005792:	4618      	mov	r0, r3
 8005794:	f001 fa0e 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005798:	4603      	mov	r3, r0
 800579a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800579e:	e015      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a4:	3328      	adds	r3, #40	@ 0x28
 80057a6:	2101      	movs	r1, #1
 80057a8:	4618      	mov	r0, r3
 80057aa:	f001 fab5 	bl	8006d18 <RCCEx_PLL3_Config>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80057b4:	e00a      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057bc:	e006      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057be:	bf00      	nop
 80057c0:	e004      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057c2:	bf00      	nop
 80057c4:	e002      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057c6:	bf00      	nop
 80057c8:	e000      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10d      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80057d4:	4b05      	ldr	r3, [pc, #20]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80057dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057e2:	4a02      	ldr	r2, [pc, #8]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057e4:	430b      	orrs	r3, r1
 80057e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80057e8:	e006      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80057ea:	bf00      	nop
 80057ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80057f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005808:	2300      	movs	r3, #0
 800580a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800580e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005812:	460b      	mov	r3, r1
 8005814:	4313      	orrs	r3, r2
 8005816:	d055      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005820:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005824:	d033      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005826:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800582a:	d82c      	bhi.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800582c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005830:	d02f      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005836:	d826      	bhi.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005838:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800583c:	d02b      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800583e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005842:	d820      	bhi.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005848:	d012      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800584a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800584e:	d81a      	bhi.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005850:	2b00      	cmp	r3, #0
 8005852:	d022      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005854:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005858:	d115      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800585a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585e:	3308      	adds	r3, #8
 8005860:	2101      	movs	r1, #1
 8005862:	4618      	mov	r0, r3
 8005864:	f001 f9a6 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005868:	4603      	mov	r3, r0
 800586a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800586e:	e015      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005874:	3328      	adds	r3, #40	@ 0x28
 8005876:	2101      	movs	r1, #1
 8005878:	4618      	mov	r0, r3
 800587a:	f001 fa4d 	bl	8006d18 <RCCEx_PLL3_Config>
 800587e:	4603      	mov	r3, r0
 8005880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005884:	e00a      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800588c:	e006      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800588e:	bf00      	nop
 8005890:	e004      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005892:	bf00      	nop
 8005894:	e002      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005896:	bf00      	nop
 8005898:	e000      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800589a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800589c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10b      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80058a4:	4ba3      	ldr	r3, [pc, #652]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80058ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058b4:	4a9f      	ldr	r2, [pc, #636]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058b6:	430b      	orrs	r3, r1
 80058b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80058ba:	e003      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80058d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80058d4:	2300      	movs	r3, #0
 80058d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80058da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80058de:	460b      	mov	r3, r1
 80058e0:	4313      	orrs	r3, r2
 80058e2:	d037      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80058e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058ee:	d00e      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80058f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058f4:	d816      	bhi.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d018      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80058fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058fe:	d111      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005900:	4b8c      	ldr	r3, [pc, #560]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	4a8b      	ldr	r2, [pc, #556]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800590a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800590c:	e00f      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800590e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005912:	3308      	adds	r3, #8
 8005914:	2101      	movs	r1, #1
 8005916:	4618      	mov	r0, r3
 8005918:	f001 f94c 	bl	8006bb4 <RCCEx_PLL2_Config>
 800591c:	4603      	mov	r3, r0
 800591e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005922:	e004      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800592a:	e000      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800592c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800592e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10a      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005936:	4b7f      	ldr	r3, [pc, #508]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800593a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800593e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005944:	4a7b      	ldr	r2, [pc, #492]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005946:	430b      	orrs	r3, r1
 8005948:	6513      	str	r3, [r2, #80]	@ 0x50
 800594a:	e003      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005950:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005964:	2300      	movs	r3, #0
 8005966:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800596a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800596e:	460b      	mov	r3, r1
 8005970:	4313      	orrs	r3, r2
 8005972:	d039      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800597a:	2b03      	cmp	r3, #3
 800597c:	d81c      	bhi.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800597e:	a201      	add	r2, pc, #4	@ (adr r2, 8005984 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005984:	080059c1 	.word	0x080059c1
 8005988:	08005995 	.word	0x08005995
 800598c:	080059a3 	.word	0x080059a3
 8005990:	080059c1 	.word	0x080059c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005994:	4b67      	ldr	r3, [pc, #412]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005998:	4a66      	ldr	r2, [pc, #408]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800599a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800599e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80059a0:	e00f      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a6:	3308      	adds	r3, #8
 80059a8:	2102      	movs	r1, #2
 80059aa:	4618      	mov	r0, r3
 80059ac:	f001 f902 	bl	8006bb4 <RCCEx_PLL2_Config>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80059b6:	e004      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059be:	e000      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80059c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10a      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80059ca:	4b5a      	ldr	r3, [pc, #360]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ce:	f023 0103 	bic.w	r1, r3, #3
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059d8:	4a56      	ldr	r2, [pc, #344]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059da:	430b      	orrs	r3, r1
 80059dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059de:	e003      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80059f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059f8:	2300      	movs	r3, #0
 80059fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005a02:	460b      	mov	r3, r1
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f000 809f 	beq.w	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a0a:	4b4b      	ldr	r3, [pc, #300]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a4a      	ldr	r2, [pc, #296]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a16:	f7fd f815 	bl	8002a44 <HAL_GetTick>
 8005a1a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a1e:	e00b      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a20:	f7fd f810 	bl	8002a44 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b64      	cmp	r3, #100	@ 0x64
 8005a2e:	d903      	bls.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a36:	e005      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a38:	4b3f      	ldr	r3, [pc, #252]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0ed      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d179      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005a4c:	4b39      	ldr	r3, [pc, #228]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a58:	4053      	eors	r3, r2
 8005a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d015      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a62:	4b34      	ldr	r3, [pc, #208]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a6a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a6e:	4b31      	ldr	r3, [pc, #196]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a72:	4a30      	ldr	r2, [pc, #192]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a78:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a84:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005a86:	4a2b      	ldr	r2, [pc, #172]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a8c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a9a:	d118      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9c:	f7fc ffd2 	bl	8002a44 <HAL_GetTick>
 8005aa0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005aa4:	e00d      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa6:	f7fc ffcd 	bl	8002a44 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005ab0:	1ad2      	subs	r2, r2, r3
 8005ab2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d903      	bls.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005ac0:	e005      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0eb      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d129      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ada:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ae2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ae6:	d10e      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005ae8:	4b12      	ldr	r3, [pc, #72]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005af8:	091a      	lsrs	r2, r3, #4
 8005afa:	4b10      	ldr	r3, [pc, #64]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	4a0d      	ldr	r2, [pc, #52]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b00:	430b      	orrs	r3, r1
 8005b02:	6113      	str	r3, [r2, #16]
 8005b04:	e005      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005b06:	4b0b      	ldr	r3, [pc, #44]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b10:	6113      	str	r3, [r2, #16]
 8005b12:	4b08      	ldr	r3, [pc, #32]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b14:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b22:	4a04      	ldr	r2, [pc, #16]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b24:	430b      	orrs	r3, r1
 8005b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b28:	e00e      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005b32:	e009      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005b34:	58024400 	.word	0x58024400
 8005b38:	58024800 	.word	0x58024800
 8005b3c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	f002 0301 	and.w	r3, r2, #1
 8005b54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f000 8089 	beq.w	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b70:	2b28      	cmp	r3, #40	@ 0x28
 8005b72:	d86b      	bhi.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005b74:	a201      	add	r2, pc, #4	@ (adr r2, 8005b7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7a:	bf00      	nop
 8005b7c:	08005c55 	.word	0x08005c55
 8005b80:	08005c4d 	.word	0x08005c4d
 8005b84:	08005c4d 	.word	0x08005c4d
 8005b88:	08005c4d 	.word	0x08005c4d
 8005b8c:	08005c4d 	.word	0x08005c4d
 8005b90:	08005c4d 	.word	0x08005c4d
 8005b94:	08005c4d 	.word	0x08005c4d
 8005b98:	08005c4d 	.word	0x08005c4d
 8005b9c:	08005c21 	.word	0x08005c21
 8005ba0:	08005c4d 	.word	0x08005c4d
 8005ba4:	08005c4d 	.word	0x08005c4d
 8005ba8:	08005c4d 	.word	0x08005c4d
 8005bac:	08005c4d 	.word	0x08005c4d
 8005bb0:	08005c4d 	.word	0x08005c4d
 8005bb4:	08005c4d 	.word	0x08005c4d
 8005bb8:	08005c4d 	.word	0x08005c4d
 8005bbc:	08005c37 	.word	0x08005c37
 8005bc0:	08005c4d 	.word	0x08005c4d
 8005bc4:	08005c4d 	.word	0x08005c4d
 8005bc8:	08005c4d 	.word	0x08005c4d
 8005bcc:	08005c4d 	.word	0x08005c4d
 8005bd0:	08005c4d 	.word	0x08005c4d
 8005bd4:	08005c4d 	.word	0x08005c4d
 8005bd8:	08005c4d 	.word	0x08005c4d
 8005bdc:	08005c55 	.word	0x08005c55
 8005be0:	08005c4d 	.word	0x08005c4d
 8005be4:	08005c4d 	.word	0x08005c4d
 8005be8:	08005c4d 	.word	0x08005c4d
 8005bec:	08005c4d 	.word	0x08005c4d
 8005bf0:	08005c4d 	.word	0x08005c4d
 8005bf4:	08005c4d 	.word	0x08005c4d
 8005bf8:	08005c4d 	.word	0x08005c4d
 8005bfc:	08005c55 	.word	0x08005c55
 8005c00:	08005c4d 	.word	0x08005c4d
 8005c04:	08005c4d 	.word	0x08005c4d
 8005c08:	08005c4d 	.word	0x08005c4d
 8005c0c:	08005c4d 	.word	0x08005c4d
 8005c10:	08005c4d 	.word	0x08005c4d
 8005c14:	08005c4d 	.word	0x08005c4d
 8005c18:	08005c4d 	.word	0x08005c4d
 8005c1c:	08005c55 	.word	0x08005c55
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c24:	3308      	adds	r3, #8
 8005c26:	2101      	movs	r1, #1
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 ffc3 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c34:	e00f      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3a:	3328      	adds	r3, #40	@ 0x28
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f001 f86a 	bl	8006d18 <RCCEx_PLL3_Config>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c4a:	e004      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c52:	e000      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10a      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005c5e:	4bbf      	ldr	r3, [pc, #764]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c62:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c6c:	4abb      	ldr	r2, [pc, #748]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c6e:	430b      	orrs	r3, r1
 8005c70:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c72:	e003      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	f002 0302 	and.w	r3, r2, #2
 8005c88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005c92:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005c96:	460b      	mov	r3, r1
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	d041      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ca2:	2b05      	cmp	r3, #5
 8005ca4:	d824      	bhi.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005cf9 	.word	0x08005cf9
 8005cb0:	08005cc5 	.word	0x08005cc5
 8005cb4:	08005cdb 	.word	0x08005cdb
 8005cb8:	08005cf9 	.word	0x08005cf9
 8005cbc:	08005cf9 	.word	0x08005cf9
 8005cc0:	08005cf9 	.word	0x08005cf9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc8:	3308      	adds	r3, #8
 8005cca:	2101      	movs	r1, #1
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 ff71 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005cd8:	e00f      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cde:	3328      	adds	r3, #40	@ 0x28
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f001 f818 	bl	8006d18 <RCCEx_PLL3_Config>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005cee:	e004      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cf6:	e000      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10a      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d02:	4b96      	ldr	r3, [pc, #600]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d06:	f023 0107 	bic.w	r1, r3, #7
 8005d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d10:	4a92      	ldr	r2, [pc, #584]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d12:	430b      	orrs	r3, r1
 8005d14:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d16:	e003      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	f002 0304 	and.w	r3, r2, #4
 8005d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d30:	2300      	movs	r3, #0
 8005d32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	d044      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d48:	2b05      	cmp	r3, #5
 8005d4a:	d825      	bhi.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d54 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005da1 	.word	0x08005da1
 8005d58:	08005d6d 	.word	0x08005d6d
 8005d5c:	08005d83 	.word	0x08005d83
 8005d60:	08005da1 	.word	0x08005da1
 8005d64:	08005da1 	.word	0x08005da1
 8005d68:	08005da1 	.word	0x08005da1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d70:	3308      	adds	r3, #8
 8005d72:	2101      	movs	r1, #1
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 ff1d 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d80:	e00f      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d86:	3328      	adds	r3, #40	@ 0x28
 8005d88:	2101      	movs	r1, #1
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 ffc4 	bl	8006d18 <RCCEx_PLL3_Config>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d96:	e004      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d9e:	e000      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10b      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005daa:	4b6c      	ldr	r3, [pc, #432]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dae:	f023 0107 	bic.w	r1, r3, #7
 8005db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dba:	4a68      	ldr	r2, [pc, #416]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dc0:	e003      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f002 0320 	and.w	r3, r2, #32
 8005dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005de0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005de4:	460b      	mov	r3, r1
 8005de6:	4313      	orrs	r3, r2
 8005de8:	d055      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005df6:	d033      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dfc:	d82c      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e02:	d02f      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e08:	d826      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e0e:	d02b      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005e10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e14:	d820      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e1a:	d012      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005e1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e20:	d81a      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d022      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005e26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e2a:	d115      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e30:	3308      	adds	r3, #8
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 febd 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e40:	e015      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e46:	3328      	adds	r3, #40	@ 0x28
 8005e48:	2102      	movs	r1, #2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 ff64 	bl	8006d18 <RCCEx_PLL3_Config>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e56:	e00a      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e5e:	e006      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e60:	bf00      	nop
 8005e62:	e004      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e64:	bf00      	nop
 8005e66:	e002      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e68:	bf00      	nop
 8005e6a:	e000      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10b      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e76:	4b39      	ldr	r3, [pc, #228]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e86:	4a35      	ldr	r2, [pc, #212]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e8c:	e003      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005eac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	d058      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ebe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ec2:	d033      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005ec4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ec8:	d82c      	bhi.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ece:	d02f      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed4:	d826      	bhi.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ed6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005eda:	d02b      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005edc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ee0:	d820      	bhi.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ee2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ee6:	d012      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eec:	d81a      	bhi.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d022      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ef6:	d115      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efc:	3308      	adds	r3, #8
 8005efe:	2100      	movs	r1, #0
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 fe57 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f0c:	e015      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f12:	3328      	adds	r3, #40	@ 0x28
 8005f14:	2102      	movs	r1, #2
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fefe 	bl	8006d18 <RCCEx_PLL3_Config>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f22:	e00a      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f2a:	e006      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f2c:	bf00      	nop
 8005f2e:	e004      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f30:	bf00      	nop
 8005f32:	e002      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f34:	bf00      	nop
 8005f36:	e000      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10e      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f42:	4b06      	ldr	r3, [pc, #24]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f46:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f52:	4a02      	ldr	r2, [pc, #8]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f54:	430b      	orrs	r3, r1
 8005f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f58:	e006      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005f5a:	bf00      	nop
 8005f5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f7e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005f82:	460b      	mov	r3, r1
 8005f84:	4313      	orrs	r3, r2
 8005f86:	d055      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f90:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005f94:	d033      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005f96:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005f9a:	d82c      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005f9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fa0:	d02f      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005fa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fa6:	d826      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005fa8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005fac:	d02b      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005fae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005fb2:	d820      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005fb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fb8:	d012      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005fba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fbe:	d81a      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d022      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005fc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fc8:	d115      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fce:	3308      	adds	r3, #8
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fdee 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005fde:	e015      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe4:	3328      	adds	r3, #40	@ 0x28
 8005fe6:	2102      	movs	r1, #2
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fe95 	bl	8006d18 <RCCEx_PLL3_Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005ff4:	e00a      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ffc:	e006      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005ffe:	bf00      	nop
 8006000:	e004      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006002:	bf00      	nop
 8006004:	e002      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006006:	bf00      	nop
 8006008:	e000      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800600a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800600c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10b      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006014:	4ba1      	ldr	r3, [pc, #644]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006018:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800601c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006020:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006024:	4a9d      	ldr	r2, [pc, #628]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006026:	430b      	orrs	r3, r1
 8006028:	6593      	str	r3, [r2, #88]	@ 0x58
 800602a:	e003      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006030:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	f002 0308 	and.w	r3, r2, #8
 8006040:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006044:	2300      	movs	r3, #0
 8006046:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800604a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800604e:	460b      	mov	r3, r1
 8006050:	4313      	orrs	r3, r2
 8006052:	d01e      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800605c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006060:	d10c      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006066:	3328      	adds	r3, #40	@ 0x28
 8006068:	2102      	movs	r1, #2
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fe54 	bl	8006d18 <RCCEx_PLL3_Config>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800607c:	4b87      	ldr	r3, [pc, #540]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800607e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006080:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800608c:	4a83      	ldr	r2, [pc, #524]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800608e:	430b      	orrs	r3, r1
 8006090:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609a:	f002 0310 	and.w	r3, r2, #16
 800609e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060a2:	2300      	movs	r3, #0
 80060a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80060a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80060ac:	460b      	mov	r3, r1
 80060ae:	4313      	orrs	r3, r2
 80060b0:	d01e      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80060b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060be:	d10c      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80060c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c4:	3328      	adds	r3, #40	@ 0x28
 80060c6:	2102      	movs	r1, #2
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 fe25 	bl	8006d18 <RCCEx_PLL3_Config>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060da:	4b70      	ldr	r3, [pc, #448]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060ea:	4a6c      	ldr	r2, [pc, #432]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060ec:	430b      	orrs	r3, r1
 80060ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80060fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006100:	2300      	movs	r3, #0
 8006102:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006106:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800610a:	460b      	mov	r3, r1
 800610c:	4313      	orrs	r3, r2
 800610e:	d03e      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006114:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800611c:	d022      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800611e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006122:	d81b      	bhi.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800612c:	d00b      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800612e:	e015      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006134:	3308      	adds	r3, #8
 8006136:	2100      	movs	r1, #0
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fd3b 	bl	8006bb4 <RCCEx_PLL2_Config>
 800613e:	4603      	mov	r3, r0
 8006140:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006144:	e00f      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614a:	3328      	adds	r3, #40	@ 0x28
 800614c:	2102      	movs	r1, #2
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fde2 	bl	8006d18 <RCCEx_PLL3_Config>
 8006154:	4603      	mov	r3, r0
 8006156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800615a:	e004      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006162:	e000      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10b      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800616e:	4b4b      	ldr	r3, [pc, #300]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006172:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800617e:	4a47      	ldr	r2, [pc, #284]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006180:	430b      	orrs	r3, r1
 8006182:	6593      	str	r3, [r2, #88]	@ 0x58
 8006184:	e003      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800618a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800619a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800619c:	2300      	movs	r3, #0
 800619e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80061a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80061a4:	460b      	mov	r3, r1
 80061a6:	4313      	orrs	r3, r2
 80061a8:	d03b      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061b6:	d01f      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80061b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061bc:	d818      	bhi.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80061be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061c2:	d003      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80061c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061c8:	d007      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80061ca:	e011      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061cc:	4b33      	ldr	r3, [pc, #204]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d0:	4a32      	ldr	r2, [pc, #200]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80061d8:	e00f      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061de:	3328      	adds	r3, #40	@ 0x28
 80061e0:	2101      	movs	r1, #1
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fd98 	bl	8006d18 <RCCEx_PLL3_Config>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80061ee:	e004      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061f6:	e000      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80061f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10b      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006202:	4b26      	ldr	r3, [pc, #152]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006206:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800620a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006212:	4a22      	ldr	r2, [pc, #136]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006214:	430b      	orrs	r3, r1
 8006216:	6553      	str	r3, [r2, #84]	@ 0x54
 8006218:	e003      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800621e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800622e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006230:	2300      	movs	r3, #0
 8006232:	677b      	str	r3, [r7, #116]	@ 0x74
 8006234:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006238:	460b      	mov	r3, r1
 800623a:	4313      	orrs	r3, r2
 800623c:	d034      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800623e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800624c:	d007      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800624e:	e011      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006250:	4b12      	ldr	r3, [pc, #72]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006254:	4a11      	ldr	r2, [pc, #68]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800625a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800625c:	e00e      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800625e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006262:	3308      	adds	r3, #8
 8006264:	2102      	movs	r1, #2
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fca4 	bl	8006bb4 <RCCEx_PLL2_Config>
 800626c:	4603      	mov	r3, r0
 800626e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006272:	e003      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800627a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800627c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10d      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006284:	4b05      	ldr	r3, [pc, #20]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006288:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800628c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006292:	4a02      	ldr	r2, [pc, #8]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006294:	430b      	orrs	r3, r1
 8006296:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006298:	e006      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800629a:	bf00      	nop
 800629c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80062b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062b6:	2300      	movs	r3, #0
 80062b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80062be:	460b      	mov	r3, r1
 80062c0:	4313      	orrs	r3, r2
 80062c2:	d00c      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c8:	3328      	adds	r3, #40	@ 0x28
 80062ca:	2102      	movs	r1, #2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fd23 	bl	8006d18 <RCCEx_PLL3_Config>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80062ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80062ec:	2300      	movs	r3, #0
 80062ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80062f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80062f4:	460b      	mov	r3, r1
 80062f6:	4313      	orrs	r3, r2
 80062f8:	d038      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80062fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006302:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006306:	d018      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006308:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800630c:	d811      	bhi.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800630e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006312:	d014      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006318:	d80b      	bhi.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d011      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800631e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006322:	d106      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006324:	4bc3      	ldr	r3, [pc, #780]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006328:	4ac2      	ldr	r2, [pc, #776]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800632a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800632e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006330:	e008      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006338:	e004      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800633a:	bf00      	nop
 800633c:	e002      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800633e:	bf00      	nop
 8006340:	e000      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10b      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800634c:	4bb9      	ldr	r3, [pc, #740]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800634e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006350:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800635c:	4ab5      	ldr	r2, [pc, #724]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800635e:	430b      	orrs	r3, r1
 8006360:	6553      	str	r3, [r2, #84]	@ 0x54
 8006362:	e003      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006368:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800636c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006378:	65bb      	str	r3, [r7, #88]	@ 0x58
 800637a:	2300      	movs	r3, #0
 800637c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800637e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006382:	460b      	mov	r3, r1
 8006384:	4313      	orrs	r3, r2
 8006386:	d009      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006388:	4baa      	ldr	r3, [pc, #680]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800638a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800638c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006396:	4aa7      	ldr	r2, [pc, #668]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006398:	430b      	orrs	r3, r1
 800639a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800639c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80063a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80063aa:	2300      	movs	r3, #0
 80063ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80063ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80063b2:	460b      	mov	r3, r1
 80063b4:	4313      	orrs	r3, r2
 80063b6:	d00a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80063b8:	4b9e      	ldr	r3, [pc, #632]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80063c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80063c8:	4a9a      	ldr	r2, [pc, #616]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063ca:	430b      	orrs	r3, r1
 80063cc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80063da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063dc:	2300      	movs	r3, #0
 80063de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063e0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80063e4:	460b      	mov	r3, r1
 80063e6:	4313      	orrs	r3, r2
 80063e8:	d009      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063ea:	4b92      	ldr	r3, [pc, #584]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063ee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80063f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063f8:	4a8e      	ldr	r2, [pc, #568]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063fa:	430b      	orrs	r3, r1
 80063fc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800640a:	643b      	str	r3, [r7, #64]	@ 0x40
 800640c:	2300      	movs	r3, #0
 800640e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006410:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006414:	460b      	mov	r3, r1
 8006416:	4313      	orrs	r3, r2
 8006418:	d00e      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800641a:	4b86      	ldr	r3, [pc, #536]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	4a85      	ldr	r2, [pc, #532]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006420:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006424:	6113      	str	r3, [r2, #16]
 8006426:	4b83      	ldr	r3, [pc, #524]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006428:	6919      	ldr	r1, [r3, #16]
 800642a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006432:	4a80      	ldr	r2, [pc, #512]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006434:	430b      	orrs	r3, r1
 8006436:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006440:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006444:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006446:	2300      	movs	r3, #0
 8006448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800644a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800644e:	460b      	mov	r3, r1
 8006450:	4313      	orrs	r3, r2
 8006452:	d009      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006454:	4b77      	ldr	r3, [pc, #476]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006458:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800645c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006462:	4a74      	ldr	r2, [pc, #464]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006464:	430b      	orrs	r3, r1
 8006466:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006470:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006474:	633b      	str	r3, [r7, #48]	@ 0x30
 8006476:	2300      	movs	r3, #0
 8006478:	637b      	str	r3, [r7, #52]	@ 0x34
 800647a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800647e:	460b      	mov	r3, r1
 8006480:	4313      	orrs	r3, r2
 8006482:	d00a      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006484:	4b6b      	ldr	r3, [pc, #428]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006488:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800648c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006494:	4a67      	ldr	r2, [pc, #412]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006496:	430b      	orrs	r3, r1
 8006498:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800649a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	2100      	movs	r1, #0
 80064a4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80064b0:	460b      	mov	r3, r1
 80064b2:	4313      	orrs	r3, r2
 80064b4:	d011      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ba:	3308      	adds	r3, #8
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fb78 	bl	8006bb4 <RCCEx_PLL2_Config>
 80064c4:	4603      	mov	r3, r0
 80064c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80064ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80064da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	2100      	movs	r1, #0
 80064e4:	6239      	str	r1, [r7, #32]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80064ec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80064f0:	460b      	mov	r3, r1
 80064f2:	4313      	orrs	r3, r2
 80064f4:	d011      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064fa:	3308      	adds	r3, #8
 80064fc:	2101      	movs	r1, #1
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fb58 	bl	8006bb4 <RCCEx_PLL2_Config>
 8006504:	4603      	mov	r3, r0
 8006506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800650a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006516:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800651a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	2100      	movs	r1, #0
 8006524:	61b9      	str	r1, [r7, #24]
 8006526:	f003 0304 	and.w	r3, r3, #4
 800652a:	61fb      	str	r3, [r7, #28]
 800652c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006530:	460b      	mov	r3, r1
 8006532:	4313      	orrs	r3, r2
 8006534:	d011      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653a:	3308      	adds	r3, #8
 800653c:	2102      	movs	r1, #2
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fb38 	bl	8006bb4 <RCCEx_PLL2_Config>
 8006544:	4603      	mov	r3, r0
 8006546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800654a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006556:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006562:	2100      	movs	r1, #0
 8006564:	6139      	str	r1, [r7, #16]
 8006566:	f003 0308 	and.w	r3, r3, #8
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006570:	460b      	mov	r3, r1
 8006572:	4313      	orrs	r3, r2
 8006574:	d011      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657a:	3328      	adds	r3, #40	@ 0x28
 800657c:	2100      	movs	r1, #0
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fbca 	bl	8006d18 <RCCEx_PLL3_Config>
 8006584:	4603      	mov	r3, r0
 8006586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800658a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006596:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800659a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	2100      	movs	r1, #0
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	f003 0310 	and.w	r3, r3, #16
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80065b0:	460b      	mov	r3, r1
 80065b2:	4313      	orrs	r3, r2
 80065b4:	d011      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ba:	3328      	adds	r3, #40	@ 0x28
 80065bc:	2101      	movs	r1, #1
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fbaa 	bl	8006d18 <RCCEx_PLL3_Config>
 80065c4:	4603      	mov	r3, r0
 80065c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80065ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	2100      	movs	r1, #0
 80065e4:	6039      	str	r1, [r7, #0]
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	607b      	str	r3, [r7, #4]
 80065ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 80065f0:	460b      	mov	r3, r1
 80065f2:	4313      	orrs	r3, r2
 80065f4:	d011      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fa:	3328      	adds	r3, #40	@ 0x28
 80065fc:	2102      	movs	r1, #2
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fb8a 	bl	8006d18 <RCCEx_PLL3_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800660a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006616:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800661a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	e000      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
}
 8006628:	4618      	mov	r0, r3
 800662a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800662e:	46bd      	mov	sp, r7
 8006630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006634:	58024400 	.word	0x58024400

08006638 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800663c:	f7fe fd96 	bl	800516c <HAL_RCC_GetHCLKFreq>
 8006640:	4602      	mov	r2, r0
 8006642:	4b06      	ldr	r3, [pc, #24]	@ (800665c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	091b      	lsrs	r3, r3, #4
 8006648:	f003 0307 	and.w	r3, r3, #7
 800664c:	4904      	ldr	r1, [pc, #16]	@ (8006660 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800664e:	5ccb      	ldrb	r3, [r1, r3]
 8006650:	f003 031f 	and.w	r3, r3, #31
 8006654:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006658:	4618      	mov	r0, r3
 800665a:	bd80      	pop	{r7, pc}
 800665c:	58024400 	.word	0x58024400
 8006660:	0800aeb0 	.word	0x0800aeb0

08006664 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006664:	b480      	push	{r7}
 8006666:	b089      	sub	sp, #36	@ 0x24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800666c:	4ba1      	ldr	r3, [pc, #644]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800666e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006670:	f003 0303 	and.w	r3, r3, #3
 8006674:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006676:	4b9f      	ldr	r3, [pc, #636]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667a:	0b1b      	lsrs	r3, r3, #12
 800667c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006680:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006682:	4b9c      	ldr	r3, [pc, #624]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006686:	091b      	lsrs	r3, r3, #4
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800668e:	4b99      	ldr	r3, [pc, #612]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006692:	08db      	lsrs	r3, r3, #3
 8006694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	fb02 f303 	mul.w	r3, r2, r3
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8111 	beq.w	80068d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	f000 8083 	beq.w	80067c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b02      	cmp	r3, #2
 80066be:	f200 80a1 	bhi.w	8006804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d056      	beq.n	800677c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80066ce:	e099      	b.n	8006804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066d0:	4b88      	ldr	r3, [pc, #544]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d02d      	beq.n	8006738 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066dc:	4b85      	ldr	r3, [pc, #532]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	08db      	lsrs	r3, r3, #3
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	4a84      	ldr	r2, [pc, #528]	@ (80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80066e8:	fa22 f303 	lsr.w	r3, r2, r3
 80066ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	ee07 3a90 	vmov	s15, r3
 80066f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006706:	4b7b      	ldr	r3, [pc, #492]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006716:	ed97 6a03 	vldr	s12, [r7, #12]
 800671a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800671e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800672a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800672e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006732:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006736:	e087      	b.n	8006848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006742:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800674a:	4b6a      	ldr	r3, [pc, #424]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800674c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675a:	ed97 6a03 	vldr	s12, [r7, #12]
 800675e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800676a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800676e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800677a:	e065      	b.n	8006848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	ee07 3a90 	vmov	s15, r3
 8006782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006786:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800678a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800678e:	4b59      	ldr	r3, [pc, #356]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800679e:	ed97 6a03 	vldr	s12, [r7, #12]
 80067a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067be:	e043      	b.n	8006848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80067ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d2:	4b48      	ldr	r3, [pc, #288]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006802:	e021      	b.n	8006848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006816:	4b37      	ldr	r3, [pc, #220]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006826:	ed97 6a03 	vldr	s12, [r7, #12]
 800682a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800682e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800683a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800683e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006846:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006848:	4b2a      	ldr	r3, [pc, #168]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800684a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684c:	0a5b      	lsrs	r3, r3, #9
 800684e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800685e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006862:	edd7 6a07 	vldr	s13, [r7, #28]
 8006866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800686a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800686e:	ee17 2a90 	vmov	r2, s15
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006876:	4b1f      	ldr	r3, [pc, #124]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687a:	0c1b      	lsrs	r3, r3, #16
 800687c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006880:	ee07 3a90 	vmov	s15, r3
 8006884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006888:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800688c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006890:	edd7 6a07 	vldr	s13, [r7, #28]
 8006894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800689c:	ee17 2a90 	vmov	r2, s15
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80068a4:	4b13      	ldr	r3, [pc, #76]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a8:	0e1b      	lsrs	r3, r3, #24
 80068aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068be:	edd7 6a07 	vldr	s13, [r7, #28]
 80068c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ca:	ee17 2a90 	vmov	r2, s15
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80068d2:	e008      	b.n	80068e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	609a      	str	r2, [r3, #8]
}
 80068e6:	bf00      	nop
 80068e8:	3724      	adds	r7, #36	@ 0x24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	58024400 	.word	0x58024400
 80068f8:	03d09000 	.word	0x03d09000
 80068fc:	46000000 	.word	0x46000000
 8006900:	4c742400 	.word	0x4c742400
 8006904:	4a742400 	.word	0x4a742400
 8006908:	4bbebc20 	.word	0x4bbebc20

0800690c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800690c:	b480      	push	{r7}
 800690e:	b089      	sub	sp, #36	@ 0x24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006914:	4ba1      	ldr	r3, [pc, #644]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006918:	f003 0303 	and.w	r3, r3, #3
 800691c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800691e:	4b9f      	ldr	r3, [pc, #636]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006922:	0d1b      	lsrs	r3, r3, #20
 8006924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006928:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800692a:	4b9c      	ldr	r3, [pc, #624]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800692c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692e:	0a1b      	lsrs	r3, r3, #8
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006936:	4b99      	ldr	r3, [pc, #612]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800693a:	08db      	lsrs	r3, r3, #3
 800693c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	fb02 f303 	mul.w	r3, r2, r3
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 8111 	beq.w	8006b7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b02      	cmp	r3, #2
 800695e:	f000 8083 	beq.w	8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	2b02      	cmp	r3, #2
 8006966:	f200 80a1 	bhi.w	8006aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d056      	beq.n	8006a24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006976:	e099      	b.n	8006aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006978:	4b88      	ldr	r3, [pc, #544]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d02d      	beq.n	80069e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006984:	4b85      	ldr	r3, [pc, #532]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	08db      	lsrs	r3, r3, #3
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	4a84      	ldr	r2, [pc, #528]	@ (8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006990:	fa22 f303 	lsr.w	r3, r2, r3
 8006994:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	ee07 3a90 	vmov	s15, r3
 800699c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	ee07 3a90 	vmov	s15, r3
 80069a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ae:	4b7b      	ldr	r3, [pc, #492]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b6:	ee07 3a90 	vmov	s15, r3
 80069ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069be:	ed97 6a03 	vldr	s12, [r7, #12]
 80069c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80069de:	e087      	b.n	8006af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80069ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f2:	4b6a      	ldr	r3, [pc, #424]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a22:	e065      	b.n	8006af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	ee07 3a90 	vmov	s15, r3
 8006a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a36:	4b59      	ldr	r3, [pc, #356]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a66:	e043      	b.n	8006af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7a:	4b48      	ldr	r3, [pc, #288]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aaa:	e021      	b.n	8006af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006abe:	4b37      	ldr	r3, [pc, #220]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ad2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006af0:	4b2a      	ldr	r3, [pc, #168]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af4:	0a5b      	lsrs	r3, r3, #9
 8006af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b16:	ee17 2a90 	vmov	r2, s15
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b22:	0c1b      	lsrs	r3, r3, #16
 8006b24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b28:	ee07 3a90 	vmov	s15, r3
 8006b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b44:	ee17 2a90 	vmov	r2, s15
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006b4c:	4b13      	ldr	r3, [pc, #76]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b50:	0e1b      	lsrs	r3, r3, #24
 8006b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b72:	ee17 2a90 	vmov	r2, s15
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006b7a:	e008      	b.n	8006b8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	609a      	str	r2, [r3, #8]
}
 8006b8e:	bf00      	nop
 8006b90:	3724      	adds	r7, #36	@ 0x24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	58024400 	.word	0x58024400
 8006ba0:	03d09000 	.word	0x03d09000
 8006ba4:	46000000 	.word	0x46000000
 8006ba8:	4c742400 	.word	0x4c742400
 8006bac:	4a742400 	.word	0x4a742400
 8006bb0:	4bbebc20 	.word	0x4bbebc20

08006bb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bc2:	4b53      	ldr	r3, [pc, #332]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d101      	bne.n	8006bd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e099      	b.n	8006d06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006bd2:	4b4f      	ldr	r3, [pc, #316]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a4e      	ldr	r2, [pc, #312]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006bd8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bde:	f7fb ff31 	bl	8002a44 <HAL_GetTick>
 8006be2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006be4:	e008      	b.n	8006bf8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006be6:	f7fb ff2d 	bl	8002a44 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e086      	b.n	8006d06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bf8:	4b45      	ldr	r3, [pc, #276]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1f0      	bne.n	8006be6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c04:	4b42      	ldr	r3, [pc, #264]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c08:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	031b      	lsls	r3, r3, #12
 8006c12:	493f      	ldr	r1, [pc, #252]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	025b      	lsls	r3, r3, #9
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	041b      	lsls	r3, r3, #16
 8006c36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	061b      	lsls	r3, r3, #24
 8006c44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c48:	4931      	ldr	r1, [pc, #196]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c4e:	4b30      	ldr	r3, [pc, #192]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	492d      	ldr	r1, [pc, #180]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c60:	4b2b      	ldr	r3, [pc, #172]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c64:	f023 0220 	bic.w	r2, r3, #32
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	4928      	ldr	r1, [pc, #160]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006c72:	4b27      	ldr	r3, [pc, #156]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c76:	4a26      	ldr	r2, [pc, #152]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c78:	f023 0310 	bic.w	r3, r3, #16
 8006c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c7e:	4b24      	ldr	r3, [pc, #144]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c82:	4b24      	ldr	r3, [pc, #144]	@ (8006d14 <RCCEx_PLL2_Config+0x160>)
 8006c84:	4013      	ands	r3, r2
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	69d2      	ldr	r2, [r2, #28]
 8006c8a:	00d2      	lsls	r2, r2, #3
 8006c8c:	4920      	ldr	r1, [pc, #128]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006c92:	4b1f      	ldr	r3, [pc, #124]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c96:	4a1e      	ldr	r2, [pc, #120]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c98:	f043 0310 	orr.w	r3, r3, #16
 8006c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d106      	bne.n	8006cb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca8:	4a19      	ldr	r2, [pc, #100]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006caa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006cb0:	e00f      	b.n	8006cd2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d106      	bne.n	8006cc6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006cb8:	4b15      	ldr	r3, [pc, #84]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbc:	4a14      	ldr	r2, [pc, #80]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006cbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006cc4:	e005      	b.n	8006cd2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006cc6:	4b12      	ldr	r3, [pc, #72]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cca:	4a11      	ldr	r2, [pc, #68]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006ccc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006cd8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cde:	f7fb feb1 	bl	8002a44 <HAL_GetTick>
 8006ce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ce4:	e008      	b.n	8006cf8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ce6:	f7fb fead 	bl	8002a44 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d901      	bls.n	8006cf8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e006      	b.n	8006d06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cf8:	4b05      	ldr	r3, [pc, #20]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0f0      	beq.n	8006ce6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	58024400 	.word	0x58024400
 8006d14:	ffff0007 	.word	0xffff0007

08006d18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d26:	4b53      	ldr	r3, [pc, #332]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d101      	bne.n	8006d36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e099      	b.n	8006e6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d36:	4b4f      	ldr	r3, [pc, #316]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a4e      	ldr	r2, [pc, #312]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006d3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d42:	f7fb fe7f 	bl	8002a44 <HAL_GetTick>
 8006d46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d48:	e008      	b.n	8006d5c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d4a:	f7fb fe7b 	bl	8002a44 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d901      	bls.n	8006d5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e086      	b.n	8006e6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d5c:	4b45      	ldr	r3, [pc, #276]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1f0      	bne.n	8006d4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d68:	4b42      	ldr	r3, [pc, #264]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	051b      	lsls	r3, r3, #20
 8006d76:	493f      	ldr	r1, [pc, #252]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	025b      	lsls	r3, r3, #9
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	041b      	lsls	r3, r3, #16
 8006d9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	061b      	lsls	r3, r3, #24
 8006da8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006dac:	4931      	ldr	r1, [pc, #196]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006db2:	4b30      	ldr	r3, [pc, #192]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	492d      	ldr	r1, [pc, #180]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	4928      	ldr	r1, [pc, #160]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006dd6:	4b27      	ldr	r3, [pc, #156]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dda:	4a26      	ldr	r2, [pc, #152]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006ddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006de2:	4b24      	ldr	r3, [pc, #144]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006de6:	4b24      	ldr	r3, [pc, #144]	@ (8006e78 <RCCEx_PLL3_Config+0x160>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	69d2      	ldr	r2, [r2, #28]
 8006dee:	00d2      	lsls	r2, r2, #3
 8006df0:	4920      	ldr	r1, [pc, #128]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006df6:	4b1f      	ldr	r3, [pc, #124]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d106      	bne.n	8006e16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006e08:	4b1a      	ldr	r3, [pc, #104]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0c:	4a19      	ldr	r2, [pc, #100]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006e12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e14:	e00f      	b.n	8006e36 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d106      	bne.n	8006e2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e1c:	4b15      	ldr	r3, [pc, #84]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e20:	4a14      	ldr	r2, [pc, #80]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e28:	e005      	b.n	8006e36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e2a:	4b12      	ldr	r3, [pc, #72]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2e:	4a11      	ldr	r2, [pc, #68]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e36:	4b0f      	ldr	r3, [pc, #60]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e42:	f7fb fdff 	bl	8002a44 <HAL_GetTick>
 8006e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e48:	e008      	b.n	8006e5c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e4a:	f7fb fdfb 	bl	8002a44 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d901      	bls.n	8006e5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e006      	b.n	8006e6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e5c:	4b05      	ldr	r3, [pc, #20]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0f0      	beq.n	8006e4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	58024400 	.word	0x58024400
 8006e78:	ffff0007 	.word	0xffff0007

08006e7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e10f      	b.n	80070ae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a87      	ldr	r2, [pc, #540]	@ (80070b8 <HAL_SPI_Init+0x23c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00f      	beq.n	8006ebe <HAL_SPI_Init+0x42>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a86      	ldr	r2, [pc, #536]	@ (80070bc <HAL_SPI_Init+0x240>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00a      	beq.n	8006ebe <HAL_SPI_Init+0x42>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a84      	ldr	r2, [pc, #528]	@ (80070c0 <HAL_SPI_Init+0x244>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d005      	beq.n	8006ebe <HAL_SPI_Init+0x42>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	2b0f      	cmp	r3, #15
 8006eb8:	d901      	bls.n	8006ebe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e0f7      	b.n	80070ae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f900 	bl	80070c4 <SPI_GetPacketSize>
 8006ec4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a7b      	ldr	r2, [pc, #492]	@ (80070b8 <HAL_SPI_Init+0x23c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d00c      	beq.n	8006eea <HAL_SPI_Init+0x6e>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a79      	ldr	r2, [pc, #484]	@ (80070bc <HAL_SPI_Init+0x240>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d007      	beq.n	8006eea <HAL_SPI_Init+0x6e>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a78      	ldr	r2, [pc, #480]	@ (80070c0 <HAL_SPI_Init+0x244>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d002      	beq.n	8006eea <HAL_SPI_Init+0x6e>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b08      	cmp	r3, #8
 8006ee8:	d811      	bhi.n	8006f0e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006eee:	4a72      	ldr	r2, [pc, #456]	@ (80070b8 <HAL_SPI_Init+0x23c>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d009      	beq.n	8006f08 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a70      	ldr	r2, [pc, #448]	@ (80070bc <HAL_SPI_Init+0x240>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d004      	beq.n	8006f08 <HAL_SPI_Init+0x8c>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a6f      	ldr	r2, [pc, #444]	@ (80070c0 <HAL_SPI_Init+0x244>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d104      	bne.n	8006f12 <HAL_SPI_Init+0x96>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b10      	cmp	r3, #16
 8006f0c:	d901      	bls.n	8006f12 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e0cd      	b.n	80070ae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fb fa34 	bl	8002394 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f022 0201 	bic.w	r2, r2, #1
 8006f42:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006f4e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f58:	d119      	bne.n	8006f8e <HAL_SPI_Init+0x112>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f62:	d103      	bne.n	8006f6c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d008      	beq.n	8006f7e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10c      	bne.n	8006f8e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006f78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f7c:	d107      	bne.n	8006f8e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00f      	beq.n	8006fba <HAL_SPI_Init+0x13e>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	2b06      	cmp	r3, #6
 8006fa0:	d90b      	bls.n	8006fba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	e007      	b.n	8006fca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006fc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	69da      	ldr	r2, [r3, #28]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fdc:	ea42 0103 	orr.w	r1, r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68da      	ldr	r2, [r3, #12]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	431a      	orrs	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	431a      	orrs	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	431a      	orrs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	431a      	orrs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	431a      	orrs	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800701e:	431a      	orrs	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	431a      	orrs	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800702a:	ea42 0103 	orr.w	r1, r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d113      	bne.n	800706a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007054:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007068:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0201 	bic.w	r2, r2, #1
 8007078:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	40013000 	.word	0x40013000
 80070bc:	40003800 	.word	0x40003800
 80070c0:	40003c00 	.word	0x40003c00

080070c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	3301      	adds	r3, #1
 80070d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	3301      	adds	r3, #1
 80070dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	3307      	adds	r3, #7
 80070e2:	08db      	lsrs	r3, r3, #3
 80070e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	fb02 f303 	mul.w	r3, r2, r3
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e042      	b.n	8007192 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007112:	2b00      	cmp	r3, #0
 8007114:	d106      	bne.n	8007124 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fb f9c6 	bl	80024b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2224      	movs	r2, #36	@ 0x24
 8007128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 0201 	bic.w	r2, r2, #1
 800713a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fe1f 	bl	8007d88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f8b4 	bl	80072b8 <UART_SetConfig>
 8007150:	4603      	mov	r3, r0
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e01b      	b.n	8007192 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007168:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007178:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0201 	orr.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fe9e 	bl	8007ecc <UART_CheckIdleState>
 8007190:	4603      	mov	r3, r0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b08a      	sub	sp, #40	@ 0x28
 800719e:	af02      	add	r7, sp, #8
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	603b      	str	r3, [r7, #0]
 80071a6:	4613      	mov	r3, r2
 80071a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b0:	2b20      	cmp	r3, #32
 80071b2:	d17b      	bne.n	80072ac <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_UART_Transmit+0x26>
 80071ba:	88fb      	ldrh	r3, [r7, #6]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e074      	b.n	80072ae <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2221      	movs	r2, #33	@ 0x21
 80071d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071d4:	f7fb fc36 	bl	8002a44 <HAL_GetTick>
 80071d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	88fa      	ldrh	r2, [r7, #6]
 80071de:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	88fa      	ldrh	r2, [r7, #6]
 80071e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071f2:	d108      	bne.n	8007206 <HAL_UART_Transmit+0x6c>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80071fc:	2300      	movs	r3, #0
 80071fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	61bb      	str	r3, [r7, #24]
 8007204:	e003      	b.n	800720e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800720a:	2300      	movs	r3, #0
 800720c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800720e:	e030      	b.n	8007272 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2200      	movs	r2, #0
 8007218:	2180      	movs	r1, #128	@ 0x80
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 ff00 	bl	8008020 <UART_WaitOnFlagUntilTimeout>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d005      	beq.n	8007232 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2220      	movs	r2, #32
 800722a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e03d      	b.n	80072ae <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10b      	bne.n	8007250 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	461a      	mov	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007246:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	3302      	adds	r3, #2
 800724c:	61bb      	str	r3, [r7, #24]
 800724e:	e007      	b.n	8007260 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	781a      	ldrb	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	3301      	adds	r3, #1
 800725e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007278:	b29b      	uxth	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1c8      	bne.n	8007210 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2200      	movs	r2, #0
 8007286:	2140      	movs	r1, #64	@ 0x40
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fec9 	bl	8008020 <UART_WaitOnFlagUntilTimeout>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2220      	movs	r2, #32
 8007298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e006      	b.n	80072ae <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2220      	movs	r2, #32
 80072a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	e000      	b.n	80072ae <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80072ac:	2302      	movs	r3, #2
  }
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3720      	adds	r7, #32
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072bc:	b092      	sub	sp, #72	@ 0x48
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	431a      	orrs	r2, r3
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	431a      	orrs	r2, r3
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	4313      	orrs	r3, r2
 80072de:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	4bbe      	ldr	r3, [pc, #760]	@ (80075e0 <UART_SetConfig+0x328>)
 80072e8:	4013      	ands	r3, r2
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	6812      	ldr	r2, [r2, #0]
 80072ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80072f0:	430b      	orrs	r3, r1
 80072f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4ab3      	ldr	r2, [pc, #716]	@ (80075e4 <UART_SetConfig+0x32c>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d004      	beq.n	8007324 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007320:	4313      	orrs	r3, r2
 8007322:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	4baf      	ldr	r3, [pc, #700]	@ (80075e8 <UART_SetConfig+0x330>)
 800732c:	4013      	ands	r3, r2
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	6812      	ldr	r2, [r2, #0]
 8007332:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007334:	430b      	orrs	r3, r1
 8007336:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733e:	f023 010f 	bic.w	r1, r3, #15
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4aa6      	ldr	r2, [pc, #664]	@ (80075ec <UART_SetConfig+0x334>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d177      	bne.n	8007448 <UART_SetConfig+0x190>
 8007358:	4ba5      	ldr	r3, [pc, #660]	@ (80075f0 <UART_SetConfig+0x338>)
 800735a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800735c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007360:	2b28      	cmp	r3, #40	@ 0x28
 8007362:	d86d      	bhi.n	8007440 <UART_SetConfig+0x188>
 8007364:	a201      	add	r2, pc, #4	@ (adr r2, 800736c <UART_SetConfig+0xb4>)
 8007366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736a:	bf00      	nop
 800736c:	08007411 	.word	0x08007411
 8007370:	08007441 	.word	0x08007441
 8007374:	08007441 	.word	0x08007441
 8007378:	08007441 	.word	0x08007441
 800737c:	08007441 	.word	0x08007441
 8007380:	08007441 	.word	0x08007441
 8007384:	08007441 	.word	0x08007441
 8007388:	08007441 	.word	0x08007441
 800738c:	08007419 	.word	0x08007419
 8007390:	08007441 	.word	0x08007441
 8007394:	08007441 	.word	0x08007441
 8007398:	08007441 	.word	0x08007441
 800739c:	08007441 	.word	0x08007441
 80073a0:	08007441 	.word	0x08007441
 80073a4:	08007441 	.word	0x08007441
 80073a8:	08007441 	.word	0x08007441
 80073ac:	08007421 	.word	0x08007421
 80073b0:	08007441 	.word	0x08007441
 80073b4:	08007441 	.word	0x08007441
 80073b8:	08007441 	.word	0x08007441
 80073bc:	08007441 	.word	0x08007441
 80073c0:	08007441 	.word	0x08007441
 80073c4:	08007441 	.word	0x08007441
 80073c8:	08007441 	.word	0x08007441
 80073cc:	08007429 	.word	0x08007429
 80073d0:	08007441 	.word	0x08007441
 80073d4:	08007441 	.word	0x08007441
 80073d8:	08007441 	.word	0x08007441
 80073dc:	08007441 	.word	0x08007441
 80073e0:	08007441 	.word	0x08007441
 80073e4:	08007441 	.word	0x08007441
 80073e8:	08007441 	.word	0x08007441
 80073ec:	08007431 	.word	0x08007431
 80073f0:	08007441 	.word	0x08007441
 80073f4:	08007441 	.word	0x08007441
 80073f8:	08007441 	.word	0x08007441
 80073fc:	08007441 	.word	0x08007441
 8007400:	08007441 	.word	0x08007441
 8007404:	08007441 	.word	0x08007441
 8007408:	08007441 	.word	0x08007441
 800740c:	08007439 	.word	0x08007439
 8007410:	2301      	movs	r3, #1
 8007412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007416:	e222      	b.n	800785e <UART_SetConfig+0x5a6>
 8007418:	2304      	movs	r3, #4
 800741a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800741e:	e21e      	b.n	800785e <UART_SetConfig+0x5a6>
 8007420:	2308      	movs	r3, #8
 8007422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007426:	e21a      	b.n	800785e <UART_SetConfig+0x5a6>
 8007428:	2310      	movs	r3, #16
 800742a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800742e:	e216      	b.n	800785e <UART_SetConfig+0x5a6>
 8007430:	2320      	movs	r3, #32
 8007432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007436:	e212      	b.n	800785e <UART_SetConfig+0x5a6>
 8007438:	2340      	movs	r3, #64	@ 0x40
 800743a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800743e:	e20e      	b.n	800785e <UART_SetConfig+0x5a6>
 8007440:	2380      	movs	r3, #128	@ 0x80
 8007442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007446:	e20a      	b.n	800785e <UART_SetConfig+0x5a6>
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a69      	ldr	r2, [pc, #420]	@ (80075f4 <UART_SetConfig+0x33c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d130      	bne.n	80074b4 <UART_SetConfig+0x1fc>
 8007452:	4b67      	ldr	r3, [pc, #412]	@ (80075f0 <UART_SetConfig+0x338>)
 8007454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	2b05      	cmp	r3, #5
 800745c:	d826      	bhi.n	80074ac <UART_SetConfig+0x1f4>
 800745e:	a201      	add	r2, pc, #4	@ (adr r2, 8007464 <UART_SetConfig+0x1ac>)
 8007460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007464:	0800747d 	.word	0x0800747d
 8007468:	08007485 	.word	0x08007485
 800746c:	0800748d 	.word	0x0800748d
 8007470:	08007495 	.word	0x08007495
 8007474:	0800749d 	.word	0x0800749d
 8007478:	080074a5 	.word	0x080074a5
 800747c:	2300      	movs	r3, #0
 800747e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007482:	e1ec      	b.n	800785e <UART_SetConfig+0x5a6>
 8007484:	2304      	movs	r3, #4
 8007486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800748a:	e1e8      	b.n	800785e <UART_SetConfig+0x5a6>
 800748c:	2308      	movs	r3, #8
 800748e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007492:	e1e4      	b.n	800785e <UART_SetConfig+0x5a6>
 8007494:	2310      	movs	r3, #16
 8007496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800749a:	e1e0      	b.n	800785e <UART_SetConfig+0x5a6>
 800749c:	2320      	movs	r3, #32
 800749e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074a2:	e1dc      	b.n	800785e <UART_SetConfig+0x5a6>
 80074a4:	2340      	movs	r3, #64	@ 0x40
 80074a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074aa:	e1d8      	b.n	800785e <UART_SetConfig+0x5a6>
 80074ac:	2380      	movs	r3, #128	@ 0x80
 80074ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b2:	e1d4      	b.n	800785e <UART_SetConfig+0x5a6>
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a4f      	ldr	r2, [pc, #316]	@ (80075f8 <UART_SetConfig+0x340>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d130      	bne.n	8007520 <UART_SetConfig+0x268>
 80074be:	4b4c      	ldr	r3, [pc, #304]	@ (80075f0 <UART_SetConfig+0x338>)
 80074c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	2b05      	cmp	r3, #5
 80074c8:	d826      	bhi.n	8007518 <UART_SetConfig+0x260>
 80074ca:	a201      	add	r2, pc, #4	@ (adr r2, 80074d0 <UART_SetConfig+0x218>)
 80074cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d0:	080074e9 	.word	0x080074e9
 80074d4:	080074f1 	.word	0x080074f1
 80074d8:	080074f9 	.word	0x080074f9
 80074dc:	08007501 	.word	0x08007501
 80074e0:	08007509 	.word	0x08007509
 80074e4:	08007511 	.word	0x08007511
 80074e8:	2300      	movs	r3, #0
 80074ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ee:	e1b6      	b.n	800785e <UART_SetConfig+0x5a6>
 80074f0:	2304      	movs	r3, #4
 80074f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074f6:	e1b2      	b.n	800785e <UART_SetConfig+0x5a6>
 80074f8:	2308      	movs	r3, #8
 80074fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074fe:	e1ae      	b.n	800785e <UART_SetConfig+0x5a6>
 8007500:	2310      	movs	r3, #16
 8007502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007506:	e1aa      	b.n	800785e <UART_SetConfig+0x5a6>
 8007508:	2320      	movs	r3, #32
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800750e:	e1a6      	b.n	800785e <UART_SetConfig+0x5a6>
 8007510:	2340      	movs	r3, #64	@ 0x40
 8007512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007516:	e1a2      	b.n	800785e <UART_SetConfig+0x5a6>
 8007518:	2380      	movs	r3, #128	@ 0x80
 800751a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751e:	e19e      	b.n	800785e <UART_SetConfig+0x5a6>
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a35      	ldr	r2, [pc, #212]	@ (80075fc <UART_SetConfig+0x344>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d130      	bne.n	800758c <UART_SetConfig+0x2d4>
 800752a:	4b31      	ldr	r3, [pc, #196]	@ (80075f0 <UART_SetConfig+0x338>)
 800752c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800752e:	f003 0307 	and.w	r3, r3, #7
 8007532:	2b05      	cmp	r3, #5
 8007534:	d826      	bhi.n	8007584 <UART_SetConfig+0x2cc>
 8007536:	a201      	add	r2, pc, #4	@ (adr r2, 800753c <UART_SetConfig+0x284>)
 8007538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753c:	08007555 	.word	0x08007555
 8007540:	0800755d 	.word	0x0800755d
 8007544:	08007565 	.word	0x08007565
 8007548:	0800756d 	.word	0x0800756d
 800754c:	08007575 	.word	0x08007575
 8007550:	0800757d 	.word	0x0800757d
 8007554:	2300      	movs	r3, #0
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755a:	e180      	b.n	800785e <UART_SetConfig+0x5a6>
 800755c:	2304      	movs	r3, #4
 800755e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007562:	e17c      	b.n	800785e <UART_SetConfig+0x5a6>
 8007564:	2308      	movs	r3, #8
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800756a:	e178      	b.n	800785e <UART_SetConfig+0x5a6>
 800756c:	2310      	movs	r3, #16
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007572:	e174      	b.n	800785e <UART_SetConfig+0x5a6>
 8007574:	2320      	movs	r3, #32
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800757a:	e170      	b.n	800785e <UART_SetConfig+0x5a6>
 800757c:	2340      	movs	r3, #64	@ 0x40
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007582:	e16c      	b.n	800785e <UART_SetConfig+0x5a6>
 8007584:	2380      	movs	r3, #128	@ 0x80
 8007586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758a:	e168      	b.n	800785e <UART_SetConfig+0x5a6>
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a1b      	ldr	r2, [pc, #108]	@ (8007600 <UART_SetConfig+0x348>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d142      	bne.n	800761c <UART_SetConfig+0x364>
 8007596:	4b16      	ldr	r3, [pc, #88]	@ (80075f0 <UART_SetConfig+0x338>)
 8007598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	2b05      	cmp	r3, #5
 80075a0:	d838      	bhi.n	8007614 <UART_SetConfig+0x35c>
 80075a2:	a201      	add	r2, pc, #4	@ (adr r2, 80075a8 <UART_SetConfig+0x2f0>)
 80075a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a8:	080075c1 	.word	0x080075c1
 80075ac:	080075c9 	.word	0x080075c9
 80075b0:	080075d1 	.word	0x080075d1
 80075b4:	080075d9 	.word	0x080075d9
 80075b8:	08007605 	.word	0x08007605
 80075bc:	0800760d 	.word	0x0800760d
 80075c0:	2300      	movs	r3, #0
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c6:	e14a      	b.n	800785e <UART_SetConfig+0x5a6>
 80075c8:	2304      	movs	r3, #4
 80075ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ce:	e146      	b.n	800785e <UART_SetConfig+0x5a6>
 80075d0:	2308      	movs	r3, #8
 80075d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d6:	e142      	b.n	800785e <UART_SetConfig+0x5a6>
 80075d8:	2310      	movs	r3, #16
 80075da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075de:	e13e      	b.n	800785e <UART_SetConfig+0x5a6>
 80075e0:	cfff69f3 	.word	0xcfff69f3
 80075e4:	58000c00 	.word	0x58000c00
 80075e8:	11fff4ff 	.word	0x11fff4ff
 80075ec:	40011000 	.word	0x40011000
 80075f0:	58024400 	.word	0x58024400
 80075f4:	40004400 	.word	0x40004400
 80075f8:	40004800 	.word	0x40004800
 80075fc:	40004c00 	.word	0x40004c00
 8007600:	40005000 	.word	0x40005000
 8007604:	2320      	movs	r3, #32
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760a:	e128      	b.n	800785e <UART_SetConfig+0x5a6>
 800760c:	2340      	movs	r3, #64	@ 0x40
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007612:	e124      	b.n	800785e <UART_SetConfig+0x5a6>
 8007614:	2380      	movs	r3, #128	@ 0x80
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761a:	e120      	b.n	800785e <UART_SetConfig+0x5a6>
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4acb      	ldr	r2, [pc, #812]	@ (8007950 <UART_SetConfig+0x698>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d176      	bne.n	8007714 <UART_SetConfig+0x45c>
 8007626:	4bcb      	ldr	r3, [pc, #812]	@ (8007954 <UART_SetConfig+0x69c>)
 8007628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800762a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800762e:	2b28      	cmp	r3, #40	@ 0x28
 8007630:	d86c      	bhi.n	800770c <UART_SetConfig+0x454>
 8007632:	a201      	add	r2, pc, #4	@ (adr r2, 8007638 <UART_SetConfig+0x380>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	080076dd 	.word	0x080076dd
 800763c:	0800770d 	.word	0x0800770d
 8007640:	0800770d 	.word	0x0800770d
 8007644:	0800770d 	.word	0x0800770d
 8007648:	0800770d 	.word	0x0800770d
 800764c:	0800770d 	.word	0x0800770d
 8007650:	0800770d 	.word	0x0800770d
 8007654:	0800770d 	.word	0x0800770d
 8007658:	080076e5 	.word	0x080076e5
 800765c:	0800770d 	.word	0x0800770d
 8007660:	0800770d 	.word	0x0800770d
 8007664:	0800770d 	.word	0x0800770d
 8007668:	0800770d 	.word	0x0800770d
 800766c:	0800770d 	.word	0x0800770d
 8007670:	0800770d 	.word	0x0800770d
 8007674:	0800770d 	.word	0x0800770d
 8007678:	080076ed 	.word	0x080076ed
 800767c:	0800770d 	.word	0x0800770d
 8007680:	0800770d 	.word	0x0800770d
 8007684:	0800770d 	.word	0x0800770d
 8007688:	0800770d 	.word	0x0800770d
 800768c:	0800770d 	.word	0x0800770d
 8007690:	0800770d 	.word	0x0800770d
 8007694:	0800770d 	.word	0x0800770d
 8007698:	080076f5 	.word	0x080076f5
 800769c:	0800770d 	.word	0x0800770d
 80076a0:	0800770d 	.word	0x0800770d
 80076a4:	0800770d 	.word	0x0800770d
 80076a8:	0800770d 	.word	0x0800770d
 80076ac:	0800770d 	.word	0x0800770d
 80076b0:	0800770d 	.word	0x0800770d
 80076b4:	0800770d 	.word	0x0800770d
 80076b8:	080076fd 	.word	0x080076fd
 80076bc:	0800770d 	.word	0x0800770d
 80076c0:	0800770d 	.word	0x0800770d
 80076c4:	0800770d 	.word	0x0800770d
 80076c8:	0800770d 	.word	0x0800770d
 80076cc:	0800770d 	.word	0x0800770d
 80076d0:	0800770d 	.word	0x0800770d
 80076d4:	0800770d 	.word	0x0800770d
 80076d8:	08007705 	.word	0x08007705
 80076dc:	2301      	movs	r3, #1
 80076de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e2:	e0bc      	b.n	800785e <UART_SetConfig+0x5a6>
 80076e4:	2304      	movs	r3, #4
 80076e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ea:	e0b8      	b.n	800785e <UART_SetConfig+0x5a6>
 80076ec:	2308      	movs	r3, #8
 80076ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f2:	e0b4      	b.n	800785e <UART_SetConfig+0x5a6>
 80076f4:	2310      	movs	r3, #16
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fa:	e0b0      	b.n	800785e <UART_SetConfig+0x5a6>
 80076fc:	2320      	movs	r3, #32
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007702:	e0ac      	b.n	800785e <UART_SetConfig+0x5a6>
 8007704:	2340      	movs	r3, #64	@ 0x40
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770a:	e0a8      	b.n	800785e <UART_SetConfig+0x5a6>
 800770c:	2380      	movs	r3, #128	@ 0x80
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007712:	e0a4      	b.n	800785e <UART_SetConfig+0x5a6>
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a8f      	ldr	r2, [pc, #572]	@ (8007958 <UART_SetConfig+0x6a0>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d130      	bne.n	8007780 <UART_SetConfig+0x4c8>
 800771e:	4b8d      	ldr	r3, [pc, #564]	@ (8007954 <UART_SetConfig+0x69c>)
 8007720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007722:	f003 0307 	and.w	r3, r3, #7
 8007726:	2b05      	cmp	r3, #5
 8007728:	d826      	bhi.n	8007778 <UART_SetConfig+0x4c0>
 800772a:	a201      	add	r2, pc, #4	@ (adr r2, 8007730 <UART_SetConfig+0x478>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007749 	.word	0x08007749
 8007734:	08007751 	.word	0x08007751
 8007738:	08007759 	.word	0x08007759
 800773c:	08007761 	.word	0x08007761
 8007740:	08007769 	.word	0x08007769
 8007744:	08007771 	.word	0x08007771
 8007748:	2300      	movs	r3, #0
 800774a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800774e:	e086      	b.n	800785e <UART_SetConfig+0x5a6>
 8007750:	2304      	movs	r3, #4
 8007752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007756:	e082      	b.n	800785e <UART_SetConfig+0x5a6>
 8007758:	2308      	movs	r3, #8
 800775a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775e:	e07e      	b.n	800785e <UART_SetConfig+0x5a6>
 8007760:	2310      	movs	r3, #16
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007766:	e07a      	b.n	800785e <UART_SetConfig+0x5a6>
 8007768:	2320      	movs	r3, #32
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800776e:	e076      	b.n	800785e <UART_SetConfig+0x5a6>
 8007770:	2340      	movs	r3, #64	@ 0x40
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007776:	e072      	b.n	800785e <UART_SetConfig+0x5a6>
 8007778:	2380      	movs	r3, #128	@ 0x80
 800777a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800777e:	e06e      	b.n	800785e <UART_SetConfig+0x5a6>
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a75      	ldr	r2, [pc, #468]	@ (800795c <UART_SetConfig+0x6a4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d130      	bne.n	80077ec <UART_SetConfig+0x534>
 800778a:	4b72      	ldr	r3, [pc, #456]	@ (8007954 <UART_SetConfig+0x69c>)
 800778c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	2b05      	cmp	r3, #5
 8007794:	d826      	bhi.n	80077e4 <UART_SetConfig+0x52c>
 8007796:	a201      	add	r2, pc, #4	@ (adr r2, 800779c <UART_SetConfig+0x4e4>)
 8007798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779c:	080077b5 	.word	0x080077b5
 80077a0:	080077bd 	.word	0x080077bd
 80077a4:	080077c5 	.word	0x080077c5
 80077a8:	080077cd 	.word	0x080077cd
 80077ac:	080077d5 	.word	0x080077d5
 80077b0:	080077dd 	.word	0x080077dd
 80077b4:	2300      	movs	r3, #0
 80077b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ba:	e050      	b.n	800785e <UART_SetConfig+0x5a6>
 80077bc:	2304      	movs	r3, #4
 80077be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c2:	e04c      	b.n	800785e <UART_SetConfig+0x5a6>
 80077c4:	2308      	movs	r3, #8
 80077c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ca:	e048      	b.n	800785e <UART_SetConfig+0x5a6>
 80077cc:	2310      	movs	r3, #16
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d2:	e044      	b.n	800785e <UART_SetConfig+0x5a6>
 80077d4:	2320      	movs	r3, #32
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077da:	e040      	b.n	800785e <UART_SetConfig+0x5a6>
 80077dc:	2340      	movs	r3, #64	@ 0x40
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077e2:	e03c      	b.n	800785e <UART_SetConfig+0x5a6>
 80077e4:	2380      	movs	r3, #128	@ 0x80
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ea:	e038      	b.n	800785e <UART_SetConfig+0x5a6>
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a5b      	ldr	r2, [pc, #364]	@ (8007960 <UART_SetConfig+0x6a8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d130      	bne.n	8007858 <UART_SetConfig+0x5a0>
 80077f6:	4b57      	ldr	r3, [pc, #348]	@ (8007954 <UART_SetConfig+0x69c>)
 80077f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	2b05      	cmp	r3, #5
 8007800:	d826      	bhi.n	8007850 <UART_SetConfig+0x598>
 8007802:	a201      	add	r2, pc, #4	@ (adr r2, 8007808 <UART_SetConfig+0x550>)
 8007804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007808:	08007821 	.word	0x08007821
 800780c:	08007829 	.word	0x08007829
 8007810:	08007831 	.word	0x08007831
 8007814:	08007839 	.word	0x08007839
 8007818:	08007841 	.word	0x08007841
 800781c:	08007849 	.word	0x08007849
 8007820:	2302      	movs	r3, #2
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007826:	e01a      	b.n	800785e <UART_SetConfig+0x5a6>
 8007828:	2304      	movs	r3, #4
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782e:	e016      	b.n	800785e <UART_SetConfig+0x5a6>
 8007830:	2308      	movs	r3, #8
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007836:	e012      	b.n	800785e <UART_SetConfig+0x5a6>
 8007838:	2310      	movs	r3, #16
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e00e      	b.n	800785e <UART_SetConfig+0x5a6>
 8007840:	2320      	movs	r3, #32
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e00a      	b.n	800785e <UART_SetConfig+0x5a6>
 8007848:	2340      	movs	r3, #64	@ 0x40
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784e:	e006      	b.n	800785e <UART_SetConfig+0x5a6>
 8007850:	2380      	movs	r3, #128	@ 0x80
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007856:	e002      	b.n	800785e <UART_SetConfig+0x5a6>
 8007858:	2380      	movs	r3, #128	@ 0x80
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a3f      	ldr	r2, [pc, #252]	@ (8007960 <UART_SetConfig+0x6a8>)
 8007864:	4293      	cmp	r3, r2
 8007866:	f040 80f8 	bne.w	8007a5a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800786a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800786e:	2b20      	cmp	r3, #32
 8007870:	dc46      	bgt.n	8007900 <UART_SetConfig+0x648>
 8007872:	2b02      	cmp	r3, #2
 8007874:	f2c0 8082 	blt.w	800797c <UART_SetConfig+0x6c4>
 8007878:	3b02      	subs	r3, #2
 800787a:	2b1e      	cmp	r3, #30
 800787c:	d87e      	bhi.n	800797c <UART_SetConfig+0x6c4>
 800787e:	a201      	add	r2, pc, #4	@ (adr r2, 8007884 <UART_SetConfig+0x5cc>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	08007907 	.word	0x08007907
 8007888:	0800797d 	.word	0x0800797d
 800788c:	0800790f 	.word	0x0800790f
 8007890:	0800797d 	.word	0x0800797d
 8007894:	0800797d 	.word	0x0800797d
 8007898:	0800797d 	.word	0x0800797d
 800789c:	0800791f 	.word	0x0800791f
 80078a0:	0800797d 	.word	0x0800797d
 80078a4:	0800797d 	.word	0x0800797d
 80078a8:	0800797d 	.word	0x0800797d
 80078ac:	0800797d 	.word	0x0800797d
 80078b0:	0800797d 	.word	0x0800797d
 80078b4:	0800797d 	.word	0x0800797d
 80078b8:	0800797d 	.word	0x0800797d
 80078bc:	0800792f 	.word	0x0800792f
 80078c0:	0800797d 	.word	0x0800797d
 80078c4:	0800797d 	.word	0x0800797d
 80078c8:	0800797d 	.word	0x0800797d
 80078cc:	0800797d 	.word	0x0800797d
 80078d0:	0800797d 	.word	0x0800797d
 80078d4:	0800797d 	.word	0x0800797d
 80078d8:	0800797d 	.word	0x0800797d
 80078dc:	0800797d 	.word	0x0800797d
 80078e0:	0800797d 	.word	0x0800797d
 80078e4:	0800797d 	.word	0x0800797d
 80078e8:	0800797d 	.word	0x0800797d
 80078ec:	0800797d 	.word	0x0800797d
 80078f0:	0800797d 	.word	0x0800797d
 80078f4:	0800797d 	.word	0x0800797d
 80078f8:	0800797d 	.word	0x0800797d
 80078fc:	0800796f 	.word	0x0800796f
 8007900:	2b40      	cmp	r3, #64	@ 0x40
 8007902:	d037      	beq.n	8007974 <UART_SetConfig+0x6bc>
 8007904:	e03a      	b.n	800797c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007906:	f7fe fe97 	bl	8006638 <HAL_RCCEx_GetD3PCLK1Freq>
 800790a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800790c:	e03c      	b.n	8007988 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800790e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fea6 	bl	8006664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800791c:	e034      	b.n	8007988 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800791e:	f107 0318 	add.w	r3, r7, #24
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe fff2 	bl	800690c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800792c:	e02c      	b.n	8007988 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800792e:	4b09      	ldr	r3, [pc, #36]	@ (8007954 <UART_SetConfig+0x69c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	d016      	beq.n	8007968 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800793a:	4b06      	ldr	r3, [pc, #24]	@ (8007954 <UART_SetConfig+0x69c>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	08db      	lsrs	r3, r3, #3
 8007940:	f003 0303 	and.w	r3, r3, #3
 8007944:	4a07      	ldr	r2, [pc, #28]	@ (8007964 <UART_SetConfig+0x6ac>)
 8007946:	fa22 f303 	lsr.w	r3, r2, r3
 800794a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800794c:	e01c      	b.n	8007988 <UART_SetConfig+0x6d0>
 800794e:	bf00      	nop
 8007950:	40011400 	.word	0x40011400
 8007954:	58024400 	.word	0x58024400
 8007958:	40007800 	.word	0x40007800
 800795c:	40007c00 	.word	0x40007c00
 8007960:	58000c00 	.word	0x58000c00
 8007964:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007968:	4b9d      	ldr	r3, [pc, #628]	@ (8007be0 <UART_SetConfig+0x928>)
 800796a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800796c:	e00c      	b.n	8007988 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800796e:	4b9d      	ldr	r3, [pc, #628]	@ (8007be4 <UART_SetConfig+0x92c>)
 8007970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007972:	e009      	b.n	8007988 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007974:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800797a:	e005      	b.n	8007988 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007986:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 81de 	beq.w	8007d4c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007994:	4a94      	ldr	r2, [pc, #592]	@ (8007be8 <UART_SetConfig+0x930>)
 8007996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800799a:	461a      	mov	r2, r3
 800799c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800799e:	fbb3 f3f2 	udiv	r3, r3, r2
 80079a2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	4613      	mov	r3, r2
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	4413      	add	r3, r2
 80079ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d305      	bcc.n	80079c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079bc:	429a      	cmp	r2, r3
 80079be:	d903      	bls.n	80079c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80079c6:	e1c1      	b.n	8007d4c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ca:	2200      	movs	r2, #0
 80079cc:	60bb      	str	r3, [r7, #8]
 80079ce:	60fa      	str	r2, [r7, #12]
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d4:	4a84      	ldr	r2, [pc, #528]	@ (8007be8 <UART_SetConfig+0x930>)
 80079d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	2200      	movs	r2, #0
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	607a      	str	r2, [r7, #4]
 80079e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079ea:	f7f8 fcd1 	bl	8000390 <__aeabi_uldivmod>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	4610      	mov	r0, r2
 80079f4:	4619      	mov	r1, r3
 80079f6:	f04f 0200 	mov.w	r2, #0
 80079fa:	f04f 0300 	mov.w	r3, #0
 80079fe:	020b      	lsls	r3, r1, #8
 8007a00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a04:	0202      	lsls	r2, r0, #8
 8007a06:	6979      	ldr	r1, [r7, #20]
 8007a08:	6849      	ldr	r1, [r1, #4]
 8007a0a:	0849      	lsrs	r1, r1, #1
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	460c      	mov	r4, r1
 8007a10:	4605      	mov	r5, r0
 8007a12:	eb12 0804 	adds.w	r8, r2, r4
 8007a16:	eb43 0905 	adc.w	r9, r3, r5
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	469a      	mov	sl, r3
 8007a22:	4693      	mov	fp, r2
 8007a24:	4652      	mov	r2, sl
 8007a26:	465b      	mov	r3, fp
 8007a28:	4640      	mov	r0, r8
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	f7f8 fcb0 	bl	8000390 <__aeabi_uldivmod>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	4613      	mov	r3, r2
 8007a36:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a3e:	d308      	bcc.n	8007a52 <UART_SetConfig+0x79a>
 8007a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a46:	d204      	bcs.n	8007a52 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a4e:	60da      	str	r2, [r3, #12]
 8007a50:	e17c      	b.n	8007d4c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007a58:	e178      	b.n	8007d4c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a62:	f040 80c5 	bne.w	8007bf0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007a66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a6a:	2b20      	cmp	r3, #32
 8007a6c:	dc48      	bgt.n	8007b00 <UART_SetConfig+0x848>
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	db7b      	blt.n	8007b6a <UART_SetConfig+0x8b2>
 8007a72:	2b20      	cmp	r3, #32
 8007a74:	d879      	bhi.n	8007b6a <UART_SetConfig+0x8b2>
 8007a76:	a201      	add	r2, pc, #4	@ (adr r2, 8007a7c <UART_SetConfig+0x7c4>)
 8007a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7c:	08007b07 	.word	0x08007b07
 8007a80:	08007b0f 	.word	0x08007b0f
 8007a84:	08007b6b 	.word	0x08007b6b
 8007a88:	08007b6b 	.word	0x08007b6b
 8007a8c:	08007b17 	.word	0x08007b17
 8007a90:	08007b6b 	.word	0x08007b6b
 8007a94:	08007b6b 	.word	0x08007b6b
 8007a98:	08007b6b 	.word	0x08007b6b
 8007a9c:	08007b27 	.word	0x08007b27
 8007aa0:	08007b6b 	.word	0x08007b6b
 8007aa4:	08007b6b 	.word	0x08007b6b
 8007aa8:	08007b6b 	.word	0x08007b6b
 8007aac:	08007b6b 	.word	0x08007b6b
 8007ab0:	08007b6b 	.word	0x08007b6b
 8007ab4:	08007b6b 	.word	0x08007b6b
 8007ab8:	08007b6b 	.word	0x08007b6b
 8007abc:	08007b37 	.word	0x08007b37
 8007ac0:	08007b6b 	.word	0x08007b6b
 8007ac4:	08007b6b 	.word	0x08007b6b
 8007ac8:	08007b6b 	.word	0x08007b6b
 8007acc:	08007b6b 	.word	0x08007b6b
 8007ad0:	08007b6b 	.word	0x08007b6b
 8007ad4:	08007b6b 	.word	0x08007b6b
 8007ad8:	08007b6b 	.word	0x08007b6b
 8007adc:	08007b6b 	.word	0x08007b6b
 8007ae0:	08007b6b 	.word	0x08007b6b
 8007ae4:	08007b6b 	.word	0x08007b6b
 8007ae8:	08007b6b 	.word	0x08007b6b
 8007aec:	08007b6b 	.word	0x08007b6b
 8007af0:	08007b6b 	.word	0x08007b6b
 8007af4:	08007b6b 	.word	0x08007b6b
 8007af8:	08007b6b 	.word	0x08007b6b
 8007afc:	08007b5d 	.word	0x08007b5d
 8007b00:	2b40      	cmp	r3, #64	@ 0x40
 8007b02:	d02e      	beq.n	8007b62 <UART_SetConfig+0x8aa>
 8007b04:	e031      	b.n	8007b6a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b06:	f7fd fb61 	bl	80051cc <HAL_RCC_GetPCLK1Freq>
 8007b0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b0c:	e033      	b.n	8007b76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b0e:	f7fd fb73 	bl	80051f8 <HAL_RCC_GetPCLK2Freq>
 8007b12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b14:	e02f      	b.n	8007b76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe fda2 	bl	8006664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b24:	e027      	b.n	8007b76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b26:	f107 0318 	add.w	r3, r7, #24
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe feee 	bl	800690c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b34:	e01f      	b.n	8007b76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b36:	4b2d      	ldr	r3, [pc, #180]	@ (8007bec <UART_SetConfig+0x934>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d009      	beq.n	8007b56 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b42:	4b2a      	ldr	r3, [pc, #168]	@ (8007bec <UART_SetConfig+0x934>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	08db      	lsrs	r3, r3, #3
 8007b48:	f003 0303 	and.w	r3, r3, #3
 8007b4c:	4a24      	ldr	r2, [pc, #144]	@ (8007be0 <UART_SetConfig+0x928>)
 8007b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b54:	e00f      	b.n	8007b76 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007b56:	4b22      	ldr	r3, [pc, #136]	@ (8007be0 <UART_SetConfig+0x928>)
 8007b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b5a:	e00c      	b.n	8007b76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b5c:	4b21      	ldr	r3, [pc, #132]	@ (8007be4 <UART_SetConfig+0x92c>)
 8007b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b60:	e009      	b.n	8007b76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b68:	e005      	b.n	8007b76 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007b74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 80e7 	beq.w	8007d4c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b82:	4a19      	ldr	r2, [pc, #100]	@ (8007be8 <UART_SetConfig+0x930>)
 8007b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b90:	005a      	lsls	r2, r3, #1
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	085b      	lsrs	r3, r3, #1
 8007b98:	441a      	add	r2, r3
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba6:	2b0f      	cmp	r3, #15
 8007ba8:	d916      	bls.n	8007bd8 <UART_SetConfig+0x920>
 8007baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb0:	d212      	bcs.n	8007bd8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	f023 030f 	bic.w	r3, r3, #15
 8007bba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbe:	085b      	lsrs	r3, r3, #1
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007bd4:	60da      	str	r2, [r3, #12]
 8007bd6:	e0b9      	b.n	8007d4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007bde:	e0b5      	b.n	8007d4c <UART_SetConfig+0xa94>
 8007be0:	03d09000 	.word	0x03d09000
 8007be4:	003d0900 	.word	0x003d0900
 8007be8:	0800aec0 	.word	0x0800aec0
 8007bec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bf0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007bf4:	2b20      	cmp	r3, #32
 8007bf6:	dc49      	bgt.n	8007c8c <UART_SetConfig+0x9d4>
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	db7c      	blt.n	8007cf6 <UART_SetConfig+0xa3e>
 8007bfc:	2b20      	cmp	r3, #32
 8007bfe:	d87a      	bhi.n	8007cf6 <UART_SetConfig+0xa3e>
 8007c00:	a201      	add	r2, pc, #4	@ (adr r2, 8007c08 <UART_SetConfig+0x950>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007c93 	.word	0x08007c93
 8007c0c:	08007c9b 	.word	0x08007c9b
 8007c10:	08007cf7 	.word	0x08007cf7
 8007c14:	08007cf7 	.word	0x08007cf7
 8007c18:	08007ca3 	.word	0x08007ca3
 8007c1c:	08007cf7 	.word	0x08007cf7
 8007c20:	08007cf7 	.word	0x08007cf7
 8007c24:	08007cf7 	.word	0x08007cf7
 8007c28:	08007cb3 	.word	0x08007cb3
 8007c2c:	08007cf7 	.word	0x08007cf7
 8007c30:	08007cf7 	.word	0x08007cf7
 8007c34:	08007cf7 	.word	0x08007cf7
 8007c38:	08007cf7 	.word	0x08007cf7
 8007c3c:	08007cf7 	.word	0x08007cf7
 8007c40:	08007cf7 	.word	0x08007cf7
 8007c44:	08007cf7 	.word	0x08007cf7
 8007c48:	08007cc3 	.word	0x08007cc3
 8007c4c:	08007cf7 	.word	0x08007cf7
 8007c50:	08007cf7 	.word	0x08007cf7
 8007c54:	08007cf7 	.word	0x08007cf7
 8007c58:	08007cf7 	.word	0x08007cf7
 8007c5c:	08007cf7 	.word	0x08007cf7
 8007c60:	08007cf7 	.word	0x08007cf7
 8007c64:	08007cf7 	.word	0x08007cf7
 8007c68:	08007cf7 	.word	0x08007cf7
 8007c6c:	08007cf7 	.word	0x08007cf7
 8007c70:	08007cf7 	.word	0x08007cf7
 8007c74:	08007cf7 	.word	0x08007cf7
 8007c78:	08007cf7 	.word	0x08007cf7
 8007c7c:	08007cf7 	.word	0x08007cf7
 8007c80:	08007cf7 	.word	0x08007cf7
 8007c84:	08007cf7 	.word	0x08007cf7
 8007c88:	08007ce9 	.word	0x08007ce9
 8007c8c:	2b40      	cmp	r3, #64	@ 0x40
 8007c8e:	d02e      	beq.n	8007cee <UART_SetConfig+0xa36>
 8007c90:	e031      	b.n	8007cf6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c92:	f7fd fa9b 	bl	80051cc <HAL_RCC_GetPCLK1Freq>
 8007c96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c98:	e033      	b.n	8007d02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c9a:	f7fd faad 	bl	80051f8 <HAL_RCC_GetPCLK2Freq>
 8007c9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ca0:	e02f      	b.n	8007d02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe fcdc 	bl	8006664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cb0:	e027      	b.n	8007d02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cb2:	f107 0318 	add.w	r3, r7, #24
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe fe28 	bl	800690c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cc0:	e01f      	b.n	8007d02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8007d78 <UART_SetConfig+0xac0>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d009      	beq.n	8007ce2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cce:	4b2a      	ldr	r3, [pc, #168]	@ (8007d78 <UART_SetConfig+0xac0>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	08db      	lsrs	r3, r3, #3
 8007cd4:	f003 0303 	and.w	r3, r3, #3
 8007cd8:	4a28      	ldr	r2, [pc, #160]	@ (8007d7c <UART_SetConfig+0xac4>)
 8007cda:	fa22 f303 	lsr.w	r3, r2, r3
 8007cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ce0:	e00f      	b.n	8007d02 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007ce2:	4b26      	ldr	r3, [pc, #152]	@ (8007d7c <UART_SetConfig+0xac4>)
 8007ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ce6:	e00c      	b.n	8007d02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ce8:	4b25      	ldr	r3, [pc, #148]	@ (8007d80 <UART_SetConfig+0xac8>)
 8007cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cec:	e009      	b.n	8007d02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf4:	e005      	b.n	8007d02 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007d00:	bf00      	nop
    }

    if (pclk != 0U)
 8007d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d021      	beq.n	8007d4c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007d84 <UART_SetConfig+0xacc>)
 8007d0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d12:	461a      	mov	r2, r3
 8007d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d16:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	085b      	lsrs	r3, r3, #1
 8007d20:	441a      	add	r2, r3
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2e:	2b0f      	cmp	r3, #15
 8007d30:	d909      	bls.n	8007d46 <UART_SetConfig+0xa8e>
 8007d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d38:	d205      	bcs.n	8007d46 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60da      	str	r2, [r3, #12]
 8007d44:	e002      	b.n	8007d4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2200      	movs	r2, #0
 8007d66:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007d68:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3748      	adds	r7, #72	@ 0x48
 8007d70:	46bd      	mov	sp, r7
 8007d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d76:	bf00      	nop
 8007d78:	58024400 	.word	0x58024400
 8007d7c:	03d09000 	.word	0x03d09000
 8007d80:	003d0900 	.word	0x003d0900
 8007d84:	0800aec0 	.word	0x0800aec0

08007d88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d94:	f003 0308 	and.w	r3, r3, #8
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00a      	beq.n	8007db2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00a      	beq.n	8007dd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd8:	f003 0302 	and.w	r3, r3, #2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00a      	beq.n	8007df6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dfa:	f003 0304 	and.w	r3, r3, #4
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00a      	beq.n	8007e18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e1c:	f003 0310 	and.w	r3, r3, #16
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00a      	beq.n	8007e3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3e:	f003 0320 	and.w	r3, r3, #32
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01a      	beq.n	8007e9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e86:	d10a      	bne.n	8007e9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00a      	beq.n	8007ec0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	605a      	str	r2, [r3, #4]
  }
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b098      	sub	sp, #96	@ 0x60
 8007ed0:	af02      	add	r7, sp, #8
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007edc:	f7fa fdb2 	bl	8002a44 <HAL_GetTick>
 8007ee0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0308 	and.w	r3, r3, #8
 8007eec:	2b08      	cmp	r3, #8
 8007eee:	d12f      	bne.n	8007f50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ef0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f88e 	bl	8008020 <UART_WaitOnFlagUntilTimeout>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d022      	beq.n	8007f50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f12:	e853 3f00 	ldrex	r3, [r3]
 8007f16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	461a      	mov	r2, r3
 8007f26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f28:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f2a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f30:	e841 2300 	strex	r3, r2, [r1]
 8007f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1e6      	bne.n	8007f0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2220      	movs	r2, #32
 8007f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e063      	b.n	8008018 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0304 	and.w	r3, r3, #4
 8007f5a:	2b04      	cmp	r3, #4
 8007f5c:	d149      	bne.n	8007ff2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f5e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f66:	2200      	movs	r2, #0
 8007f68:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f857 	bl	8008020 <UART_WaitOnFlagUntilTimeout>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d03c      	beq.n	8007ff2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	623b      	str	r3, [r7, #32]
   return(result);
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f96:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f98:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e6      	bne.n	8007f78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3308      	adds	r3, #8
 8007fb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	e853 3f00 	ldrex	r3, [r3]
 8007fb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f023 0301 	bic.w	r3, r3, #1
 8007fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fca:	61fa      	str	r2, [r7, #28]
 8007fcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fce:	69b9      	ldr	r1, [r7, #24]
 8007fd0:	69fa      	ldr	r2, [r7, #28]
 8007fd2:	e841 2300 	strex	r3, r2, [r1]
 8007fd6:	617b      	str	r3, [r7, #20]
   return(result);
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1e5      	bne.n	8007faa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e012      	b.n	8008018 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3758      	adds	r7, #88	@ 0x58
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	603b      	str	r3, [r7, #0]
 800802c:	4613      	mov	r3, r2
 800802e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008030:	e04f      	b.n	80080d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008038:	d04b      	beq.n	80080d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800803a:	f7fa fd03 	bl	8002a44 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	429a      	cmp	r2, r3
 8008048:	d302      	bcc.n	8008050 <UART_WaitOnFlagUntilTimeout+0x30>
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e04e      	b.n	80080f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0304 	and.w	r3, r3, #4
 800805e:	2b00      	cmp	r3, #0
 8008060:	d037      	beq.n	80080d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	2b80      	cmp	r3, #128	@ 0x80
 8008066:	d034      	beq.n	80080d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2b40      	cmp	r3, #64	@ 0x40
 800806c:	d031      	beq.n	80080d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	f003 0308 	and.w	r3, r3, #8
 8008078:	2b08      	cmp	r3, #8
 800807a:	d110      	bne.n	800809e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2208      	movs	r2, #8
 8008082:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 f839 	bl	80080fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2208      	movs	r2, #8
 800808e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e029      	b.n	80080f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080ac:	d111      	bne.n	80080d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 f81f 	bl	80080fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e00f      	b.n	80080f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	69da      	ldr	r2, [r3, #28]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	4013      	ands	r3, r2
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	429a      	cmp	r2, r3
 80080e0:	bf0c      	ite	eq
 80080e2:	2301      	moveq	r3, #1
 80080e4:	2300      	movne	r3, #0
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	461a      	mov	r2, r3
 80080ea:	79fb      	ldrb	r3, [r7, #7]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d0a0      	beq.n	8008032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b095      	sub	sp, #84	@ 0x54
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008114:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008118:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008122:	643b      	str	r3, [r7, #64]	@ 0x40
 8008124:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008126:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008128:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800812a:	e841 2300 	strex	r3, r2, [r1]
 800812e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1e6      	bne.n	8008104 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3308      	adds	r3, #8
 800813c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	61fb      	str	r3, [r7, #28]
   return(result);
 8008146:	69fa      	ldr	r2, [r7, #28]
 8008148:	4b1e      	ldr	r3, [pc, #120]	@ (80081c4 <UART_EndRxTransfer+0xc8>)
 800814a:	4013      	ands	r3, r2
 800814c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3308      	adds	r3, #8
 8008154:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008156:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008158:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800815c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e5      	bne.n	8008136 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800816e:	2b01      	cmp	r3, #1
 8008170:	d118      	bne.n	80081a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	e853 3f00 	ldrex	r3, [r3]
 800817e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f023 0310 	bic.w	r3, r3, #16
 8008186:	647b      	str	r3, [r7, #68]	@ 0x44
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	461a      	mov	r2, r3
 800818e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008190:	61bb      	str	r3, [r7, #24]
 8008192:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008194:	6979      	ldr	r1, [r7, #20]
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	e841 2300 	strex	r3, r2, [r1]
 800819c:	613b      	str	r3, [r7, #16]
   return(result);
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1e6      	bne.n	8008172 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2220      	movs	r2, #32
 80081a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80081b8:	bf00      	nop
 80081ba:	3754      	adds	r7, #84	@ 0x54
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	effffffe 	.word	0xeffffffe

080081c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d101      	bne.n	80081de <HAL_UARTEx_DisableFifoMode+0x16>
 80081da:	2302      	movs	r3, #2
 80081dc:	e027      	b.n	800822e <HAL_UARTEx_DisableFifoMode+0x66>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2224      	movs	r2, #36	@ 0x24
 80081ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f022 0201 	bic.w	r2, r2, #1
 8008204:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800820c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2220      	movs	r2, #32
 8008220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b084      	sub	sp, #16
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800824a:	2b01      	cmp	r3, #1
 800824c:	d101      	bne.n	8008252 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800824e:	2302      	movs	r3, #2
 8008250:	e02d      	b.n	80082ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2224      	movs	r2, #36	@ 0x24
 800825e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0201 	bic.w	r2, r2, #1
 8008278:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	683a      	ldr	r2, [r7, #0]
 800828a:	430a      	orrs	r2, r1
 800828c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f850 	bl	8008334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2220      	movs	r2, #32
 80082a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d101      	bne.n	80082ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082ca:	2302      	movs	r3, #2
 80082cc:	e02d      	b.n	800832a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2224      	movs	r2, #36	@ 0x24
 80082da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 0201 	bic.w	r2, r2, #1
 80082f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	430a      	orrs	r2, r1
 8008308:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f812 	bl	8008334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2220      	movs	r2, #32
 800831c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008340:	2b00      	cmp	r3, #0
 8008342:	d108      	bne.n	8008356 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008354:	e031      	b.n	80083ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008356:	2310      	movs	r3, #16
 8008358:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800835a:	2310      	movs	r3, #16
 800835c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	0e5b      	lsrs	r3, r3, #25
 8008366:	b2db      	uxtb	r3, r3
 8008368:	f003 0307 	and.w	r3, r3, #7
 800836c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	0f5b      	lsrs	r3, r3, #29
 8008376:	b2db      	uxtb	r3, r3
 8008378:	f003 0307 	and.w	r3, r3, #7
 800837c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	7b3a      	ldrb	r2, [r7, #12]
 8008382:	4911      	ldr	r1, [pc, #68]	@ (80083c8 <UARTEx_SetNbDataToProcess+0x94>)
 8008384:	5c8a      	ldrb	r2, [r1, r2]
 8008386:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800838a:	7b3a      	ldrb	r2, [r7, #12]
 800838c:	490f      	ldr	r1, [pc, #60]	@ (80083cc <UARTEx_SetNbDataToProcess+0x98>)
 800838e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008390:	fb93 f3f2 	sdiv	r3, r3, r2
 8008394:	b29a      	uxth	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800839c:	7bfb      	ldrb	r3, [r7, #15]
 800839e:	7b7a      	ldrb	r2, [r7, #13]
 80083a0:	4909      	ldr	r1, [pc, #36]	@ (80083c8 <UARTEx_SetNbDataToProcess+0x94>)
 80083a2:	5c8a      	ldrb	r2, [r1, r2]
 80083a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083a8:	7b7a      	ldrb	r2, [r7, #13]
 80083aa:	4908      	ldr	r1, [pc, #32]	@ (80083cc <UARTEx_SetNbDataToProcess+0x98>)
 80083ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80083ba:	bf00      	nop
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	0800aed8 	.word	0x0800aed8
 80083cc:	0800aee0 	.word	0x0800aee0

080083d0 <malloc>:
 80083d0:	4b02      	ldr	r3, [pc, #8]	@ (80083dc <malloc+0xc>)
 80083d2:	4601      	mov	r1, r0
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	f000 b825 	b.w	8008424 <_malloc_r>
 80083da:	bf00      	nop
 80083dc:	2400001c 	.word	0x2400001c

080083e0 <sbrk_aligned>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	4e0f      	ldr	r6, [pc, #60]	@ (8008420 <sbrk_aligned+0x40>)
 80083e4:	460c      	mov	r4, r1
 80083e6:	6831      	ldr	r1, [r6, #0]
 80083e8:	4605      	mov	r5, r0
 80083ea:	b911      	cbnz	r1, 80083f2 <sbrk_aligned+0x12>
 80083ec:	f000 ff26 	bl	800923c <_sbrk_r>
 80083f0:	6030      	str	r0, [r6, #0]
 80083f2:	4621      	mov	r1, r4
 80083f4:	4628      	mov	r0, r5
 80083f6:	f000 ff21 	bl	800923c <_sbrk_r>
 80083fa:	1c43      	adds	r3, r0, #1
 80083fc:	d103      	bne.n	8008406 <sbrk_aligned+0x26>
 80083fe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008402:	4620      	mov	r0, r4
 8008404:	bd70      	pop	{r4, r5, r6, pc}
 8008406:	1cc4      	adds	r4, r0, #3
 8008408:	f024 0403 	bic.w	r4, r4, #3
 800840c:	42a0      	cmp	r0, r4
 800840e:	d0f8      	beq.n	8008402 <sbrk_aligned+0x22>
 8008410:	1a21      	subs	r1, r4, r0
 8008412:	4628      	mov	r0, r5
 8008414:	f000 ff12 	bl	800923c <_sbrk_r>
 8008418:	3001      	adds	r0, #1
 800841a:	d1f2      	bne.n	8008402 <sbrk_aligned+0x22>
 800841c:	e7ef      	b.n	80083fe <sbrk_aligned+0x1e>
 800841e:	bf00      	nop
 8008420:	240008b0 	.word	0x240008b0

08008424 <_malloc_r>:
 8008424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008428:	1ccd      	adds	r5, r1, #3
 800842a:	f025 0503 	bic.w	r5, r5, #3
 800842e:	3508      	adds	r5, #8
 8008430:	2d0c      	cmp	r5, #12
 8008432:	bf38      	it	cc
 8008434:	250c      	movcc	r5, #12
 8008436:	2d00      	cmp	r5, #0
 8008438:	4606      	mov	r6, r0
 800843a:	db01      	blt.n	8008440 <_malloc_r+0x1c>
 800843c:	42a9      	cmp	r1, r5
 800843e:	d904      	bls.n	800844a <_malloc_r+0x26>
 8008440:	230c      	movs	r3, #12
 8008442:	6033      	str	r3, [r6, #0]
 8008444:	2000      	movs	r0, #0
 8008446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800844a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008520 <_malloc_r+0xfc>
 800844e:	f000 f869 	bl	8008524 <__malloc_lock>
 8008452:	f8d8 3000 	ldr.w	r3, [r8]
 8008456:	461c      	mov	r4, r3
 8008458:	bb44      	cbnz	r4, 80084ac <_malloc_r+0x88>
 800845a:	4629      	mov	r1, r5
 800845c:	4630      	mov	r0, r6
 800845e:	f7ff ffbf 	bl	80083e0 <sbrk_aligned>
 8008462:	1c43      	adds	r3, r0, #1
 8008464:	4604      	mov	r4, r0
 8008466:	d158      	bne.n	800851a <_malloc_r+0xf6>
 8008468:	f8d8 4000 	ldr.w	r4, [r8]
 800846c:	4627      	mov	r7, r4
 800846e:	2f00      	cmp	r7, #0
 8008470:	d143      	bne.n	80084fa <_malloc_r+0xd6>
 8008472:	2c00      	cmp	r4, #0
 8008474:	d04b      	beq.n	800850e <_malloc_r+0xea>
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	4639      	mov	r1, r7
 800847a:	4630      	mov	r0, r6
 800847c:	eb04 0903 	add.w	r9, r4, r3
 8008480:	f000 fedc 	bl	800923c <_sbrk_r>
 8008484:	4581      	cmp	r9, r0
 8008486:	d142      	bne.n	800850e <_malloc_r+0xea>
 8008488:	6821      	ldr	r1, [r4, #0]
 800848a:	1a6d      	subs	r5, r5, r1
 800848c:	4629      	mov	r1, r5
 800848e:	4630      	mov	r0, r6
 8008490:	f7ff ffa6 	bl	80083e0 <sbrk_aligned>
 8008494:	3001      	adds	r0, #1
 8008496:	d03a      	beq.n	800850e <_malloc_r+0xea>
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	442b      	add	r3, r5
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	f8d8 3000 	ldr.w	r3, [r8]
 80084a2:	685a      	ldr	r2, [r3, #4]
 80084a4:	bb62      	cbnz	r2, 8008500 <_malloc_r+0xdc>
 80084a6:	f8c8 7000 	str.w	r7, [r8]
 80084aa:	e00f      	b.n	80084cc <_malloc_r+0xa8>
 80084ac:	6822      	ldr	r2, [r4, #0]
 80084ae:	1b52      	subs	r2, r2, r5
 80084b0:	d420      	bmi.n	80084f4 <_malloc_r+0xd0>
 80084b2:	2a0b      	cmp	r2, #11
 80084b4:	d917      	bls.n	80084e6 <_malloc_r+0xc2>
 80084b6:	1961      	adds	r1, r4, r5
 80084b8:	42a3      	cmp	r3, r4
 80084ba:	6025      	str	r5, [r4, #0]
 80084bc:	bf18      	it	ne
 80084be:	6059      	strne	r1, [r3, #4]
 80084c0:	6863      	ldr	r3, [r4, #4]
 80084c2:	bf08      	it	eq
 80084c4:	f8c8 1000 	streq.w	r1, [r8]
 80084c8:	5162      	str	r2, [r4, r5]
 80084ca:	604b      	str	r3, [r1, #4]
 80084cc:	4630      	mov	r0, r6
 80084ce:	f000 f82f 	bl	8008530 <__malloc_unlock>
 80084d2:	f104 000b 	add.w	r0, r4, #11
 80084d6:	1d23      	adds	r3, r4, #4
 80084d8:	f020 0007 	bic.w	r0, r0, #7
 80084dc:	1ac2      	subs	r2, r0, r3
 80084de:	bf1c      	itt	ne
 80084e0:	1a1b      	subne	r3, r3, r0
 80084e2:	50a3      	strne	r3, [r4, r2]
 80084e4:	e7af      	b.n	8008446 <_malloc_r+0x22>
 80084e6:	6862      	ldr	r2, [r4, #4]
 80084e8:	42a3      	cmp	r3, r4
 80084ea:	bf0c      	ite	eq
 80084ec:	f8c8 2000 	streq.w	r2, [r8]
 80084f0:	605a      	strne	r2, [r3, #4]
 80084f2:	e7eb      	b.n	80084cc <_malloc_r+0xa8>
 80084f4:	4623      	mov	r3, r4
 80084f6:	6864      	ldr	r4, [r4, #4]
 80084f8:	e7ae      	b.n	8008458 <_malloc_r+0x34>
 80084fa:	463c      	mov	r4, r7
 80084fc:	687f      	ldr	r7, [r7, #4]
 80084fe:	e7b6      	b.n	800846e <_malloc_r+0x4a>
 8008500:	461a      	mov	r2, r3
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	42a3      	cmp	r3, r4
 8008506:	d1fb      	bne.n	8008500 <_malloc_r+0xdc>
 8008508:	2300      	movs	r3, #0
 800850a:	6053      	str	r3, [r2, #4]
 800850c:	e7de      	b.n	80084cc <_malloc_r+0xa8>
 800850e:	230c      	movs	r3, #12
 8008510:	6033      	str	r3, [r6, #0]
 8008512:	4630      	mov	r0, r6
 8008514:	f000 f80c 	bl	8008530 <__malloc_unlock>
 8008518:	e794      	b.n	8008444 <_malloc_r+0x20>
 800851a:	6005      	str	r5, [r0, #0]
 800851c:	e7d6      	b.n	80084cc <_malloc_r+0xa8>
 800851e:	bf00      	nop
 8008520:	240008b4 	.word	0x240008b4

08008524 <__malloc_lock>:
 8008524:	4801      	ldr	r0, [pc, #4]	@ (800852c <__malloc_lock+0x8>)
 8008526:	f000 bed6 	b.w	80092d6 <__retarget_lock_acquire_recursive>
 800852a:	bf00      	nop
 800852c:	240009f8 	.word	0x240009f8

08008530 <__malloc_unlock>:
 8008530:	4801      	ldr	r0, [pc, #4]	@ (8008538 <__malloc_unlock+0x8>)
 8008532:	f000 bed1 	b.w	80092d8 <__retarget_lock_release_recursive>
 8008536:	bf00      	nop
 8008538:	240009f8 	.word	0x240009f8

0800853c <__cvt>:
 800853c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800853e:	ed2d 8b02 	vpush	{d8}
 8008542:	eeb0 8b40 	vmov.f64	d8, d0
 8008546:	b085      	sub	sp, #20
 8008548:	4617      	mov	r7, r2
 800854a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800854c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800854e:	ee18 2a90 	vmov	r2, s17
 8008552:	f025 0520 	bic.w	r5, r5, #32
 8008556:	2a00      	cmp	r2, #0
 8008558:	bfb6      	itet	lt
 800855a:	222d      	movlt	r2, #45	@ 0x2d
 800855c:	2200      	movge	r2, #0
 800855e:	eeb1 8b40 	vneglt.f64	d8, d0
 8008562:	2d46      	cmp	r5, #70	@ 0x46
 8008564:	460c      	mov	r4, r1
 8008566:	701a      	strb	r2, [r3, #0]
 8008568:	d004      	beq.n	8008574 <__cvt+0x38>
 800856a:	2d45      	cmp	r5, #69	@ 0x45
 800856c:	d100      	bne.n	8008570 <__cvt+0x34>
 800856e:	3401      	adds	r4, #1
 8008570:	2102      	movs	r1, #2
 8008572:	e000      	b.n	8008576 <__cvt+0x3a>
 8008574:	2103      	movs	r1, #3
 8008576:	ab03      	add	r3, sp, #12
 8008578:	9301      	str	r3, [sp, #4]
 800857a:	ab02      	add	r3, sp, #8
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	4622      	mov	r2, r4
 8008580:	4633      	mov	r3, r6
 8008582:	eeb0 0b48 	vmov.f64	d0, d8
 8008586:	f000 ff3f 	bl	8009408 <_dtoa_r>
 800858a:	2d47      	cmp	r5, #71	@ 0x47
 800858c:	d114      	bne.n	80085b8 <__cvt+0x7c>
 800858e:	07fb      	lsls	r3, r7, #31
 8008590:	d50a      	bpl.n	80085a8 <__cvt+0x6c>
 8008592:	1902      	adds	r2, r0, r4
 8008594:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800859c:	bf08      	it	eq
 800859e:	9203      	streq	r2, [sp, #12]
 80085a0:	2130      	movs	r1, #48	@ 0x30
 80085a2:	9b03      	ldr	r3, [sp, #12]
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d319      	bcc.n	80085dc <__cvt+0xa0>
 80085a8:	9b03      	ldr	r3, [sp, #12]
 80085aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085ac:	1a1b      	subs	r3, r3, r0
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	b005      	add	sp, #20
 80085b2:	ecbd 8b02 	vpop	{d8}
 80085b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085b8:	2d46      	cmp	r5, #70	@ 0x46
 80085ba:	eb00 0204 	add.w	r2, r0, r4
 80085be:	d1e9      	bne.n	8008594 <__cvt+0x58>
 80085c0:	7803      	ldrb	r3, [r0, #0]
 80085c2:	2b30      	cmp	r3, #48	@ 0x30
 80085c4:	d107      	bne.n	80085d6 <__cvt+0x9a>
 80085c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80085ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ce:	bf1c      	itt	ne
 80085d0:	f1c4 0401 	rsbne	r4, r4, #1
 80085d4:	6034      	strne	r4, [r6, #0]
 80085d6:	6833      	ldr	r3, [r6, #0]
 80085d8:	441a      	add	r2, r3
 80085da:	e7db      	b.n	8008594 <__cvt+0x58>
 80085dc:	1c5c      	adds	r4, r3, #1
 80085de:	9403      	str	r4, [sp, #12]
 80085e0:	7019      	strb	r1, [r3, #0]
 80085e2:	e7de      	b.n	80085a2 <__cvt+0x66>

080085e4 <__exponent>:
 80085e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085e6:	2900      	cmp	r1, #0
 80085e8:	bfba      	itte	lt
 80085ea:	4249      	neglt	r1, r1
 80085ec:	232d      	movlt	r3, #45	@ 0x2d
 80085ee:	232b      	movge	r3, #43	@ 0x2b
 80085f0:	2909      	cmp	r1, #9
 80085f2:	7002      	strb	r2, [r0, #0]
 80085f4:	7043      	strb	r3, [r0, #1]
 80085f6:	dd29      	ble.n	800864c <__exponent+0x68>
 80085f8:	f10d 0307 	add.w	r3, sp, #7
 80085fc:	461d      	mov	r5, r3
 80085fe:	270a      	movs	r7, #10
 8008600:	461a      	mov	r2, r3
 8008602:	fbb1 f6f7 	udiv	r6, r1, r7
 8008606:	fb07 1416 	mls	r4, r7, r6, r1
 800860a:	3430      	adds	r4, #48	@ 0x30
 800860c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008610:	460c      	mov	r4, r1
 8008612:	2c63      	cmp	r4, #99	@ 0x63
 8008614:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008618:	4631      	mov	r1, r6
 800861a:	dcf1      	bgt.n	8008600 <__exponent+0x1c>
 800861c:	3130      	adds	r1, #48	@ 0x30
 800861e:	1e94      	subs	r4, r2, #2
 8008620:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008624:	1c41      	adds	r1, r0, #1
 8008626:	4623      	mov	r3, r4
 8008628:	42ab      	cmp	r3, r5
 800862a:	d30a      	bcc.n	8008642 <__exponent+0x5e>
 800862c:	f10d 0309 	add.w	r3, sp, #9
 8008630:	1a9b      	subs	r3, r3, r2
 8008632:	42ac      	cmp	r4, r5
 8008634:	bf88      	it	hi
 8008636:	2300      	movhi	r3, #0
 8008638:	3302      	adds	r3, #2
 800863a:	4403      	add	r3, r0
 800863c:	1a18      	subs	r0, r3, r0
 800863e:	b003      	add	sp, #12
 8008640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008642:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008646:	f801 6f01 	strb.w	r6, [r1, #1]!
 800864a:	e7ed      	b.n	8008628 <__exponent+0x44>
 800864c:	2330      	movs	r3, #48	@ 0x30
 800864e:	3130      	adds	r1, #48	@ 0x30
 8008650:	7083      	strb	r3, [r0, #2]
 8008652:	70c1      	strb	r1, [r0, #3]
 8008654:	1d03      	adds	r3, r0, #4
 8008656:	e7f1      	b.n	800863c <__exponent+0x58>

08008658 <_printf_float>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	b08d      	sub	sp, #52	@ 0x34
 800865e:	460c      	mov	r4, r1
 8008660:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008664:	4616      	mov	r6, r2
 8008666:	461f      	mov	r7, r3
 8008668:	4605      	mov	r5, r0
 800866a:	f000 fdaf 	bl	80091cc <_localeconv_r>
 800866e:	f8d0 b000 	ldr.w	fp, [r0]
 8008672:	4658      	mov	r0, fp
 8008674:	f7f7 fe84 	bl	8000380 <strlen>
 8008678:	2300      	movs	r3, #0
 800867a:	930a      	str	r3, [sp, #40]	@ 0x28
 800867c:	f8d8 3000 	ldr.w	r3, [r8]
 8008680:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008684:	6822      	ldr	r2, [r4, #0]
 8008686:	9005      	str	r0, [sp, #20]
 8008688:	3307      	adds	r3, #7
 800868a:	f023 0307 	bic.w	r3, r3, #7
 800868e:	f103 0108 	add.w	r1, r3, #8
 8008692:	f8c8 1000 	str.w	r1, [r8]
 8008696:	ed93 0b00 	vldr	d0, [r3]
 800869a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80088f8 <_printf_float+0x2a0>
 800869e:	eeb0 7bc0 	vabs.f64	d7, d0
 80086a2:	eeb4 7b46 	vcmp.f64	d7, d6
 80086a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086aa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80086ae:	dd24      	ble.n	80086fa <_printf_float+0xa2>
 80086b0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80086b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b8:	d502      	bpl.n	80086c0 <_printf_float+0x68>
 80086ba:	232d      	movs	r3, #45	@ 0x2d
 80086bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086c0:	498f      	ldr	r1, [pc, #572]	@ (8008900 <_printf_float+0x2a8>)
 80086c2:	4b90      	ldr	r3, [pc, #576]	@ (8008904 <_printf_float+0x2ac>)
 80086c4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80086c8:	bf94      	ite	ls
 80086ca:	4688      	movls	r8, r1
 80086cc:	4698      	movhi	r8, r3
 80086ce:	f022 0204 	bic.w	r2, r2, #4
 80086d2:	2303      	movs	r3, #3
 80086d4:	6123      	str	r3, [r4, #16]
 80086d6:	6022      	str	r2, [r4, #0]
 80086d8:	f04f 0a00 	mov.w	sl, #0
 80086dc:	9700      	str	r7, [sp, #0]
 80086de:	4633      	mov	r3, r6
 80086e0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80086e2:	4621      	mov	r1, r4
 80086e4:	4628      	mov	r0, r5
 80086e6:	f000 f9d1 	bl	8008a8c <_printf_common>
 80086ea:	3001      	adds	r0, #1
 80086ec:	f040 8089 	bne.w	8008802 <_printf_float+0x1aa>
 80086f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086f4:	b00d      	add	sp, #52	@ 0x34
 80086f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086fa:	eeb4 0b40 	vcmp.f64	d0, d0
 80086fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008702:	d709      	bvc.n	8008718 <_printf_float+0xc0>
 8008704:	ee10 3a90 	vmov	r3, s1
 8008708:	2b00      	cmp	r3, #0
 800870a:	bfbc      	itt	lt
 800870c:	232d      	movlt	r3, #45	@ 0x2d
 800870e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008712:	497d      	ldr	r1, [pc, #500]	@ (8008908 <_printf_float+0x2b0>)
 8008714:	4b7d      	ldr	r3, [pc, #500]	@ (800890c <_printf_float+0x2b4>)
 8008716:	e7d5      	b.n	80086c4 <_printf_float+0x6c>
 8008718:	6863      	ldr	r3, [r4, #4]
 800871a:	1c59      	adds	r1, r3, #1
 800871c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008720:	d139      	bne.n	8008796 <_printf_float+0x13e>
 8008722:	2306      	movs	r3, #6
 8008724:	6063      	str	r3, [r4, #4]
 8008726:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800872a:	2300      	movs	r3, #0
 800872c:	6022      	str	r2, [r4, #0]
 800872e:	9303      	str	r3, [sp, #12]
 8008730:	ab0a      	add	r3, sp, #40	@ 0x28
 8008732:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008736:	ab09      	add	r3, sp, #36	@ 0x24
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	6861      	ldr	r1, [r4, #4]
 800873c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008740:	4628      	mov	r0, r5
 8008742:	f7ff fefb 	bl	800853c <__cvt>
 8008746:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800874a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800874c:	4680      	mov	r8, r0
 800874e:	d129      	bne.n	80087a4 <_printf_float+0x14c>
 8008750:	1cc8      	adds	r0, r1, #3
 8008752:	db02      	blt.n	800875a <_printf_float+0x102>
 8008754:	6863      	ldr	r3, [r4, #4]
 8008756:	4299      	cmp	r1, r3
 8008758:	dd41      	ble.n	80087de <_printf_float+0x186>
 800875a:	f1a9 0902 	sub.w	r9, r9, #2
 800875e:	fa5f f989 	uxtb.w	r9, r9
 8008762:	3901      	subs	r1, #1
 8008764:	464a      	mov	r2, r9
 8008766:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800876a:	9109      	str	r1, [sp, #36]	@ 0x24
 800876c:	f7ff ff3a 	bl	80085e4 <__exponent>
 8008770:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008772:	1813      	adds	r3, r2, r0
 8008774:	2a01      	cmp	r2, #1
 8008776:	4682      	mov	sl, r0
 8008778:	6123      	str	r3, [r4, #16]
 800877a:	dc02      	bgt.n	8008782 <_printf_float+0x12a>
 800877c:	6822      	ldr	r2, [r4, #0]
 800877e:	07d2      	lsls	r2, r2, #31
 8008780:	d501      	bpl.n	8008786 <_printf_float+0x12e>
 8008782:	3301      	adds	r3, #1
 8008784:	6123      	str	r3, [r4, #16]
 8008786:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800878a:	2b00      	cmp	r3, #0
 800878c:	d0a6      	beq.n	80086dc <_printf_float+0x84>
 800878e:	232d      	movs	r3, #45	@ 0x2d
 8008790:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008794:	e7a2      	b.n	80086dc <_printf_float+0x84>
 8008796:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800879a:	d1c4      	bne.n	8008726 <_printf_float+0xce>
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1c2      	bne.n	8008726 <_printf_float+0xce>
 80087a0:	2301      	movs	r3, #1
 80087a2:	e7bf      	b.n	8008724 <_printf_float+0xcc>
 80087a4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80087a8:	d9db      	bls.n	8008762 <_printf_float+0x10a>
 80087aa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80087ae:	d118      	bne.n	80087e2 <_printf_float+0x18a>
 80087b0:	2900      	cmp	r1, #0
 80087b2:	6863      	ldr	r3, [r4, #4]
 80087b4:	dd0b      	ble.n	80087ce <_printf_float+0x176>
 80087b6:	6121      	str	r1, [r4, #16]
 80087b8:	b913      	cbnz	r3, 80087c0 <_printf_float+0x168>
 80087ba:	6822      	ldr	r2, [r4, #0]
 80087bc:	07d0      	lsls	r0, r2, #31
 80087be:	d502      	bpl.n	80087c6 <_printf_float+0x16e>
 80087c0:	3301      	adds	r3, #1
 80087c2:	440b      	add	r3, r1
 80087c4:	6123      	str	r3, [r4, #16]
 80087c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80087c8:	f04f 0a00 	mov.w	sl, #0
 80087cc:	e7db      	b.n	8008786 <_printf_float+0x12e>
 80087ce:	b913      	cbnz	r3, 80087d6 <_printf_float+0x17e>
 80087d0:	6822      	ldr	r2, [r4, #0]
 80087d2:	07d2      	lsls	r2, r2, #31
 80087d4:	d501      	bpl.n	80087da <_printf_float+0x182>
 80087d6:	3302      	adds	r3, #2
 80087d8:	e7f4      	b.n	80087c4 <_printf_float+0x16c>
 80087da:	2301      	movs	r3, #1
 80087dc:	e7f2      	b.n	80087c4 <_printf_float+0x16c>
 80087de:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80087e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087e4:	4299      	cmp	r1, r3
 80087e6:	db05      	blt.n	80087f4 <_printf_float+0x19c>
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	6121      	str	r1, [r4, #16]
 80087ec:	07d8      	lsls	r0, r3, #31
 80087ee:	d5ea      	bpl.n	80087c6 <_printf_float+0x16e>
 80087f0:	1c4b      	adds	r3, r1, #1
 80087f2:	e7e7      	b.n	80087c4 <_printf_float+0x16c>
 80087f4:	2900      	cmp	r1, #0
 80087f6:	bfd4      	ite	le
 80087f8:	f1c1 0202 	rsble	r2, r1, #2
 80087fc:	2201      	movgt	r2, #1
 80087fe:	4413      	add	r3, r2
 8008800:	e7e0      	b.n	80087c4 <_printf_float+0x16c>
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	055a      	lsls	r2, r3, #21
 8008806:	d407      	bmi.n	8008818 <_printf_float+0x1c0>
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	4642      	mov	r2, r8
 800880c:	4631      	mov	r1, r6
 800880e:	4628      	mov	r0, r5
 8008810:	47b8      	blx	r7
 8008812:	3001      	adds	r0, #1
 8008814:	d12a      	bne.n	800886c <_printf_float+0x214>
 8008816:	e76b      	b.n	80086f0 <_printf_float+0x98>
 8008818:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800881c:	f240 80e0 	bls.w	80089e0 <_printf_float+0x388>
 8008820:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008824:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800882c:	d133      	bne.n	8008896 <_printf_float+0x23e>
 800882e:	4a38      	ldr	r2, [pc, #224]	@ (8008910 <_printf_float+0x2b8>)
 8008830:	2301      	movs	r3, #1
 8008832:	4631      	mov	r1, r6
 8008834:	4628      	mov	r0, r5
 8008836:	47b8      	blx	r7
 8008838:	3001      	adds	r0, #1
 800883a:	f43f af59 	beq.w	80086f0 <_printf_float+0x98>
 800883e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008842:	4543      	cmp	r3, r8
 8008844:	db02      	blt.n	800884c <_printf_float+0x1f4>
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	07d8      	lsls	r0, r3, #31
 800884a:	d50f      	bpl.n	800886c <_printf_float+0x214>
 800884c:	9b05      	ldr	r3, [sp, #20]
 800884e:	465a      	mov	r2, fp
 8008850:	4631      	mov	r1, r6
 8008852:	4628      	mov	r0, r5
 8008854:	47b8      	blx	r7
 8008856:	3001      	adds	r0, #1
 8008858:	f43f af4a 	beq.w	80086f0 <_printf_float+0x98>
 800885c:	f04f 0900 	mov.w	r9, #0
 8008860:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008864:	f104 0a1a 	add.w	sl, r4, #26
 8008868:	45c8      	cmp	r8, r9
 800886a:	dc09      	bgt.n	8008880 <_printf_float+0x228>
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	079b      	lsls	r3, r3, #30
 8008870:	f100 8107 	bmi.w	8008a82 <_printf_float+0x42a>
 8008874:	68e0      	ldr	r0, [r4, #12]
 8008876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008878:	4298      	cmp	r0, r3
 800887a:	bfb8      	it	lt
 800887c:	4618      	movlt	r0, r3
 800887e:	e739      	b.n	80086f4 <_printf_float+0x9c>
 8008880:	2301      	movs	r3, #1
 8008882:	4652      	mov	r2, sl
 8008884:	4631      	mov	r1, r6
 8008886:	4628      	mov	r0, r5
 8008888:	47b8      	blx	r7
 800888a:	3001      	adds	r0, #1
 800888c:	f43f af30 	beq.w	80086f0 <_printf_float+0x98>
 8008890:	f109 0901 	add.w	r9, r9, #1
 8008894:	e7e8      	b.n	8008868 <_printf_float+0x210>
 8008896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008898:	2b00      	cmp	r3, #0
 800889a:	dc3b      	bgt.n	8008914 <_printf_float+0x2bc>
 800889c:	4a1c      	ldr	r2, [pc, #112]	@ (8008910 <_printf_float+0x2b8>)
 800889e:	2301      	movs	r3, #1
 80088a0:	4631      	mov	r1, r6
 80088a2:	4628      	mov	r0, r5
 80088a4:	47b8      	blx	r7
 80088a6:	3001      	adds	r0, #1
 80088a8:	f43f af22 	beq.w	80086f0 <_printf_float+0x98>
 80088ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80088b0:	ea59 0303 	orrs.w	r3, r9, r3
 80088b4:	d102      	bne.n	80088bc <_printf_float+0x264>
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	07d9      	lsls	r1, r3, #31
 80088ba:	d5d7      	bpl.n	800886c <_printf_float+0x214>
 80088bc:	9b05      	ldr	r3, [sp, #20]
 80088be:	465a      	mov	r2, fp
 80088c0:	4631      	mov	r1, r6
 80088c2:	4628      	mov	r0, r5
 80088c4:	47b8      	blx	r7
 80088c6:	3001      	adds	r0, #1
 80088c8:	f43f af12 	beq.w	80086f0 <_printf_float+0x98>
 80088cc:	f04f 0a00 	mov.w	sl, #0
 80088d0:	f104 0b1a 	add.w	fp, r4, #26
 80088d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088d6:	425b      	negs	r3, r3
 80088d8:	4553      	cmp	r3, sl
 80088da:	dc01      	bgt.n	80088e0 <_printf_float+0x288>
 80088dc:	464b      	mov	r3, r9
 80088de:	e794      	b.n	800880a <_printf_float+0x1b2>
 80088e0:	2301      	movs	r3, #1
 80088e2:	465a      	mov	r2, fp
 80088e4:	4631      	mov	r1, r6
 80088e6:	4628      	mov	r0, r5
 80088e8:	47b8      	blx	r7
 80088ea:	3001      	adds	r0, #1
 80088ec:	f43f af00 	beq.w	80086f0 <_printf_float+0x98>
 80088f0:	f10a 0a01 	add.w	sl, sl, #1
 80088f4:	e7ee      	b.n	80088d4 <_printf_float+0x27c>
 80088f6:	bf00      	nop
 80088f8:	ffffffff 	.word	0xffffffff
 80088fc:	7fefffff 	.word	0x7fefffff
 8008900:	0800aee8 	.word	0x0800aee8
 8008904:	0800aeec 	.word	0x0800aeec
 8008908:	0800aef0 	.word	0x0800aef0
 800890c:	0800aef4 	.word	0x0800aef4
 8008910:	0800aef8 	.word	0x0800aef8
 8008914:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008916:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800891a:	4553      	cmp	r3, sl
 800891c:	bfa8      	it	ge
 800891e:	4653      	movge	r3, sl
 8008920:	2b00      	cmp	r3, #0
 8008922:	4699      	mov	r9, r3
 8008924:	dc37      	bgt.n	8008996 <_printf_float+0x33e>
 8008926:	2300      	movs	r3, #0
 8008928:	9307      	str	r3, [sp, #28]
 800892a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800892e:	f104 021a 	add.w	r2, r4, #26
 8008932:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008934:	9907      	ldr	r1, [sp, #28]
 8008936:	9306      	str	r3, [sp, #24]
 8008938:	eba3 0309 	sub.w	r3, r3, r9
 800893c:	428b      	cmp	r3, r1
 800893e:	dc31      	bgt.n	80089a4 <_printf_float+0x34c>
 8008940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008942:	459a      	cmp	sl, r3
 8008944:	dc3b      	bgt.n	80089be <_printf_float+0x366>
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	07da      	lsls	r2, r3, #31
 800894a:	d438      	bmi.n	80089be <_printf_float+0x366>
 800894c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800894e:	ebaa 0903 	sub.w	r9, sl, r3
 8008952:	9b06      	ldr	r3, [sp, #24]
 8008954:	ebaa 0303 	sub.w	r3, sl, r3
 8008958:	4599      	cmp	r9, r3
 800895a:	bfa8      	it	ge
 800895c:	4699      	movge	r9, r3
 800895e:	f1b9 0f00 	cmp.w	r9, #0
 8008962:	dc34      	bgt.n	80089ce <_printf_float+0x376>
 8008964:	f04f 0800 	mov.w	r8, #0
 8008968:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800896c:	f104 0b1a 	add.w	fp, r4, #26
 8008970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008972:	ebaa 0303 	sub.w	r3, sl, r3
 8008976:	eba3 0309 	sub.w	r3, r3, r9
 800897a:	4543      	cmp	r3, r8
 800897c:	f77f af76 	ble.w	800886c <_printf_float+0x214>
 8008980:	2301      	movs	r3, #1
 8008982:	465a      	mov	r2, fp
 8008984:	4631      	mov	r1, r6
 8008986:	4628      	mov	r0, r5
 8008988:	47b8      	blx	r7
 800898a:	3001      	adds	r0, #1
 800898c:	f43f aeb0 	beq.w	80086f0 <_printf_float+0x98>
 8008990:	f108 0801 	add.w	r8, r8, #1
 8008994:	e7ec      	b.n	8008970 <_printf_float+0x318>
 8008996:	4642      	mov	r2, r8
 8008998:	4631      	mov	r1, r6
 800899a:	4628      	mov	r0, r5
 800899c:	47b8      	blx	r7
 800899e:	3001      	adds	r0, #1
 80089a0:	d1c1      	bne.n	8008926 <_printf_float+0x2ce>
 80089a2:	e6a5      	b.n	80086f0 <_printf_float+0x98>
 80089a4:	2301      	movs	r3, #1
 80089a6:	4631      	mov	r1, r6
 80089a8:	4628      	mov	r0, r5
 80089aa:	9206      	str	r2, [sp, #24]
 80089ac:	47b8      	blx	r7
 80089ae:	3001      	adds	r0, #1
 80089b0:	f43f ae9e 	beq.w	80086f0 <_printf_float+0x98>
 80089b4:	9b07      	ldr	r3, [sp, #28]
 80089b6:	9a06      	ldr	r2, [sp, #24]
 80089b8:	3301      	adds	r3, #1
 80089ba:	9307      	str	r3, [sp, #28]
 80089bc:	e7b9      	b.n	8008932 <_printf_float+0x2da>
 80089be:	9b05      	ldr	r3, [sp, #20]
 80089c0:	465a      	mov	r2, fp
 80089c2:	4631      	mov	r1, r6
 80089c4:	4628      	mov	r0, r5
 80089c6:	47b8      	blx	r7
 80089c8:	3001      	adds	r0, #1
 80089ca:	d1bf      	bne.n	800894c <_printf_float+0x2f4>
 80089cc:	e690      	b.n	80086f0 <_printf_float+0x98>
 80089ce:	9a06      	ldr	r2, [sp, #24]
 80089d0:	464b      	mov	r3, r9
 80089d2:	4442      	add	r2, r8
 80089d4:	4631      	mov	r1, r6
 80089d6:	4628      	mov	r0, r5
 80089d8:	47b8      	blx	r7
 80089da:	3001      	adds	r0, #1
 80089dc:	d1c2      	bne.n	8008964 <_printf_float+0x30c>
 80089de:	e687      	b.n	80086f0 <_printf_float+0x98>
 80089e0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80089e4:	f1b9 0f01 	cmp.w	r9, #1
 80089e8:	dc01      	bgt.n	80089ee <_printf_float+0x396>
 80089ea:	07db      	lsls	r3, r3, #31
 80089ec:	d536      	bpl.n	8008a5c <_printf_float+0x404>
 80089ee:	2301      	movs	r3, #1
 80089f0:	4642      	mov	r2, r8
 80089f2:	4631      	mov	r1, r6
 80089f4:	4628      	mov	r0, r5
 80089f6:	47b8      	blx	r7
 80089f8:	3001      	adds	r0, #1
 80089fa:	f43f ae79 	beq.w	80086f0 <_printf_float+0x98>
 80089fe:	9b05      	ldr	r3, [sp, #20]
 8008a00:	465a      	mov	r2, fp
 8008a02:	4631      	mov	r1, r6
 8008a04:	4628      	mov	r0, r5
 8008a06:	47b8      	blx	r7
 8008a08:	3001      	adds	r0, #1
 8008a0a:	f43f ae71 	beq.w	80086f0 <_printf_float+0x98>
 8008a0e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008a12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a1a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008a1e:	d018      	beq.n	8008a52 <_printf_float+0x3fa>
 8008a20:	464b      	mov	r3, r9
 8008a22:	f108 0201 	add.w	r2, r8, #1
 8008a26:	4631      	mov	r1, r6
 8008a28:	4628      	mov	r0, r5
 8008a2a:	47b8      	blx	r7
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	d10c      	bne.n	8008a4a <_printf_float+0x3f2>
 8008a30:	e65e      	b.n	80086f0 <_printf_float+0x98>
 8008a32:	2301      	movs	r3, #1
 8008a34:	465a      	mov	r2, fp
 8008a36:	4631      	mov	r1, r6
 8008a38:	4628      	mov	r0, r5
 8008a3a:	47b8      	blx	r7
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	f43f ae57 	beq.w	80086f0 <_printf_float+0x98>
 8008a42:	f108 0801 	add.w	r8, r8, #1
 8008a46:	45c8      	cmp	r8, r9
 8008a48:	dbf3      	blt.n	8008a32 <_printf_float+0x3da>
 8008a4a:	4653      	mov	r3, sl
 8008a4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008a50:	e6dc      	b.n	800880c <_printf_float+0x1b4>
 8008a52:	f04f 0800 	mov.w	r8, #0
 8008a56:	f104 0b1a 	add.w	fp, r4, #26
 8008a5a:	e7f4      	b.n	8008a46 <_printf_float+0x3ee>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	4642      	mov	r2, r8
 8008a60:	e7e1      	b.n	8008a26 <_printf_float+0x3ce>
 8008a62:	2301      	movs	r3, #1
 8008a64:	464a      	mov	r2, r9
 8008a66:	4631      	mov	r1, r6
 8008a68:	4628      	mov	r0, r5
 8008a6a:	47b8      	blx	r7
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	f43f ae3f 	beq.w	80086f0 <_printf_float+0x98>
 8008a72:	f108 0801 	add.w	r8, r8, #1
 8008a76:	68e3      	ldr	r3, [r4, #12]
 8008a78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a7a:	1a5b      	subs	r3, r3, r1
 8008a7c:	4543      	cmp	r3, r8
 8008a7e:	dcf0      	bgt.n	8008a62 <_printf_float+0x40a>
 8008a80:	e6f8      	b.n	8008874 <_printf_float+0x21c>
 8008a82:	f04f 0800 	mov.w	r8, #0
 8008a86:	f104 0919 	add.w	r9, r4, #25
 8008a8a:	e7f4      	b.n	8008a76 <_printf_float+0x41e>

08008a8c <_printf_common>:
 8008a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a90:	4616      	mov	r6, r2
 8008a92:	4698      	mov	r8, r3
 8008a94:	688a      	ldr	r2, [r1, #8]
 8008a96:	690b      	ldr	r3, [r1, #16]
 8008a98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	bfb8      	it	lt
 8008aa0:	4613      	movlt	r3, r2
 8008aa2:	6033      	str	r3, [r6, #0]
 8008aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008aa8:	4607      	mov	r7, r0
 8008aaa:	460c      	mov	r4, r1
 8008aac:	b10a      	cbz	r2, 8008ab2 <_printf_common+0x26>
 8008aae:	3301      	adds	r3, #1
 8008ab0:	6033      	str	r3, [r6, #0]
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	0699      	lsls	r1, r3, #26
 8008ab6:	bf42      	ittt	mi
 8008ab8:	6833      	ldrmi	r3, [r6, #0]
 8008aba:	3302      	addmi	r3, #2
 8008abc:	6033      	strmi	r3, [r6, #0]
 8008abe:	6825      	ldr	r5, [r4, #0]
 8008ac0:	f015 0506 	ands.w	r5, r5, #6
 8008ac4:	d106      	bne.n	8008ad4 <_printf_common+0x48>
 8008ac6:	f104 0a19 	add.w	sl, r4, #25
 8008aca:	68e3      	ldr	r3, [r4, #12]
 8008acc:	6832      	ldr	r2, [r6, #0]
 8008ace:	1a9b      	subs	r3, r3, r2
 8008ad0:	42ab      	cmp	r3, r5
 8008ad2:	dc26      	bgt.n	8008b22 <_printf_common+0x96>
 8008ad4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ad8:	6822      	ldr	r2, [r4, #0]
 8008ada:	3b00      	subs	r3, #0
 8008adc:	bf18      	it	ne
 8008ade:	2301      	movne	r3, #1
 8008ae0:	0692      	lsls	r2, r2, #26
 8008ae2:	d42b      	bmi.n	8008b3c <_printf_common+0xb0>
 8008ae4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ae8:	4641      	mov	r1, r8
 8008aea:	4638      	mov	r0, r7
 8008aec:	47c8      	blx	r9
 8008aee:	3001      	adds	r0, #1
 8008af0:	d01e      	beq.n	8008b30 <_printf_common+0xa4>
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	6922      	ldr	r2, [r4, #16]
 8008af6:	f003 0306 	and.w	r3, r3, #6
 8008afa:	2b04      	cmp	r3, #4
 8008afc:	bf02      	ittt	eq
 8008afe:	68e5      	ldreq	r5, [r4, #12]
 8008b00:	6833      	ldreq	r3, [r6, #0]
 8008b02:	1aed      	subeq	r5, r5, r3
 8008b04:	68a3      	ldr	r3, [r4, #8]
 8008b06:	bf0c      	ite	eq
 8008b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b0c:	2500      	movne	r5, #0
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	bfc4      	itt	gt
 8008b12:	1a9b      	subgt	r3, r3, r2
 8008b14:	18ed      	addgt	r5, r5, r3
 8008b16:	2600      	movs	r6, #0
 8008b18:	341a      	adds	r4, #26
 8008b1a:	42b5      	cmp	r5, r6
 8008b1c:	d11a      	bne.n	8008b54 <_printf_common+0xc8>
 8008b1e:	2000      	movs	r0, #0
 8008b20:	e008      	b.n	8008b34 <_printf_common+0xa8>
 8008b22:	2301      	movs	r3, #1
 8008b24:	4652      	mov	r2, sl
 8008b26:	4641      	mov	r1, r8
 8008b28:	4638      	mov	r0, r7
 8008b2a:	47c8      	blx	r9
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	d103      	bne.n	8008b38 <_printf_common+0xac>
 8008b30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b38:	3501      	adds	r5, #1
 8008b3a:	e7c6      	b.n	8008aca <_printf_common+0x3e>
 8008b3c:	18e1      	adds	r1, r4, r3
 8008b3e:	1c5a      	adds	r2, r3, #1
 8008b40:	2030      	movs	r0, #48	@ 0x30
 8008b42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b46:	4422      	add	r2, r4
 8008b48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b50:	3302      	adds	r3, #2
 8008b52:	e7c7      	b.n	8008ae4 <_printf_common+0x58>
 8008b54:	2301      	movs	r3, #1
 8008b56:	4622      	mov	r2, r4
 8008b58:	4641      	mov	r1, r8
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	47c8      	blx	r9
 8008b5e:	3001      	adds	r0, #1
 8008b60:	d0e6      	beq.n	8008b30 <_printf_common+0xa4>
 8008b62:	3601      	adds	r6, #1
 8008b64:	e7d9      	b.n	8008b1a <_printf_common+0x8e>
	...

08008b68 <_printf_i>:
 8008b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b6c:	7e0f      	ldrb	r7, [r1, #24]
 8008b6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b70:	2f78      	cmp	r7, #120	@ 0x78
 8008b72:	4691      	mov	r9, r2
 8008b74:	4680      	mov	r8, r0
 8008b76:	460c      	mov	r4, r1
 8008b78:	469a      	mov	sl, r3
 8008b7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b7e:	d807      	bhi.n	8008b90 <_printf_i+0x28>
 8008b80:	2f62      	cmp	r7, #98	@ 0x62
 8008b82:	d80a      	bhi.n	8008b9a <_printf_i+0x32>
 8008b84:	2f00      	cmp	r7, #0
 8008b86:	f000 80d2 	beq.w	8008d2e <_printf_i+0x1c6>
 8008b8a:	2f58      	cmp	r7, #88	@ 0x58
 8008b8c:	f000 80b9 	beq.w	8008d02 <_printf_i+0x19a>
 8008b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b98:	e03a      	b.n	8008c10 <_printf_i+0xa8>
 8008b9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b9e:	2b15      	cmp	r3, #21
 8008ba0:	d8f6      	bhi.n	8008b90 <_printf_i+0x28>
 8008ba2:	a101      	add	r1, pc, #4	@ (adr r1, 8008ba8 <_printf_i+0x40>)
 8008ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ba8:	08008c01 	.word	0x08008c01
 8008bac:	08008c15 	.word	0x08008c15
 8008bb0:	08008b91 	.word	0x08008b91
 8008bb4:	08008b91 	.word	0x08008b91
 8008bb8:	08008b91 	.word	0x08008b91
 8008bbc:	08008b91 	.word	0x08008b91
 8008bc0:	08008c15 	.word	0x08008c15
 8008bc4:	08008b91 	.word	0x08008b91
 8008bc8:	08008b91 	.word	0x08008b91
 8008bcc:	08008b91 	.word	0x08008b91
 8008bd0:	08008b91 	.word	0x08008b91
 8008bd4:	08008d15 	.word	0x08008d15
 8008bd8:	08008c3f 	.word	0x08008c3f
 8008bdc:	08008ccf 	.word	0x08008ccf
 8008be0:	08008b91 	.word	0x08008b91
 8008be4:	08008b91 	.word	0x08008b91
 8008be8:	08008d37 	.word	0x08008d37
 8008bec:	08008b91 	.word	0x08008b91
 8008bf0:	08008c3f 	.word	0x08008c3f
 8008bf4:	08008b91 	.word	0x08008b91
 8008bf8:	08008b91 	.word	0x08008b91
 8008bfc:	08008cd7 	.word	0x08008cd7
 8008c00:	6833      	ldr	r3, [r6, #0]
 8008c02:	1d1a      	adds	r2, r3, #4
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6032      	str	r2, [r6, #0]
 8008c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c10:	2301      	movs	r3, #1
 8008c12:	e09d      	b.n	8008d50 <_printf_i+0x1e8>
 8008c14:	6833      	ldr	r3, [r6, #0]
 8008c16:	6820      	ldr	r0, [r4, #0]
 8008c18:	1d19      	adds	r1, r3, #4
 8008c1a:	6031      	str	r1, [r6, #0]
 8008c1c:	0606      	lsls	r6, r0, #24
 8008c1e:	d501      	bpl.n	8008c24 <_printf_i+0xbc>
 8008c20:	681d      	ldr	r5, [r3, #0]
 8008c22:	e003      	b.n	8008c2c <_printf_i+0xc4>
 8008c24:	0645      	lsls	r5, r0, #25
 8008c26:	d5fb      	bpl.n	8008c20 <_printf_i+0xb8>
 8008c28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c2c:	2d00      	cmp	r5, #0
 8008c2e:	da03      	bge.n	8008c38 <_printf_i+0xd0>
 8008c30:	232d      	movs	r3, #45	@ 0x2d
 8008c32:	426d      	negs	r5, r5
 8008c34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c38:	4859      	ldr	r0, [pc, #356]	@ (8008da0 <_printf_i+0x238>)
 8008c3a:	230a      	movs	r3, #10
 8008c3c:	e011      	b.n	8008c62 <_printf_i+0xfa>
 8008c3e:	6821      	ldr	r1, [r4, #0]
 8008c40:	6833      	ldr	r3, [r6, #0]
 8008c42:	0608      	lsls	r0, r1, #24
 8008c44:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c48:	d402      	bmi.n	8008c50 <_printf_i+0xe8>
 8008c4a:	0649      	lsls	r1, r1, #25
 8008c4c:	bf48      	it	mi
 8008c4e:	b2ad      	uxthmi	r5, r5
 8008c50:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c52:	4853      	ldr	r0, [pc, #332]	@ (8008da0 <_printf_i+0x238>)
 8008c54:	6033      	str	r3, [r6, #0]
 8008c56:	bf14      	ite	ne
 8008c58:	230a      	movne	r3, #10
 8008c5a:	2308      	moveq	r3, #8
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c62:	6866      	ldr	r6, [r4, #4]
 8008c64:	60a6      	str	r6, [r4, #8]
 8008c66:	2e00      	cmp	r6, #0
 8008c68:	bfa2      	ittt	ge
 8008c6a:	6821      	ldrge	r1, [r4, #0]
 8008c6c:	f021 0104 	bicge.w	r1, r1, #4
 8008c70:	6021      	strge	r1, [r4, #0]
 8008c72:	b90d      	cbnz	r5, 8008c78 <_printf_i+0x110>
 8008c74:	2e00      	cmp	r6, #0
 8008c76:	d04b      	beq.n	8008d10 <_printf_i+0x1a8>
 8008c78:	4616      	mov	r6, r2
 8008c7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c7e:	fb03 5711 	mls	r7, r3, r1, r5
 8008c82:	5dc7      	ldrb	r7, [r0, r7]
 8008c84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c88:	462f      	mov	r7, r5
 8008c8a:	42bb      	cmp	r3, r7
 8008c8c:	460d      	mov	r5, r1
 8008c8e:	d9f4      	bls.n	8008c7a <_printf_i+0x112>
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d10b      	bne.n	8008cac <_printf_i+0x144>
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	07df      	lsls	r7, r3, #31
 8008c98:	d508      	bpl.n	8008cac <_printf_i+0x144>
 8008c9a:	6923      	ldr	r3, [r4, #16]
 8008c9c:	6861      	ldr	r1, [r4, #4]
 8008c9e:	4299      	cmp	r1, r3
 8008ca0:	bfde      	ittt	le
 8008ca2:	2330      	movle	r3, #48	@ 0x30
 8008ca4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ca8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008cac:	1b92      	subs	r2, r2, r6
 8008cae:	6122      	str	r2, [r4, #16]
 8008cb0:	f8cd a000 	str.w	sl, [sp]
 8008cb4:	464b      	mov	r3, r9
 8008cb6:	aa03      	add	r2, sp, #12
 8008cb8:	4621      	mov	r1, r4
 8008cba:	4640      	mov	r0, r8
 8008cbc:	f7ff fee6 	bl	8008a8c <_printf_common>
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d14a      	bne.n	8008d5a <_printf_i+0x1f2>
 8008cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cc8:	b004      	add	sp, #16
 8008cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	f043 0320 	orr.w	r3, r3, #32
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	4833      	ldr	r0, [pc, #204]	@ (8008da4 <_printf_i+0x23c>)
 8008cd8:	2778      	movs	r7, #120	@ 0x78
 8008cda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	6831      	ldr	r1, [r6, #0]
 8008ce2:	061f      	lsls	r7, r3, #24
 8008ce4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ce8:	d402      	bmi.n	8008cf0 <_printf_i+0x188>
 8008cea:	065f      	lsls	r7, r3, #25
 8008cec:	bf48      	it	mi
 8008cee:	b2ad      	uxthmi	r5, r5
 8008cf0:	6031      	str	r1, [r6, #0]
 8008cf2:	07d9      	lsls	r1, r3, #31
 8008cf4:	bf44      	itt	mi
 8008cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8008cfa:	6023      	strmi	r3, [r4, #0]
 8008cfc:	b11d      	cbz	r5, 8008d06 <_printf_i+0x19e>
 8008cfe:	2310      	movs	r3, #16
 8008d00:	e7ac      	b.n	8008c5c <_printf_i+0xf4>
 8008d02:	4827      	ldr	r0, [pc, #156]	@ (8008da0 <_printf_i+0x238>)
 8008d04:	e7e9      	b.n	8008cda <_printf_i+0x172>
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	f023 0320 	bic.w	r3, r3, #32
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	e7f6      	b.n	8008cfe <_printf_i+0x196>
 8008d10:	4616      	mov	r6, r2
 8008d12:	e7bd      	b.n	8008c90 <_printf_i+0x128>
 8008d14:	6833      	ldr	r3, [r6, #0]
 8008d16:	6825      	ldr	r5, [r4, #0]
 8008d18:	6961      	ldr	r1, [r4, #20]
 8008d1a:	1d18      	adds	r0, r3, #4
 8008d1c:	6030      	str	r0, [r6, #0]
 8008d1e:	062e      	lsls	r6, r5, #24
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	d501      	bpl.n	8008d28 <_printf_i+0x1c0>
 8008d24:	6019      	str	r1, [r3, #0]
 8008d26:	e002      	b.n	8008d2e <_printf_i+0x1c6>
 8008d28:	0668      	lsls	r0, r5, #25
 8008d2a:	d5fb      	bpl.n	8008d24 <_printf_i+0x1bc>
 8008d2c:	8019      	strh	r1, [r3, #0]
 8008d2e:	2300      	movs	r3, #0
 8008d30:	6123      	str	r3, [r4, #16]
 8008d32:	4616      	mov	r6, r2
 8008d34:	e7bc      	b.n	8008cb0 <_printf_i+0x148>
 8008d36:	6833      	ldr	r3, [r6, #0]
 8008d38:	1d1a      	adds	r2, r3, #4
 8008d3a:	6032      	str	r2, [r6, #0]
 8008d3c:	681e      	ldr	r6, [r3, #0]
 8008d3e:	6862      	ldr	r2, [r4, #4]
 8008d40:	2100      	movs	r1, #0
 8008d42:	4630      	mov	r0, r6
 8008d44:	f7f7 facc 	bl	80002e0 <memchr>
 8008d48:	b108      	cbz	r0, 8008d4e <_printf_i+0x1e6>
 8008d4a:	1b80      	subs	r0, r0, r6
 8008d4c:	6060      	str	r0, [r4, #4]
 8008d4e:	6863      	ldr	r3, [r4, #4]
 8008d50:	6123      	str	r3, [r4, #16]
 8008d52:	2300      	movs	r3, #0
 8008d54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d58:	e7aa      	b.n	8008cb0 <_printf_i+0x148>
 8008d5a:	6923      	ldr	r3, [r4, #16]
 8008d5c:	4632      	mov	r2, r6
 8008d5e:	4649      	mov	r1, r9
 8008d60:	4640      	mov	r0, r8
 8008d62:	47d0      	blx	sl
 8008d64:	3001      	adds	r0, #1
 8008d66:	d0ad      	beq.n	8008cc4 <_printf_i+0x15c>
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	079b      	lsls	r3, r3, #30
 8008d6c:	d413      	bmi.n	8008d96 <_printf_i+0x22e>
 8008d6e:	68e0      	ldr	r0, [r4, #12]
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	4298      	cmp	r0, r3
 8008d74:	bfb8      	it	lt
 8008d76:	4618      	movlt	r0, r3
 8008d78:	e7a6      	b.n	8008cc8 <_printf_i+0x160>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	4649      	mov	r1, r9
 8008d80:	4640      	mov	r0, r8
 8008d82:	47d0      	blx	sl
 8008d84:	3001      	adds	r0, #1
 8008d86:	d09d      	beq.n	8008cc4 <_printf_i+0x15c>
 8008d88:	3501      	adds	r5, #1
 8008d8a:	68e3      	ldr	r3, [r4, #12]
 8008d8c:	9903      	ldr	r1, [sp, #12]
 8008d8e:	1a5b      	subs	r3, r3, r1
 8008d90:	42ab      	cmp	r3, r5
 8008d92:	dcf2      	bgt.n	8008d7a <_printf_i+0x212>
 8008d94:	e7eb      	b.n	8008d6e <_printf_i+0x206>
 8008d96:	2500      	movs	r5, #0
 8008d98:	f104 0619 	add.w	r6, r4, #25
 8008d9c:	e7f5      	b.n	8008d8a <_printf_i+0x222>
 8008d9e:	bf00      	nop
 8008da0:	0800aefa 	.word	0x0800aefa
 8008da4:	0800af0b 	.word	0x0800af0b

08008da8 <std>:
 8008da8:	2300      	movs	r3, #0
 8008daa:	b510      	push	{r4, lr}
 8008dac:	4604      	mov	r4, r0
 8008dae:	e9c0 3300 	strd	r3, r3, [r0]
 8008db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008db6:	6083      	str	r3, [r0, #8]
 8008db8:	8181      	strh	r1, [r0, #12]
 8008dba:	6643      	str	r3, [r0, #100]	@ 0x64
 8008dbc:	81c2      	strh	r2, [r0, #14]
 8008dbe:	6183      	str	r3, [r0, #24]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	2208      	movs	r2, #8
 8008dc4:	305c      	adds	r0, #92	@ 0x5c
 8008dc6:	f000 f9f9 	bl	80091bc <memset>
 8008dca:	4b0d      	ldr	r3, [pc, #52]	@ (8008e00 <std+0x58>)
 8008dcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8008dce:	4b0d      	ldr	r3, [pc, #52]	@ (8008e04 <std+0x5c>)
 8008dd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008e08 <std+0x60>)
 8008dd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8008e0c <std+0x64>)
 8008dd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008dda:	4b0d      	ldr	r3, [pc, #52]	@ (8008e10 <std+0x68>)
 8008ddc:	6224      	str	r4, [r4, #32]
 8008dde:	429c      	cmp	r4, r3
 8008de0:	d006      	beq.n	8008df0 <std+0x48>
 8008de2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008de6:	4294      	cmp	r4, r2
 8008de8:	d002      	beq.n	8008df0 <std+0x48>
 8008dea:	33d0      	adds	r3, #208	@ 0xd0
 8008dec:	429c      	cmp	r4, r3
 8008dee:	d105      	bne.n	8008dfc <std+0x54>
 8008df0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008df8:	f000 ba6c 	b.w	80092d4 <__retarget_lock_init_recursive>
 8008dfc:	bd10      	pop	{r4, pc}
 8008dfe:	bf00      	nop
 8008e00:	0800900d 	.word	0x0800900d
 8008e04:	0800902f 	.word	0x0800902f
 8008e08:	08009067 	.word	0x08009067
 8008e0c:	0800908b 	.word	0x0800908b
 8008e10:	240008b8 	.word	0x240008b8

08008e14 <stdio_exit_handler>:
 8008e14:	4a02      	ldr	r2, [pc, #8]	@ (8008e20 <stdio_exit_handler+0xc>)
 8008e16:	4903      	ldr	r1, [pc, #12]	@ (8008e24 <stdio_exit_handler+0x10>)
 8008e18:	4803      	ldr	r0, [pc, #12]	@ (8008e28 <stdio_exit_handler+0x14>)
 8008e1a:	f000 b869 	b.w	8008ef0 <_fwalk_sglue>
 8008e1e:	bf00      	nop
 8008e20:	24000010 	.word	0x24000010
 8008e24:	0800a9d9 	.word	0x0800a9d9
 8008e28:	24000020 	.word	0x24000020

08008e2c <cleanup_stdio>:
 8008e2c:	6841      	ldr	r1, [r0, #4]
 8008e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8008e60 <cleanup_stdio+0x34>)
 8008e30:	4299      	cmp	r1, r3
 8008e32:	b510      	push	{r4, lr}
 8008e34:	4604      	mov	r4, r0
 8008e36:	d001      	beq.n	8008e3c <cleanup_stdio+0x10>
 8008e38:	f001 fdce 	bl	800a9d8 <_fflush_r>
 8008e3c:	68a1      	ldr	r1, [r4, #8]
 8008e3e:	4b09      	ldr	r3, [pc, #36]	@ (8008e64 <cleanup_stdio+0x38>)
 8008e40:	4299      	cmp	r1, r3
 8008e42:	d002      	beq.n	8008e4a <cleanup_stdio+0x1e>
 8008e44:	4620      	mov	r0, r4
 8008e46:	f001 fdc7 	bl	800a9d8 <_fflush_r>
 8008e4a:	68e1      	ldr	r1, [r4, #12]
 8008e4c:	4b06      	ldr	r3, [pc, #24]	@ (8008e68 <cleanup_stdio+0x3c>)
 8008e4e:	4299      	cmp	r1, r3
 8008e50:	d004      	beq.n	8008e5c <cleanup_stdio+0x30>
 8008e52:	4620      	mov	r0, r4
 8008e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e58:	f001 bdbe 	b.w	800a9d8 <_fflush_r>
 8008e5c:	bd10      	pop	{r4, pc}
 8008e5e:	bf00      	nop
 8008e60:	240008b8 	.word	0x240008b8
 8008e64:	24000920 	.word	0x24000920
 8008e68:	24000988 	.word	0x24000988

08008e6c <global_stdio_init.part.0>:
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e9c <global_stdio_init.part.0+0x30>)
 8008e70:	4c0b      	ldr	r4, [pc, #44]	@ (8008ea0 <global_stdio_init.part.0+0x34>)
 8008e72:	4a0c      	ldr	r2, [pc, #48]	@ (8008ea4 <global_stdio_init.part.0+0x38>)
 8008e74:	601a      	str	r2, [r3, #0]
 8008e76:	4620      	mov	r0, r4
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2104      	movs	r1, #4
 8008e7c:	f7ff ff94 	bl	8008da8 <std>
 8008e80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e84:	2201      	movs	r2, #1
 8008e86:	2109      	movs	r1, #9
 8008e88:	f7ff ff8e 	bl	8008da8 <std>
 8008e8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e90:	2202      	movs	r2, #2
 8008e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e96:	2112      	movs	r1, #18
 8008e98:	f7ff bf86 	b.w	8008da8 <std>
 8008e9c:	240009f0 	.word	0x240009f0
 8008ea0:	240008b8 	.word	0x240008b8
 8008ea4:	08008e15 	.word	0x08008e15

08008ea8 <__sfp_lock_acquire>:
 8008ea8:	4801      	ldr	r0, [pc, #4]	@ (8008eb0 <__sfp_lock_acquire+0x8>)
 8008eaa:	f000 ba14 	b.w	80092d6 <__retarget_lock_acquire_recursive>
 8008eae:	bf00      	nop
 8008eb0:	240009f9 	.word	0x240009f9

08008eb4 <__sfp_lock_release>:
 8008eb4:	4801      	ldr	r0, [pc, #4]	@ (8008ebc <__sfp_lock_release+0x8>)
 8008eb6:	f000 ba0f 	b.w	80092d8 <__retarget_lock_release_recursive>
 8008eba:	bf00      	nop
 8008ebc:	240009f9 	.word	0x240009f9

08008ec0 <__sinit>:
 8008ec0:	b510      	push	{r4, lr}
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	f7ff fff0 	bl	8008ea8 <__sfp_lock_acquire>
 8008ec8:	6a23      	ldr	r3, [r4, #32]
 8008eca:	b11b      	cbz	r3, 8008ed4 <__sinit+0x14>
 8008ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed0:	f7ff bff0 	b.w	8008eb4 <__sfp_lock_release>
 8008ed4:	4b04      	ldr	r3, [pc, #16]	@ (8008ee8 <__sinit+0x28>)
 8008ed6:	6223      	str	r3, [r4, #32]
 8008ed8:	4b04      	ldr	r3, [pc, #16]	@ (8008eec <__sinit+0x2c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1f5      	bne.n	8008ecc <__sinit+0xc>
 8008ee0:	f7ff ffc4 	bl	8008e6c <global_stdio_init.part.0>
 8008ee4:	e7f2      	b.n	8008ecc <__sinit+0xc>
 8008ee6:	bf00      	nop
 8008ee8:	08008e2d 	.word	0x08008e2d
 8008eec:	240009f0 	.word	0x240009f0

08008ef0 <_fwalk_sglue>:
 8008ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ef4:	4607      	mov	r7, r0
 8008ef6:	4688      	mov	r8, r1
 8008ef8:	4614      	mov	r4, r2
 8008efa:	2600      	movs	r6, #0
 8008efc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f00:	f1b9 0901 	subs.w	r9, r9, #1
 8008f04:	d505      	bpl.n	8008f12 <_fwalk_sglue+0x22>
 8008f06:	6824      	ldr	r4, [r4, #0]
 8008f08:	2c00      	cmp	r4, #0
 8008f0a:	d1f7      	bne.n	8008efc <_fwalk_sglue+0xc>
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f12:	89ab      	ldrh	r3, [r5, #12]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d907      	bls.n	8008f28 <_fwalk_sglue+0x38>
 8008f18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	d003      	beq.n	8008f28 <_fwalk_sglue+0x38>
 8008f20:	4629      	mov	r1, r5
 8008f22:	4638      	mov	r0, r7
 8008f24:	47c0      	blx	r8
 8008f26:	4306      	orrs	r6, r0
 8008f28:	3568      	adds	r5, #104	@ 0x68
 8008f2a:	e7e9      	b.n	8008f00 <_fwalk_sglue+0x10>

08008f2c <iprintf>:
 8008f2c:	b40f      	push	{r0, r1, r2, r3}
 8008f2e:	b507      	push	{r0, r1, r2, lr}
 8008f30:	4906      	ldr	r1, [pc, #24]	@ (8008f4c <iprintf+0x20>)
 8008f32:	ab04      	add	r3, sp, #16
 8008f34:	6808      	ldr	r0, [r1, #0]
 8008f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f3a:	6881      	ldr	r1, [r0, #8]
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	f001 fbaf 	bl	800a6a0 <_vfiprintf_r>
 8008f42:	b003      	add	sp, #12
 8008f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f48:	b004      	add	sp, #16
 8008f4a:	4770      	bx	lr
 8008f4c:	2400001c 	.word	0x2400001c

08008f50 <_puts_r>:
 8008f50:	6a03      	ldr	r3, [r0, #32]
 8008f52:	b570      	push	{r4, r5, r6, lr}
 8008f54:	6884      	ldr	r4, [r0, #8]
 8008f56:	4605      	mov	r5, r0
 8008f58:	460e      	mov	r6, r1
 8008f5a:	b90b      	cbnz	r3, 8008f60 <_puts_r+0x10>
 8008f5c:	f7ff ffb0 	bl	8008ec0 <__sinit>
 8008f60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f62:	07db      	lsls	r3, r3, #31
 8008f64:	d405      	bmi.n	8008f72 <_puts_r+0x22>
 8008f66:	89a3      	ldrh	r3, [r4, #12]
 8008f68:	0598      	lsls	r0, r3, #22
 8008f6a:	d402      	bmi.n	8008f72 <_puts_r+0x22>
 8008f6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f6e:	f000 f9b2 	bl	80092d6 <__retarget_lock_acquire_recursive>
 8008f72:	89a3      	ldrh	r3, [r4, #12]
 8008f74:	0719      	lsls	r1, r3, #28
 8008f76:	d502      	bpl.n	8008f7e <_puts_r+0x2e>
 8008f78:	6923      	ldr	r3, [r4, #16]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d135      	bne.n	8008fea <_puts_r+0x9a>
 8008f7e:	4621      	mov	r1, r4
 8008f80:	4628      	mov	r0, r5
 8008f82:	f000 f8c5 	bl	8009110 <__swsetup_r>
 8008f86:	b380      	cbz	r0, 8008fea <_puts_r+0x9a>
 8008f88:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008f8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f8e:	07da      	lsls	r2, r3, #31
 8008f90:	d405      	bmi.n	8008f9e <_puts_r+0x4e>
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	059b      	lsls	r3, r3, #22
 8008f96:	d402      	bmi.n	8008f9e <_puts_r+0x4e>
 8008f98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f9a:	f000 f99d 	bl	80092d8 <__retarget_lock_release_recursive>
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	bd70      	pop	{r4, r5, r6, pc}
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	da04      	bge.n	8008fb0 <_puts_r+0x60>
 8008fa6:	69a2      	ldr	r2, [r4, #24]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	dc17      	bgt.n	8008fdc <_puts_r+0x8c>
 8008fac:	290a      	cmp	r1, #10
 8008fae:	d015      	beq.n	8008fdc <_puts_r+0x8c>
 8008fb0:	6823      	ldr	r3, [r4, #0]
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	6022      	str	r2, [r4, #0]
 8008fb6:	7019      	strb	r1, [r3, #0]
 8008fb8:	68a3      	ldr	r3, [r4, #8]
 8008fba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	60a3      	str	r3, [r4, #8]
 8008fc2:	2900      	cmp	r1, #0
 8008fc4:	d1ed      	bne.n	8008fa2 <_puts_r+0x52>
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	da11      	bge.n	8008fee <_puts_r+0x9e>
 8008fca:	4622      	mov	r2, r4
 8008fcc:	210a      	movs	r1, #10
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f000 f85f 	bl	8009092 <__swbuf_r>
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d0d7      	beq.n	8008f88 <_puts_r+0x38>
 8008fd8:	250a      	movs	r5, #10
 8008fda:	e7d7      	b.n	8008f8c <_puts_r+0x3c>
 8008fdc:	4622      	mov	r2, r4
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f000 f857 	bl	8009092 <__swbuf_r>
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	d1e7      	bne.n	8008fb8 <_puts_r+0x68>
 8008fe8:	e7ce      	b.n	8008f88 <_puts_r+0x38>
 8008fea:	3e01      	subs	r6, #1
 8008fec:	e7e4      	b.n	8008fb8 <_puts_r+0x68>
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	6022      	str	r2, [r4, #0]
 8008ff4:	220a      	movs	r2, #10
 8008ff6:	701a      	strb	r2, [r3, #0]
 8008ff8:	e7ee      	b.n	8008fd8 <_puts_r+0x88>
	...

08008ffc <puts>:
 8008ffc:	4b02      	ldr	r3, [pc, #8]	@ (8009008 <puts+0xc>)
 8008ffe:	4601      	mov	r1, r0
 8009000:	6818      	ldr	r0, [r3, #0]
 8009002:	f7ff bfa5 	b.w	8008f50 <_puts_r>
 8009006:	bf00      	nop
 8009008:	2400001c 	.word	0x2400001c

0800900c <__sread>:
 800900c:	b510      	push	{r4, lr}
 800900e:	460c      	mov	r4, r1
 8009010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009014:	f000 f900 	bl	8009218 <_read_r>
 8009018:	2800      	cmp	r0, #0
 800901a:	bfab      	itete	ge
 800901c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800901e:	89a3      	ldrhlt	r3, [r4, #12]
 8009020:	181b      	addge	r3, r3, r0
 8009022:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009026:	bfac      	ite	ge
 8009028:	6563      	strge	r3, [r4, #84]	@ 0x54
 800902a:	81a3      	strhlt	r3, [r4, #12]
 800902c:	bd10      	pop	{r4, pc}

0800902e <__swrite>:
 800902e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009032:	461f      	mov	r7, r3
 8009034:	898b      	ldrh	r3, [r1, #12]
 8009036:	05db      	lsls	r3, r3, #23
 8009038:	4605      	mov	r5, r0
 800903a:	460c      	mov	r4, r1
 800903c:	4616      	mov	r6, r2
 800903e:	d505      	bpl.n	800904c <__swrite+0x1e>
 8009040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009044:	2302      	movs	r3, #2
 8009046:	2200      	movs	r2, #0
 8009048:	f000 f8d4 	bl	80091f4 <_lseek_r>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009052:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009056:	81a3      	strh	r3, [r4, #12]
 8009058:	4632      	mov	r2, r6
 800905a:	463b      	mov	r3, r7
 800905c:	4628      	mov	r0, r5
 800905e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009062:	f000 b8fb 	b.w	800925c <_write_r>

08009066 <__sseek>:
 8009066:	b510      	push	{r4, lr}
 8009068:	460c      	mov	r4, r1
 800906a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800906e:	f000 f8c1 	bl	80091f4 <_lseek_r>
 8009072:	1c43      	adds	r3, r0, #1
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	bf15      	itete	ne
 8009078:	6560      	strne	r0, [r4, #84]	@ 0x54
 800907a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800907e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009082:	81a3      	strheq	r3, [r4, #12]
 8009084:	bf18      	it	ne
 8009086:	81a3      	strhne	r3, [r4, #12]
 8009088:	bd10      	pop	{r4, pc}

0800908a <__sclose>:
 800908a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800908e:	f000 b8a1 	b.w	80091d4 <_close_r>

08009092 <__swbuf_r>:
 8009092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009094:	460e      	mov	r6, r1
 8009096:	4614      	mov	r4, r2
 8009098:	4605      	mov	r5, r0
 800909a:	b118      	cbz	r0, 80090a4 <__swbuf_r+0x12>
 800909c:	6a03      	ldr	r3, [r0, #32]
 800909e:	b90b      	cbnz	r3, 80090a4 <__swbuf_r+0x12>
 80090a0:	f7ff ff0e 	bl	8008ec0 <__sinit>
 80090a4:	69a3      	ldr	r3, [r4, #24]
 80090a6:	60a3      	str	r3, [r4, #8]
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	071a      	lsls	r2, r3, #28
 80090ac:	d501      	bpl.n	80090b2 <__swbuf_r+0x20>
 80090ae:	6923      	ldr	r3, [r4, #16]
 80090b0:	b943      	cbnz	r3, 80090c4 <__swbuf_r+0x32>
 80090b2:	4621      	mov	r1, r4
 80090b4:	4628      	mov	r0, r5
 80090b6:	f000 f82b 	bl	8009110 <__swsetup_r>
 80090ba:	b118      	cbz	r0, 80090c4 <__swbuf_r+0x32>
 80090bc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80090c0:	4638      	mov	r0, r7
 80090c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	6922      	ldr	r2, [r4, #16]
 80090c8:	1a98      	subs	r0, r3, r2
 80090ca:	6963      	ldr	r3, [r4, #20]
 80090cc:	b2f6      	uxtb	r6, r6
 80090ce:	4283      	cmp	r3, r0
 80090d0:	4637      	mov	r7, r6
 80090d2:	dc05      	bgt.n	80090e0 <__swbuf_r+0x4e>
 80090d4:	4621      	mov	r1, r4
 80090d6:	4628      	mov	r0, r5
 80090d8:	f001 fc7e 	bl	800a9d8 <_fflush_r>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d1ed      	bne.n	80090bc <__swbuf_r+0x2a>
 80090e0:	68a3      	ldr	r3, [r4, #8]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	60a3      	str	r3, [r4, #8]
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	1c5a      	adds	r2, r3, #1
 80090ea:	6022      	str	r2, [r4, #0]
 80090ec:	701e      	strb	r6, [r3, #0]
 80090ee:	6962      	ldr	r2, [r4, #20]
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d004      	beq.n	8009100 <__swbuf_r+0x6e>
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	07db      	lsls	r3, r3, #31
 80090fa:	d5e1      	bpl.n	80090c0 <__swbuf_r+0x2e>
 80090fc:	2e0a      	cmp	r6, #10
 80090fe:	d1df      	bne.n	80090c0 <__swbuf_r+0x2e>
 8009100:	4621      	mov	r1, r4
 8009102:	4628      	mov	r0, r5
 8009104:	f001 fc68 	bl	800a9d8 <_fflush_r>
 8009108:	2800      	cmp	r0, #0
 800910a:	d0d9      	beq.n	80090c0 <__swbuf_r+0x2e>
 800910c:	e7d6      	b.n	80090bc <__swbuf_r+0x2a>
	...

08009110 <__swsetup_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	4b29      	ldr	r3, [pc, #164]	@ (80091b8 <__swsetup_r+0xa8>)
 8009114:	4605      	mov	r5, r0
 8009116:	6818      	ldr	r0, [r3, #0]
 8009118:	460c      	mov	r4, r1
 800911a:	b118      	cbz	r0, 8009124 <__swsetup_r+0x14>
 800911c:	6a03      	ldr	r3, [r0, #32]
 800911e:	b90b      	cbnz	r3, 8009124 <__swsetup_r+0x14>
 8009120:	f7ff fece 	bl	8008ec0 <__sinit>
 8009124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009128:	0719      	lsls	r1, r3, #28
 800912a:	d422      	bmi.n	8009172 <__swsetup_r+0x62>
 800912c:	06da      	lsls	r2, r3, #27
 800912e:	d407      	bmi.n	8009140 <__swsetup_r+0x30>
 8009130:	2209      	movs	r2, #9
 8009132:	602a      	str	r2, [r5, #0]
 8009134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009138:	81a3      	strh	r3, [r4, #12]
 800913a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800913e:	e033      	b.n	80091a8 <__swsetup_r+0x98>
 8009140:	0758      	lsls	r0, r3, #29
 8009142:	d512      	bpl.n	800916a <__swsetup_r+0x5a>
 8009144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009146:	b141      	cbz	r1, 800915a <__swsetup_r+0x4a>
 8009148:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800914c:	4299      	cmp	r1, r3
 800914e:	d002      	beq.n	8009156 <__swsetup_r+0x46>
 8009150:	4628      	mov	r0, r5
 8009152:	f000 feaf 	bl	8009eb4 <_free_r>
 8009156:	2300      	movs	r3, #0
 8009158:	6363      	str	r3, [r4, #52]	@ 0x34
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009160:	81a3      	strh	r3, [r4, #12]
 8009162:	2300      	movs	r3, #0
 8009164:	6063      	str	r3, [r4, #4]
 8009166:	6923      	ldr	r3, [r4, #16]
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	f043 0308 	orr.w	r3, r3, #8
 8009170:	81a3      	strh	r3, [r4, #12]
 8009172:	6923      	ldr	r3, [r4, #16]
 8009174:	b94b      	cbnz	r3, 800918a <__swsetup_r+0x7a>
 8009176:	89a3      	ldrh	r3, [r4, #12]
 8009178:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800917c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009180:	d003      	beq.n	800918a <__swsetup_r+0x7a>
 8009182:	4621      	mov	r1, r4
 8009184:	4628      	mov	r0, r5
 8009186:	f001 fc75 	bl	800aa74 <__smakebuf_r>
 800918a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918e:	f013 0201 	ands.w	r2, r3, #1
 8009192:	d00a      	beq.n	80091aa <__swsetup_r+0x9a>
 8009194:	2200      	movs	r2, #0
 8009196:	60a2      	str	r2, [r4, #8]
 8009198:	6962      	ldr	r2, [r4, #20]
 800919a:	4252      	negs	r2, r2
 800919c:	61a2      	str	r2, [r4, #24]
 800919e:	6922      	ldr	r2, [r4, #16]
 80091a0:	b942      	cbnz	r2, 80091b4 <__swsetup_r+0xa4>
 80091a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091a6:	d1c5      	bne.n	8009134 <__swsetup_r+0x24>
 80091a8:	bd38      	pop	{r3, r4, r5, pc}
 80091aa:	0799      	lsls	r1, r3, #30
 80091ac:	bf58      	it	pl
 80091ae:	6962      	ldrpl	r2, [r4, #20]
 80091b0:	60a2      	str	r2, [r4, #8]
 80091b2:	e7f4      	b.n	800919e <__swsetup_r+0x8e>
 80091b4:	2000      	movs	r0, #0
 80091b6:	e7f7      	b.n	80091a8 <__swsetup_r+0x98>
 80091b8:	2400001c 	.word	0x2400001c

080091bc <memset>:
 80091bc:	4402      	add	r2, r0
 80091be:	4603      	mov	r3, r0
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d100      	bne.n	80091c6 <memset+0xa>
 80091c4:	4770      	bx	lr
 80091c6:	f803 1b01 	strb.w	r1, [r3], #1
 80091ca:	e7f9      	b.n	80091c0 <memset+0x4>

080091cc <_localeconv_r>:
 80091cc:	4800      	ldr	r0, [pc, #0]	@ (80091d0 <_localeconv_r+0x4>)
 80091ce:	4770      	bx	lr
 80091d0:	2400015c 	.word	0x2400015c

080091d4 <_close_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4d06      	ldr	r5, [pc, #24]	@ (80091f0 <_close_r+0x1c>)
 80091d8:	2300      	movs	r3, #0
 80091da:	4604      	mov	r4, r0
 80091dc:	4608      	mov	r0, r1
 80091de:	602b      	str	r3, [r5, #0]
 80091e0:	f7f9 fa5b 	bl	800269a <_close>
 80091e4:	1c43      	adds	r3, r0, #1
 80091e6:	d102      	bne.n	80091ee <_close_r+0x1a>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	b103      	cbz	r3, 80091ee <_close_r+0x1a>
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	240009f4 	.word	0x240009f4

080091f4 <_lseek_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d07      	ldr	r5, [pc, #28]	@ (8009214 <_lseek_r+0x20>)
 80091f8:	4604      	mov	r4, r0
 80091fa:	4608      	mov	r0, r1
 80091fc:	4611      	mov	r1, r2
 80091fe:	2200      	movs	r2, #0
 8009200:	602a      	str	r2, [r5, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	f7f9 fa70 	bl	80026e8 <_lseek>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d102      	bne.n	8009212 <_lseek_r+0x1e>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	b103      	cbz	r3, 8009212 <_lseek_r+0x1e>
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	240009f4 	.word	0x240009f4

08009218 <_read_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	4d07      	ldr	r5, [pc, #28]	@ (8009238 <_read_r+0x20>)
 800921c:	4604      	mov	r4, r0
 800921e:	4608      	mov	r0, r1
 8009220:	4611      	mov	r1, r2
 8009222:	2200      	movs	r2, #0
 8009224:	602a      	str	r2, [r5, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	f7f9 f9fe 	bl	8002628 <_read>
 800922c:	1c43      	adds	r3, r0, #1
 800922e:	d102      	bne.n	8009236 <_read_r+0x1e>
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	b103      	cbz	r3, 8009236 <_read_r+0x1e>
 8009234:	6023      	str	r3, [r4, #0]
 8009236:	bd38      	pop	{r3, r4, r5, pc}
 8009238:	240009f4 	.word	0x240009f4

0800923c <_sbrk_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4d06      	ldr	r5, [pc, #24]	@ (8009258 <_sbrk_r+0x1c>)
 8009240:	2300      	movs	r3, #0
 8009242:	4604      	mov	r4, r0
 8009244:	4608      	mov	r0, r1
 8009246:	602b      	str	r3, [r5, #0]
 8009248:	f7f9 fa5c 	bl	8002704 <_sbrk>
 800924c:	1c43      	adds	r3, r0, #1
 800924e:	d102      	bne.n	8009256 <_sbrk_r+0x1a>
 8009250:	682b      	ldr	r3, [r5, #0]
 8009252:	b103      	cbz	r3, 8009256 <_sbrk_r+0x1a>
 8009254:	6023      	str	r3, [r4, #0]
 8009256:	bd38      	pop	{r3, r4, r5, pc}
 8009258:	240009f4 	.word	0x240009f4

0800925c <_write_r>:
 800925c:	b538      	push	{r3, r4, r5, lr}
 800925e:	4d07      	ldr	r5, [pc, #28]	@ (800927c <_write_r+0x20>)
 8009260:	4604      	mov	r4, r0
 8009262:	4608      	mov	r0, r1
 8009264:	4611      	mov	r1, r2
 8009266:	2200      	movs	r2, #0
 8009268:	602a      	str	r2, [r5, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	f7f9 f9f9 	bl	8002662 <_write>
 8009270:	1c43      	adds	r3, r0, #1
 8009272:	d102      	bne.n	800927a <_write_r+0x1e>
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	b103      	cbz	r3, 800927a <_write_r+0x1e>
 8009278:	6023      	str	r3, [r4, #0]
 800927a:	bd38      	pop	{r3, r4, r5, pc}
 800927c:	240009f4 	.word	0x240009f4

08009280 <__errno>:
 8009280:	4b01      	ldr	r3, [pc, #4]	@ (8009288 <__errno+0x8>)
 8009282:	6818      	ldr	r0, [r3, #0]
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	2400001c 	.word	0x2400001c

0800928c <__libc_init_array>:
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	4d0d      	ldr	r5, [pc, #52]	@ (80092c4 <__libc_init_array+0x38>)
 8009290:	4c0d      	ldr	r4, [pc, #52]	@ (80092c8 <__libc_init_array+0x3c>)
 8009292:	1b64      	subs	r4, r4, r5
 8009294:	10a4      	asrs	r4, r4, #2
 8009296:	2600      	movs	r6, #0
 8009298:	42a6      	cmp	r6, r4
 800929a:	d109      	bne.n	80092b0 <__libc_init_array+0x24>
 800929c:	4d0b      	ldr	r5, [pc, #44]	@ (80092cc <__libc_init_array+0x40>)
 800929e:	4c0c      	ldr	r4, [pc, #48]	@ (80092d0 <__libc_init_array+0x44>)
 80092a0:	f001 fcf6 	bl	800ac90 <_init>
 80092a4:	1b64      	subs	r4, r4, r5
 80092a6:	10a4      	asrs	r4, r4, #2
 80092a8:	2600      	movs	r6, #0
 80092aa:	42a6      	cmp	r6, r4
 80092ac:	d105      	bne.n	80092ba <__libc_init_array+0x2e>
 80092ae:	bd70      	pop	{r4, r5, r6, pc}
 80092b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092b4:	4798      	blx	r3
 80092b6:	3601      	adds	r6, #1
 80092b8:	e7ee      	b.n	8009298 <__libc_init_array+0xc>
 80092ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80092be:	4798      	blx	r3
 80092c0:	3601      	adds	r6, #1
 80092c2:	e7f2      	b.n	80092aa <__libc_init_array+0x1e>
 80092c4:	0800b260 	.word	0x0800b260
 80092c8:	0800b260 	.word	0x0800b260
 80092cc:	0800b260 	.word	0x0800b260
 80092d0:	0800b264 	.word	0x0800b264

080092d4 <__retarget_lock_init_recursive>:
 80092d4:	4770      	bx	lr

080092d6 <__retarget_lock_acquire_recursive>:
 80092d6:	4770      	bx	lr

080092d8 <__retarget_lock_release_recursive>:
 80092d8:	4770      	bx	lr

080092da <memcpy>:
 80092da:	440a      	add	r2, r1
 80092dc:	4291      	cmp	r1, r2
 80092de:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80092e2:	d100      	bne.n	80092e6 <memcpy+0xc>
 80092e4:	4770      	bx	lr
 80092e6:	b510      	push	{r4, lr}
 80092e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092f0:	4291      	cmp	r1, r2
 80092f2:	d1f9      	bne.n	80092e8 <memcpy+0xe>
 80092f4:	bd10      	pop	{r4, pc}

080092f6 <quorem>:
 80092f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fa:	6903      	ldr	r3, [r0, #16]
 80092fc:	690c      	ldr	r4, [r1, #16]
 80092fe:	42a3      	cmp	r3, r4
 8009300:	4607      	mov	r7, r0
 8009302:	db7e      	blt.n	8009402 <quorem+0x10c>
 8009304:	3c01      	subs	r4, #1
 8009306:	f101 0814 	add.w	r8, r1, #20
 800930a:	00a3      	lsls	r3, r4, #2
 800930c:	f100 0514 	add.w	r5, r0, #20
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009316:	9301      	str	r3, [sp, #4]
 8009318:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800931c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009320:	3301      	adds	r3, #1
 8009322:	429a      	cmp	r2, r3
 8009324:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009328:	fbb2 f6f3 	udiv	r6, r2, r3
 800932c:	d32e      	bcc.n	800938c <quorem+0x96>
 800932e:	f04f 0a00 	mov.w	sl, #0
 8009332:	46c4      	mov	ip, r8
 8009334:	46ae      	mov	lr, r5
 8009336:	46d3      	mov	fp, sl
 8009338:	f85c 3b04 	ldr.w	r3, [ip], #4
 800933c:	b298      	uxth	r0, r3
 800933e:	fb06 a000 	mla	r0, r6, r0, sl
 8009342:	0c02      	lsrs	r2, r0, #16
 8009344:	0c1b      	lsrs	r3, r3, #16
 8009346:	fb06 2303 	mla	r3, r6, r3, r2
 800934a:	f8de 2000 	ldr.w	r2, [lr]
 800934e:	b280      	uxth	r0, r0
 8009350:	b292      	uxth	r2, r2
 8009352:	1a12      	subs	r2, r2, r0
 8009354:	445a      	add	r2, fp
 8009356:	f8de 0000 	ldr.w	r0, [lr]
 800935a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800935e:	b29b      	uxth	r3, r3
 8009360:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009364:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009368:	b292      	uxth	r2, r2
 800936a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800936e:	45e1      	cmp	r9, ip
 8009370:	f84e 2b04 	str.w	r2, [lr], #4
 8009374:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009378:	d2de      	bcs.n	8009338 <quorem+0x42>
 800937a:	9b00      	ldr	r3, [sp, #0]
 800937c:	58eb      	ldr	r3, [r5, r3]
 800937e:	b92b      	cbnz	r3, 800938c <quorem+0x96>
 8009380:	9b01      	ldr	r3, [sp, #4]
 8009382:	3b04      	subs	r3, #4
 8009384:	429d      	cmp	r5, r3
 8009386:	461a      	mov	r2, r3
 8009388:	d32f      	bcc.n	80093ea <quorem+0xf4>
 800938a:	613c      	str	r4, [r7, #16]
 800938c:	4638      	mov	r0, r7
 800938e:	f001 f855 	bl	800a43c <__mcmp>
 8009392:	2800      	cmp	r0, #0
 8009394:	db25      	blt.n	80093e2 <quorem+0xec>
 8009396:	4629      	mov	r1, r5
 8009398:	2000      	movs	r0, #0
 800939a:	f858 2b04 	ldr.w	r2, [r8], #4
 800939e:	f8d1 c000 	ldr.w	ip, [r1]
 80093a2:	fa1f fe82 	uxth.w	lr, r2
 80093a6:	fa1f f38c 	uxth.w	r3, ip
 80093aa:	eba3 030e 	sub.w	r3, r3, lr
 80093ae:	4403      	add	r3, r0
 80093b0:	0c12      	lsrs	r2, r2, #16
 80093b2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80093b6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093c0:	45c1      	cmp	r9, r8
 80093c2:	f841 3b04 	str.w	r3, [r1], #4
 80093c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093ca:	d2e6      	bcs.n	800939a <quorem+0xa4>
 80093cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093d4:	b922      	cbnz	r2, 80093e0 <quorem+0xea>
 80093d6:	3b04      	subs	r3, #4
 80093d8:	429d      	cmp	r5, r3
 80093da:	461a      	mov	r2, r3
 80093dc:	d30b      	bcc.n	80093f6 <quorem+0x100>
 80093de:	613c      	str	r4, [r7, #16]
 80093e0:	3601      	adds	r6, #1
 80093e2:	4630      	mov	r0, r6
 80093e4:	b003      	add	sp, #12
 80093e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ea:	6812      	ldr	r2, [r2, #0]
 80093ec:	3b04      	subs	r3, #4
 80093ee:	2a00      	cmp	r2, #0
 80093f0:	d1cb      	bne.n	800938a <quorem+0x94>
 80093f2:	3c01      	subs	r4, #1
 80093f4:	e7c6      	b.n	8009384 <quorem+0x8e>
 80093f6:	6812      	ldr	r2, [r2, #0]
 80093f8:	3b04      	subs	r3, #4
 80093fa:	2a00      	cmp	r2, #0
 80093fc:	d1ef      	bne.n	80093de <quorem+0xe8>
 80093fe:	3c01      	subs	r4, #1
 8009400:	e7ea      	b.n	80093d8 <quorem+0xe2>
 8009402:	2000      	movs	r0, #0
 8009404:	e7ee      	b.n	80093e4 <quorem+0xee>
	...

08009408 <_dtoa_r>:
 8009408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940c:	ed2d 8b02 	vpush	{d8}
 8009410:	69c7      	ldr	r7, [r0, #28]
 8009412:	b091      	sub	sp, #68	@ 0x44
 8009414:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009418:	ec55 4b10 	vmov	r4, r5, d0
 800941c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800941e:	9107      	str	r1, [sp, #28]
 8009420:	4681      	mov	r9, r0
 8009422:	9209      	str	r2, [sp, #36]	@ 0x24
 8009424:	930d      	str	r3, [sp, #52]	@ 0x34
 8009426:	b97f      	cbnz	r7, 8009448 <_dtoa_r+0x40>
 8009428:	2010      	movs	r0, #16
 800942a:	f7fe ffd1 	bl	80083d0 <malloc>
 800942e:	4602      	mov	r2, r0
 8009430:	f8c9 001c 	str.w	r0, [r9, #28]
 8009434:	b920      	cbnz	r0, 8009440 <_dtoa_r+0x38>
 8009436:	4ba0      	ldr	r3, [pc, #640]	@ (80096b8 <_dtoa_r+0x2b0>)
 8009438:	21ef      	movs	r1, #239	@ 0xef
 800943a:	48a0      	ldr	r0, [pc, #640]	@ (80096bc <_dtoa_r+0x2b4>)
 800943c:	f001 fb78 	bl	800ab30 <__assert_func>
 8009440:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009444:	6007      	str	r7, [r0, #0]
 8009446:	60c7      	str	r7, [r0, #12]
 8009448:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800944c:	6819      	ldr	r1, [r3, #0]
 800944e:	b159      	cbz	r1, 8009468 <_dtoa_r+0x60>
 8009450:	685a      	ldr	r2, [r3, #4]
 8009452:	604a      	str	r2, [r1, #4]
 8009454:	2301      	movs	r3, #1
 8009456:	4093      	lsls	r3, r2
 8009458:	608b      	str	r3, [r1, #8]
 800945a:	4648      	mov	r0, r9
 800945c:	f000 fdb4 	bl	8009fc8 <_Bfree>
 8009460:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009464:	2200      	movs	r2, #0
 8009466:	601a      	str	r2, [r3, #0]
 8009468:	1e2b      	subs	r3, r5, #0
 800946a:	bfbb      	ittet	lt
 800946c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009470:	9303      	strlt	r3, [sp, #12]
 8009472:	2300      	movge	r3, #0
 8009474:	2201      	movlt	r2, #1
 8009476:	bfac      	ite	ge
 8009478:	6033      	strge	r3, [r6, #0]
 800947a:	6032      	strlt	r2, [r6, #0]
 800947c:	4b90      	ldr	r3, [pc, #576]	@ (80096c0 <_dtoa_r+0x2b8>)
 800947e:	9e03      	ldr	r6, [sp, #12]
 8009480:	43b3      	bics	r3, r6
 8009482:	d110      	bne.n	80094a6 <_dtoa_r+0x9e>
 8009484:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009486:	f242 730f 	movw	r3, #9999	@ 0x270f
 800948a:	6013      	str	r3, [r2, #0]
 800948c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009490:	4323      	orrs	r3, r4
 8009492:	f000 84de 	beq.w	8009e52 <_dtoa_r+0xa4a>
 8009496:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009498:	4f8a      	ldr	r7, [pc, #552]	@ (80096c4 <_dtoa_r+0x2bc>)
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 84e0 	beq.w	8009e60 <_dtoa_r+0xa58>
 80094a0:	1cfb      	adds	r3, r7, #3
 80094a2:	f000 bcdb 	b.w	8009e5c <_dtoa_r+0xa54>
 80094a6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80094aa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80094ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b2:	d10a      	bne.n	80094ca <_dtoa_r+0xc2>
 80094b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80094b6:	2301      	movs	r3, #1
 80094b8:	6013      	str	r3, [r2, #0]
 80094ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094bc:	b113      	cbz	r3, 80094c4 <_dtoa_r+0xbc>
 80094be:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80094c0:	4b81      	ldr	r3, [pc, #516]	@ (80096c8 <_dtoa_r+0x2c0>)
 80094c2:	6013      	str	r3, [r2, #0]
 80094c4:	4f81      	ldr	r7, [pc, #516]	@ (80096cc <_dtoa_r+0x2c4>)
 80094c6:	f000 bccb 	b.w	8009e60 <_dtoa_r+0xa58>
 80094ca:	aa0e      	add	r2, sp, #56	@ 0x38
 80094cc:	a90f      	add	r1, sp, #60	@ 0x3c
 80094ce:	4648      	mov	r0, r9
 80094d0:	eeb0 0b48 	vmov.f64	d0, d8
 80094d4:	f001 f862 	bl	800a59c <__d2b>
 80094d8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80094dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094de:	9001      	str	r0, [sp, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d045      	beq.n	8009570 <_dtoa_r+0x168>
 80094e4:	eeb0 7b48 	vmov.f64	d7, d8
 80094e8:	ee18 1a90 	vmov	r1, s17
 80094ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80094f0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80094f4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80094f8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80094fc:	2500      	movs	r5, #0
 80094fe:	ee07 1a90 	vmov	s15, r1
 8009502:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009506:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80096a0 <_dtoa_r+0x298>
 800950a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800950e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80096a8 <_dtoa_r+0x2a0>
 8009512:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009516:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80096b0 <_dtoa_r+0x2a8>
 800951a:	ee07 3a90 	vmov	s15, r3
 800951e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009522:	eeb0 7b46 	vmov.f64	d7, d6
 8009526:	eea4 7b05 	vfma.f64	d7, d4, d5
 800952a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800952e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009536:	ee16 8a90 	vmov	r8, s13
 800953a:	d508      	bpl.n	800954e <_dtoa_r+0x146>
 800953c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009540:	eeb4 6b47 	vcmp.f64	d6, d7
 8009544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009548:	bf18      	it	ne
 800954a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800954e:	f1b8 0f16 	cmp.w	r8, #22
 8009552:	d82b      	bhi.n	80095ac <_dtoa_r+0x1a4>
 8009554:	495e      	ldr	r1, [pc, #376]	@ (80096d0 <_dtoa_r+0x2c8>)
 8009556:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800955a:	ed91 7b00 	vldr	d7, [r1]
 800955e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009566:	d501      	bpl.n	800956c <_dtoa_r+0x164>
 8009568:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800956c:	2100      	movs	r1, #0
 800956e:	e01e      	b.n	80095ae <_dtoa_r+0x1a6>
 8009570:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009572:	4413      	add	r3, r2
 8009574:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009578:	2920      	cmp	r1, #32
 800957a:	bfc1      	itttt	gt
 800957c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009580:	408e      	lslgt	r6, r1
 8009582:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8009586:	fa24 f101 	lsrgt.w	r1, r4, r1
 800958a:	bfd6      	itet	le
 800958c:	f1c1 0120 	rsble	r1, r1, #32
 8009590:	4331      	orrgt	r1, r6
 8009592:	fa04 f101 	lslle.w	r1, r4, r1
 8009596:	ee07 1a90 	vmov	s15, r1
 800959a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800959e:	3b01      	subs	r3, #1
 80095a0:	ee17 1a90 	vmov	r1, s15
 80095a4:	2501      	movs	r5, #1
 80095a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80095aa:	e7a8      	b.n	80094fe <_dtoa_r+0xf6>
 80095ac:	2101      	movs	r1, #1
 80095ae:	1ad2      	subs	r2, r2, r3
 80095b0:	1e53      	subs	r3, r2, #1
 80095b2:	9306      	str	r3, [sp, #24]
 80095b4:	bf45      	ittet	mi
 80095b6:	f1c2 0301 	rsbmi	r3, r2, #1
 80095ba:	9305      	strmi	r3, [sp, #20]
 80095bc:	2300      	movpl	r3, #0
 80095be:	2300      	movmi	r3, #0
 80095c0:	bf4c      	ite	mi
 80095c2:	9306      	strmi	r3, [sp, #24]
 80095c4:	9305      	strpl	r3, [sp, #20]
 80095c6:	f1b8 0f00 	cmp.w	r8, #0
 80095ca:	910c      	str	r1, [sp, #48]	@ 0x30
 80095cc:	db18      	blt.n	8009600 <_dtoa_r+0x1f8>
 80095ce:	9b06      	ldr	r3, [sp, #24]
 80095d0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80095d4:	4443      	add	r3, r8
 80095d6:	9306      	str	r3, [sp, #24]
 80095d8:	2300      	movs	r3, #0
 80095da:	9a07      	ldr	r2, [sp, #28]
 80095dc:	2a09      	cmp	r2, #9
 80095de:	d849      	bhi.n	8009674 <_dtoa_r+0x26c>
 80095e0:	2a05      	cmp	r2, #5
 80095e2:	bfc4      	itt	gt
 80095e4:	3a04      	subgt	r2, #4
 80095e6:	9207      	strgt	r2, [sp, #28]
 80095e8:	9a07      	ldr	r2, [sp, #28]
 80095ea:	f1a2 0202 	sub.w	r2, r2, #2
 80095ee:	bfcc      	ite	gt
 80095f0:	2400      	movgt	r4, #0
 80095f2:	2401      	movle	r4, #1
 80095f4:	2a03      	cmp	r2, #3
 80095f6:	d848      	bhi.n	800968a <_dtoa_r+0x282>
 80095f8:	e8df f002 	tbb	[pc, r2]
 80095fc:	3a2c2e0b 	.word	0x3a2c2e0b
 8009600:	9b05      	ldr	r3, [sp, #20]
 8009602:	2200      	movs	r2, #0
 8009604:	eba3 0308 	sub.w	r3, r3, r8
 8009608:	9305      	str	r3, [sp, #20]
 800960a:	920a      	str	r2, [sp, #40]	@ 0x28
 800960c:	f1c8 0300 	rsb	r3, r8, #0
 8009610:	e7e3      	b.n	80095da <_dtoa_r+0x1d2>
 8009612:	2200      	movs	r2, #0
 8009614:	9208      	str	r2, [sp, #32]
 8009616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009618:	2a00      	cmp	r2, #0
 800961a:	dc39      	bgt.n	8009690 <_dtoa_r+0x288>
 800961c:	f04f 0b01 	mov.w	fp, #1
 8009620:	46da      	mov	sl, fp
 8009622:	465a      	mov	r2, fp
 8009624:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009628:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800962c:	2100      	movs	r1, #0
 800962e:	2004      	movs	r0, #4
 8009630:	f100 0614 	add.w	r6, r0, #20
 8009634:	4296      	cmp	r6, r2
 8009636:	d930      	bls.n	800969a <_dtoa_r+0x292>
 8009638:	6079      	str	r1, [r7, #4]
 800963a:	4648      	mov	r0, r9
 800963c:	9304      	str	r3, [sp, #16]
 800963e:	f000 fc83 	bl	8009f48 <_Balloc>
 8009642:	9b04      	ldr	r3, [sp, #16]
 8009644:	4607      	mov	r7, r0
 8009646:	2800      	cmp	r0, #0
 8009648:	d146      	bne.n	80096d8 <_dtoa_r+0x2d0>
 800964a:	4b22      	ldr	r3, [pc, #136]	@ (80096d4 <_dtoa_r+0x2cc>)
 800964c:	4602      	mov	r2, r0
 800964e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009652:	e6f2      	b.n	800943a <_dtoa_r+0x32>
 8009654:	2201      	movs	r2, #1
 8009656:	e7dd      	b.n	8009614 <_dtoa_r+0x20c>
 8009658:	2200      	movs	r2, #0
 800965a:	9208      	str	r2, [sp, #32]
 800965c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800965e:	eb08 0b02 	add.w	fp, r8, r2
 8009662:	f10b 0a01 	add.w	sl, fp, #1
 8009666:	4652      	mov	r2, sl
 8009668:	2a01      	cmp	r2, #1
 800966a:	bfb8      	it	lt
 800966c:	2201      	movlt	r2, #1
 800966e:	e7db      	b.n	8009628 <_dtoa_r+0x220>
 8009670:	2201      	movs	r2, #1
 8009672:	e7f2      	b.n	800965a <_dtoa_r+0x252>
 8009674:	2401      	movs	r4, #1
 8009676:	2200      	movs	r2, #0
 8009678:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800967c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8009680:	2100      	movs	r1, #0
 8009682:	46da      	mov	sl, fp
 8009684:	2212      	movs	r2, #18
 8009686:	9109      	str	r1, [sp, #36]	@ 0x24
 8009688:	e7ce      	b.n	8009628 <_dtoa_r+0x220>
 800968a:	2201      	movs	r2, #1
 800968c:	9208      	str	r2, [sp, #32]
 800968e:	e7f5      	b.n	800967c <_dtoa_r+0x274>
 8009690:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8009694:	46da      	mov	sl, fp
 8009696:	465a      	mov	r2, fp
 8009698:	e7c6      	b.n	8009628 <_dtoa_r+0x220>
 800969a:	3101      	adds	r1, #1
 800969c:	0040      	lsls	r0, r0, #1
 800969e:	e7c7      	b.n	8009630 <_dtoa_r+0x228>
 80096a0:	636f4361 	.word	0x636f4361
 80096a4:	3fd287a7 	.word	0x3fd287a7
 80096a8:	8b60c8b3 	.word	0x8b60c8b3
 80096ac:	3fc68a28 	.word	0x3fc68a28
 80096b0:	509f79fb 	.word	0x509f79fb
 80096b4:	3fd34413 	.word	0x3fd34413
 80096b8:	0800af29 	.word	0x0800af29
 80096bc:	0800af40 	.word	0x0800af40
 80096c0:	7ff00000 	.word	0x7ff00000
 80096c4:	0800af25 	.word	0x0800af25
 80096c8:	0800aef9 	.word	0x0800aef9
 80096cc:	0800aef8 	.word	0x0800aef8
 80096d0:	0800b038 	.word	0x0800b038
 80096d4:	0800af98 	.word	0x0800af98
 80096d8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80096dc:	f1ba 0f0e 	cmp.w	sl, #14
 80096e0:	6010      	str	r0, [r2, #0]
 80096e2:	d86f      	bhi.n	80097c4 <_dtoa_r+0x3bc>
 80096e4:	2c00      	cmp	r4, #0
 80096e6:	d06d      	beq.n	80097c4 <_dtoa_r+0x3bc>
 80096e8:	f1b8 0f00 	cmp.w	r8, #0
 80096ec:	f340 80c2 	ble.w	8009874 <_dtoa_r+0x46c>
 80096f0:	4aca      	ldr	r2, [pc, #808]	@ (8009a1c <_dtoa_r+0x614>)
 80096f2:	f008 010f 	and.w	r1, r8, #15
 80096f6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80096fa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80096fe:	ed92 7b00 	vldr	d7, [r2]
 8009702:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009706:	f000 80a9 	beq.w	800985c <_dtoa_r+0x454>
 800970a:	4ac5      	ldr	r2, [pc, #788]	@ (8009a20 <_dtoa_r+0x618>)
 800970c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009710:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009714:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009718:	f001 010f 	and.w	r1, r1, #15
 800971c:	2203      	movs	r2, #3
 800971e:	48c0      	ldr	r0, [pc, #768]	@ (8009a20 <_dtoa_r+0x618>)
 8009720:	2900      	cmp	r1, #0
 8009722:	f040 809d 	bne.w	8009860 <_dtoa_r+0x458>
 8009726:	ed9d 6b02 	vldr	d6, [sp, #8]
 800972a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800972e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009732:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009734:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009738:	2900      	cmp	r1, #0
 800973a:	f000 80c1 	beq.w	80098c0 <_dtoa_r+0x4b8>
 800973e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009742:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800974a:	f140 80b9 	bpl.w	80098c0 <_dtoa_r+0x4b8>
 800974e:	f1ba 0f00 	cmp.w	sl, #0
 8009752:	f000 80b5 	beq.w	80098c0 <_dtoa_r+0x4b8>
 8009756:	f1bb 0f00 	cmp.w	fp, #0
 800975a:	dd31      	ble.n	80097c0 <_dtoa_r+0x3b8>
 800975c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009760:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009764:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009768:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800976c:	9104      	str	r1, [sp, #16]
 800976e:	3201      	adds	r2, #1
 8009770:	465c      	mov	r4, fp
 8009772:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009776:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800977a:	ee07 2a90 	vmov	s15, r2
 800977e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009782:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009786:	ee15 2a90 	vmov	r2, s11
 800978a:	ec51 0b15 	vmov	r0, r1, d5
 800978e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009792:	2c00      	cmp	r4, #0
 8009794:	f040 8098 	bne.w	80098c8 <_dtoa_r+0x4c0>
 8009798:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800979c:	ee36 6b47 	vsub.f64	d6, d6, d7
 80097a0:	ec41 0b17 	vmov	d7, r0, r1
 80097a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80097a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ac:	f300 8261 	bgt.w	8009c72 <_dtoa_r+0x86a>
 80097b0:	eeb1 7b47 	vneg.f64	d7, d7
 80097b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80097b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097bc:	f100 80f5 	bmi.w	80099aa <_dtoa_r+0x5a2>
 80097c0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80097c4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80097c6:	2a00      	cmp	r2, #0
 80097c8:	f2c0 812c 	blt.w	8009a24 <_dtoa_r+0x61c>
 80097cc:	f1b8 0f0e 	cmp.w	r8, #14
 80097d0:	f300 8128 	bgt.w	8009a24 <_dtoa_r+0x61c>
 80097d4:	4b91      	ldr	r3, [pc, #580]	@ (8009a1c <_dtoa_r+0x614>)
 80097d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80097da:	ed93 6b00 	vldr	d6, [r3]
 80097de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	da03      	bge.n	80097ec <_dtoa_r+0x3e4>
 80097e4:	f1ba 0f00 	cmp.w	sl, #0
 80097e8:	f340 80d2 	ble.w	8009990 <_dtoa_r+0x588>
 80097ec:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80097f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097f4:	463e      	mov	r6, r7
 80097f6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80097fa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80097fe:	ee15 3a10 	vmov	r3, s10
 8009802:	3330      	adds	r3, #48	@ 0x30
 8009804:	f806 3b01 	strb.w	r3, [r6], #1
 8009808:	1bf3      	subs	r3, r6, r7
 800980a:	459a      	cmp	sl, r3
 800980c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009810:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009814:	f040 80f8 	bne.w	8009a08 <_dtoa_r+0x600>
 8009818:	ee37 7b07 	vadd.f64	d7, d7, d7
 800981c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009824:	f300 80dd 	bgt.w	80099e2 <_dtoa_r+0x5da>
 8009828:	eeb4 7b46 	vcmp.f64	d7, d6
 800982c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009830:	d104      	bne.n	800983c <_dtoa_r+0x434>
 8009832:	ee15 3a10 	vmov	r3, s10
 8009836:	07db      	lsls	r3, r3, #31
 8009838:	f100 80d3 	bmi.w	80099e2 <_dtoa_r+0x5da>
 800983c:	9901      	ldr	r1, [sp, #4]
 800983e:	4648      	mov	r0, r9
 8009840:	f000 fbc2 	bl	8009fc8 <_Bfree>
 8009844:	2300      	movs	r3, #0
 8009846:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009848:	7033      	strb	r3, [r6, #0]
 800984a:	f108 0301 	add.w	r3, r8, #1
 800984e:	6013      	str	r3, [r2, #0]
 8009850:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009852:	2b00      	cmp	r3, #0
 8009854:	f000 8304 	beq.w	8009e60 <_dtoa_r+0xa58>
 8009858:	601e      	str	r6, [r3, #0]
 800985a:	e301      	b.n	8009e60 <_dtoa_r+0xa58>
 800985c:	2202      	movs	r2, #2
 800985e:	e75e      	b.n	800971e <_dtoa_r+0x316>
 8009860:	07cc      	lsls	r4, r1, #31
 8009862:	d504      	bpl.n	800986e <_dtoa_r+0x466>
 8009864:	ed90 6b00 	vldr	d6, [r0]
 8009868:	3201      	adds	r2, #1
 800986a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800986e:	1049      	asrs	r1, r1, #1
 8009870:	3008      	adds	r0, #8
 8009872:	e755      	b.n	8009720 <_dtoa_r+0x318>
 8009874:	d022      	beq.n	80098bc <_dtoa_r+0x4b4>
 8009876:	f1c8 0100 	rsb	r1, r8, #0
 800987a:	4a68      	ldr	r2, [pc, #416]	@ (8009a1c <_dtoa_r+0x614>)
 800987c:	f001 000f 	and.w	r0, r1, #15
 8009880:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009884:	ed92 7b00 	vldr	d7, [r2]
 8009888:	ee28 7b07 	vmul.f64	d7, d8, d7
 800988c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009890:	4863      	ldr	r0, [pc, #396]	@ (8009a20 <_dtoa_r+0x618>)
 8009892:	1109      	asrs	r1, r1, #4
 8009894:	2400      	movs	r4, #0
 8009896:	2202      	movs	r2, #2
 8009898:	b929      	cbnz	r1, 80098a6 <_dtoa_r+0x49e>
 800989a:	2c00      	cmp	r4, #0
 800989c:	f43f af49 	beq.w	8009732 <_dtoa_r+0x32a>
 80098a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098a4:	e745      	b.n	8009732 <_dtoa_r+0x32a>
 80098a6:	07ce      	lsls	r6, r1, #31
 80098a8:	d505      	bpl.n	80098b6 <_dtoa_r+0x4ae>
 80098aa:	ed90 6b00 	vldr	d6, [r0]
 80098ae:	3201      	adds	r2, #1
 80098b0:	2401      	movs	r4, #1
 80098b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80098b6:	1049      	asrs	r1, r1, #1
 80098b8:	3008      	adds	r0, #8
 80098ba:	e7ed      	b.n	8009898 <_dtoa_r+0x490>
 80098bc:	2202      	movs	r2, #2
 80098be:	e738      	b.n	8009732 <_dtoa_r+0x32a>
 80098c0:	f8cd 8010 	str.w	r8, [sp, #16]
 80098c4:	4654      	mov	r4, sl
 80098c6:	e754      	b.n	8009772 <_dtoa_r+0x36a>
 80098c8:	4a54      	ldr	r2, [pc, #336]	@ (8009a1c <_dtoa_r+0x614>)
 80098ca:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80098ce:	ed12 4b02 	vldr	d4, [r2, #-8]
 80098d2:	9a08      	ldr	r2, [sp, #32]
 80098d4:	ec41 0b17 	vmov	d7, r0, r1
 80098d8:	443c      	add	r4, r7
 80098da:	b34a      	cbz	r2, 8009930 <_dtoa_r+0x528>
 80098dc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80098e0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80098e4:	463e      	mov	r6, r7
 80098e6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80098ea:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80098ee:	ee35 7b47 	vsub.f64	d7, d5, d7
 80098f2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80098f6:	ee14 2a90 	vmov	r2, s9
 80098fa:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80098fe:	3230      	adds	r2, #48	@ 0x30
 8009900:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009904:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800990c:	f806 2b01 	strb.w	r2, [r6], #1
 8009910:	d438      	bmi.n	8009984 <_dtoa_r+0x57c>
 8009912:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009916:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800991a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800991e:	d462      	bmi.n	80099e6 <_dtoa_r+0x5de>
 8009920:	42a6      	cmp	r6, r4
 8009922:	f43f af4d 	beq.w	80097c0 <_dtoa_r+0x3b8>
 8009926:	ee27 7b03 	vmul.f64	d7, d7, d3
 800992a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800992e:	e7e0      	b.n	80098f2 <_dtoa_r+0x4ea>
 8009930:	4621      	mov	r1, r4
 8009932:	463e      	mov	r6, r7
 8009934:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009938:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800993c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009940:	ee14 2a90 	vmov	r2, s9
 8009944:	3230      	adds	r2, #48	@ 0x30
 8009946:	f806 2b01 	strb.w	r2, [r6], #1
 800994a:	42a6      	cmp	r6, r4
 800994c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009950:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009954:	d119      	bne.n	800998a <_dtoa_r+0x582>
 8009956:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800995a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800995e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009966:	dc3e      	bgt.n	80099e6 <_dtoa_r+0x5de>
 8009968:	ee35 5b47 	vsub.f64	d5, d5, d7
 800996c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009974:	f57f af24 	bpl.w	80097c0 <_dtoa_r+0x3b8>
 8009978:	460e      	mov	r6, r1
 800997a:	3901      	subs	r1, #1
 800997c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009980:	2b30      	cmp	r3, #48	@ 0x30
 8009982:	d0f9      	beq.n	8009978 <_dtoa_r+0x570>
 8009984:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009988:	e758      	b.n	800983c <_dtoa_r+0x434>
 800998a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800998e:	e7d5      	b.n	800993c <_dtoa_r+0x534>
 8009990:	d10b      	bne.n	80099aa <_dtoa_r+0x5a2>
 8009992:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009996:	ee26 6b07 	vmul.f64	d6, d6, d7
 800999a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800999e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a6:	f2c0 8161 	blt.w	8009c6c <_dtoa_r+0x864>
 80099aa:	2400      	movs	r4, #0
 80099ac:	4625      	mov	r5, r4
 80099ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099b0:	43db      	mvns	r3, r3
 80099b2:	9304      	str	r3, [sp, #16]
 80099b4:	463e      	mov	r6, r7
 80099b6:	f04f 0800 	mov.w	r8, #0
 80099ba:	4621      	mov	r1, r4
 80099bc:	4648      	mov	r0, r9
 80099be:	f000 fb03 	bl	8009fc8 <_Bfree>
 80099c2:	2d00      	cmp	r5, #0
 80099c4:	d0de      	beq.n	8009984 <_dtoa_r+0x57c>
 80099c6:	f1b8 0f00 	cmp.w	r8, #0
 80099ca:	d005      	beq.n	80099d8 <_dtoa_r+0x5d0>
 80099cc:	45a8      	cmp	r8, r5
 80099ce:	d003      	beq.n	80099d8 <_dtoa_r+0x5d0>
 80099d0:	4641      	mov	r1, r8
 80099d2:	4648      	mov	r0, r9
 80099d4:	f000 faf8 	bl	8009fc8 <_Bfree>
 80099d8:	4629      	mov	r1, r5
 80099da:	4648      	mov	r0, r9
 80099dc:	f000 faf4 	bl	8009fc8 <_Bfree>
 80099e0:	e7d0      	b.n	8009984 <_dtoa_r+0x57c>
 80099e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80099e6:	4633      	mov	r3, r6
 80099e8:	461e      	mov	r6, r3
 80099ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099ee:	2a39      	cmp	r2, #57	@ 0x39
 80099f0:	d106      	bne.n	8009a00 <_dtoa_r+0x5f8>
 80099f2:	429f      	cmp	r7, r3
 80099f4:	d1f8      	bne.n	80099e8 <_dtoa_r+0x5e0>
 80099f6:	9a04      	ldr	r2, [sp, #16]
 80099f8:	3201      	adds	r2, #1
 80099fa:	9204      	str	r2, [sp, #16]
 80099fc:	2230      	movs	r2, #48	@ 0x30
 80099fe:	703a      	strb	r2, [r7, #0]
 8009a00:	781a      	ldrb	r2, [r3, #0]
 8009a02:	3201      	adds	r2, #1
 8009a04:	701a      	strb	r2, [r3, #0]
 8009a06:	e7bd      	b.n	8009984 <_dtoa_r+0x57c>
 8009a08:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009a0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a14:	f47f aeef 	bne.w	80097f6 <_dtoa_r+0x3ee>
 8009a18:	e710      	b.n	800983c <_dtoa_r+0x434>
 8009a1a:	bf00      	nop
 8009a1c:	0800b038 	.word	0x0800b038
 8009a20:	0800b010 	.word	0x0800b010
 8009a24:	9908      	ldr	r1, [sp, #32]
 8009a26:	2900      	cmp	r1, #0
 8009a28:	f000 80e3 	beq.w	8009bf2 <_dtoa_r+0x7ea>
 8009a2c:	9907      	ldr	r1, [sp, #28]
 8009a2e:	2901      	cmp	r1, #1
 8009a30:	f300 80c8 	bgt.w	8009bc4 <_dtoa_r+0x7bc>
 8009a34:	2d00      	cmp	r5, #0
 8009a36:	f000 80c1 	beq.w	8009bbc <_dtoa_r+0x7b4>
 8009a3a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009a3e:	9e05      	ldr	r6, [sp, #20]
 8009a40:	461c      	mov	r4, r3
 8009a42:	9304      	str	r3, [sp, #16]
 8009a44:	9b05      	ldr	r3, [sp, #20]
 8009a46:	4413      	add	r3, r2
 8009a48:	9305      	str	r3, [sp, #20]
 8009a4a:	9b06      	ldr	r3, [sp, #24]
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	4413      	add	r3, r2
 8009a50:	4648      	mov	r0, r9
 8009a52:	9306      	str	r3, [sp, #24]
 8009a54:	f000 fb6c 	bl	800a130 <__i2b>
 8009a58:	9b04      	ldr	r3, [sp, #16]
 8009a5a:	4605      	mov	r5, r0
 8009a5c:	b166      	cbz	r6, 8009a78 <_dtoa_r+0x670>
 8009a5e:	9a06      	ldr	r2, [sp, #24]
 8009a60:	2a00      	cmp	r2, #0
 8009a62:	dd09      	ble.n	8009a78 <_dtoa_r+0x670>
 8009a64:	42b2      	cmp	r2, r6
 8009a66:	9905      	ldr	r1, [sp, #20]
 8009a68:	bfa8      	it	ge
 8009a6a:	4632      	movge	r2, r6
 8009a6c:	1a89      	subs	r1, r1, r2
 8009a6e:	9105      	str	r1, [sp, #20]
 8009a70:	9906      	ldr	r1, [sp, #24]
 8009a72:	1ab6      	subs	r6, r6, r2
 8009a74:	1a8a      	subs	r2, r1, r2
 8009a76:	9206      	str	r2, [sp, #24]
 8009a78:	b1fb      	cbz	r3, 8009aba <_dtoa_r+0x6b2>
 8009a7a:	9a08      	ldr	r2, [sp, #32]
 8009a7c:	2a00      	cmp	r2, #0
 8009a7e:	f000 80bc 	beq.w	8009bfa <_dtoa_r+0x7f2>
 8009a82:	b19c      	cbz	r4, 8009aac <_dtoa_r+0x6a4>
 8009a84:	4629      	mov	r1, r5
 8009a86:	4622      	mov	r2, r4
 8009a88:	4648      	mov	r0, r9
 8009a8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a8c:	f000 fc10 	bl	800a2b0 <__pow5mult>
 8009a90:	9a01      	ldr	r2, [sp, #4]
 8009a92:	4601      	mov	r1, r0
 8009a94:	4605      	mov	r5, r0
 8009a96:	4648      	mov	r0, r9
 8009a98:	f000 fb60 	bl	800a15c <__multiply>
 8009a9c:	9901      	ldr	r1, [sp, #4]
 8009a9e:	9004      	str	r0, [sp, #16]
 8009aa0:	4648      	mov	r0, r9
 8009aa2:	f000 fa91 	bl	8009fc8 <_Bfree>
 8009aa6:	9a04      	ldr	r2, [sp, #16]
 8009aa8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009aaa:	9201      	str	r2, [sp, #4]
 8009aac:	1b1a      	subs	r2, r3, r4
 8009aae:	d004      	beq.n	8009aba <_dtoa_r+0x6b2>
 8009ab0:	9901      	ldr	r1, [sp, #4]
 8009ab2:	4648      	mov	r0, r9
 8009ab4:	f000 fbfc 	bl	800a2b0 <__pow5mult>
 8009ab8:	9001      	str	r0, [sp, #4]
 8009aba:	2101      	movs	r1, #1
 8009abc:	4648      	mov	r0, r9
 8009abe:	f000 fb37 	bl	800a130 <__i2b>
 8009ac2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 81d0 	beq.w	8009e6c <_dtoa_r+0xa64>
 8009acc:	461a      	mov	r2, r3
 8009ace:	4601      	mov	r1, r0
 8009ad0:	4648      	mov	r0, r9
 8009ad2:	f000 fbed 	bl	800a2b0 <__pow5mult>
 8009ad6:	9b07      	ldr	r3, [sp, #28]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	4604      	mov	r4, r0
 8009adc:	f300 8095 	bgt.w	8009c0a <_dtoa_r+0x802>
 8009ae0:	9b02      	ldr	r3, [sp, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f040 808b 	bne.w	8009bfe <_dtoa_r+0x7f6>
 8009ae8:	9b03      	ldr	r3, [sp, #12]
 8009aea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009aee:	2a00      	cmp	r2, #0
 8009af0:	f040 8087 	bne.w	8009c02 <_dtoa_r+0x7fa>
 8009af4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009af8:	0d12      	lsrs	r2, r2, #20
 8009afa:	0512      	lsls	r2, r2, #20
 8009afc:	2a00      	cmp	r2, #0
 8009afe:	f000 8082 	beq.w	8009c06 <_dtoa_r+0x7fe>
 8009b02:	9b05      	ldr	r3, [sp, #20]
 8009b04:	3301      	adds	r3, #1
 8009b06:	9305      	str	r3, [sp, #20]
 8009b08:	9b06      	ldr	r3, [sp, #24]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	9306      	str	r3, [sp, #24]
 8009b0e:	2301      	movs	r3, #1
 8009b10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 81af 	beq.w	8009e78 <_dtoa_r+0xa70>
 8009b1a:	6922      	ldr	r2, [r4, #16]
 8009b1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009b20:	6910      	ldr	r0, [r2, #16]
 8009b22:	f000 fab9 	bl	800a098 <__hi0bits>
 8009b26:	f1c0 0020 	rsb	r0, r0, #32
 8009b2a:	9b06      	ldr	r3, [sp, #24]
 8009b2c:	4418      	add	r0, r3
 8009b2e:	f010 001f 	ands.w	r0, r0, #31
 8009b32:	d076      	beq.n	8009c22 <_dtoa_r+0x81a>
 8009b34:	f1c0 0220 	rsb	r2, r0, #32
 8009b38:	2a04      	cmp	r2, #4
 8009b3a:	dd69      	ble.n	8009c10 <_dtoa_r+0x808>
 8009b3c:	9b05      	ldr	r3, [sp, #20]
 8009b3e:	f1c0 001c 	rsb	r0, r0, #28
 8009b42:	4403      	add	r3, r0
 8009b44:	9305      	str	r3, [sp, #20]
 8009b46:	9b06      	ldr	r3, [sp, #24]
 8009b48:	4406      	add	r6, r0
 8009b4a:	4403      	add	r3, r0
 8009b4c:	9306      	str	r3, [sp, #24]
 8009b4e:	9b05      	ldr	r3, [sp, #20]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	dd05      	ble.n	8009b60 <_dtoa_r+0x758>
 8009b54:	9901      	ldr	r1, [sp, #4]
 8009b56:	461a      	mov	r2, r3
 8009b58:	4648      	mov	r0, r9
 8009b5a:	f000 fc03 	bl	800a364 <__lshift>
 8009b5e:	9001      	str	r0, [sp, #4]
 8009b60:	9b06      	ldr	r3, [sp, #24]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	dd05      	ble.n	8009b72 <_dtoa_r+0x76a>
 8009b66:	4621      	mov	r1, r4
 8009b68:	461a      	mov	r2, r3
 8009b6a:	4648      	mov	r0, r9
 8009b6c:	f000 fbfa 	bl	800a364 <__lshift>
 8009b70:	4604      	mov	r4, r0
 8009b72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d056      	beq.n	8009c26 <_dtoa_r+0x81e>
 8009b78:	9801      	ldr	r0, [sp, #4]
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	f000 fc5e 	bl	800a43c <__mcmp>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	da50      	bge.n	8009c26 <_dtoa_r+0x81e>
 8009b84:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8009b88:	9304      	str	r3, [sp, #16]
 8009b8a:	9901      	ldr	r1, [sp, #4]
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	220a      	movs	r2, #10
 8009b90:	4648      	mov	r0, r9
 8009b92:	f000 fa3b 	bl	800a00c <__multadd>
 8009b96:	9b08      	ldr	r3, [sp, #32]
 8009b98:	9001      	str	r0, [sp, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 816e 	beq.w	8009e7c <_dtoa_r+0xa74>
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	220a      	movs	r2, #10
 8009ba6:	4648      	mov	r0, r9
 8009ba8:	f000 fa30 	bl	800a00c <__multadd>
 8009bac:	f1bb 0f00 	cmp.w	fp, #0
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	dc64      	bgt.n	8009c7e <_dtoa_r+0x876>
 8009bb4:	9b07      	ldr	r3, [sp, #28]
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	dc3e      	bgt.n	8009c38 <_dtoa_r+0x830>
 8009bba:	e060      	b.n	8009c7e <_dtoa_r+0x876>
 8009bbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bbe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009bc2:	e73c      	b.n	8009a3e <_dtoa_r+0x636>
 8009bc4:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8009bc8:	42a3      	cmp	r3, r4
 8009bca:	bfbf      	itttt	lt
 8009bcc:	1ae2      	sublt	r2, r4, r3
 8009bce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009bd0:	189b      	addlt	r3, r3, r2
 8009bd2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8009bd4:	bfae      	itee	ge
 8009bd6:	1b1c      	subge	r4, r3, r4
 8009bd8:	4623      	movlt	r3, r4
 8009bda:	2400      	movlt	r4, #0
 8009bdc:	f1ba 0f00 	cmp.w	sl, #0
 8009be0:	bfb5      	itete	lt
 8009be2:	9a05      	ldrlt	r2, [sp, #20]
 8009be4:	9e05      	ldrge	r6, [sp, #20]
 8009be6:	eba2 060a 	sublt.w	r6, r2, sl
 8009bea:	4652      	movge	r2, sl
 8009bec:	bfb8      	it	lt
 8009bee:	2200      	movlt	r2, #0
 8009bf0:	e727      	b.n	8009a42 <_dtoa_r+0x63a>
 8009bf2:	9e05      	ldr	r6, [sp, #20]
 8009bf4:	9d08      	ldr	r5, [sp, #32]
 8009bf6:	461c      	mov	r4, r3
 8009bf8:	e730      	b.n	8009a5c <_dtoa_r+0x654>
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	e758      	b.n	8009ab0 <_dtoa_r+0x6a8>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	e786      	b.n	8009b10 <_dtoa_r+0x708>
 8009c02:	9b02      	ldr	r3, [sp, #8]
 8009c04:	e784      	b.n	8009b10 <_dtoa_r+0x708>
 8009c06:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009c08:	e783      	b.n	8009b12 <_dtoa_r+0x70a>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c0e:	e784      	b.n	8009b1a <_dtoa_r+0x712>
 8009c10:	d09d      	beq.n	8009b4e <_dtoa_r+0x746>
 8009c12:	9b05      	ldr	r3, [sp, #20]
 8009c14:	321c      	adds	r2, #28
 8009c16:	4413      	add	r3, r2
 8009c18:	9305      	str	r3, [sp, #20]
 8009c1a:	9b06      	ldr	r3, [sp, #24]
 8009c1c:	4416      	add	r6, r2
 8009c1e:	4413      	add	r3, r2
 8009c20:	e794      	b.n	8009b4c <_dtoa_r+0x744>
 8009c22:	4602      	mov	r2, r0
 8009c24:	e7f5      	b.n	8009c12 <_dtoa_r+0x80a>
 8009c26:	f1ba 0f00 	cmp.w	sl, #0
 8009c2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8009c2e:	46d3      	mov	fp, sl
 8009c30:	dc21      	bgt.n	8009c76 <_dtoa_r+0x86e>
 8009c32:	9b07      	ldr	r3, [sp, #28]
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	dd1e      	ble.n	8009c76 <_dtoa_r+0x86e>
 8009c38:	f1bb 0f00 	cmp.w	fp, #0
 8009c3c:	f47f aeb7 	bne.w	80099ae <_dtoa_r+0x5a6>
 8009c40:	4621      	mov	r1, r4
 8009c42:	465b      	mov	r3, fp
 8009c44:	2205      	movs	r2, #5
 8009c46:	4648      	mov	r0, r9
 8009c48:	f000 f9e0 	bl	800a00c <__multadd>
 8009c4c:	4601      	mov	r1, r0
 8009c4e:	4604      	mov	r4, r0
 8009c50:	9801      	ldr	r0, [sp, #4]
 8009c52:	f000 fbf3 	bl	800a43c <__mcmp>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	f77f aea9 	ble.w	80099ae <_dtoa_r+0x5a6>
 8009c5c:	463e      	mov	r6, r7
 8009c5e:	2331      	movs	r3, #49	@ 0x31
 8009c60:	f806 3b01 	strb.w	r3, [r6], #1
 8009c64:	9b04      	ldr	r3, [sp, #16]
 8009c66:	3301      	adds	r3, #1
 8009c68:	9304      	str	r3, [sp, #16]
 8009c6a:	e6a4      	b.n	80099b6 <_dtoa_r+0x5ae>
 8009c6c:	f8cd 8010 	str.w	r8, [sp, #16]
 8009c70:	4654      	mov	r4, sl
 8009c72:	4625      	mov	r5, r4
 8009c74:	e7f2      	b.n	8009c5c <_dtoa_r+0x854>
 8009c76:	9b08      	ldr	r3, [sp, #32]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f000 8103 	beq.w	8009e84 <_dtoa_r+0xa7c>
 8009c7e:	2e00      	cmp	r6, #0
 8009c80:	dd05      	ble.n	8009c8e <_dtoa_r+0x886>
 8009c82:	4629      	mov	r1, r5
 8009c84:	4632      	mov	r2, r6
 8009c86:	4648      	mov	r0, r9
 8009c88:	f000 fb6c 	bl	800a364 <__lshift>
 8009c8c:	4605      	mov	r5, r0
 8009c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d058      	beq.n	8009d46 <_dtoa_r+0x93e>
 8009c94:	6869      	ldr	r1, [r5, #4]
 8009c96:	4648      	mov	r0, r9
 8009c98:	f000 f956 	bl	8009f48 <_Balloc>
 8009c9c:	4606      	mov	r6, r0
 8009c9e:	b928      	cbnz	r0, 8009cac <_dtoa_r+0x8a4>
 8009ca0:	4b82      	ldr	r3, [pc, #520]	@ (8009eac <_dtoa_r+0xaa4>)
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ca8:	f7ff bbc7 	b.w	800943a <_dtoa_r+0x32>
 8009cac:	692a      	ldr	r2, [r5, #16]
 8009cae:	3202      	adds	r2, #2
 8009cb0:	0092      	lsls	r2, r2, #2
 8009cb2:	f105 010c 	add.w	r1, r5, #12
 8009cb6:	300c      	adds	r0, #12
 8009cb8:	f7ff fb0f 	bl	80092da <memcpy>
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	4648      	mov	r0, r9
 8009cc2:	f000 fb4f 	bl	800a364 <__lshift>
 8009cc6:	1c7b      	adds	r3, r7, #1
 8009cc8:	9305      	str	r3, [sp, #20]
 8009cca:	eb07 030b 	add.w	r3, r7, fp
 8009cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cd0:	9b02      	ldr	r3, [sp, #8]
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	46a8      	mov	r8, r5
 8009cd8:	9308      	str	r3, [sp, #32]
 8009cda:	4605      	mov	r5, r0
 8009cdc:	9b05      	ldr	r3, [sp, #20]
 8009cde:	9801      	ldr	r0, [sp, #4]
 8009ce0:	4621      	mov	r1, r4
 8009ce2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009ce6:	f7ff fb06 	bl	80092f6 <quorem>
 8009cea:	4641      	mov	r1, r8
 8009cec:	9002      	str	r0, [sp, #8]
 8009cee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009cf2:	9801      	ldr	r0, [sp, #4]
 8009cf4:	f000 fba2 	bl	800a43c <__mcmp>
 8009cf8:	462a      	mov	r2, r5
 8009cfa:	9006      	str	r0, [sp, #24]
 8009cfc:	4621      	mov	r1, r4
 8009cfe:	4648      	mov	r0, r9
 8009d00:	f000 fbb8 	bl	800a474 <__mdiff>
 8009d04:	68c2      	ldr	r2, [r0, #12]
 8009d06:	4606      	mov	r6, r0
 8009d08:	b9fa      	cbnz	r2, 8009d4a <_dtoa_r+0x942>
 8009d0a:	4601      	mov	r1, r0
 8009d0c:	9801      	ldr	r0, [sp, #4]
 8009d0e:	f000 fb95 	bl	800a43c <__mcmp>
 8009d12:	4602      	mov	r2, r0
 8009d14:	4631      	mov	r1, r6
 8009d16:	4648      	mov	r0, r9
 8009d18:	920a      	str	r2, [sp, #40]	@ 0x28
 8009d1a:	f000 f955 	bl	8009fc8 <_Bfree>
 8009d1e:	9b07      	ldr	r3, [sp, #28]
 8009d20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d22:	9e05      	ldr	r6, [sp, #20]
 8009d24:	ea43 0102 	orr.w	r1, r3, r2
 8009d28:	9b08      	ldr	r3, [sp, #32]
 8009d2a:	4319      	orrs	r1, r3
 8009d2c:	d10f      	bne.n	8009d4e <_dtoa_r+0x946>
 8009d2e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009d32:	d028      	beq.n	8009d86 <_dtoa_r+0x97e>
 8009d34:	9b06      	ldr	r3, [sp, #24]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	dd02      	ble.n	8009d40 <_dtoa_r+0x938>
 8009d3a:	9b02      	ldr	r3, [sp, #8]
 8009d3c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009d40:	f88b a000 	strb.w	sl, [fp]
 8009d44:	e639      	b.n	80099ba <_dtoa_r+0x5b2>
 8009d46:	4628      	mov	r0, r5
 8009d48:	e7bd      	b.n	8009cc6 <_dtoa_r+0x8be>
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	e7e2      	b.n	8009d14 <_dtoa_r+0x90c>
 8009d4e:	9b06      	ldr	r3, [sp, #24]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	db04      	blt.n	8009d5e <_dtoa_r+0x956>
 8009d54:	9907      	ldr	r1, [sp, #28]
 8009d56:	430b      	orrs	r3, r1
 8009d58:	9908      	ldr	r1, [sp, #32]
 8009d5a:	430b      	orrs	r3, r1
 8009d5c:	d120      	bne.n	8009da0 <_dtoa_r+0x998>
 8009d5e:	2a00      	cmp	r2, #0
 8009d60:	ddee      	ble.n	8009d40 <_dtoa_r+0x938>
 8009d62:	9901      	ldr	r1, [sp, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	4648      	mov	r0, r9
 8009d68:	f000 fafc 	bl	800a364 <__lshift>
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	9001      	str	r0, [sp, #4]
 8009d70:	f000 fb64 	bl	800a43c <__mcmp>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	dc03      	bgt.n	8009d80 <_dtoa_r+0x978>
 8009d78:	d1e2      	bne.n	8009d40 <_dtoa_r+0x938>
 8009d7a:	f01a 0f01 	tst.w	sl, #1
 8009d7e:	d0df      	beq.n	8009d40 <_dtoa_r+0x938>
 8009d80:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009d84:	d1d9      	bne.n	8009d3a <_dtoa_r+0x932>
 8009d86:	2339      	movs	r3, #57	@ 0x39
 8009d88:	f88b 3000 	strb.w	r3, [fp]
 8009d8c:	4633      	mov	r3, r6
 8009d8e:	461e      	mov	r6, r3
 8009d90:	3b01      	subs	r3, #1
 8009d92:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009d96:	2a39      	cmp	r2, #57	@ 0x39
 8009d98:	d053      	beq.n	8009e42 <_dtoa_r+0xa3a>
 8009d9a:	3201      	adds	r2, #1
 8009d9c:	701a      	strb	r2, [r3, #0]
 8009d9e:	e60c      	b.n	80099ba <_dtoa_r+0x5b2>
 8009da0:	2a00      	cmp	r2, #0
 8009da2:	dd07      	ble.n	8009db4 <_dtoa_r+0x9ac>
 8009da4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009da8:	d0ed      	beq.n	8009d86 <_dtoa_r+0x97e>
 8009daa:	f10a 0301 	add.w	r3, sl, #1
 8009dae:	f88b 3000 	strb.w	r3, [fp]
 8009db2:	e602      	b.n	80099ba <_dtoa_r+0x5b2>
 8009db4:	9b05      	ldr	r3, [sp, #20]
 8009db6:	9a05      	ldr	r2, [sp, #20]
 8009db8:	f803 ac01 	strb.w	sl, [r3, #-1]
 8009dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d029      	beq.n	8009e16 <_dtoa_r+0xa0e>
 8009dc2:	9901      	ldr	r1, [sp, #4]
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	220a      	movs	r2, #10
 8009dc8:	4648      	mov	r0, r9
 8009dca:	f000 f91f 	bl	800a00c <__multadd>
 8009dce:	45a8      	cmp	r8, r5
 8009dd0:	9001      	str	r0, [sp, #4]
 8009dd2:	f04f 0300 	mov.w	r3, #0
 8009dd6:	f04f 020a 	mov.w	r2, #10
 8009dda:	4641      	mov	r1, r8
 8009ddc:	4648      	mov	r0, r9
 8009dde:	d107      	bne.n	8009df0 <_dtoa_r+0x9e8>
 8009de0:	f000 f914 	bl	800a00c <__multadd>
 8009de4:	4680      	mov	r8, r0
 8009de6:	4605      	mov	r5, r0
 8009de8:	9b05      	ldr	r3, [sp, #20]
 8009dea:	3301      	adds	r3, #1
 8009dec:	9305      	str	r3, [sp, #20]
 8009dee:	e775      	b.n	8009cdc <_dtoa_r+0x8d4>
 8009df0:	f000 f90c 	bl	800a00c <__multadd>
 8009df4:	4629      	mov	r1, r5
 8009df6:	4680      	mov	r8, r0
 8009df8:	2300      	movs	r3, #0
 8009dfa:	220a      	movs	r2, #10
 8009dfc:	4648      	mov	r0, r9
 8009dfe:	f000 f905 	bl	800a00c <__multadd>
 8009e02:	4605      	mov	r5, r0
 8009e04:	e7f0      	b.n	8009de8 <_dtoa_r+0x9e0>
 8009e06:	f1bb 0f00 	cmp.w	fp, #0
 8009e0a:	bfcc      	ite	gt
 8009e0c:	465e      	movgt	r6, fp
 8009e0e:	2601      	movle	r6, #1
 8009e10:	443e      	add	r6, r7
 8009e12:	f04f 0800 	mov.w	r8, #0
 8009e16:	9901      	ldr	r1, [sp, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	4648      	mov	r0, r9
 8009e1c:	f000 faa2 	bl	800a364 <__lshift>
 8009e20:	4621      	mov	r1, r4
 8009e22:	9001      	str	r0, [sp, #4]
 8009e24:	f000 fb0a 	bl	800a43c <__mcmp>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	dcaf      	bgt.n	8009d8c <_dtoa_r+0x984>
 8009e2c:	d102      	bne.n	8009e34 <_dtoa_r+0xa2c>
 8009e2e:	f01a 0f01 	tst.w	sl, #1
 8009e32:	d1ab      	bne.n	8009d8c <_dtoa_r+0x984>
 8009e34:	4633      	mov	r3, r6
 8009e36:	461e      	mov	r6, r3
 8009e38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e3c:	2a30      	cmp	r2, #48	@ 0x30
 8009e3e:	d0fa      	beq.n	8009e36 <_dtoa_r+0xa2e>
 8009e40:	e5bb      	b.n	80099ba <_dtoa_r+0x5b2>
 8009e42:	429f      	cmp	r7, r3
 8009e44:	d1a3      	bne.n	8009d8e <_dtoa_r+0x986>
 8009e46:	9b04      	ldr	r3, [sp, #16]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	9304      	str	r3, [sp, #16]
 8009e4c:	2331      	movs	r3, #49	@ 0x31
 8009e4e:	703b      	strb	r3, [r7, #0]
 8009e50:	e5b3      	b.n	80099ba <_dtoa_r+0x5b2>
 8009e52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e54:	4f16      	ldr	r7, [pc, #88]	@ (8009eb0 <_dtoa_r+0xaa8>)
 8009e56:	b11b      	cbz	r3, 8009e60 <_dtoa_r+0xa58>
 8009e58:	f107 0308 	add.w	r3, r7, #8
 8009e5c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	4638      	mov	r0, r7
 8009e62:	b011      	add	sp, #68	@ 0x44
 8009e64:	ecbd 8b02 	vpop	{d8}
 8009e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6c:	9b07      	ldr	r3, [sp, #28]
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	f77f ae36 	ble.w	8009ae0 <_dtoa_r+0x6d8>
 8009e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e78:	2001      	movs	r0, #1
 8009e7a:	e656      	b.n	8009b2a <_dtoa_r+0x722>
 8009e7c:	f1bb 0f00 	cmp.w	fp, #0
 8009e80:	f77f aed7 	ble.w	8009c32 <_dtoa_r+0x82a>
 8009e84:	463e      	mov	r6, r7
 8009e86:	9801      	ldr	r0, [sp, #4]
 8009e88:	4621      	mov	r1, r4
 8009e8a:	f7ff fa34 	bl	80092f6 <quorem>
 8009e8e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009e92:	f806 ab01 	strb.w	sl, [r6], #1
 8009e96:	1bf2      	subs	r2, r6, r7
 8009e98:	4593      	cmp	fp, r2
 8009e9a:	ddb4      	ble.n	8009e06 <_dtoa_r+0x9fe>
 8009e9c:	9901      	ldr	r1, [sp, #4]
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	220a      	movs	r2, #10
 8009ea2:	4648      	mov	r0, r9
 8009ea4:	f000 f8b2 	bl	800a00c <__multadd>
 8009ea8:	9001      	str	r0, [sp, #4]
 8009eaa:	e7ec      	b.n	8009e86 <_dtoa_r+0xa7e>
 8009eac:	0800af98 	.word	0x0800af98
 8009eb0:	0800af1c 	.word	0x0800af1c

08009eb4 <_free_r>:
 8009eb4:	b538      	push	{r3, r4, r5, lr}
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	2900      	cmp	r1, #0
 8009eba:	d041      	beq.n	8009f40 <_free_r+0x8c>
 8009ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ec0:	1f0c      	subs	r4, r1, #4
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	bfb8      	it	lt
 8009ec6:	18e4      	addlt	r4, r4, r3
 8009ec8:	f7fe fb2c 	bl	8008524 <__malloc_lock>
 8009ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8009f44 <_free_r+0x90>)
 8009ece:	6813      	ldr	r3, [r2, #0]
 8009ed0:	b933      	cbnz	r3, 8009ee0 <_free_r+0x2c>
 8009ed2:	6063      	str	r3, [r4, #4]
 8009ed4:	6014      	str	r4, [r2, #0]
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009edc:	f7fe bb28 	b.w	8008530 <__malloc_unlock>
 8009ee0:	42a3      	cmp	r3, r4
 8009ee2:	d908      	bls.n	8009ef6 <_free_r+0x42>
 8009ee4:	6820      	ldr	r0, [r4, #0]
 8009ee6:	1821      	adds	r1, r4, r0
 8009ee8:	428b      	cmp	r3, r1
 8009eea:	bf01      	itttt	eq
 8009eec:	6819      	ldreq	r1, [r3, #0]
 8009eee:	685b      	ldreq	r3, [r3, #4]
 8009ef0:	1809      	addeq	r1, r1, r0
 8009ef2:	6021      	streq	r1, [r4, #0]
 8009ef4:	e7ed      	b.n	8009ed2 <_free_r+0x1e>
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	b10b      	cbz	r3, 8009f00 <_free_r+0x4c>
 8009efc:	42a3      	cmp	r3, r4
 8009efe:	d9fa      	bls.n	8009ef6 <_free_r+0x42>
 8009f00:	6811      	ldr	r1, [r2, #0]
 8009f02:	1850      	adds	r0, r2, r1
 8009f04:	42a0      	cmp	r0, r4
 8009f06:	d10b      	bne.n	8009f20 <_free_r+0x6c>
 8009f08:	6820      	ldr	r0, [r4, #0]
 8009f0a:	4401      	add	r1, r0
 8009f0c:	1850      	adds	r0, r2, r1
 8009f0e:	4283      	cmp	r3, r0
 8009f10:	6011      	str	r1, [r2, #0]
 8009f12:	d1e0      	bne.n	8009ed6 <_free_r+0x22>
 8009f14:	6818      	ldr	r0, [r3, #0]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	6053      	str	r3, [r2, #4]
 8009f1a:	4408      	add	r0, r1
 8009f1c:	6010      	str	r0, [r2, #0]
 8009f1e:	e7da      	b.n	8009ed6 <_free_r+0x22>
 8009f20:	d902      	bls.n	8009f28 <_free_r+0x74>
 8009f22:	230c      	movs	r3, #12
 8009f24:	602b      	str	r3, [r5, #0]
 8009f26:	e7d6      	b.n	8009ed6 <_free_r+0x22>
 8009f28:	6820      	ldr	r0, [r4, #0]
 8009f2a:	1821      	adds	r1, r4, r0
 8009f2c:	428b      	cmp	r3, r1
 8009f2e:	bf04      	itt	eq
 8009f30:	6819      	ldreq	r1, [r3, #0]
 8009f32:	685b      	ldreq	r3, [r3, #4]
 8009f34:	6063      	str	r3, [r4, #4]
 8009f36:	bf04      	itt	eq
 8009f38:	1809      	addeq	r1, r1, r0
 8009f3a:	6021      	streq	r1, [r4, #0]
 8009f3c:	6054      	str	r4, [r2, #4]
 8009f3e:	e7ca      	b.n	8009ed6 <_free_r+0x22>
 8009f40:	bd38      	pop	{r3, r4, r5, pc}
 8009f42:	bf00      	nop
 8009f44:	240008b4 	.word	0x240008b4

08009f48 <_Balloc>:
 8009f48:	b570      	push	{r4, r5, r6, lr}
 8009f4a:	69c6      	ldr	r6, [r0, #28]
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	460d      	mov	r5, r1
 8009f50:	b976      	cbnz	r6, 8009f70 <_Balloc+0x28>
 8009f52:	2010      	movs	r0, #16
 8009f54:	f7fe fa3c 	bl	80083d0 <malloc>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	61e0      	str	r0, [r4, #28]
 8009f5c:	b920      	cbnz	r0, 8009f68 <_Balloc+0x20>
 8009f5e:	4b18      	ldr	r3, [pc, #96]	@ (8009fc0 <_Balloc+0x78>)
 8009f60:	4818      	ldr	r0, [pc, #96]	@ (8009fc4 <_Balloc+0x7c>)
 8009f62:	216b      	movs	r1, #107	@ 0x6b
 8009f64:	f000 fde4 	bl	800ab30 <__assert_func>
 8009f68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f6c:	6006      	str	r6, [r0, #0]
 8009f6e:	60c6      	str	r6, [r0, #12]
 8009f70:	69e6      	ldr	r6, [r4, #28]
 8009f72:	68f3      	ldr	r3, [r6, #12]
 8009f74:	b183      	cbz	r3, 8009f98 <_Balloc+0x50>
 8009f76:	69e3      	ldr	r3, [r4, #28]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f7e:	b9b8      	cbnz	r0, 8009fb0 <_Balloc+0x68>
 8009f80:	2101      	movs	r1, #1
 8009f82:	fa01 f605 	lsl.w	r6, r1, r5
 8009f86:	1d72      	adds	r2, r6, #5
 8009f88:	0092      	lsls	r2, r2, #2
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 fdee 	bl	800ab6c <_calloc_r>
 8009f90:	b160      	cbz	r0, 8009fac <_Balloc+0x64>
 8009f92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f96:	e00e      	b.n	8009fb6 <_Balloc+0x6e>
 8009f98:	2221      	movs	r2, #33	@ 0x21
 8009f9a:	2104      	movs	r1, #4
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f000 fde5 	bl	800ab6c <_calloc_r>
 8009fa2:	69e3      	ldr	r3, [r4, #28]
 8009fa4:	60f0      	str	r0, [r6, #12]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1e4      	bne.n	8009f76 <_Balloc+0x2e>
 8009fac:	2000      	movs	r0, #0
 8009fae:	bd70      	pop	{r4, r5, r6, pc}
 8009fb0:	6802      	ldr	r2, [r0, #0]
 8009fb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fbc:	e7f7      	b.n	8009fae <_Balloc+0x66>
 8009fbe:	bf00      	nop
 8009fc0:	0800af29 	.word	0x0800af29
 8009fc4:	0800afa9 	.word	0x0800afa9

08009fc8 <_Bfree>:
 8009fc8:	b570      	push	{r4, r5, r6, lr}
 8009fca:	69c6      	ldr	r6, [r0, #28]
 8009fcc:	4605      	mov	r5, r0
 8009fce:	460c      	mov	r4, r1
 8009fd0:	b976      	cbnz	r6, 8009ff0 <_Bfree+0x28>
 8009fd2:	2010      	movs	r0, #16
 8009fd4:	f7fe f9fc 	bl	80083d0 <malloc>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	61e8      	str	r0, [r5, #28]
 8009fdc:	b920      	cbnz	r0, 8009fe8 <_Bfree+0x20>
 8009fde:	4b09      	ldr	r3, [pc, #36]	@ (800a004 <_Bfree+0x3c>)
 8009fe0:	4809      	ldr	r0, [pc, #36]	@ (800a008 <_Bfree+0x40>)
 8009fe2:	218f      	movs	r1, #143	@ 0x8f
 8009fe4:	f000 fda4 	bl	800ab30 <__assert_func>
 8009fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fec:	6006      	str	r6, [r0, #0]
 8009fee:	60c6      	str	r6, [r0, #12]
 8009ff0:	b13c      	cbz	r4, 800a002 <_Bfree+0x3a>
 8009ff2:	69eb      	ldr	r3, [r5, #28]
 8009ff4:	6862      	ldr	r2, [r4, #4]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ffc:	6021      	str	r1, [r4, #0]
 8009ffe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a002:	bd70      	pop	{r4, r5, r6, pc}
 800a004:	0800af29 	.word	0x0800af29
 800a008:	0800afa9 	.word	0x0800afa9

0800a00c <__multadd>:
 800a00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a010:	690d      	ldr	r5, [r1, #16]
 800a012:	4607      	mov	r7, r0
 800a014:	460c      	mov	r4, r1
 800a016:	461e      	mov	r6, r3
 800a018:	f101 0c14 	add.w	ip, r1, #20
 800a01c:	2000      	movs	r0, #0
 800a01e:	f8dc 3000 	ldr.w	r3, [ip]
 800a022:	b299      	uxth	r1, r3
 800a024:	fb02 6101 	mla	r1, r2, r1, r6
 800a028:	0c1e      	lsrs	r6, r3, #16
 800a02a:	0c0b      	lsrs	r3, r1, #16
 800a02c:	fb02 3306 	mla	r3, r2, r6, r3
 800a030:	b289      	uxth	r1, r1
 800a032:	3001      	adds	r0, #1
 800a034:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a038:	4285      	cmp	r5, r0
 800a03a:	f84c 1b04 	str.w	r1, [ip], #4
 800a03e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a042:	dcec      	bgt.n	800a01e <__multadd+0x12>
 800a044:	b30e      	cbz	r6, 800a08a <__multadd+0x7e>
 800a046:	68a3      	ldr	r3, [r4, #8]
 800a048:	42ab      	cmp	r3, r5
 800a04a:	dc19      	bgt.n	800a080 <__multadd+0x74>
 800a04c:	6861      	ldr	r1, [r4, #4]
 800a04e:	4638      	mov	r0, r7
 800a050:	3101      	adds	r1, #1
 800a052:	f7ff ff79 	bl	8009f48 <_Balloc>
 800a056:	4680      	mov	r8, r0
 800a058:	b928      	cbnz	r0, 800a066 <__multadd+0x5a>
 800a05a:	4602      	mov	r2, r0
 800a05c:	4b0c      	ldr	r3, [pc, #48]	@ (800a090 <__multadd+0x84>)
 800a05e:	480d      	ldr	r0, [pc, #52]	@ (800a094 <__multadd+0x88>)
 800a060:	21ba      	movs	r1, #186	@ 0xba
 800a062:	f000 fd65 	bl	800ab30 <__assert_func>
 800a066:	6922      	ldr	r2, [r4, #16]
 800a068:	3202      	adds	r2, #2
 800a06a:	f104 010c 	add.w	r1, r4, #12
 800a06e:	0092      	lsls	r2, r2, #2
 800a070:	300c      	adds	r0, #12
 800a072:	f7ff f932 	bl	80092da <memcpy>
 800a076:	4621      	mov	r1, r4
 800a078:	4638      	mov	r0, r7
 800a07a:	f7ff ffa5 	bl	8009fc8 <_Bfree>
 800a07e:	4644      	mov	r4, r8
 800a080:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a084:	3501      	adds	r5, #1
 800a086:	615e      	str	r6, [r3, #20]
 800a088:	6125      	str	r5, [r4, #16]
 800a08a:	4620      	mov	r0, r4
 800a08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a090:	0800af98 	.word	0x0800af98
 800a094:	0800afa9 	.word	0x0800afa9

0800a098 <__hi0bits>:
 800a098:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a09c:	4603      	mov	r3, r0
 800a09e:	bf36      	itet	cc
 800a0a0:	0403      	lslcc	r3, r0, #16
 800a0a2:	2000      	movcs	r0, #0
 800a0a4:	2010      	movcc	r0, #16
 800a0a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a0aa:	bf3c      	itt	cc
 800a0ac:	021b      	lslcc	r3, r3, #8
 800a0ae:	3008      	addcc	r0, #8
 800a0b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0b4:	bf3c      	itt	cc
 800a0b6:	011b      	lslcc	r3, r3, #4
 800a0b8:	3004      	addcc	r0, #4
 800a0ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0be:	bf3c      	itt	cc
 800a0c0:	009b      	lslcc	r3, r3, #2
 800a0c2:	3002      	addcc	r0, #2
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	db05      	blt.n	800a0d4 <__hi0bits+0x3c>
 800a0c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a0cc:	f100 0001 	add.w	r0, r0, #1
 800a0d0:	bf08      	it	eq
 800a0d2:	2020      	moveq	r0, #32
 800a0d4:	4770      	bx	lr

0800a0d6 <__lo0bits>:
 800a0d6:	6803      	ldr	r3, [r0, #0]
 800a0d8:	4602      	mov	r2, r0
 800a0da:	f013 0007 	ands.w	r0, r3, #7
 800a0de:	d00b      	beq.n	800a0f8 <__lo0bits+0x22>
 800a0e0:	07d9      	lsls	r1, r3, #31
 800a0e2:	d421      	bmi.n	800a128 <__lo0bits+0x52>
 800a0e4:	0798      	lsls	r0, r3, #30
 800a0e6:	bf49      	itett	mi
 800a0e8:	085b      	lsrmi	r3, r3, #1
 800a0ea:	089b      	lsrpl	r3, r3, #2
 800a0ec:	2001      	movmi	r0, #1
 800a0ee:	6013      	strmi	r3, [r2, #0]
 800a0f0:	bf5c      	itt	pl
 800a0f2:	6013      	strpl	r3, [r2, #0]
 800a0f4:	2002      	movpl	r0, #2
 800a0f6:	4770      	bx	lr
 800a0f8:	b299      	uxth	r1, r3
 800a0fa:	b909      	cbnz	r1, 800a100 <__lo0bits+0x2a>
 800a0fc:	0c1b      	lsrs	r3, r3, #16
 800a0fe:	2010      	movs	r0, #16
 800a100:	b2d9      	uxtb	r1, r3
 800a102:	b909      	cbnz	r1, 800a108 <__lo0bits+0x32>
 800a104:	3008      	adds	r0, #8
 800a106:	0a1b      	lsrs	r3, r3, #8
 800a108:	0719      	lsls	r1, r3, #28
 800a10a:	bf04      	itt	eq
 800a10c:	091b      	lsreq	r3, r3, #4
 800a10e:	3004      	addeq	r0, #4
 800a110:	0799      	lsls	r1, r3, #30
 800a112:	bf04      	itt	eq
 800a114:	089b      	lsreq	r3, r3, #2
 800a116:	3002      	addeq	r0, #2
 800a118:	07d9      	lsls	r1, r3, #31
 800a11a:	d403      	bmi.n	800a124 <__lo0bits+0x4e>
 800a11c:	085b      	lsrs	r3, r3, #1
 800a11e:	f100 0001 	add.w	r0, r0, #1
 800a122:	d003      	beq.n	800a12c <__lo0bits+0x56>
 800a124:	6013      	str	r3, [r2, #0]
 800a126:	4770      	bx	lr
 800a128:	2000      	movs	r0, #0
 800a12a:	4770      	bx	lr
 800a12c:	2020      	movs	r0, #32
 800a12e:	4770      	bx	lr

0800a130 <__i2b>:
 800a130:	b510      	push	{r4, lr}
 800a132:	460c      	mov	r4, r1
 800a134:	2101      	movs	r1, #1
 800a136:	f7ff ff07 	bl	8009f48 <_Balloc>
 800a13a:	4602      	mov	r2, r0
 800a13c:	b928      	cbnz	r0, 800a14a <__i2b+0x1a>
 800a13e:	4b05      	ldr	r3, [pc, #20]	@ (800a154 <__i2b+0x24>)
 800a140:	4805      	ldr	r0, [pc, #20]	@ (800a158 <__i2b+0x28>)
 800a142:	f240 1145 	movw	r1, #325	@ 0x145
 800a146:	f000 fcf3 	bl	800ab30 <__assert_func>
 800a14a:	2301      	movs	r3, #1
 800a14c:	6144      	str	r4, [r0, #20]
 800a14e:	6103      	str	r3, [r0, #16]
 800a150:	bd10      	pop	{r4, pc}
 800a152:	bf00      	nop
 800a154:	0800af98 	.word	0x0800af98
 800a158:	0800afa9 	.word	0x0800afa9

0800a15c <__multiply>:
 800a15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a160:	4614      	mov	r4, r2
 800a162:	690a      	ldr	r2, [r1, #16]
 800a164:	6923      	ldr	r3, [r4, #16]
 800a166:	429a      	cmp	r2, r3
 800a168:	bfa8      	it	ge
 800a16a:	4623      	movge	r3, r4
 800a16c:	460f      	mov	r7, r1
 800a16e:	bfa4      	itt	ge
 800a170:	460c      	movge	r4, r1
 800a172:	461f      	movge	r7, r3
 800a174:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a178:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a17c:	68a3      	ldr	r3, [r4, #8]
 800a17e:	6861      	ldr	r1, [r4, #4]
 800a180:	eb0a 0609 	add.w	r6, sl, r9
 800a184:	42b3      	cmp	r3, r6
 800a186:	b085      	sub	sp, #20
 800a188:	bfb8      	it	lt
 800a18a:	3101      	addlt	r1, #1
 800a18c:	f7ff fedc 	bl	8009f48 <_Balloc>
 800a190:	b930      	cbnz	r0, 800a1a0 <__multiply+0x44>
 800a192:	4602      	mov	r2, r0
 800a194:	4b44      	ldr	r3, [pc, #272]	@ (800a2a8 <__multiply+0x14c>)
 800a196:	4845      	ldr	r0, [pc, #276]	@ (800a2ac <__multiply+0x150>)
 800a198:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a19c:	f000 fcc8 	bl	800ab30 <__assert_func>
 800a1a0:	f100 0514 	add.w	r5, r0, #20
 800a1a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a1a8:	462b      	mov	r3, r5
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	4543      	cmp	r3, r8
 800a1ae:	d321      	bcc.n	800a1f4 <__multiply+0x98>
 800a1b0:	f107 0114 	add.w	r1, r7, #20
 800a1b4:	f104 0214 	add.w	r2, r4, #20
 800a1b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a1bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a1c0:	9302      	str	r3, [sp, #8]
 800a1c2:	1b13      	subs	r3, r2, r4
 800a1c4:	3b15      	subs	r3, #21
 800a1c6:	f023 0303 	bic.w	r3, r3, #3
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	f104 0715 	add.w	r7, r4, #21
 800a1d0:	42ba      	cmp	r2, r7
 800a1d2:	bf38      	it	cc
 800a1d4:	2304      	movcc	r3, #4
 800a1d6:	9301      	str	r3, [sp, #4]
 800a1d8:	9b02      	ldr	r3, [sp, #8]
 800a1da:	9103      	str	r1, [sp, #12]
 800a1dc:	428b      	cmp	r3, r1
 800a1de:	d80c      	bhi.n	800a1fa <__multiply+0x9e>
 800a1e0:	2e00      	cmp	r6, #0
 800a1e2:	dd03      	ble.n	800a1ec <__multiply+0x90>
 800a1e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d05b      	beq.n	800a2a4 <__multiply+0x148>
 800a1ec:	6106      	str	r6, [r0, #16]
 800a1ee:	b005      	add	sp, #20
 800a1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f4:	f843 2b04 	str.w	r2, [r3], #4
 800a1f8:	e7d8      	b.n	800a1ac <__multiply+0x50>
 800a1fa:	f8b1 a000 	ldrh.w	sl, [r1]
 800a1fe:	f1ba 0f00 	cmp.w	sl, #0
 800a202:	d024      	beq.n	800a24e <__multiply+0xf2>
 800a204:	f104 0e14 	add.w	lr, r4, #20
 800a208:	46a9      	mov	r9, r5
 800a20a:	f04f 0c00 	mov.w	ip, #0
 800a20e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a212:	f8d9 3000 	ldr.w	r3, [r9]
 800a216:	fa1f fb87 	uxth.w	fp, r7
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a220:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a224:	f8d9 7000 	ldr.w	r7, [r9]
 800a228:	4463      	add	r3, ip
 800a22a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a22e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a232:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a236:	b29b      	uxth	r3, r3
 800a238:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a23c:	4572      	cmp	r2, lr
 800a23e:	f849 3b04 	str.w	r3, [r9], #4
 800a242:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a246:	d8e2      	bhi.n	800a20e <__multiply+0xb2>
 800a248:	9b01      	ldr	r3, [sp, #4]
 800a24a:	f845 c003 	str.w	ip, [r5, r3]
 800a24e:	9b03      	ldr	r3, [sp, #12]
 800a250:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a254:	3104      	adds	r1, #4
 800a256:	f1b9 0f00 	cmp.w	r9, #0
 800a25a:	d021      	beq.n	800a2a0 <__multiply+0x144>
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	f104 0c14 	add.w	ip, r4, #20
 800a262:	46ae      	mov	lr, r5
 800a264:	f04f 0a00 	mov.w	sl, #0
 800a268:	f8bc b000 	ldrh.w	fp, [ip]
 800a26c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a270:	fb09 770b 	mla	r7, r9, fp, r7
 800a274:	4457      	add	r7, sl
 800a276:	b29b      	uxth	r3, r3
 800a278:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a27c:	f84e 3b04 	str.w	r3, [lr], #4
 800a280:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a284:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a288:	f8be 3000 	ldrh.w	r3, [lr]
 800a28c:	fb09 330a 	mla	r3, r9, sl, r3
 800a290:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a294:	4562      	cmp	r2, ip
 800a296:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a29a:	d8e5      	bhi.n	800a268 <__multiply+0x10c>
 800a29c:	9f01      	ldr	r7, [sp, #4]
 800a29e:	51eb      	str	r3, [r5, r7]
 800a2a0:	3504      	adds	r5, #4
 800a2a2:	e799      	b.n	800a1d8 <__multiply+0x7c>
 800a2a4:	3e01      	subs	r6, #1
 800a2a6:	e79b      	b.n	800a1e0 <__multiply+0x84>
 800a2a8:	0800af98 	.word	0x0800af98
 800a2ac:	0800afa9 	.word	0x0800afa9

0800a2b0 <__pow5mult>:
 800a2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2b4:	4615      	mov	r5, r2
 800a2b6:	f012 0203 	ands.w	r2, r2, #3
 800a2ba:	4607      	mov	r7, r0
 800a2bc:	460e      	mov	r6, r1
 800a2be:	d007      	beq.n	800a2d0 <__pow5mult+0x20>
 800a2c0:	4c25      	ldr	r4, [pc, #148]	@ (800a358 <__pow5mult+0xa8>)
 800a2c2:	3a01      	subs	r2, #1
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2ca:	f7ff fe9f 	bl	800a00c <__multadd>
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	10ad      	asrs	r5, r5, #2
 800a2d2:	d03d      	beq.n	800a350 <__pow5mult+0xa0>
 800a2d4:	69fc      	ldr	r4, [r7, #28]
 800a2d6:	b97c      	cbnz	r4, 800a2f8 <__pow5mult+0x48>
 800a2d8:	2010      	movs	r0, #16
 800a2da:	f7fe f879 	bl	80083d0 <malloc>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	61f8      	str	r0, [r7, #28]
 800a2e2:	b928      	cbnz	r0, 800a2f0 <__pow5mult+0x40>
 800a2e4:	4b1d      	ldr	r3, [pc, #116]	@ (800a35c <__pow5mult+0xac>)
 800a2e6:	481e      	ldr	r0, [pc, #120]	@ (800a360 <__pow5mult+0xb0>)
 800a2e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a2ec:	f000 fc20 	bl	800ab30 <__assert_func>
 800a2f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2f4:	6004      	str	r4, [r0, #0]
 800a2f6:	60c4      	str	r4, [r0, #12]
 800a2f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a2fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a300:	b94c      	cbnz	r4, 800a316 <__pow5mult+0x66>
 800a302:	f240 2171 	movw	r1, #625	@ 0x271
 800a306:	4638      	mov	r0, r7
 800a308:	f7ff ff12 	bl	800a130 <__i2b>
 800a30c:	2300      	movs	r3, #0
 800a30e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a312:	4604      	mov	r4, r0
 800a314:	6003      	str	r3, [r0, #0]
 800a316:	f04f 0900 	mov.w	r9, #0
 800a31a:	07eb      	lsls	r3, r5, #31
 800a31c:	d50a      	bpl.n	800a334 <__pow5mult+0x84>
 800a31e:	4631      	mov	r1, r6
 800a320:	4622      	mov	r2, r4
 800a322:	4638      	mov	r0, r7
 800a324:	f7ff ff1a 	bl	800a15c <__multiply>
 800a328:	4631      	mov	r1, r6
 800a32a:	4680      	mov	r8, r0
 800a32c:	4638      	mov	r0, r7
 800a32e:	f7ff fe4b 	bl	8009fc8 <_Bfree>
 800a332:	4646      	mov	r6, r8
 800a334:	106d      	asrs	r5, r5, #1
 800a336:	d00b      	beq.n	800a350 <__pow5mult+0xa0>
 800a338:	6820      	ldr	r0, [r4, #0]
 800a33a:	b938      	cbnz	r0, 800a34c <__pow5mult+0x9c>
 800a33c:	4622      	mov	r2, r4
 800a33e:	4621      	mov	r1, r4
 800a340:	4638      	mov	r0, r7
 800a342:	f7ff ff0b 	bl	800a15c <__multiply>
 800a346:	6020      	str	r0, [r4, #0]
 800a348:	f8c0 9000 	str.w	r9, [r0]
 800a34c:	4604      	mov	r4, r0
 800a34e:	e7e4      	b.n	800a31a <__pow5mult+0x6a>
 800a350:	4630      	mov	r0, r6
 800a352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a356:	bf00      	nop
 800a358:	0800b004 	.word	0x0800b004
 800a35c:	0800af29 	.word	0x0800af29
 800a360:	0800afa9 	.word	0x0800afa9

0800a364 <__lshift>:
 800a364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a368:	460c      	mov	r4, r1
 800a36a:	6849      	ldr	r1, [r1, #4]
 800a36c:	6923      	ldr	r3, [r4, #16]
 800a36e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a372:	68a3      	ldr	r3, [r4, #8]
 800a374:	4607      	mov	r7, r0
 800a376:	4691      	mov	r9, r2
 800a378:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a37c:	f108 0601 	add.w	r6, r8, #1
 800a380:	42b3      	cmp	r3, r6
 800a382:	db0b      	blt.n	800a39c <__lshift+0x38>
 800a384:	4638      	mov	r0, r7
 800a386:	f7ff fddf 	bl	8009f48 <_Balloc>
 800a38a:	4605      	mov	r5, r0
 800a38c:	b948      	cbnz	r0, 800a3a2 <__lshift+0x3e>
 800a38e:	4602      	mov	r2, r0
 800a390:	4b28      	ldr	r3, [pc, #160]	@ (800a434 <__lshift+0xd0>)
 800a392:	4829      	ldr	r0, [pc, #164]	@ (800a438 <__lshift+0xd4>)
 800a394:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a398:	f000 fbca 	bl	800ab30 <__assert_func>
 800a39c:	3101      	adds	r1, #1
 800a39e:	005b      	lsls	r3, r3, #1
 800a3a0:	e7ee      	b.n	800a380 <__lshift+0x1c>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	f100 0114 	add.w	r1, r0, #20
 800a3a8:	f100 0210 	add.w	r2, r0, #16
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	4553      	cmp	r3, sl
 800a3b0:	db33      	blt.n	800a41a <__lshift+0xb6>
 800a3b2:	6920      	ldr	r0, [r4, #16]
 800a3b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a3b8:	f104 0314 	add.w	r3, r4, #20
 800a3bc:	f019 091f 	ands.w	r9, r9, #31
 800a3c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3c8:	d02b      	beq.n	800a422 <__lshift+0xbe>
 800a3ca:	f1c9 0e20 	rsb	lr, r9, #32
 800a3ce:	468a      	mov	sl, r1
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	6818      	ldr	r0, [r3, #0]
 800a3d4:	fa00 f009 	lsl.w	r0, r0, r9
 800a3d8:	4310      	orrs	r0, r2
 800a3da:	f84a 0b04 	str.w	r0, [sl], #4
 800a3de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e2:	459c      	cmp	ip, r3
 800a3e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a3e8:	d8f3      	bhi.n	800a3d2 <__lshift+0x6e>
 800a3ea:	ebac 0304 	sub.w	r3, ip, r4
 800a3ee:	3b15      	subs	r3, #21
 800a3f0:	f023 0303 	bic.w	r3, r3, #3
 800a3f4:	3304      	adds	r3, #4
 800a3f6:	f104 0015 	add.w	r0, r4, #21
 800a3fa:	4584      	cmp	ip, r0
 800a3fc:	bf38      	it	cc
 800a3fe:	2304      	movcc	r3, #4
 800a400:	50ca      	str	r2, [r1, r3]
 800a402:	b10a      	cbz	r2, 800a408 <__lshift+0xa4>
 800a404:	f108 0602 	add.w	r6, r8, #2
 800a408:	3e01      	subs	r6, #1
 800a40a:	4638      	mov	r0, r7
 800a40c:	612e      	str	r6, [r5, #16]
 800a40e:	4621      	mov	r1, r4
 800a410:	f7ff fdda 	bl	8009fc8 <_Bfree>
 800a414:	4628      	mov	r0, r5
 800a416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a41a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a41e:	3301      	adds	r3, #1
 800a420:	e7c5      	b.n	800a3ae <__lshift+0x4a>
 800a422:	3904      	subs	r1, #4
 800a424:	f853 2b04 	ldr.w	r2, [r3], #4
 800a428:	f841 2f04 	str.w	r2, [r1, #4]!
 800a42c:	459c      	cmp	ip, r3
 800a42e:	d8f9      	bhi.n	800a424 <__lshift+0xc0>
 800a430:	e7ea      	b.n	800a408 <__lshift+0xa4>
 800a432:	bf00      	nop
 800a434:	0800af98 	.word	0x0800af98
 800a438:	0800afa9 	.word	0x0800afa9

0800a43c <__mcmp>:
 800a43c:	690a      	ldr	r2, [r1, #16]
 800a43e:	4603      	mov	r3, r0
 800a440:	6900      	ldr	r0, [r0, #16]
 800a442:	1a80      	subs	r0, r0, r2
 800a444:	b530      	push	{r4, r5, lr}
 800a446:	d10e      	bne.n	800a466 <__mcmp+0x2a>
 800a448:	3314      	adds	r3, #20
 800a44a:	3114      	adds	r1, #20
 800a44c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a450:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a454:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a458:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a45c:	4295      	cmp	r5, r2
 800a45e:	d003      	beq.n	800a468 <__mcmp+0x2c>
 800a460:	d205      	bcs.n	800a46e <__mcmp+0x32>
 800a462:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a466:	bd30      	pop	{r4, r5, pc}
 800a468:	42a3      	cmp	r3, r4
 800a46a:	d3f3      	bcc.n	800a454 <__mcmp+0x18>
 800a46c:	e7fb      	b.n	800a466 <__mcmp+0x2a>
 800a46e:	2001      	movs	r0, #1
 800a470:	e7f9      	b.n	800a466 <__mcmp+0x2a>
	...

0800a474 <__mdiff>:
 800a474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a478:	4689      	mov	r9, r1
 800a47a:	4606      	mov	r6, r0
 800a47c:	4611      	mov	r1, r2
 800a47e:	4648      	mov	r0, r9
 800a480:	4614      	mov	r4, r2
 800a482:	f7ff ffdb 	bl	800a43c <__mcmp>
 800a486:	1e05      	subs	r5, r0, #0
 800a488:	d112      	bne.n	800a4b0 <__mdiff+0x3c>
 800a48a:	4629      	mov	r1, r5
 800a48c:	4630      	mov	r0, r6
 800a48e:	f7ff fd5b 	bl	8009f48 <_Balloc>
 800a492:	4602      	mov	r2, r0
 800a494:	b928      	cbnz	r0, 800a4a2 <__mdiff+0x2e>
 800a496:	4b3f      	ldr	r3, [pc, #252]	@ (800a594 <__mdiff+0x120>)
 800a498:	f240 2137 	movw	r1, #567	@ 0x237
 800a49c:	483e      	ldr	r0, [pc, #248]	@ (800a598 <__mdiff+0x124>)
 800a49e:	f000 fb47 	bl	800ab30 <__assert_func>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a4a8:	4610      	mov	r0, r2
 800a4aa:	b003      	add	sp, #12
 800a4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b0:	bfbc      	itt	lt
 800a4b2:	464b      	movlt	r3, r9
 800a4b4:	46a1      	movlt	r9, r4
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a4bc:	bfba      	itte	lt
 800a4be:	461c      	movlt	r4, r3
 800a4c0:	2501      	movlt	r5, #1
 800a4c2:	2500      	movge	r5, #0
 800a4c4:	f7ff fd40 	bl	8009f48 <_Balloc>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	b918      	cbnz	r0, 800a4d4 <__mdiff+0x60>
 800a4cc:	4b31      	ldr	r3, [pc, #196]	@ (800a594 <__mdiff+0x120>)
 800a4ce:	f240 2145 	movw	r1, #581	@ 0x245
 800a4d2:	e7e3      	b.n	800a49c <__mdiff+0x28>
 800a4d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a4d8:	6926      	ldr	r6, [r4, #16]
 800a4da:	60c5      	str	r5, [r0, #12]
 800a4dc:	f109 0310 	add.w	r3, r9, #16
 800a4e0:	f109 0514 	add.w	r5, r9, #20
 800a4e4:	f104 0e14 	add.w	lr, r4, #20
 800a4e8:	f100 0b14 	add.w	fp, r0, #20
 800a4ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a4f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a4f4:	9301      	str	r3, [sp, #4]
 800a4f6:	46d9      	mov	r9, fp
 800a4f8:	f04f 0c00 	mov.w	ip, #0
 800a4fc:	9b01      	ldr	r3, [sp, #4]
 800a4fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a502:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a506:	9301      	str	r3, [sp, #4]
 800a508:	fa1f f38a 	uxth.w	r3, sl
 800a50c:	4619      	mov	r1, r3
 800a50e:	b283      	uxth	r3, r0
 800a510:	1acb      	subs	r3, r1, r3
 800a512:	0c00      	lsrs	r0, r0, #16
 800a514:	4463      	add	r3, ip
 800a516:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a51a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a51e:	b29b      	uxth	r3, r3
 800a520:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a524:	4576      	cmp	r6, lr
 800a526:	f849 3b04 	str.w	r3, [r9], #4
 800a52a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a52e:	d8e5      	bhi.n	800a4fc <__mdiff+0x88>
 800a530:	1b33      	subs	r3, r6, r4
 800a532:	3b15      	subs	r3, #21
 800a534:	f023 0303 	bic.w	r3, r3, #3
 800a538:	3415      	adds	r4, #21
 800a53a:	3304      	adds	r3, #4
 800a53c:	42a6      	cmp	r6, r4
 800a53e:	bf38      	it	cc
 800a540:	2304      	movcc	r3, #4
 800a542:	441d      	add	r5, r3
 800a544:	445b      	add	r3, fp
 800a546:	461e      	mov	r6, r3
 800a548:	462c      	mov	r4, r5
 800a54a:	4544      	cmp	r4, r8
 800a54c:	d30e      	bcc.n	800a56c <__mdiff+0xf8>
 800a54e:	f108 0103 	add.w	r1, r8, #3
 800a552:	1b49      	subs	r1, r1, r5
 800a554:	f021 0103 	bic.w	r1, r1, #3
 800a558:	3d03      	subs	r5, #3
 800a55a:	45a8      	cmp	r8, r5
 800a55c:	bf38      	it	cc
 800a55e:	2100      	movcc	r1, #0
 800a560:	440b      	add	r3, r1
 800a562:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a566:	b191      	cbz	r1, 800a58e <__mdiff+0x11a>
 800a568:	6117      	str	r7, [r2, #16]
 800a56a:	e79d      	b.n	800a4a8 <__mdiff+0x34>
 800a56c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a570:	46e6      	mov	lr, ip
 800a572:	0c08      	lsrs	r0, r1, #16
 800a574:	fa1c fc81 	uxtah	ip, ip, r1
 800a578:	4471      	add	r1, lr
 800a57a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a57e:	b289      	uxth	r1, r1
 800a580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a584:	f846 1b04 	str.w	r1, [r6], #4
 800a588:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a58c:	e7dd      	b.n	800a54a <__mdiff+0xd6>
 800a58e:	3f01      	subs	r7, #1
 800a590:	e7e7      	b.n	800a562 <__mdiff+0xee>
 800a592:	bf00      	nop
 800a594:	0800af98 	.word	0x0800af98
 800a598:	0800afa9 	.word	0x0800afa9

0800a59c <__d2b>:
 800a59c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5a0:	460f      	mov	r7, r1
 800a5a2:	2101      	movs	r1, #1
 800a5a4:	ec59 8b10 	vmov	r8, r9, d0
 800a5a8:	4616      	mov	r6, r2
 800a5aa:	f7ff fccd 	bl	8009f48 <_Balloc>
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	b930      	cbnz	r0, 800a5c0 <__d2b+0x24>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	4b23      	ldr	r3, [pc, #140]	@ (800a644 <__d2b+0xa8>)
 800a5b6:	4824      	ldr	r0, [pc, #144]	@ (800a648 <__d2b+0xac>)
 800a5b8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a5bc:	f000 fab8 	bl	800ab30 <__assert_func>
 800a5c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a5c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5c8:	b10d      	cbz	r5, 800a5ce <__d2b+0x32>
 800a5ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5ce:	9301      	str	r3, [sp, #4]
 800a5d0:	f1b8 0300 	subs.w	r3, r8, #0
 800a5d4:	d023      	beq.n	800a61e <__d2b+0x82>
 800a5d6:	4668      	mov	r0, sp
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	f7ff fd7c 	bl	800a0d6 <__lo0bits>
 800a5de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a5e2:	b1d0      	cbz	r0, 800a61a <__d2b+0x7e>
 800a5e4:	f1c0 0320 	rsb	r3, r0, #32
 800a5e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ec:	430b      	orrs	r3, r1
 800a5ee:	40c2      	lsrs	r2, r0
 800a5f0:	6163      	str	r3, [r4, #20]
 800a5f2:	9201      	str	r2, [sp, #4]
 800a5f4:	9b01      	ldr	r3, [sp, #4]
 800a5f6:	61a3      	str	r3, [r4, #24]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	bf0c      	ite	eq
 800a5fc:	2201      	moveq	r2, #1
 800a5fe:	2202      	movne	r2, #2
 800a600:	6122      	str	r2, [r4, #16]
 800a602:	b1a5      	cbz	r5, 800a62e <__d2b+0x92>
 800a604:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a608:	4405      	add	r5, r0
 800a60a:	603d      	str	r5, [r7, #0]
 800a60c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a610:	6030      	str	r0, [r6, #0]
 800a612:	4620      	mov	r0, r4
 800a614:	b003      	add	sp, #12
 800a616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a61a:	6161      	str	r1, [r4, #20]
 800a61c:	e7ea      	b.n	800a5f4 <__d2b+0x58>
 800a61e:	a801      	add	r0, sp, #4
 800a620:	f7ff fd59 	bl	800a0d6 <__lo0bits>
 800a624:	9b01      	ldr	r3, [sp, #4]
 800a626:	6163      	str	r3, [r4, #20]
 800a628:	3020      	adds	r0, #32
 800a62a:	2201      	movs	r2, #1
 800a62c:	e7e8      	b.n	800a600 <__d2b+0x64>
 800a62e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a632:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a636:	6038      	str	r0, [r7, #0]
 800a638:	6918      	ldr	r0, [r3, #16]
 800a63a:	f7ff fd2d 	bl	800a098 <__hi0bits>
 800a63e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a642:	e7e5      	b.n	800a610 <__d2b+0x74>
 800a644:	0800af98 	.word	0x0800af98
 800a648:	0800afa9 	.word	0x0800afa9

0800a64c <__sfputc_r>:
 800a64c:	6893      	ldr	r3, [r2, #8]
 800a64e:	3b01      	subs	r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	b410      	push	{r4}
 800a654:	6093      	str	r3, [r2, #8]
 800a656:	da08      	bge.n	800a66a <__sfputc_r+0x1e>
 800a658:	6994      	ldr	r4, [r2, #24]
 800a65a:	42a3      	cmp	r3, r4
 800a65c:	db01      	blt.n	800a662 <__sfputc_r+0x16>
 800a65e:	290a      	cmp	r1, #10
 800a660:	d103      	bne.n	800a66a <__sfputc_r+0x1e>
 800a662:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a666:	f7fe bd14 	b.w	8009092 <__swbuf_r>
 800a66a:	6813      	ldr	r3, [r2, #0]
 800a66c:	1c58      	adds	r0, r3, #1
 800a66e:	6010      	str	r0, [r2, #0]
 800a670:	7019      	strb	r1, [r3, #0]
 800a672:	4608      	mov	r0, r1
 800a674:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <__sfputs_r>:
 800a67a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67c:	4606      	mov	r6, r0
 800a67e:	460f      	mov	r7, r1
 800a680:	4614      	mov	r4, r2
 800a682:	18d5      	adds	r5, r2, r3
 800a684:	42ac      	cmp	r4, r5
 800a686:	d101      	bne.n	800a68c <__sfputs_r+0x12>
 800a688:	2000      	movs	r0, #0
 800a68a:	e007      	b.n	800a69c <__sfputs_r+0x22>
 800a68c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a690:	463a      	mov	r2, r7
 800a692:	4630      	mov	r0, r6
 800a694:	f7ff ffda 	bl	800a64c <__sfputc_r>
 800a698:	1c43      	adds	r3, r0, #1
 800a69a:	d1f3      	bne.n	800a684 <__sfputs_r+0xa>
 800a69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6a0 <_vfiprintf_r>:
 800a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a4:	460d      	mov	r5, r1
 800a6a6:	b09d      	sub	sp, #116	@ 0x74
 800a6a8:	4614      	mov	r4, r2
 800a6aa:	4698      	mov	r8, r3
 800a6ac:	4606      	mov	r6, r0
 800a6ae:	b118      	cbz	r0, 800a6b8 <_vfiprintf_r+0x18>
 800a6b0:	6a03      	ldr	r3, [r0, #32]
 800a6b2:	b90b      	cbnz	r3, 800a6b8 <_vfiprintf_r+0x18>
 800a6b4:	f7fe fc04 	bl	8008ec0 <__sinit>
 800a6b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6ba:	07d9      	lsls	r1, r3, #31
 800a6bc:	d405      	bmi.n	800a6ca <_vfiprintf_r+0x2a>
 800a6be:	89ab      	ldrh	r3, [r5, #12]
 800a6c0:	059a      	lsls	r2, r3, #22
 800a6c2:	d402      	bmi.n	800a6ca <_vfiprintf_r+0x2a>
 800a6c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6c6:	f7fe fe06 	bl	80092d6 <__retarget_lock_acquire_recursive>
 800a6ca:	89ab      	ldrh	r3, [r5, #12]
 800a6cc:	071b      	lsls	r3, r3, #28
 800a6ce:	d501      	bpl.n	800a6d4 <_vfiprintf_r+0x34>
 800a6d0:	692b      	ldr	r3, [r5, #16]
 800a6d2:	b99b      	cbnz	r3, 800a6fc <_vfiprintf_r+0x5c>
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	f7fe fd1a 	bl	8009110 <__swsetup_r>
 800a6dc:	b170      	cbz	r0, 800a6fc <_vfiprintf_r+0x5c>
 800a6de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6e0:	07dc      	lsls	r4, r3, #31
 800a6e2:	d504      	bpl.n	800a6ee <_vfiprintf_r+0x4e>
 800a6e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6e8:	b01d      	add	sp, #116	@ 0x74
 800a6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ee:	89ab      	ldrh	r3, [r5, #12]
 800a6f0:	0598      	lsls	r0, r3, #22
 800a6f2:	d4f7      	bmi.n	800a6e4 <_vfiprintf_r+0x44>
 800a6f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6f6:	f7fe fdef 	bl	80092d8 <__retarget_lock_release_recursive>
 800a6fa:	e7f3      	b.n	800a6e4 <_vfiprintf_r+0x44>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800a700:	2320      	movs	r3, #32
 800a702:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a706:	f8cd 800c 	str.w	r8, [sp, #12]
 800a70a:	2330      	movs	r3, #48	@ 0x30
 800a70c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a8bc <_vfiprintf_r+0x21c>
 800a710:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a714:	f04f 0901 	mov.w	r9, #1
 800a718:	4623      	mov	r3, r4
 800a71a:	469a      	mov	sl, r3
 800a71c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a720:	b10a      	cbz	r2, 800a726 <_vfiprintf_r+0x86>
 800a722:	2a25      	cmp	r2, #37	@ 0x25
 800a724:	d1f9      	bne.n	800a71a <_vfiprintf_r+0x7a>
 800a726:	ebba 0b04 	subs.w	fp, sl, r4
 800a72a:	d00b      	beq.n	800a744 <_vfiprintf_r+0xa4>
 800a72c:	465b      	mov	r3, fp
 800a72e:	4622      	mov	r2, r4
 800a730:	4629      	mov	r1, r5
 800a732:	4630      	mov	r0, r6
 800a734:	f7ff ffa1 	bl	800a67a <__sfputs_r>
 800a738:	3001      	adds	r0, #1
 800a73a:	f000 80a7 	beq.w	800a88c <_vfiprintf_r+0x1ec>
 800a73e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a740:	445a      	add	r2, fp
 800a742:	9209      	str	r2, [sp, #36]	@ 0x24
 800a744:	f89a 3000 	ldrb.w	r3, [sl]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f000 809f 	beq.w	800a88c <_vfiprintf_r+0x1ec>
 800a74e:	2300      	movs	r3, #0
 800a750:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a758:	f10a 0a01 	add.w	sl, sl, #1
 800a75c:	9304      	str	r3, [sp, #16]
 800a75e:	9307      	str	r3, [sp, #28]
 800a760:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a764:	931a      	str	r3, [sp, #104]	@ 0x68
 800a766:	4654      	mov	r4, sl
 800a768:	2205      	movs	r2, #5
 800a76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a76e:	4853      	ldr	r0, [pc, #332]	@ (800a8bc <_vfiprintf_r+0x21c>)
 800a770:	f7f5 fdb6 	bl	80002e0 <memchr>
 800a774:	9a04      	ldr	r2, [sp, #16]
 800a776:	b9d8      	cbnz	r0, 800a7b0 <_vfiprintf_r+0x110>
 800a778:	06d1      	lsls	r1, r2, #27
 800a77a:	bf44      	itt	mi
 800a77c:	2320      	movmi	r3, #32
 800a77e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a782:	0713      	lsls	r3, r2, #28
 800a784:	bf44      	itt	mi
 800a786:	232b      	movmi	r3, #43	@ 0x2b
 800a788:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a78c:	f89a 3000 	ldrb.w	r3, [sl]
 800a790:	2b2a      	cmp	r3, #42	@ 0x2a
 800a792:	d015      	beq.n	800a7c0 <_vfiprintf_r+0x120>
 800a794:	9a07      	ldr	r2, [sp, #28]
 800a796:	4654      	mov	r4, sl
 800a798:	2000      	movs	r0, #0
 800a79a:	f04f 0c0a 	mov.w	ip, #10
 800a79e:	4621      	mov	r1, r4
 800a7a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7a4:	3b30      	subs	r3, #48	@ 0x30
 800a7a6:	2b09      	cmp	r3, #9
 800a7a8:	d94b      	bls.n	800a842 <_vfiprintf_r+0x1a2>
 800a7aa:	b1b0      	cbz	r0, 800a7da <_vfiprintf_r+0x13a>
 800a7ac:	9207      	str	r2, [sp, #28]
 800a7ae:	e014      	b.n	800a7da <_vfiprintf_r+0x13a>
 800a7b0:	eba0 0308 	sub.w	r3, r0, r8
 800a7b4:	fa09 f303 	lsl.w	r3, r9, r3
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	9304      	str	r3, [sp, #16]
 800a7bc:	46a2      	mov	sl, r4
 800a7be:	e7d2      	b.n	800a766 <_vfiprintf_r+0xc6>
 800a7c0:	9b03      	ldr	r3, [sp, #12]
 800a7c2:	1d19      	adds	r1, r3, #4
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	9103      	str	r1, [sp, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	bfbb      	ittet	lt
 800a7cc:	425b      	neglt	r3, r3
 800a7ce:	f042 0202 	orrlt.w	r2, r2, #2
 800a7d2:	9307      	strge	r3, [sp, #28]
 800a7d4:	9307      	strlt	r3, [sp, #28]
 800a7d6:	bfb8      	it	lt
 800a7d8:	9204      	strlt	r2, [sp, #16]
 800a7da:	7823      	ldrb	r3, [r4, #0]
 800a7dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7de:	d10a      	bne.n	800a7f6 <_vfiprintf_r+0x156>
 800a7e0:	7863      	ldrb	r3, [r4, #1]
 800a7e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7e4:	d132      	bne.n	800a84c <_vfiprintf_r+0x1ac>
 800a7e6:	9b03      	ldr	r3, [sp, #12]
 800a7e8:	1d1a      	adds	r2, r3, #4
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	9203      	str	r2, [sp, #12]
 800a7ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7f2:	3402      	adds	r4, #2
 800a7f4:	9305      	str	r3, [sp, #20]
 800a7f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a8cc <_vfiprintf_r+0x22c>
 800a7fa:	7821      	ldrb	r1, [r4, #0]
 800a7fc:	2203      	movs	r2, #3
 800a7fe:	4650      	mov	r0, sl
 800a800:	f7f5 fd6e 	bl	80002e0 <memchr>
 800a804:	b138      	cbz	r0, 800a816 <_vfiprintf_r+0x176>
 800a806:	9b04      	ldr	r3, [sp, #16]
 800a808:	eba0 000a 	sub.w	r0, r0, sl
 800a80c:	2240      	movs	r2, #64	@ 0x40
 800a80e:	4082      	lsls	r2, r0
 800a810:	4313      	orrs	r3, r2
 800a812:	3401      	adds	r4, #1
 800a814:	9304      	str	r3, [sp, #16]
 800a816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a81a:	4829      	ldr	r0, [pc, #164]	@ (800a8c0 <_vfiprintf_r+0x220>)
 800a81c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a820:	2206      	movs	r2, #6
 800a822:	f7f5 fd5d 	bl	80002e0 <memchr>
 800a826:	2800      	cmp	r0, #0
 800a828:	d03f      	beq.n	800a8aa <_vfiprintf_r+0x20a>
 800a82a:	4b26      	ldr	r3, [pc, #152]	@ (800a8c4 <_vfiprintf_r+0x224>)
 800a82c:	bb1b      	cbnz	r3, 800a876 <_vfiprintf_r+0x1d6>
 800a82e:	9b03      	ldr	r3, [sp, #12]
 800a830:	3307      	adds	r3, #7
 800a832:	f023 0307 	bic.w	r3, r3, #7
 800a836:	3308      	adds	r3, #8
 800a838:	9303      	str	r3, [sp, #12]
 800a83a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a83c:	443b      	add	r3, r7
 800a83e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a840:	e76a      	b.n	800a718 <_vfiprintf_r+0x78>
 800a842:	fb0c 3202 	mla	r2, ip, r2, r3
 800a846:	460c      	mov	r4, r1
 800a848:	2001      	movs	r0, #1
 800a84a:	e7a8      	b.n	800a79e <_vfiprintf_r+0xfe>
 800a84c:	2300      	movs	r3, #0
 800a84e:	3401      	adds	r4, #1
 800a850:	9305      	str	r3, [sp, #20]
 800a852:	4619      	mov	r1, r3
 800a854:	f04f 0c0a 	mov.w	ip, #10
 800a858:	4620      	mov	r0, r4
 800a85a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a85e:	3a30      	subs	r2, #48	@ 0x30
 800a860:	2a09      	cmp	r2, #9
 800a862:	d903      	bls.n	800a86c <_vfiprintf_r+0x1cc>
 800a864:	2b00      	cmp	r3, #0
 800a866:	d0c6      	beq.n	800a7f6 <_vfiprintf_r+0x156>
 800a868:	9105      	str	r1, [sp, #20]
 800a86a:	e7c4      	b.n	800a7f6 <_vfiprintf_r+0x156>
 800a86c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a870:	4604      	mov	r4, r0
 800a872:	2301      	movs	r3, #1
 800a874:	e7f0      	b.n	800a858 <_vfiprintf_r+0x1b8>
 800a876:	ab03      	add	r3, sp, #12
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	462a      	mov	r2, r5
 800a87c:	4b12      	ldr	r3, [pc, #72]	@ (800a8c8 <_vfiprintf_r+0x228>)
 800a87e:	a904      	add	r1, sp, #16
 800a880:	4630      	mov	r0, r6
 800a882:	f7fd fee9 	bl	8008658 <_printf_float>
 800a886:	4607      	mov	r7, r0
 800a888:	1c78      	adds	r0, r7, #1
 800a88a:	d1d6      	bne.n	800a83a <_vfiprintf_r+0x19a>
 800a88c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a88e:	07d9      	lsls	r1, r3, #31
 800a890:	d405      	bmi.n	800a89e <_vfiprintf_r+0x1fe>
 800a892:	89ab      	ldrh	r3, [r5, #12]
 800a894:	059a      	lsls	r2, r3, #22
 800a896:	d402      	bmi.n	800a89e <_vfiprintf_r+0x1fe>
 800a898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a89a:	f7fe fd1d 	bl	80092d8 <__retarget_lock_release_recursive>
 800a89e:	89ab      	ldrh	r3, [r5, #12]
 800a8a0:	065b      	lsls	r3, r3, #25
 800a8a2:	f53f af1f 	bmi.w	800a6e4 <_vfiprintf_r+0x44>
 800a8a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8a8:	e71e      	b.n	800a6e8 <_vfiprintf_r+0x48>
 800a8aa:	ab03      	add	r3, sp, #12
 800a8ac:	9300      	str	r3, [sp, #0]
 800a8ae:	462a      	mov	r2, r5
 800a8b0:	4b05      	ldr	r3, [pc, #20]	@ (800a8c8 <_vfiprintf_r+0x228>)
 800a8b2:	a904      	add	r1, sp, #16
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	f7fe f957 	bl	8008b68 <_printf_i>
 800a8ba:	e7e4      	b.n	800a886 <_vfiprintf_r+0x1e6>
 800a8bc:	0800b100 	.word	0x0800b100
 800a8c0:	0800b10a 	.word	0x0800b10a
 800a8c4:	08008659 	.word	0x08008659
 800a8c8:	0800a67b 	.word	0x0800a67b
 800a8cc:	0800b106 	.word	0x0800b106

0800a8d0 <__sflush_r>:
 800a8d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d8:	0716      	lsls	r6, r2, #28
 800a8da:	4605      	mov	r5, r0
 800a8dc:	460c      	mov	r4, r1
 800a8de:	d454      	bmi.n	800a98a <__sflush_r+0xba>
 800a8e0:	684b      	ldr	r3, [r1, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	dc02      	bgt.n	800a8ec <__sflush_r+0x1c>
 800a8e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	dd48      	ble.n	800a97e <__sflush_r+0xae>
 800a8ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8ee:	2e00      	cmp	r6, #0
 800a8f0:	d045      	beq.n	800a97e <__sflush_r+0xae>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8f8:	682f      	ldr	r7, [r5, #0]
 800a8fa:	6a21      	ldr	r1, [r4, #32]
 800a8fc:	602b      	str	r3, [r5, #0]
 800a8fe:	d030      	beq.n	800a962 <__sflush_r+0x92>
 800a900:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	0759      	lsls	r1, r3, #29
 800a906:	d505      	bpl.n	800a914 <__sflush_r+0x44>
 800a908:	6863      	ldr	r3, [r4, #4]
 800a90a:	1ad2      	subs	r2, r2, r3
 800a90c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a90e:	b10b      	cbz	r3, 800a914 <__sflush_r+0x44>
 800a910:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a912:	1ad2      	subs	r2, r2, r3
 800a914:	2300      	movs	r3, #0
 800a916:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a918:	6a21      	ldr	r1, [r4, #32]
 800a91a:	4628      	mov	r0, r5
 800a91c:	47b0      	blx	r6
 800a91e:	1c43      	adds	r3, r0, #1
 800a920:	89a3      	ldrh	r3, [r4, #12]
 800a922:	d106      	bne.n	800a932 <__sflush_r+0x62>
 800a924:	6829      	ldr	r1, [r5, #0]
 800a926:	291d      	cmp	r1, #29
 800a928:	d82b      	bhi.n	800a982 <__sflush_r+0xb2>
 800a92a:	4a2a      	ldr	r2, [pc, #168]	@ (800a9d4 <__sflush_r+0x104>)
 800a92c:	410a      	asrs	r2, r1
 800a92e:	07d6      	lsls	r6, r2, #31
 800a930:	d427      	bmi.n	800a982 <__sflush_r+0xb2>
 800a932:	2200      	movs	r2, #0
 800a934:	6062      	str	r2, [r4, #4]
 800a936:	04d9      	lsls	r1, r3, #19
 800a938:	6922      	ldr	r2, [r4, #16]
 800a93a:	6022      	str	r2, [r4, #0]
 800a93c:	d504      	bpl.n	800a948 <__sflush_r+0x78>
 800a93e:	1c42      	adds	r2, r0, #1
 800a940:	d101      	bne.n	800a946 <__sflush_r+0x76>
 800a942:	682b      	ldr	r3, [r5, #0]
 800a944:	b903      	cbnz	r3, 800a948 <__sflush_r+0x78>
 800a946:	6560      	str	r0, [r4, #84]	@ 0x54
 800a948:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a94a:	602f      	str	r7, [r5, #0]
 800a94c:	b1b9      	cbz	r1, 800a97e <__sflush_r+0xae>
 800a94e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a952:	4299      	cmp	r1, r3
 800a954:	d002      	beq.n	800a95c <__sflush_r+0x8c>
 800a956:	4628      	mov	r0, r5
 800a958:	f7ff faac 	bl	8009eb4 <_free_r>
 800a95c:	2300      	movs	r3, #0
 800a95e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a960:	e00d      	b.n	800a97e <__sflush_r+0xae>
 800a962:	2301      	movs	r3, #1
 800a964:	4628      	mov	r0, r5
 800a966:	47b0      	blx	r6
 800a968:	4602      	mov	r2, r0
 800a96a:	1c50      	adds	r0, r2, #1
 800a96c:	d1c9      	bne.n	800a902 <__sflush_r+0x32>
 800a96e:	682b      	ldr	r3, [r5, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d0c6      	beq.n	800a902 <__sflush_r+0x32>
 800a974:	2b1d      	cmp	r3, #29
 800a976:	d001      	beq.n	800a97c <__sflush_r+0xac>
 800a978:	2b16      	cmp	r3, #22
 800a97a:	d11e      	bne.n	800a9ba <__sflush_r+0xea>
 800a97c:	602f      	str	r7, [r5, #0]
 800a97e:	2000      	movs	r0, #0
 800a980:	e022      	b.n	800a9c8 <__sflush_r+0xf8>
 800a982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a986:	b21b      	sxth	r3, r3
 800a988:	e01b      	b.n	800a9c2 <__sflush_r+0xf2>
 800a98a:	690f      	ldr	r7, [r1, #16]
 800a98c:	2f00      	cmp	r7, #0
 800a98e:	d0f6      	beq.n	800a97e <__sflush_r+0xae>
 800a990:	0793      	lsls	r3, r2, #30
 800a992:	680e      	ldr	r6, [r1, #0]
 800a994:	bf08      	it	eq
 800a996:	694b      	ldreq	r3, [r1, #20]
 800a998:	600f      	str	r7, [r1, #0]
 800a99a:	bf18      	it	ne
 800a99c:	2300      	movne	r3, #0
 800a99e:	eba6 0807 	sub.w	r8, r6, r7
 800a9a2:	608b      	str	r3, [r1, #8]
 800a9a4:	f1b8 0f00 	cmp.w	r8, #0
 800a9a8:	dde9      	ble.n	800a97e <__sflush_r+0xae>
 800a9aa:	6a21      	ldr	r1, [r4, #32]
 800a9ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a9ae:	4643      	mov	r3, r8
 800a9b0:	463a      	mov	r2, r7
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	47b0      	blx	r6
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	dc08      	bgt.n	800a9cc <__sflush_r+0xfc>
 800a9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9c2:	81a3      	strh	r3, [r4, #12]
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9cc:	4407      	add	r7, r0
 800a9ce:	eba8 0800 	sub.w	r8, r8, r0
 800a9d2:	e7e7      	b.n	800a9a4 <__sflush_r+0xd4>
 800a9d4:	dfbffffe 	.word	0xdfbffffe

0800a9d8 <_fflush_r>:
 800a9d8:	b538      	push	{r3, r4, r5, lr}
 800a9da:	690b      	ldr	r3, [r1, #16]
 800a9dc:	4605      	mov	r5, r0
 800a9de:	460c      	mov	r4, r1
 800a9e0:	b913      	cbnz	r3, 800a9e8 <_fflush_r+0x10>
 800a9e2:	2500      	movs	r5, #0
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	b118      	cbz	r0, 800a9f2 <_fflush_r+0x1a>
 800a9ea:	6a03      	ldr	r3, [r0, #32]
 800a9ec:	b90b      	cbnz	r3, 800a9f2 <_fflush_r+0x1a>
 800a9ee:	f7fe fa67 	bl	8008ec0 <__sinit>
 800a9f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d0f3      	beq.n	800a9e2 <_fflush_r+0xa>
 800a9fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9fc:	07d0      	lsls	r0, r2, #31
 800a9fe:	d404      	bmi.n	800aa0a <_fflush_r+0x32>
 800aa00:	0599      	lsls	r1, r3, #22
 800aa02:	d402      	bmi.n	800aa0a <_fflush_r+0x32>
 800aa04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa06:	f7fe fc66 	bl	80092d6 <__retarget_lock_acquire_recursive>
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	f7ff ff5f 	bl	800a8d0 <__sflush_r>
 800aa12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa14:	07da      	lsls	r2, r3, #31
 800aa16:	4605      	mov	r5, r0
 800aa18:	d4e4      	bmi.n	800a9e4 <_fflush_r+0xc>
 800aa1a:	89a3      	ldrh	r3, [r4, #12]
 800aa1c:	059b      	lsls	r3, r3, #22
 800aa1e:	d4e1      	bmi.n	800a9e4 <_fflush_r+0xc>
 800aa20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa22:	f7fe fc59 	bl	80092d8 <__retarget_lock_release_recursive>
 800aa26:	e7dd      	b.n	800a9e4 <_fflush_r+0xc>

0800aa28 <__swhatbuf_r>:
 800aa28:	b570      	push	{r4, r5, r6, lr}
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa30:	2900      	cmp	r1, #0
 800aa32:	b096      	sub	sp, #88	@ 0x58
 800aa34:	4615      	mov	r5, r2
 800aa36:	461e      	mov	r6, r3
 800aa38:	da0d      	bge.n	800aa56 <__swhatbuf_r+0x2e>
 800aa3a:	89a3      	ldrh	r3, [r4, #12]
 800aa3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aa40:	f04f 0100 	mov.w	r1, #0
 800aa44:	bf14      	ite	ne
 800aa46:	2340      	movne	r3, #64	@ 0x40
 800aa48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	6031      	str	r1, [r6, #0]
 800aa50:	602b      	str	r3, [r5, #0]
 800aa52:	b016      	add	sp, #88	@ 0x58
 800aa54:	bd70      	pop	{r4, r5, r6, pc}
 800aa56:	466a      	mov	r2, sp
 800aa58:	f000 f848 	bl	800aaec <_fstat_r>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	dbec      	blt.n	800aa3a <__swhatbuf_r+0x12>
 800aa60:	9901      	ldr	r1, [sp, #4]
 800aa62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa6a:	4259      	negs	r1, r3
 800aa6c:	4159      	adcs	r1, r3
 800aa6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa72:	e7eb      	b.n	800aa4c <__swhatbuf_r+0x24>

0800aa74 <__smakebuf_r>:
 800aa74:	898b      	ldrh	r3, [r1, #12]
 800aa76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa78:	079d      	lsls	r5, r3, #30
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	460c      	mov	r4, r1
 800aa7e:	d507      	bpl.n	800aa90 <__smakebuf_r+0x1c>
 800aa80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	6123      	str	r3, [r4, #16]
 800aa88:	2301      	movs	r3, #1
 800aa8a:	6163      	str	r3, [r4, #20]
 800aa8c:	b003      	add	sp, #12
 800aa8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa90:	ab01      	add	r3, sp, #4
 800aa92:	466a      	mov	r2, sp
 800aa94:	f7ff ffc8 	bl	800aa28 <__swhatbuf_r>
 800aa98:	9f00      	ldr	r7, [sp, #0]
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	4639      	mov	r1, r7
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	f7fd fcc0 	bl	8008424 <_malloc_r>
 800aaa4:	b948      	cbnz	r0, 800aaba <__smakebuf_r+0x46>
 800aaa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaaa:	059a      	lsls	r2, r3, #22
 800aaac:	d4ee      	bmi.n	800aa8c <__smakebuf_r+0x18>
 800aaae:	f023 0303 	bic.w	r3, r3, #3
 800aab2:	f043 0302 	orr.w	r3, r3, #2
 800aab6:	81a3      	strh	r3, [r4, #12]
 800aab8:	e7e2      	b.n	800aa80 <__smakebuf_r+0xc>
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	6020      	str	r0, [r4, #0]
 800aabe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aac2:	81a3      	strh	r3, [r4, #12]
 800aac4:	9b01      	ldr	r3, [sp, #4]
 800aac6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aaca:	b15b      	cbz	r3, 800aae4 <__smakebuf_r+0x70>
 800aacc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aad0:	4630      	mov	r0, r6
 800aad2:	f000 f81d 	bl	800ab10 <_isatty_r>
 800aad6:	b128      	cbz	r0, 800aae4 <__smakebuf_r+0x70>
 800aad8:	89a3      	ldrh	r3, [r4, #12]
 800aada:	f023 0303 	bic.w	r3, r3, #3
 800aade:	f043 0301 	orr.w	r3, r3, #1
 800aae2:	81a3      	strh	r3, [r4, #12]
 800aae4:	89a3      	ldrh	r3, [r4, #12]
 800aae6:	431d      	orrs	r5, r3
 800aae8:	81a5      	strh	r5, [r4, #12]
 800aaea:	e7cf      	b.n	800aa8c <__smakebuf_r+0x18>

0800aaec <_fstat_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	4d07      	ldr	r5, [pc, #28]	@ (800ab0c <_fstat_r+0x20>)
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	4608      	mov	r0, r1
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	602b      	str	r3, [r5, #0]
 800aafa:	f7f7 fdda 	bl	80026b2 <_fstat>
 800aafe:	1c43      	adds	r3, r0, #1
 800ab00:	d102      	bne.n	800ab08 <_fstat_r+0x1c>
 800ab02:	682b      	ldr	r3, [r5, #0]
 800ab04:	b103      	cbz	r3, 800ab08 <_fstat_r+0x1c>
 800ab06:	6023      	str	r3, [r4, #0]
 800ab08:	bd38      	pop	{r3, r4, r5, pc}
 800ab0a:	bf00      	nop
 800ab0c:	240009f4 	.word	0x240009f4

0800ab10 <_isatty_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4d06      	ldr	r5, [pc, #24]	@ (800ab2c <_isatty_r+0x1c>)
 800ab14:	2300      	movs	r3, #0
 800ab16:	4604      	mov	r4, r0
 800ab18:	4608      	mov	r0, r1
 800ab1a:	602b      	str	r3, [r5, #0]
 800ab1c:	f7f7 fdd9 	bl	80026d2 <_isatty>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d102      	bne.n	800ab2a <_isatty_r+0x1a>
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	b103      	cbz	r3, 800ab2a <_isatty_r+0x1a>
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	240009f4 	.word	0x240009f4

0800ab30 <__assert_func>:
 800ab30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab32:	4614      	mov	r4, r2
 800ab34:	461a      	mov	r2, r3
 800ab36:	4b09      	ldr	r3, [pc, #36]	@ (800ab5c <__assert_func+0x2c>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4605      	mov	r5, r0
 800ab3c:	68d8      	ldr	r0, [r3, #12]
 800ab3e:	b954      	cbnz	r4, 800ab56 <__assert_func+0x26>
 800ab40:	4b07      	ldr	r3, [pc, #28]	@ (800ab60 <__assert_func+0x30>)
 800ab42:	461c      	mov	r4, r3
 800ab44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab48:	9100      	str	r1, [sp, #0]
 800ab4a:	462b      	mov	r3, r5
 800ab4c:	4905      	ldr	r1, [pc, #20]	@ (800ab64 <__assert_func+0x34>)
 800ab4e:	f000 f841 	bl	800abd4 <fiprintf>
 800ab52:	f000 f851 	bl	800abf8 <abort>
 800ab56:	4b04      	ldr	r3, [pc, #16]	@ (800ab68 <__assert_func+0x38>)
 800ab58:	e7f4      	b.n	800ab44 <__assert_func+0x14>
 800ab5a:	bf00      	nop
 800ab5c:	2400001c 	.word	0x2400001c
 800ab60:	0800b156 	.word	0x0800b156
 800ab64:	0800b128 	.word	0x0800b128
 800ab68:	0800b11b 	.word	0x0800b11b

0800ab6c <_calloc_r>:
 800ab6c:	b570      	push	{r4, r5, r6, lr}
 800ab6e:	fba1 5402 	umull	r5, r4, r1, r2
 800ab72:	b93c      	cbnz	r4, 800ab84 <_calloc_r+0x18>
 800ab74:	4629      	mov	r1, r5
 800ab76:	f7fd fc55 	bl	8008424 <_malloc_r>
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	b928      	cbnz	r0, 800ab8a <_calloc_r+0x1e>
 800ab7e:	2600      	movs	r6, #0
 800ab80:	4630      	mov	r0, r6
 800ab82:	bd70      	pop	{r4, r5, r6, pc}
 800ab84:	220c      	movs	r2, #12
 800ab86:	6002      	str	r2, [r0, #0]
 800ab88:	e7f9      	b.n	800ab7e <_calloc_r+0x12>
 800ab8a:	462a      	mov	r2, r5
 800ab8c:	4621      	mov	r1, r4
 800ab8e:	f7fe fb15 	bl	80091bc <memset>
 800ab92:	e7f5      	b.n	800ab80 <_calloc_r+0x14>

0800ab94 <__ascii_mbtowc>:
 800ab94:	b082      	sub	sp, #8
 800ab96:	b901      	cbnz	r1, 800ab9a <__ascii_mbtowc+0x6>
 800ab98:	a901      	add	r1, sp, #4
 800ab9a:	b142      	cbz	r2, 800abae <__ascii_mbtowc+0x1a>
 800ab9c:	b14b      	cbz	r3, 800abb2 <__ascii_mbtowc+0x1e>
 800ab9e:	7813      	ldrb	r3, [r2, #0]
 800aba0:	600b      	str	r3, [r1, #0]
 800aba2:	7812      	ldrb	r2, [r2, #0]
 800aba4:	1e10      	subs	r0, r2, #0
 800aba6:	bf18      	it	ne
 800aba8:	2001      	movne	r0, #1
 800abaa:	b002      	add	sp, #8
 800abac:	4770      	bx	lr
 800abae:	4610      	mov	r0, r2
 800abb0:	e7fb      	b.n	800abaa <__ascii_mbtowc+0x16>
 800abb2:	f06f 0001 	mvn.w	r0, #1
 800abb6:	e7f8      	b.n	800abaa <__ascii_mbtowc+0x16>

0800abb8 <__ascii_wctomb>:
 800abb8:	4603      	mov	r3, r0
 800abba:	4608      	mov	r0, r1
 800abbc:	b141      	cbz	r1, 800abd0 <__ascii_wctomb+0x18>
 800abbe:	2aff      	cmp	r2, #255	@ 0xff
 800abc0:	d904      	bls.n	800abcc <__ascii_wctomb+0x14>
 800abc2:	228a      	movs	r2, #138	@ 0x8a
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abca:	4770      	bx	lr
 800abcc:	700a      	strb	r2, [r1, #0]
 800abce:	2001      	movs	r0, #1
 800abd0:	4770      	bx	lr
	...

0800abd4 <fiprintf>:
 800abd4:	b40e      	push	{r1, r2, r3}
 800abd6:	b503      	push	{r0, r1, lr}
 800abd8:	4601      	mov	r1, r0
 800abda:	ab03      	add	r3, sp, #12
 800abdc:	4805      	ldr	r0, [pc, #20]	@ (800abf4 <fiprintf+0x20>)
 800abde:	f853 2b04 	ldr.w	r2, [r3], #4
 800abe2:	6800      	ldr	r0, [r0, #0]
 800abe4:	9301      	str	r3, [sp, #4]
 800abe6:	f7ff fd5b 	bl	800a6a0 <_vfiprintf_r>
 800abea:	b002      	add	sp, #8
 800abec:	f85d eb04 	ldr.w	lr, [sp], #4
 800abf0:	b003      	add	sp, #12
 800abf2:	4770      	bx	lr
 800abf4:	2400001c 	.word	0x2400001c

0800abf8 <abort>:
 800abf8:	b508      	push	{r3, lr}
 800abfa:	2006      	movs	r0, #6
 800abfc:	f000 f82c 	bl	800ac58 <raise>
 800ac00:	2001      	movs	r0, #1
 800ac02:	f7f7 fd06 	bl	8002612 <_exit>

0800ac06 <_raise_r>:
 800ac06:	291f      	cmp	r1, #31
 800ac08:	b538      	push	{r3, r4, r5, lr}
 800ac0a:	4605      	mov	r5, r0
 800ac0c:	460c      	mov	r4, r1
 800ac0e:	d904      	bls.n	800ac1a <_raise_r+0x14>
 800ac10:	2316      	movs	r3, #22
 800ac12:	6003      	str	r3, [r0, #0]
 800ac14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac18:	bd38      	pop	{r3, r4, r5, pc}
 800ac1a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ac1c:	b112      	cbz	r2, 800ac24 <_raise_r+0x1e>
 800ac1e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac22:	b94b      	cbnz	r3, 800ac38 <_raise_r+0x32>
 800ac24:	4628      	mov	r0, r5
 800ac26:	f000 f831 	bl	800ac8c <_getpid_r>
 800ac2a:	4622      	mov	r2, r4
 800ac2c:	4601      	mov	r1, r0
 800ac2e:	4628      	mov	r0, r5
 800ac30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac34:	f000 b818 	b.w	800ac68 <_kill_r>
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d00a      	beq.n	800ac52 <_raise_r+0x4c>
 800ac3c:	1c59      	adds	r1, r3, #1
 800ac3e:	d103      	bne.n	800ac48 <_raise_r+0x42>
 800ac40:	2316      	movs	r3, #22
 800ac42:	6003      	str	r3, [r0, #0]
 800ac44:	2001      	movs	r0, #1
 800ac46:	e7e7      	b.n	800ac18 <_raise_r+0x12>
 800ac48:	2100      	movs	r1, #0
 800ac4a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ac4e:	4620      	mov	r0, r4
 800ac50:	4798      	blx	r3
 800ac52:	2000      	movs	r0, #0
 800ac54:	e7e0      	b.n	800ac18 <_raise_r+0x12>
	...

0800ac58 <raise>:
 800ac58:	4b02      	ldr	r3, [pc, #8]	@ (800ac64 <raise+0xc>)
 800ac5a:	4601      	mov	r1, r0
 800ac5c:	6818      	ldr	r0, [r3, #0]
 800ac5e:	f7ff bfd2 	b.w	800ac06 <_raise_r>
 800ac62:	bf00      	nop
 800ac64:	2400001c 	.word	0x2400001c

0800ac68 <_kill_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	4d07      	ldr	r5, [pc, #28]	@ (800ac88 <_kill_r+0x20>)
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	4604      	mov	r4, r0
 800ac70:	4608      	mov	r0, r1
 800ac72:	4611      	mov	r1, r2
 800ac74:	602b      	str	r3, [r5, #0]
 800ac76:	f7f7 fcbc 	bl	80025f2 <_kill>
 800ac7a:	1c43      	adds	r3, r0, #1
 800ac7c:	d102      	bne.n	800ac84 <_kill_r+0x1c>
 800ac7e:	682b      	ldr	r3, [r5, #0]
 800ac80:	b103      	cbz	r3, 800ac84 <_kill_r+0x1c>
 800ac82:	6023      	str	r3, [r4, #0]
 800ac84:	bd38      	pop	{r3, r4, r5, pc}
 800ac86:	bf00      	nop
 800ac88:	240009f4 	.word	0x240009f4

0800ac8c <_getpid_r>:
 800ac8c:	f7f7 bca9 	b.w	80025e2 <_getpid>

0800ac90 <_init>:
 800ac90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac92:	bf00      	nop
 800ac94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac96:	bc08      	pop	{r3}
 800ac98:	469e      	mov	lr, r3
 800ac9a:	4770      	bx	lr

0800ac9c <_fini>:
 800ac9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9e:	bf00      	nop
 800aca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca2:	bc08      	pop	{r3}
 800aca4:	469e      	mov	lr, r3
 800aca6:	4770      	bx	lr
