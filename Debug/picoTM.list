
picoTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bed8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  0800c178  0800c178  0000d178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ca08  0800ca08  0000da08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ca10  0800ca10  0000da10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ca14  0800ca14  0000da14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000220  24000000  0800ca18  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000844  24000220  0800cc38  0000e220  2**3
                  ALLOC
  8 ._user_heap_stack 00001d04  24000a64  0800cc38  0000ea64  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e220  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d9be  00000000  00000000  0000e24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000340f  00000000  00000000  0002bc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012b0  00000000  00000000  0002f020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e6f  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a17c  00000000  00000000  0003113f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018f9b  00000000  00000000  0006b2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001633f0  00000000  00000000  00084256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e7646  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005cf8  00000000  00000000  001e768c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001ed384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000220 	.word	0x24000220
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c160 	.word	0x0800c160

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000224 	.word	0x24000224
 80002dc:	0800c160 	.word	0x0800c160

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <apds9250_init>:
//extern IC3Daemon ic3;

char colors[4][4] = {"IR", "GRN", "RED", "BLU"};

bool apds9250_init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
	// Check Device ID
	if(!apds9250_get_part_id()) {
 8000686:	f000 f8e3 	bl	8000850 <apds9250_get_part_id>
 800068a:	4603      	mov	r3, r0
 800068c:	f083 0301 	eor.w	r3, r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <apds9250_init+0x1a>
		return false;
 8000696:	2300      	movs	r3, #0
 8000698:	e069      	b.n	800076e <apds9250_init+0xee>
	}
  
	// Read MAIN_STATUS Register to clear Power-On Status
	apds9250_get_main_status();
 800069a:	f000 f903 	bl	80008a4 <apds9250_get_main_status>
	
	// Note: These are set to default for now
	// Set Resolution/Bit Width and Meausrement Rate
  apds9250_set_meas_rate(BIT18_100MS, RATE_100MS);
 800069e:	2102      	movs	r1, #2
 80006a0:	2002      	movs	r0, #2
 80006a2:	f000 f89b 	bl	80007dc <apds9250_set_meas_rate>

	
	// Set Gain Range
  apds9250_set_gain(GAIN1);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f8ba 	bl	8000820 <apds9250_set_gain>

	// Select Threshold Interrupt Mode
  if(ic3.light_sensor_int_mode > LIGHT_INT_DISABLED) {
 80006ac:	4b32      	ldr	r3, [pc, #200]	@ (8000778 <apds9250_init+0xf8>)
 80006ae:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d052      	beq.n	800075c <apds9250_init+0xdc>
    //L_INFO("Light sensor interrupt enabled. Setting configurations for interrupt...");
    
    // Set Interrupt
    apds9250_set_int_en(LS_INT_ENABLED);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 f9c8 	bl	8000a4c <apds9250_set_int_en>
    
    // Configure GPIO for external interrupt
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80006bc:	4b2f      	ldr	r3, [pc, #188]	@ (800077c <apds9250_init+0xfc>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c2:	4a2e      	ldr	r2, [pc, #184]	@ (800077c <apds9250_init+0xfc>)
 80006c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006cc:	4b2b      	ldr	r3, [pc, #172]	@ (800077c <apds9250_init+0xfc>)
 80006ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = APDS9250_INT_PIN;
 80006e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ec:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006f2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(APDS9250_INT_PORT, &GPIO_InitStruct);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	4820      	ldr	r0, [pc, #128]	@ (8000780 <apds9250_init+0x100>)
 80006fe:	f002 ff47 	bl	8003590 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(APDS9250_EXTI_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2017      	movs	r0, #23
 8000708:	f002 fe95 	bl	8003436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(APDS9250_EXTI_IRQn);
 800070c:	2017      	movs	r0, #23
 800070e:	f002 feac 	bl	800346a <HAL_NVIC_EnableIRQ>
    
    // Select Red Channels for Interrupt
    //L_INFO("Setting light sensor interrupt channel to %s", colors[ic3.light_sensor_int_ch]);
    apds9250_set_int_sel(ic3.light_sensor_int_ch);
 8000712:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <apds9250_init+0xf8>)
 8000714:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f933 	bl	8000984 <apds9250_set_int_sel>
    
    if(ic3.light_sensor_int_mode == LIGHT_INT_VARIANCE) {
 800071e:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <apds9250_init+0xf8>)
 8000720:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8000724:	2b02      	cmp	r3, #2
 8000726:	d10a      	bne.n	800073e <apds9250_init+0xbe>
      //L_INFO("Light sensor interrupt set to variance mode.");
      
      // Set interrupt to variance mode
      apds9250_set_var_mode(LS_VAR_INT_MODE);
 8000728:	2001      	movs	r0, #1
 800072a:	f000 f95d 	bl	80009e8 <apds9250_set_var_mode>
      
      // Set variance threshold
      apds9250_set_ls_thres_var(ic3.light_sensor_var_thres);
 800072e:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <apds9250_init+0xf8>)
 8000730:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8000734:	b2db      	uxtb	r3, r3
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fa02 	bl	8000b40 <apds9250_set_ls_thres_var>
 800073c:	e00e      	b.n	800075c <apds9250_init+0xdc>
      
    } else {
      //L_INFO("Light sensor interrupt set to threshold mode.");
      
      // Set interrupt to threshold mode
      apds9250_set_var_mode(LS_THRES_INT_MODE);
 800073e:	2000      	movs	r0, #0
 8000740:	f000 f952 	bl	80009e8 <apds9250_set_var_mode>
	
      // Set Upper Threshold
      apds9250_set_ls_thres_up(ic3.light_sensor_upper_thres);
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <apds9250_init+0xf8>)
 8000746:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f9b0 	bl	8000ab0 <apds9250_set_ls_thres_up>
    
      // Set Lower Threshold
      apds9250_set_ls_thres_low(ic3.light_sensor_lower_thres);
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <apds9250_init+0xf8>)
 8000752:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f9ce 	bl	8000af8 <apds9250_set_ls_thres_low>
    }
  }
  
	// Set CS Mode to RGB and enable Light Sensor
  apds9250_set_main_ctrl(0, ALL_RGB_IR_COMP_ACTIVATED, LS_ACTIVE);
 800075c:	2201      	movs	r2, #1
 800075e:	2101      	movs	r1, #1
 8000760:	2000      	movs	r0, #0
 8000762:	f000 f811 	bl	8000788 <apds9250_set_main_ctrl>

	printf("Light Sensor initialization completed\r\n");
 8000766:	4807      	ldr	r0, [pc, #28]	@ (8000784 <apds9250_init+0x104>)
 8000768:	f009 feb0 	bl	800a4cc <puts>
	return true;
 800076c:	2301      	movs	r3, #1
}
 800076e:	4618      	mov	r0, r3
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	24000260 	.word	0x24000260
 800077c:	58024400 	.word	0x58024400
 8000780:	58022000 	.word	0x58022000
 8000784:	0800c178 	.word	0x0800c178

08000788 <apds9250_set_main_ctrl>:

/********************************************************
 * MAIN_CTRL
 ********************************************************/
void apds9250_set_main_ctrl(bool sw_reset, bool cs_mode, bool ls_en)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af02      	add	r7, sp, #8
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
 8000792:	460b      	mov	r3, r1
 8000794:	71bb      	strb	r3, [r7, #6]
 8000796:	4613      	mov	r3, r2
 8000798:	717b      	strb	r3, [r7, #5]
  uint8_t main_ctrl = ((uint8_t)sw_reset<<4) + ((uint8_t)cs_mode<<2) + ((uint8_t)ls_en<<1);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	011b      	lsls	r3, r3, #4
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	4413      	add	r3, r2
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	797b      	ldrb	r3, [r7, #5]
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4413      	add	r3, r2
 80007b2:	73fb      	strb	r3, [r7, #15]
	uint8_t wData[2] = {APDS9250_MAIN_CTRL_ADDR, main_ctrl};
 80007b4:	2300      	movs	r3, #0
 80007b6:	733b      	strb	r3, [r7, #12]
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	737b      	strb	r3, [r7, #13]
  
	//L_DEBUG("main_ctrl = %02X", wData[1]);
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 2, 100);
 80007bc:	f107 020c 	add.w	r2, r7, #12
 80007c0:	2364      	movs	r3, #100	@ 0x64
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2302      	movs	r3, #2
 80007c6:	21a4      	movs	r1, #164	@ 0xa4
 80007c8:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <apds9250_set_main_ctrl+0x50>)
 80007ca:	f003 fa51 	bl	8003c70 <HAL_I2C_Master_Transmit>
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	240005f0 	.word	0x240005f0

080007dc <apds9250_set_meas_rate>:

/********************************************************
 * MEAS_RATE
 ********************************************************/
void apds9250_set_meas_rate(uint8_t resolution, uint8_t rate)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af02      	add	r7, sp, #8
 80007e2:	4603      	mov	r3, r0
 80007e4:	460a      	mov	r2, r1
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	4613      	mov	r3, r2
 80007ea:	71bb      	strb	r3, [r7, #6]
  uint8_t meas_rate = (resolution<<4) + rate;
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	011b      	lsls	r3, r3, #4
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	79bb      	ldrb	r3, [r7, #6]
 80007f4:	4413      	add	r3, r2
 80007f6:	73fb      	strb	r3, [r7, #15]
	uint8_t wData[2] = {APDS9250_LS_MEAS_RATE_ADDR, meas_rate};
 80007f8:	2304      	movs	r3, #4
 80007fa:	733b      	strb	r3, [r7, #12]
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	737b      	strb	r3, [r7, #13]
  
	//L_DEBUG("main_ctrl = %02X", wData[1]);
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 2, 100);
 8000800:	f107 020c 	add.w	r2, r7, #12
 8000804:	2364      	movs	r3, #100	@ 0x64
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	21a4      	movs	r1, #164	@ 0xa4
 800080c:	4803      	ldr	r0, [pc, #12]	@ (800081c <apds9250_set_meas_rate+0x40>)
 800080e:	f003 fa2f 	bl	8003c70 <HAL_I2C_Master_Transmit>
}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	240005f0 	.word	0x240005f0

08000820 <apds9250_set_gain>:

/********************************************************
 * GAIN
 ********************************************************/
void apds9250_set_gain(uint8_t gain)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af02      	add	r7, sp, #8
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	uint8_t wData[2] = {APDS9250_LS_GAIN_ADDR, gain};
 800082a:	2305      	movs	r3, #5
 800082c:	733b      	strb	r3, [r7, #12]
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	737b      	strb	r3, [r7, #13]
  
	//L_DEBUG("main_ctrl = %02X", wData[1]);
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 2, 100);
 8000832:	f107 020c 	add.w	r2, r7, #12
 8000836:	2364      	movs	r3, #100	@ 0x64
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2302      	movs	r3, #2
 800083c:	21a4      	movs	r1, #164	@ 0xa4
 800083e:	4803      	ldr	r0, [pc, #12]	@ (800084c <apds9250_set_gain+0x2c>)
 8000840:	f003 fa16 	bl	8003c70 <HAL_I2C_Master_Transmit>
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	240005f0 	.word	0x240005f0

08000850 <apds9250_get_part_id>:

/********************************************************
 * PART_ID (Read Only)
 ********************************************************/
bool apds9250_get_part_id(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af04      	add	r7, sp, #16
	uint8_t reg;
	if(HAL_I2C_IsDeviceReady(&apds9250_i2c, APDS9250_I2C_ADDR, 2, 0xFFFF) != HAL_OK) {
 8000856:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800085a:	2202      	movs	r2, #2
 800085c:	21a4      	movs	r1, #164	@ 0xa4
 800085e:	4810      	ldr	r0, [pc, #64]	@ (80008a0 <apds9250_get_part_id+0x50>)
 8000860:	f003 fd2e 	bl	80042c0 <HAL_I2C_IsDeviceReady>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <apds9250_get_part_id+0x1e>
		//L_DEBUG("Light Sensor Reading Part ID ERROR");
		return false;
 800086a:	2300      	movs	r3, #0
 800086c:	e013      	b.n	8000896 <apds9250_get_part_id+0x46>
	} else {
		HAL_I2C_Mem_Read(&apds9250_i2c, APDS9250_I2C_ADDR, APDS9250_PART_ID_ADDR, 1, &reg, 1, 100);
 800086e:	2364      	movs	r3, #100	@ 0x64
 8000870:	9302      	str	r3, [sp, #8]
 8000872:	2301      	movs	r3, #1
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2301      	movs	r3, #1
 800087c:	2206      	movs	r2, #6
 800087e:	21a4      	movs	r1, #164	@ 0xa4
 8000880:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <apds9250_get_part_id+0x50>)
 8000882:	f003 fc03 	bl	800408c <HAL_I2C_Mem_Read>
		if((reg & 0xF0) == APDS9250_PART_ID) {
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800088c:	2bb0      	cmp	r3, #176	@ 0xb0
 800088e:	d101      	bne.n	8000894 <apds9250_get_part_id+0x44>
//			//L_DEBUG("APDS9250 Part ID = %X (valid)", reg);
			return true;
 8000890:	2301      	movs	r3, #1
 8000892:	e000      	b.n	8000896 <apds9250_get_part_id+0x46>
		} else {
			//L_DEBUG("APDS9250 Part ID = %X (invalid)", reg);
			return false;
 8000894:	2300      	movs	r3, #0
		}
	}
	
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	240005f0 	.word	0x240005f0

080008a4 <apds9250_get_main_status>:
 * MAIN_STATUS (Read Only)
 * Note read the register after it is powered on to clear the power-on status
 * If power-on status is HIGH after it has been cleared, there is a power supply disturbance
 ********************************************************/
uint8_t apds9250_get_main_status(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af04      	add	r7, sp, #16
	uint8_t reg;
	
	// Read MAIN_STATUS register
	HAL_I2C_Mem_Read(&apds9250_i2c, APDS9250_I2C_ADDR, APDS9250_MAIN_STATUS_ADDR, 1, &reg, 1, 100);
 80008aa:	2364      	movs	r3, #100	@ 0x64
 80008ac:	9302      	str	r3, [sp, #8]
 80008ae:	2301      	movs	r3, #1
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2301      	movs	r3, #1
 80008b8:	2207      	movs	r2, #7
 80008ba:	21a4      	movs	r1, #164	@ 0xa4
 80008bc:	4803      	ldr	r0, [pc, #12]	@ (80008cc <apds9250_get_main_status+0x28>)
 80008be:	f003 fbe5 	bl	800408c <HAL_I2C_Mem_Read>
	return reg;
 80008c2:	79fb      	ldrb	r3, [r7, #7]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	240005f0 	.word	0x240005f0

080008d0 <apds9250_get_rgb>:
/********************************************************
 * LS_DATA_IR/GREEN/BLUE/RED (Read Only)
 ********************************************************/
// Get all four color (ir, green, blue, red)
void apds9250_get_rgb(COT_DATA *data)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	@ 0x28
 80008d4:	af04      	add	r7, sp, #16
 80008d6:	6078      	str	r0, [r7, #4]
	uint8_t rData[12];
	
	if(HAL_I2C_IsDeviceReady(&apds9250_i2c, APDS9250_I2C_ADDR, 2, 0xFFFF) != HAL_OK) {
 80008d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008dc:	2202      	movs	r2, #2
 80008de:	21a4      	movs	r1, #164	@ 0xa4
 80008e0:	4827      	ldr	r0, [pc, #156]	@ (8000980 <apds9250_get_rgb+0xb0>)
 80008e2:	f003 fced 	bl	80042c0 <HAL_I2C_IsDeviceReady>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d010      	beq.n	800090e <apds9250_get_rgb+0x3e>
		data->light.ir = 0;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
		data->light.green = 0;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
		data->light.blue = 0;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
		data->light.red = 0;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
		data->light.green	= ((uint32_t)rData[5]<<16) + ((uint32_t)rData[4]<<8) + (uint32_t)rData[3];
		data->light.blue	= ((uint32_t)rData[8]<<16) + ((uint32_t)rData[7]<<8) + (uint32_t)rData[6];
		data->light.red		= ((uint32_t)rData[11]<<16) + ((uint32_t)rData[10]<<8) + (uint32_t)rData[9];
	}
//	//L_DEBUG("IR-RGB = [%d, %d, %d, %d]", data->light.ir, data->light.green, data->light.blue, data->light.red);
}
 800090c:	e034      	b.n	8000978 <apds9250_get_rgb+0xa8>
		HAL_I2C_Mem_Read(&apds9250_i2c, APDS9250_I2C_ADDR, APDS9250_LS_DATA_IR_0_ADDR, 1, rData, 12, 100);
 800090e:	2364      	movs	r3, #100	@ 0x64
 8000910:	9302      	str	r3, [sp, #8]
 8000912:	230c      	movs	r3, #12
 8000914:	9301      	str	r3, [sp, #4]
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2301      	movs	r3, #1
 800091e:	220a      	movs	r2, #10
 8000920:	21a4      	movs	r1, #164	@ 0xa4
 8000922:	4817      	ldr	r0, [pc, #92]	@ (8000980 <apds9250_get_rgb+0xb0>)
 8000924:	f003 fbb2 	bl	800408c <HAL_I2C_Mem_Read>
		data->light.ir		= ((uint32_t)rData[2]<<16) + ((uint32_t)rData[1]<<8) + (uint32_t)rData[0];
 8000928:	7bbb      	ldrb	r3, [r7, #14]
 800092a:	041a      	lsls	r2, r3, #16
 800092c:	7b7b      	ldrb	r3, [r7, #13]
 800092e:	021b      	lsls	r3, r3, #8
 8000930:	4413      	add	r3, r2
 8000932:	7b3a      	ldrb	r2, [r7, #12]
 8000934:	441a      	add	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
		data->light.green	= ((uint32_t)rData[5]<<16) + ((uint32_t)rData[4]<<8) + (uint32_t)rData[3];
 800093c:	7c7b      	ldrb	r3, [r7, #17]
 800093e:	041a      	lsls	r2, r3, #16
 8000940:	7c3b      	ldrb	r3, [r7, #16]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	4413      	add	r3, r2
 8000946:	7bfa      	ldrb	r2, [r7, #15]
 8000948:	441a      	add	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
		data->light.blue	= ((uint32_t)rData[8]<<16) + ((uint32_t)rData[7]<<8) + (uint32_t)rData[6];
 8000950:	7d3b      	ldrb	r3, [r7, #20]
 8000952:	041a      	lsls	r2, r3, #16
 8000954:	7cfb      	ldrb	r3, [r7, #19]
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	4413      	add	r3, r2
 800095a:	7cba      	ldrb	r2, [r7, #18]
 800095c:	441a      	add	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
		data->light.red		= ((uint32_t)rData[11]<<16) + ((uint32_t)rData[10]<<8) + (uint32_t)rData[9];
 8000964:	7dfb      	ldrb	r3, [r7, #23]
 8000966:	041a      	lsls	r2, r3, #16
 8000968:	7dbb      	ldrb	r3, [r7, #22]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	4413      	add	r3, r2
 800096e:	7d7a      	ldrb	r2, [r7, #21]
 8000970:	441a      	add	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
}
 8000978:	bf00      	nop
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	240005f0 	.word	0x240005f0

08000984 <apds9250_set_int_sel>:
	HAL_I2C_Mem_Read(&apds9250_i2c, APDS9250_I2C_ADDR, APDS9250_INT_CFG_ADDR, 1, &rData, 1, 100);
	return rData;
}

void apds9250_set_int_sel(uint8_t sel)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af04      	add	r7, sp, #16
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	uint8_t int_cfg_reg;
	uint8_t wData[2] = {APDS9250_INT_CFG_ADDR, 0};
 800098e:	2319      	movs	r3, #25
 8000990:	81bb      	strh	r3, [r7, #12]
	
	HAL_I2C_Mem_Read(&apds9250_i2c, APDS9250_I2C_ADDR, APDS9250_INT_CFG_ADDR, 1, &int_cfg_reg, 1, 100);
 8000992:	2364      	movs	r3, #100	@ 0x64
 8000994:	9302      	str	r3, [sp, #8]
 8000996:	2301      	movs	r3, #1
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	f107 030f 	add.w	r3, r7, #15
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2301      	movs	r3, #1
 80009a2:	2219      	movs	r2, #25
 80009a4:	21a4      	movs	r1, #164	@ 0xa4
 80009a6:	480f      	ldr	r0, [pc, #60]	@ (80009e4 <apds9250_set_int_sel+0x60>)
 80009a8:	f003 fb70 	bl	800408c <HAL_I2C_Mem_Read>
	int_cfg_reg = (int_cfg_reg & ~0x30) | (sel << 4);
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80009b4:	b25a      	sxtb	r2, r3
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	011b      	lsls	r3, r3, #4
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	4313      	orrs	r3, r2
 80009be:	b25b      	sxtb	r3, r3
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	73fb      	strb	r3, [r7, #15]
	wData[1] = int_cfg_reg;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 2, 100);
 80009c8:	f107 020c 	add.w	r2, r7, #12
 80009cc:	2364      	movs	r3, #100	@ 0x64
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2302      	movs	r3, #2
 80009d2:	21a4      	movs	r1, #164	@ 0xa4
 80009d4:	4803      	ldr	r0, [pc, #12]	@ (80009e4 <apds9250_set_int_sel+0x60>)
 80009d6:	f003 f94b 	bl	8003c70 <HAL_I2C_Master_Transmit>
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	240005f0 	.word	0x240005f0

080009e8 <apds9250_set_var_mode>:

void apds9250_set_var_mode(bool mode)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af04      	add	r7, sp, #16
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	uint8_t int_cfg_reg;
	uint8_t wData[2] = {APDS9250_INT_CFG_ADDR, 0};
 80009f2:	2319      	movs	r3, #25
 80009f4:	81bb      	strh	r3, [r7, #12]
	
	HAL_I2C_Mem_Read(&apds9250_i2c, APDS9250_I2C_ADDR, APDS9250_INT_CFG_ADDR, 1, &int_cfg_reg, 1, 100);
 80009f6:	2364      	movs	r3, #100	@ 0x64
 80009f8:	9302      	str	r3, [sp, #8]
 80009fa:	2301      	movs	r3, #1
 80009fc:	9301      	str	r3, [sp, #4]
 80009fe:	f107 030f 	add.w	r3, r7, #15
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	2301      	movs	r3, #1
 8000a06:	2219      	movs	r2, #25
 8000a08:	21a4      	movs	r1, #164	@ 0xa4
 8000a0a:	480f      	ldr	r0, [pc, #60]	@ (8000a48 <apds9250_set_var_mode+0x60>)
 8000a0c:	f003 fb3e 	bl	800408c <HAL_I2C_Mem_Read>
	int_cfg_reg = (int_cfg_reg & ~0x08) | (mode << 3);
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	b25b      	sxtb	r3, r3
 8000a14:	f023 0308 	bic.w	r3, r3, #8
 8000a18:	b25a      	sxtb	r2, r3
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b25b      	sxtb	r3, r3
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	73fb      	strb	r3, [r7, #15]
	wData[1] = int_cfg_reg;
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 2, 100);
 8000a2c:	f107 020c 	add.w	r2, r7, #12
 8000a30:	2364      	movs	r3, #100	@ 0x64
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2302      	movs	r3, #2
 8000a36:	21a4      	movs	r1, #164	@ 0xa4
 8000a38:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <apds9250_set_var_mode+0x60>)
 8000a3a:	f003 f919 	bl	8003c70 <HAL_I2C_Master_Transmit>
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	240005f0 	.word	0x240005f0

08000a4c <apds9250_set_int_en>:

void apds9250_set_int_en(bool en)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af04      	add	r7, sp, #16
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	uint8_t int_cfg_reg;
	uint8_t wData[2] = {APDS9250_INT_CFG_ADDR, 0};
 8000a56:	2319      	movs	r3, #25
 8000a58:	81bb      	strh	r3, [r7, #12]
	
	HAL_I2C_Mem_Read(&apds9250_i2c, APDS9250_I2C_ADDR, APDS9250_INT_CFG_ADDR, 1, &int_cfg_reg, 1, 100);
 8000a5a:	2364      	movs	r3, #100	@ 0x64
 8000a5c:	9302      	str	r3, [sp, #8]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	f107 030f 	add.w	r3, r7, #15
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	2219      	movs	r2, #25
 8000a6c:	21a4      	movs	r1, #164	@ 0xa4
 8000a6e:	480f      	ldr	r0, [pc, #60]	@ (8000aac <apds9250_set_int_en+0x60>)
 8000a70:	f003 fb0c 	bl	800408c <HAL_I2C_Mem_Read>
	int_cfg_reg = (int_cfg_reg & ~0x04) | (en << 2);
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	b25b      	sxtb	r3, r3
 8000a78:	f023 0304 	bic.w	r3, r3, #4
 8000a7c:	b25a      	sxtb	r2, r3
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	b25b      	sxtb	r3, r3
 8000a84:	4313      	orrs	r3, r2
 8000a86:	b25b      	sxtb	r3, r3
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	73fb      	strb	r3, [r7, #15]
	wData[1] = int_cfg_reg;
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 2, 100);
 8000a90:	f107 020c 	add.w	r2, r7, #12
 8000a94:	2364      	movs	r3, #100	@ 0x64
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2302      	movs	r3, #2
 8000a9a:	21a4      	movs	r1, #164	@ 0xa4
 8000a9c:	4803      	ldr	r0, [pc, #12]	@ (8000aac <apds9250_set_int_en+0x60>)
 8000a9e:	f003 f8e7 	bl	8003c70 <HAL_I2C_Master_Transmit>
}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	240005f0 	.word	0x240005f0

08000ab0 <apds9250_set_ls_thres_up>:
/********************************************************
 * LS_THRES_UP (0/1/2)
 * max 20-bits unsigned integer
 ********************************************************/
void apds9250_set_ls_thres_up(uint32_t thres)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	6078      	str	r0, [r7, #4]
	uint8_t wData[4] = {APDS9250_LS_THRES_UP_0_ADDR, thres&0xFF, (thres>>8)&0xFF, (thres>>16)&0x0F};
 8000ab8:	2321      	movs	r3, #33	@ 0x21
 8000aba:	733b      	strb	r3, [r7, #12]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	737b      	strb	r3, [r7, #13]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	73bb      	strb	r3, [r7, #14]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	0c1b      	lsrs	r3, r3, #16
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f003 030f 	and.w	r3, r3, #15
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	73fb      	strb	r3, [r7, #15]
	
	//L_DEBUG("thres_up = [%02X, %02X, %02X]", wData[3], wData[2], wData[1]);
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 4, 100);
 8000ad8:	f107 020c 	add.w	r2, r7, #12
 8000adc:	2364      	movs	r3, #100	@ 0x64
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	21a4      	movs	r1, #164	@ 0xa4
 8000ae4:	4803      	ldr	r0, [pc, #12]	@ (8000af4 <apds9250_set_ls_thres_up+0x44>)
 8000ae6:	f003 f8c3 	bl	8003c70 <HAL_I2C_Master_Transmit>
}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	240005f0 	.word	0x240005f0

08000af8 <apds9250_set_ls_thres_low>:
/********************************************************
 * LS_THRES_LOW (0/1/2)
 * max 20-bits unsigned integer
 ********************************************************/
void apds9250_set_ls_thres_low(uint32_t thres)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af02      	add	r7, sp, #8
 8000afe:	6078      	str	r0, [r7, #4]
	uint8_t wData[4] = {APDS9250_LS_THRES_LOW_0_ADDR, thres&0xFF, (thres>>8)&0xFF, (thres>>16)&0x0F};
 8000b00:	2324      	movs	r3, #36	@ 0x24
 8000b02:	733b      	strb	r3, [r7, #12]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	737b      	strb	r3, [r7, #13]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	73bb      	strb	r3, [r7, #14]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	0c1b      	lsrs	r3, r3, #16
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	f003 030f 	and.w	r3, r3, #15
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	73fb      	strb	r3, [r7, #15]
	
	//L_DEBUG("thres_low = [%X, %X, %X]", wData[3], wData[2], wData[1]);
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 4, 100);
 8000b20:	f107 020c 	add.w	r2, r7, #12
 8000b24:	2364      	movs	r3, #100	@ 0x64
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2304      	movs	r3, #4
 8000b2a:	21a4      	movs	r1, #164	@ 0xa4
 8000b2c:	4803      	ldr	r0, [pc, #12]	@ (8000b3c <apds9250_set_ls_thres_low+0x44>)
 8000b2e:	f003 f89f 	bl	8003c70 <HAL_I2C_Master_Transmit>
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	240005f0 	.word	0x240005f0

08000b40 <apds9250_set_ls_thres_var>:
 * INT set when difference between previous and current
 * is above variance threshold (LS_THRES_VAR) for specified number of
 * consecutive mesurements (INT_PERSISTENCE)
 ********************************************************/
void apds9250_set_ls_thres_var(uint8_t vary)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af02      	add	r7, sp, #8
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	uint8_t wData[2] = {APDS9250_THRES_VAR_ADDR, vary&0x07};
 8000b4a:	2327      	movs	r3, #39	@ 0x27
 8000b4c:	733b      	strb	r3, [r7, #12]
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 0307 	and.w	r3, r3, #7
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&apds9250_i2c, APDS9250_I2C_ADDR, wData, 2, 100);
 8000b58:	f107 020c 	add.w	r2, r7, #12
 8000b5c:	2364      	movs	r3, #100	@ 0x64
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2302      	movs	r3, #2
 8000b62:	21a4      	movs	r1, #164	@ 0xa4
 8000b64:	4803      	ldr	r0, [pc, #12]	@ (8000b74 <apds9250_set_ls_thres_var+0x34>)
 8000b66:	f003 f883 	bl	8003c70 <HAL_I2C_Master_Transmit>
}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	240005f0 	.word	0x240005f0

08000b78 <lsm6dsl_init>:

/**************************************************
 * Initialization
 **************************************************/
bool lsm6dsl_init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
	uint8_t data;
	uint8_t deviceID;
	
	// 15ms for boot procedure to load
	osDelay(15);
 8000b7e:	200f      	movs	r0, #15
 8000b80:	f000 fb26 	bl	80011d0 <osDelay>
	
	// WHO_AM_I (0x0F)
	deviceID = lsm6dsl_get_who_am_i();
 8000b84:	f000 f8de 	bl	8000d44 <lsm6dsl_get_who_am_i>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	77fb      	strb	r3, [r7, #31]
//	printf("LSM6DSL Device ID = %02X\r\n", deviceID);
	if(deviceID != LSM6DSL_WHO_AMI_I) {
 8000b8c:	7ffb      	ldrb	r3, [r7, #31]
 8000b8e:	2b6a      	cmp	r3, #106	@ 0x6a
 8000b90:	d02b      	beq.n	8000bea <lsm6dsl_init+0x72>
//		printf("Incorrect LSM6DSL Device ID [%02X], retrying\r\n", deviceID);
    
    // try reading WHO_AM_I again
    osDelay(10);
 8000b92:	200a      	movs	r0, #10
 8000b94:	f000 fb1c 	bl	80011d0 <osDelay>
    deviceID = lsm6dsl_get_who_am_i();
 8000b98:	f000 f8d4 	bl	8000d44 <lsm6dsl_get_who_am_i>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	77fb      	strb	r3, [r7, #31]
    if(deviceID != LSM6DSL_WHO_AMI_I) {
 8000ba0:	7ffb      	ldrb	r3, [r7, #31]
 8000ba2:	2b6a      	cmp	r3, #106	@ 0x6a
 8000ba4:	d021      	beq.n	8000bea <lsm6dsl_init+0x72>
#if defined(picoSTM32H753) || defined(PICOSTM_COMBO) || defined(PICOSTM_COMBO_REV_B)
//      printf("Incorrect LSM6DSL Device ID [%02X], changing SPI mode\r\n", deviceID);
      
      // try a different SPI mode
      HAL_SPI_DeInit(&hspi5);
 8000ba6:	4860      	ldr	r0, [pc, #384]	@ (8000d28 <lsm6dsl_init+0x1b0>)
 8000ba8:	f006 ff92 	bl	8007ad0 <HAL_SPI_DeInit>
      osDelay(10);
 8000bac:	200a      	movs	r0, #10
 8000bae:	f000 fb0f 	bl	80011d0 <osDelay>
      hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8000d28 <lsm6dsl_init+0x1b0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
      hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb8:	4b5b      	ldr	r3, [pc, #364]	@ (8000d28 <lsm6dsl_init+0x1b0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
      if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 8000bbe:	485a      	ldr	r0, [pc, #360]	@ (8000d28 <lsm6dsl_init+0x1b0>)
 8000bc0:	f006 fe62 	bl	8007888 <HAL_SPI_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <lsm6dsl_init+0x56>
        Error_Handler();
 8000bca:	f000 fde5 	bl	8001798 <Error_Handler>
      }
      deviceID = lsm6dsl_get_who_am_i();
 8000bce:	f000 f8b9 	bl	8000d44 <lsm6dsl_get_who_am_i>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	77fb      	strb	r3, [r7, #31]
      if(deviceID != LSM6DSL_WHO_AMI_I) {
 8000bd6:	7ffb      	ldrb	r3, [r7, #31]
 8000bd8:	2b6a      	cmp	r3, #106	@ 0x6a
 8000bda:	d006      	beq.n	8000bea <lsm6dsl_init+0x72>
#endif
        printf("Incorrect LSM6DSL Device ID [%02X], SPI5 failed to initialize\r\n", deviceID);
 8000bdc:	7ffb      	ldrb	r3, [r7, #31]
 8000bde:	4619      	mov	r1, r3
 8000be0:	4852      	ldr	r0, [pc, #328]	@ (8000d2c <lsm6dsl_init+0x1b4>)
 8000be2:	f009 fc0b 	bl	800a3fc <iprintf>
        return false;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e09a      	b.n	8000d20 <lsm6dsl_init+0x1a8>
      }
#endif
    }
	}
  
  data = LSM6DSL_ODR_XL << 4;
 8000bea:	2330      	movs	r3, #48	@ 0x30
 8000bec:	77bb      	strb	r3, [r7, #30]
	lsm6dsl_write(LSM6DSL_CTRL1_XL_ADDR, &data, 1);
 8000bee:	f107 031e 	add.w	r3, r7, #30
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	2010      	movs	r0, #16
 8000bf8:	f000 fa6a 	bl	80010d0 <lsm6dsl_write>
	data = 0x10; // Gyrcosope: ODR=12.5 Hz, FS=250dps
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	77bb      	strb	r3, [r7, #30]
	lsm6dsl_write(LSM6DSL_CTRL2_G_ADDR, &data, 1);
 8000c00:	f107 031e 	add.w	r3, r7, #30
 8000c04:	2201      	movs	r2, #1
 8000c06:	4619      	mov	r1, r3
 8000c08:	2011      	movs	r0, #17
 8000c0a:	f000 fa61 	bl	80010d0 <lsm6dsl_write>
	data = 0x44; // BDU=update outut after read; IF_INC=autoincrement during multi-byte access
 8000c0e:	2344      	movs	r3, #68	@ 0x44
 8000c10:	77bb      	strb	r3, [r7, #30]
	lsm6dsl_write(LSM6DSL_CTRL3_C_ADDR, &data, 1);
 8000c12:	f107 031e 	add.w	r3, r7, #30
 8000c16:	2201      	movs	r2, #1
 8000c18:	4619      	mov	r1, r3
 8000c1a:	2012      	movs	r0, #18
 8000c1c:	f000 fa58 	bl	80010d0 <lsm6dsl_write>
	data = 0x02; // SPI only
 8000c20:	2302      	movs	r3, #2
 8000c22:	77bb      	strb	r3, [r7, #30]
	lsm6dsl_write(LSM6DSL_CTRL4_C_ADDR, &data, 1);
 8000c24:	f107 031e 	add.w	r3, r7, #30
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	2013      	movs	r0, #19
 8000c2e:	f000 fa4f 	bl	80010d0 <lsm6dsl_write>
	data = 0x00;
 8000c32:	2300      	movs	r3, #0
 8000c34:	77bb      	strb	r3, [r7, #30]
	lsm6dsl_write(LSM6DSL_CTRL5_C_ADDR, &data, 1);
 8000c36:	f107 031e 	add.w	r3, r7, #30
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	2014      	movs	r0, #20
 8000c40:	f000 fa46 	bl	80010d0 <lsm6dsl_write>
  // XL_HM_MODE = 1 = high-performance disabled
  // USR_OFF_W = 0 = weight of XLR user offset set to 2^-10 g/LSB
  data = 0x10;
 8000c44:	2310      	movs	r3, #16
 8000c46:	77bb      	strb	r3, [r7, #30]
	lsm6dsl_write(LSM6DSL_CTRL6_C_ADDR, &data, 1);
 8000c48:	f107 031e 	add.w	r3, r7, #30
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4619      	mov	r1, r3
 8000c50:	2015      	movs	r0, #21
 8000c52:	f000 fa3d 	bl	80010d0 <lsm6dsl_write>
  data = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	77bb      	strb	r3, [r7, #30]
	lsm6dsl_write(LSM6DSL_CTRL7_G_ADDR, &data, 1);
 8000c5a:	f107 031e 	add.w	r3, r7, #30
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4619      	mov	r1, r3
 8000c62:	2016      	movs	r0, #22
 8000c64:	f000 fa34 	bl	80010d0 <lsm6dsl_write>
	lsm6dsl_write(LSM6DSL_CTRL8_XL_ADDR, &data, 1);
 8000c68:	f107 031e 	add.w	r3, r7, #30
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4619      	mov	r1, r3
 8000c70:	2017      	movs	r0, #23
 8000c72:	f000 fa2d 	bl	80010d0 <lsm6dsl_write>
	lsm6dsl_write(LSM6DSL_CTRL9_XL_ADDR, &data, 1);
 8000c76:	f107 031e 	add.w	r3, r7, #30
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	2018      	movs	r0, #24
 8000c80:	f000 fa26 	bl	80010d0 <lsm6dsl_write>
	lsm6dsl_write(LSM6DSL_CTRL10_C_ADDR, &data, 1);
 8000c84:	f107 031e 	add.w	r3, r7, #30
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	2019      	movs	r0, #25
 8000c8e:	f000 fa1f 	bl	80010d0 <lsm6dsl_write>

	lsm6dsl_set_sensitivity_g();
 8000c92:	f000 f979 	bl	8000f88 <lsm6dsl_set_sensitivity_g>
	lsm6dsl_set_sensitivity_xl();
 8000c96:	f000 f987 	bl	8000fa8 <lsm6dsl_set_sensitivity_xl>

  // Set interrupts
  if(ic3.xlg_int_enabled) {
 8000c9a:	4b25      	ldr	r3, [pc, #148]	@ (8000d30 <lsm6dsl_init+0x1b8>)
 8000c9c:	f893 334d 	ldrb.w	r3, [r3, #845]	@ 0x34d
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d039      	beq.n	8000d18 <lsm6dsl_init+0x1a0>
    printf("Accelerometer/Gyroscope interrupt enabled. Setting configurations for interrupt...\r\n");
 8000ca4:	4823      	ldr	r0, [pc, #140]	@ (8000d34 <lsm6dsl_init+0x1bc>)
 8000ca6:	f009 fc11 	bl	800a4cc <puts>
    
    // Configure GPIO for external interrupt
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000caa:	4b23      	ldr	r3, [pc, #140]	@ (8000d38 <lsm6dsl_init+0x1c0>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb0:	4a21      	ldr	r2, [pc, #132]	@ (8000d38 <lsm6dsl_init+0x1c0>)
 8000cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cba:	4b1f      	ldr	r3, [pc, #124]	@ (8000d38 <lsm6dsl_init+0x1c0>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
#if defined(STM32_UMOTE2)
    GPIO_InitStruct.Pin = LSM6DSL_INT_PIN;
#elif defined(picoSTM32H753) || defined(PICOSTM_COMBO) || defined(PICOSTM_COMBO_REV_B)
    GPIO_InitStruct.Pin = LSM6DSL_INT_PIN1|LSM6DSL_INT_PIN2;
 8000cd8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cdc:	60bb      	str	r3, [r7, #8]
#endif
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cde:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ce2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LSM6DSL_INT_PORT, &GPIO_InitStruct);
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	4619      	mov	r1, r3
 8000cee:	4813      	ldr	r0, [pc, #76]	@ (8000d3c <lsm6dsl_init+0x1c4>)
 8000cf0:	f002 fc4e 	bl	8003590 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LSM6DSL_EXTI_IRQn, 0, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2028      	movs	r0, #40	@ 0x28
 8000cfa:	f002 fb9c 	bl	8003436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LSM6DSL_EXTI_IRQn);
 8000cfe:	2028      	movs	r0, #40	@ 0x28
 8000d00:	f002 fbb3 	bl	800346a <HAL_NVIC_EnableIRQ>
    
    // enable activity/inactivity recognition
		lsm6dsl_inact_recog_int(ic3.xlg_wake_dur, ic3.xlg_wake_thres);
 8000d04:	4b0a      	ldr	r3, [pc, #40]	@ (8000d30 <lsm6dsl_init+0x1b8>)
 8000d06:	f893 334f 	ldrb.w	r3, [r3, #847]	@ 0x34f
 8000d0a:	4a09      	ldr	r2, [pc, #36]	@ (8000d30 <lsm6dsl_init+0x1b8>)
 8000d0c:	f892 234e 	ldrb.w	r2, [r2, #846]	@ 0x34e
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f958 	bl	8000fc8 <lsm6dsl_inact_recog_int>
  }
  
  // get calibration offsets
//  offset = lsm6dsl_get_offset_xl_g();
  
	printf("Accelerometer/Gyroscope initialization completed\r\n");
 8000d18:	4809      	ldr	r0, [pc, #36]	@ (8000d40 <lsm6dsl_init+0x1c8>)
 8000d1a:	f009 fbd7 	bl	800a4cc <puts>
	return true;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	24000644 	.word	0x24000644
 8000d2c:	0800c1a0 	.word	0x0800c1a0
 8000d30:	24000260 	.word	0x24000260
 8000d34:	0800c1e0 	.word	0x0800c1e0
 8000d38:	58024400 	.word	0x58024400
 8000d3c:	58022000 	.word	0x58022000
 8000d40:	0800c234 	.word	0x0800c234

08000d44 <lsm6dsl_get_who_am_i>:

/*****************************************************************
 * WHO_AM_I
 *****************************************************************/
uint8_t lsm6dsl_get_who_am_i(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
	uint8_t rData;
//	printf("&rData = %p\r\n",&rData);
	lsm6dsl_read(LSM6DSL_WHO_AM_I_ADDR, &rData, 1);
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4619      	mov	r1, r3
 8000d50:	200f      	movs	r0, #15
 8000d52:	f000 f9fd 	bl	8001150 <lsm6dsl_read>
//	printf("rData = %X\r\n", rData);
	return rData;
 8000d56:	79fb      	ldrb	r3, [r7, #7]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <lsm6dsl_get_status_reg>:
/*****************************************************************
 * STATUS Register
 *****************************************************************/
uint8_t lsm6dsl_get_status_reg(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
	uint8_t rData;
	lsm6dsl_read(LSM6DSL_STATUS_REG_ADDR, &rData, 1);
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	201e      	movs	r0, #30
 8000d6e:	f000 f9ef 	bl	8001150 <lsm6dsl_read>
//	L_DEBUG("STATUS REG[%d] = %02X", LSM6DSL_STATUS_REG_ADDR, rData);
	return rData;
 8000d72:	79fb      	ldrb	r3, [r7, #7]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <lsm6dsl_get_out_xl_g>:

/*****************************************************************
 * Get both acceleration and angular velocity
 *****************************************************************/
bool lsm6dsl_get_out_xl_g(COT_DATA *data)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  lsm6dsl_get_out_g(data);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 f809 	bl	8000d9c <lsm6dsl_get_out_g>
  lsm6dsl_get_out_xl(data);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f888 	bl	8000ea0 <lsm6dsl_get_out_xl>
  
  return true;
 8000d90:	2301      	movs	r3, #1
//  float temperature = lsm6dsl_get_out_temp();
//  
//  return temperature;
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <lsm6dsl_get_out_g>:

/*****************************************************************
 * Angular Velocity (Gyroscope)
 *****************************************************************/
bool lsm6dsl_get_out_g(COT_DATA *data)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	uint8_t rData[6];
	int16_t pData[3] = {0};
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	809a      	strh	r2, [r3, #4]
	
	// Read Status
	// If STATUS_REG[GDA] = 0 (old data), then do not update
	if (!((lsm6dsl_get_status_reg()&0x02)>>1)) {
 8000dae:	f7ff ffd7 	bl	8000d60 <lsm6dsl_get_status_reg>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d110      	bne.n	8000dde <lsm6dsl_get_out_g+0x42>
    // inactivity will cause gyroscope to power-down if set
//			L_DEBUG("Gyroscope in power-down mode");
    data->xlgyr.gx = 0;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f04f 0200 	mov.w	r2, #0
 8000dc2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    data->xlgyr.gy = 0;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f04f 0200 	mov.w	r2, #0
 8000dcc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
    data->xlgyr.gz = 0;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
		return false;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e058      	b.n	8000e90 <lsm6dsl_get_out_g+0xf4>
	}
	// Read OUT(axis)_L/H_XL data
	lsm6dsl_read(LSM6DSL_OUTX_L_G_ADDR, rData, 6);
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	2206      	movs	r2, #6
 8000de4:	4619      	mov	r1, r3
 8000de6:	2022      	movs	r0, #34	@ 0x22
 8000de8:	f000 f9b2 	bl	8001150 <lsm6dsl_read>
	pData[2] = (uint16_t)(rData[1]<<8) + (uint16_t)rData[0]; // x
 8000dec:	7c7b      	ldrb	r3, [r7, #17]
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	7c3a      	ldrb	r2, [r7, #16]
 8000df4:	4413      	add	r3, r2
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	81bb      	strh	r3, [r7, #12]
	pData[1] = (uint16_t)(rData[3]<<8) + (uint16_t)rData[2]; // y
 8000dfc:	7cfb      	ldrb	r3, [r7, #19]
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	7cba      	ldrb	r2, [r7, #18]
 8000e04:	4413      	add	r3, r2
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	817b      	strh	r3, [r7, #10]
	pData[0] = (uint16_t)(rData[5]<<8) + (uint16_t)rData[4]; // z
 8000e0c:	7d7b      	ldrb	r3, [r7, #21]
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	7d3a      	ldrb	r2, [r7, #20]
 8000e14:	4413      	add	r3, r2
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	813b      	strh	r3, [r7, #8]
	
	data->xlgyr.gx = (pData[2] * sensitivity_g) - offset.gx;
 8000e1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e20:	ee07 3a90 	vmov	s15, r3
 8000e24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e28:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <lsm6dsl_get_out_g+0xfc>)
 8000e2a:	edd3 7a00 	vldr	s15, [r3]
 8000e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e32:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <lsm6dsl_get_out_g+0x100>)
 8000e34:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
	data->xlgyr.gy = (pData[1] * sensitivity_g) - offset.gy;
 8000e42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e46:	ee07 3a90 	vmov	s15, r3
 8000e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e4e:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <lsm6dsl_get_out_g+0xfc>)
 8000e50:	edd3 7a00 	vldr	s15, [r3]
 8000e54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e58:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <lsm6dsl_get_out_g+0x100>)
 8000e5a:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
	data->xlgyr.gz = (pData[0] * sensitivity_g) - offset.gz;
 8000e68:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e6c:	ee07 3a90 	vmov	s15, r3
 8000e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e74:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <lsm6dsl_get_out_g+0xfc>)
 8000e76:	edd3 7a00 	vldr	s15, [r3]
 8000e7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e7e:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <lsm6dsl_get_out_g+0x100>)
 8000e80:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
//  L_DEBUG("gyro = %.2f, %.2f, %.2f", data->xlgyr.gx, data->xlgyr.gy, data->xlgyr.gz);
  
	return true;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	2400023c 	.word	0x2400023c
 8000e9c:	24000244 	.word	0x24000244

08000ea0 <lsm6dsl_get_out_xl>:

/*****************************************************************
 * Acceleration (Accelerometer)
 *****************************************************************/
bool lsm6dsl_get_out_xl(COT_DATA *data)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	uint8_t rData[6];
	int16_t pData[3] = {0};
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	809a      	strh	r2, [r3, #4]
	
	// Read Status
	// If STATUS_REG[XLDA] = 0, then do not update
	if (!(lsm6dsl_get_status_reg()&0x01)) {
 8000eb2:	f7ff ff55 	bl	8000d60 <lsm6dsl_get_status_reg>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <lsm6dsl_get_out_xl+0x24>
//		L_DEBUG("Accelerometer old data");
		return false;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e058      	b.n	8000f76 <lsm6dsl_get_out_xl+0xd6>
	}
	
	// Read OUT(axis)_L/H_G data
	lsm6dsl_read(LSM6DSL_OUTX_L_XL_ADDR, rData, 6);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	2206      	movs	r2, #6
 8000eca:	4619      	mov	r1, r3
 8000ecc:	2028      	movs	r0, #40	@ 0x28
 8000ece:	f000 f93f 	bl	8001150 <lsm6dsl_read>
	pData[2] = (uint16_t)(rData[1]<<8) + (uint16_t)rData[0]; // x
 8000ed2:	7c7b      	ldrb	r3, [r7, #17]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	7c3a      	ldrb	r2, [r7, #16]
 8000eda:	4413      	add	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	81bb      	strh	r3, [r7, #12]
	pData[1] = (uint16_t)(rData[3]<<8) + (uint16_t)rData[2]; // y
 8000ee2:	7cfb      	ldrb	r3, [r7, #19]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	7cba      	ldrb	r2, [r7, #18]
 8000eea:	4413      	add	r3, r2
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	817b      	strh	r3, [r7, #10]
	pData[0] = (uint16_t)(rData[5]<<8) + (uint16_t)rData[4]; // z
 8000ef2:	7d7b      	ldrb	r3, [r7, #21]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	7d3a      	ldrb	r2, [r7, #20]
 8000efa:	4413      	add	r3, r2
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	813b      	strh	r3, [r7, #8]
	
	data->xlgyr.xlx = (pData[2] * sensitivity_xl) - offset.xlx;
 8000f02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <lsm6dsl_get_out_xl+0xe0>)
 8000f10:	edd3 7a00 	vldr	s15, [r3]
 8000f14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f18:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <lsm6dsl_get_out_xl+0xe4>)
 8000f1a:	edd3 7a00 	vldr	s15, [r3]
 8000f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	edc3 7a55 	vstr	s15, [r3, #340]	@ 0x154
	data->xlgyr.xly = (pData[1] * sensitivity_xl) - offset.xly;
 8000f28:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <lsm6dsl_get_out_xl+0xe0>)
 8000f36:	edd3 7a00 	vldr	s15, [r3]
 8000f3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f3e:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <lsm6dsl_get_out_xl+0xe4>)
 8000f40:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	edc3 7a56 	vstr	s15, [r3, #344]	@ 0x158
	data->xlgyr.xlz = (pData[0] * sensitivity_xl) - offset.xlz;
 8000f4e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <lsm6dsl_get_out_xl+0xe0>)
 8000f5c:	edd3 7a00 	vldr	s15, [r3]
 8000f60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f64:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <lsm6dsl_get_out_xl+0xe4>)
 8000f66:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	edc3 7a57 	vstr	s15, [r3, #348]	@ 0x15c
//	L_DEBUG("accel = %.2f, %.2f, %.2f", data->xlgyr.xlx, data->xlgyr.xly, data->xlgyr.xlz);
  
	return true;
 8000f74:	2301      	movs	r3, #1
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	24000240 	.word	0x24000240
 8000f84:	24000244 	.word	0x24000244

08000f88 <lsm6dsl_set_sensitivity_g>:

/*****************************************************************
 * Sensitivity
 *****************************************************************/
void lsm6dsl_set_sensitivity_g(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	switch(LSM6DSL_FS_G) {
		case LSM6DSL_FS_250DPS_G:  // 250 dps
			sensitivity_g = LSM6DSL_SENSITIVITY_FS_250DPS_G;
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <lsm6dsl_set_sensitivity_g+0x18>)
 8000f8e:	4a05      	ldr	r2, [pc, #20]	@ (8000fa4 <lsm6dsl_set_sensitivity_g+0x1c>)
 8000f90:	601a      	str	r2, [r3, #0]
			break;
 8000f92:	bf00      	nop
			break;
		default: // default 00 - 250 dps
			sensitivity_g = LSM6DSL_SENSITIVITY_FS_250DPS_G;
			break;
	}
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	2400023c 	.word	0x2400023c
 8000fa4:	410c0000 	.word	0x410c0000

08000fa8 <lsm6dsl_set_sensitivity_xl>:

void lsm6dsl_set_sensitivity_xl(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
	switch(LSM6DSL_FS_XL) {
		case LSM6DSL_FS_2G_XL:  // 2g
			sensitivity_xl = LSM6DSL_SENSITIVITY_FS_2G_XL;
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <lsm6dsl_set_sensitivity_xl+0x18>)
 8000fae:	4a05      	ldr	r2, [pc, #20]	@ (8000fc4 <lsm6dsl_set_sensitivity_xl+0x1c>)
 8000fb0:	601a      	str	r2, [r3, #0]
			break;
 8000fb2:	bf00      	nop
			break;
		default:								// default 00 - 2g
			sensitivity_xl = LSM6DSL_SENSITIVITY_FS_2G_XL;
			break;
	}
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	24000240 	.word	0x24000240
 8000fc4:	3d79db23 	.word	0x3d79db23

08000fc8 <lsm6dsl_inact_recog_int>:

/*****************************************************************
 * Inactivity/Activity Recognition Interrupt
 *****************************************************************/
void lsm6dsl_inact_recog_int(uint8_t duration, uint8_t threshold)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]
	uint8_t data = 0, rData = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73bb      	strb	r3, [r7, #14]
	float durValue, thresValue;
	
	durValue = duration * 512 / odr_xl[LSM6DSL_ODR_XL];
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	025b      	lsls	r3, r3, #9
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fec:	4b35      	ldr	r3, [pc, #212]	@ (80010c4 <lsm6dsl_inact_recog_int+0xfc>)
 8000fee:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ff6:	edc7 7a05 	vstr	s15, [r7, #20]
	thresValue = threshold * fs_xl[LSM6DSL_FS_XL] / 64;
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001004:	4b30      	ldr	r3, [pc, #192]	@ (80010c8 <lsm6dsl_inact_recog_int+0x100>)
 8001006:	edd3 7a00 	vldr	s15, [r3]
 800100a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800100e:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 80010cc <lsm6dsl_inact_recog_int+0x104>
 8001012:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001016:	edc7 7a04 	vstr	s15, [r7, #16]
	
//	L_TRACE("Inactivity/Activity Recognition Interrupt Activated (thres = %.4f, dur = %.2f)", thresValue, durValue);

	// Set wake_up duration (in lsm6dsl_wake_up_int)
//	lsm6dsl_read(LSM6DSL_WAKE_UP_DUR_ADDR, &data, 1);
	data = duration&0x0F;
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 030f 	and.w	r3, r3, #15
 8001020:	b2db      	uxtb	r3, r3
 8001022:	73fb      	strb	r3, [r7, #15]
	lsm6dsl_write(LSM6DSL_WAKE_UP_DUR_ADDR, &data, 1);
 8001024:	f107 030f 	add.w	r3, r7, #15
 8001028:	2201      	movs	r2, #1
 800102a:	4619      	mov	r1, r3
 800102c:	205c      	movs	r0, #92	@ 0x5c
 800102e:	f000 f84f 	bl	80010d0 <lsm6dsl_write>

	// Set wake_up threshold (in lsm6dsl_wake_up_int)
//	lsm6dsl_read(LSM6DSL_WAKE_UP_THS_ADDR, &data, 1);
	data = threshold&0x3F;
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001038:	b2db      	uxtb	r3, r3
 800103a:	73fb      	strb	r3, [r7, #15]
	lsm6dsl_write(LSM6DSL_WAKE_UP_THS_ADDR, &data, 1);
 800103c:	f107 030f 	add.w	r3, r7, #15
 8001040:	2201      	movs	r2, #1
 8001042:	4619      	mov	r1, r3
 8001044:	205b      	movs	r0, #91	@ 0x5b
 8001046:	f000 f843 	bl	80010d0 <lsm6dsl_write>
	
	// Enable interrupts, slope filter, latch interrupts, and set gyroscope option to power-down
	// Set gyro to not change, sleep, power-down with 0xA1, 0xC1, 0xE1, respectively
//	lsm6dsl_read(LSM6DSL_TAP_CFG_ADDR, &data, 1);
	data = 0xE1;
 800104a:	23e1      	movs	r3, #225	@ 0xe1
 800104c:	73fb      	strb	r3, [r7, #15]
	lsm6dsl_write(LSM6DSL_TAP_CFG_ADDR, &data, 1);
 800104e:	f107 030f 	add.w	r3, r7, #15
 8001052:	2201      	movs	r2, #1
 8001054:	4619      	mov	r1, r3
 8001056:	2058      	movs	r0, #88	@ 0x58
 8001058:	f000 f83a 	bl	80010d0 <lsm6dsl_write>
//  osDelay(1);
  lsm6dsl_read(LSM6DSL_TAP_CFG_ADDR, &rData, 1);
 800105c:	f107 030e 	add.w	r3, r7, #14
 8001060:	2201      	movs	r2, #1
 8001062:	4619      	mov	r1, r3
 8001064:	2058      	movs	r0, #88	@ 0x58
 8001066:	f000 f873 	bl	8001150 <lsm6dsl_read>
  if(rData != 0xE1) {
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	2be1      	cmp	r3, #225	@ 0xe1
 800106e:	d008      	beq.n	8001082 <lsm6dsl_inact_recog_int+0xba>
    data = 0xE1;
 8001070:	23e1      	movs	r3, #225	@ 0xe1
 8001072:	73fb      	strb	r3, [r7, #15]
    lsm6dsl_write(LSM6DSL_TAP_CFG_ADDR, &data, 1);
 8001074:	f107 030f 	add.w	r3, r7, #15
 8001078:	2201      	movs	r2, #1
 800107a:	4619      	mov	r1, r3
 800107c:	2058      	movs	r0, #88	@ 0x58
 800107e:	f000 f827 	bl	80010d0 <lsm6dsl_write>
  }
	
	// Drive inactivity/activity interrupt to INT2
//	lsm6dsl_read(LSM6DSL_MD2_CFG_ADDR, &data, 1);
	data = 0x80;
 8001082:	2380      	movs	r3, #128	@ 0x80
 8001084:	73fb      	strb	r3, [r7, #15]
	lsm6dsl_write(LSM6DSL_MD2_CFG_ADDR, &data, 1);
 8001086:	f107 030f 	add.w	r3, r7, #15
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	205f      	movs	r0, #95	@ 0x5f
 8001090:	f000 f81e 	bl	80010d0 <lsm6dsl_write>
//  osDelay(1);
  lsm6dsl_read(LSM6DSL_MD2_CFG_ADDR, &rData, 1);
 8001094:	f107 030e 	add.w	r3, r7, #14
 8001098:	2201      	movs	r2, #1
 800109a:	4619      	mov	r1, r3
 800109c:	205f      	movs	r0, #95	@ 0x5f
 800109e:	f000 f857 	bl	8001150 <lsm6dsl_read>
  if(rData != 0x80) {
 80010a2:	7bbb      	ldrb	r3, [r7, #14]
 80010a4:	2b80      	cmp	r3, #128	@ 0x80
 80010a6:	d008      	beq.n	80010ba <lsm6dsl_inact_recog_int+0xf2>
    data = 0x80;
 80010a8:	2380      	movs	r3, #128	@ 0x80
 80010aa:	73fb      	strb	r3, [r7, #15]
    lsm6dsl_write(LSM6DSL_MD2_CFG_ADDR, &data, 1);
 80010ac:	f107 030f 	add.w	r3, r7, #15
 80010b0:	2201      	movs	r2, #1
 80010b2:	4619      	mov	r1, r3
 80010b4:	205f      	movs	r0, #95	@ 0x5f
 80010b6:	f000 f80b 	bl	80010d0 <lsm6dsl_write>
  }
    
  // verify interrupts are enabled
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	24000000 	.word	0x24000000
 80010c8:	24000038 	.word	0x24000038
 80010cc:	42800000 	.word	0x42800000

080010d0 <lsm6dsl_write>:
 * LSM6DSL Read/Write Functions
 * Can either be SPI or I2C, selected by LSM6DSL_I2C_SPI
 * Note: I2C have not been implemented yet
 *****************************************************************/
void lsm6dsl_write(uint8_t reg, uint8_t *pData, uint8_t len)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	4613      	mov	r3, r2
 80010de:	71bb      	strb	r3, [r7, #6]
	uint8_t *wData = malloc((len+1)*sizeof(uint8_t));
 80010e0:	79bb      	ldrb	r3, [r7, #6]
 80010e2:	3301      	adds	r3, #1
 80010e4:	4618      	mov	r0, r3
 80010e6:	f008 fbd1 	bl	800988c <malloc>
 80010ea:	4603      	mov	r3, r0
 80010ec:	60fb      	str	r3, [r7, #12]
	memcpy(wData, &reg, sizeof(uint8_t));
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	701a      	strb	r2, [r3, #0]
	memcpy(wData+sizeof(uint8_t), pData, len*sizeof(uint8_t));
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3301      	adds	r3, #1
 80010f8:	79ba      	ldrb	r2, [r7, #6]
 80010fa:	6839      	ldr	r1, [r7, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f009 fb54 	bl	800a7aa <memcpy>
#if defined(STM32_UMOTE2) // I2C
	if(HAL_I2C_Master_Transmit(&lsm6dsl_i2c, LSM6DSL_I2C_ADDR, wData, len+1, 10) != HAL_OK) {
    printf("I2C XLG Transmit error...\r\n");
  }
#elif defined(picoSTM32H753) || defined(PICOSTM_COMBO) || defined(PICOSTM_COMBO_REV_B) // SPI
  HAL_GPIO_WritePin(LSM6DSL_NSS_PORT, LSM6DSL_NSS_PIN, GPIO_PIN_RESET); // Pull CS
 8001102:	2200      	movs	r2, #0
 8001104:	2102      	movs	r1, #2
 8001106:	480f      	ldr	r0, [pc, #60]	@ (8001144 <lsm6dsl_write+0x74>)
 8001108:	f002 fcfc 	bl	8003b04 <HAL_GPIO_WritePin>
  if(HAL_SPI_Transmit(&lsm6dsl_spi, wData, len+1, 100) != HAL_OK) {
 800110c:	79bb      	ldrb	r3, [r7, #6]
 800110e:	b29b      	uxth	r3, r3
 8001110:	3301      	adds	r3, #1
 8001112:	b29a      	uxth	r2, r3
 8001114:	2364      	movs	r3, #100	@ 0x64
 8001116:	68f9      	ldr	r1, [r7, #12]
 8001118:	480b      	ldr	r0, [pc, #44]	@ (8001148 <lsm6dsl_write+0x78>)
 800111a:	f006 fd03 	bl	8007b24 <HAL_SPI_Transmit>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <lsm6dsl_write+0x5a>
    printf("SPI XLG Transmit error...\r\n");
 8001124:	4809      	ldr	r0, [pc, #36]	@ (800114c <lsm6dsl_write+0x7c>)
 8001126:	f009 f9d1 	bl	800a4cc <puts>
  }
  HAL_GPIO_WritePin(LSM6DSL_NSS_PORT, LSM6DSL_NSS_PIN, GPIO_PIN_SET); // De-assert CS
 800112a:	2201      	movs	r2, #1
 800112c:	2102      	movs	r1, #2
 800112e:	4805      	ldr	r0, [pc, #20]	@ (8001144 <lsm6dsl_write+0x74>)
 8001130:	f002 fce8 	bl	8003b04 <HAL_GPIO_WritePin>
#endif
  free(wData);
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f008 fbb1 	bl	800989c <free>
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	58022800 	.word	0x58022800
 8001148:	24000644 	.word	0x24000644
 800114c:	0800c308 	.word	0x0800c308

08001150 <lsm6dsl_read>:

void lsm6dsl_read(uint8_t reg, uint8_t *pData, uint8_t len)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	4613      	mov	r3, r2
 800115e:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&lsm6dsl_i2c, LSM6DSL_I2C_ADDR, reg, 1, pData, len, 10) != HAL_OK) {
      printf("I2C XLG Receiver error\r\n");
  }
#elif defined(picoSTM32H753) || defined(PICOSTM_COMBO) || defined(PICOSTM_COMBO_REV_B) // SPI
  // bit 8 is R/W where R = 1 and W = 0
  uint8_t wData = 0x80 | reg;
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001166:	b2db      	uxtb	r3, r3
 8001168:	73fb      	strb	r3, [r7, #15]
//  printf("wData = %4X\r\n", wData);

  HAL_GPIO_WritePin(LSM6DSL_NSS_PORT, LSM6DSL_NSS_PIN, GPIO_PIN_RESET); // Pull CS
 800116a:	2200      	movs	r2, #0
 800116c:	2102      	movs	r1, #2
 800116e:	4814      	ldr	r0, [pc, #80]	@ (80011c0 <lsm6dsl_read+0x70>)
 8001170:	f002 fcc8 	bl	8003b04 <HAL_GPIO_WritePin>
//  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_RESET);
  osDelay(10);
 8001174:	200a      	movs	r0, #10
 8001176:	f000 f82b 	bl	80011d0 <osDelay>
  if(HAL_SPI_Transmit(&lsm6dsl_spi, &wData, 1, 100) != HAL_OK){
 800117a:	f107 010f 	add.w	r1, r7, #15
 800117e:	2364      	movs	r3, #100	@ 0x64
 8001180:	2201      	movs	r2, #1
 8001182:	4810      	ldr	r0, [pc, #64]	@ (80011c4 <lsm6dsl_read+0x74>)
 8001184:	f006 fcce 	bl	8007b24 <HAL_SPI_Transmit>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <lsm6dsl_read+0x44>
	  printf("SPI XLG Transmit error\r\n");
 800118e:	480e      	ldr	r0, [pc, #56]	@ (80011c8 <lsm6dsl_read+0x78>)
 8001190:	f009 f99c 	bl	800a4cc <puts>
  }
  if(HAL_SPI_Receive(&lsm6dsl_spi, pData, len, 100) != HAL_OK) {
 8001194:	79bb      	ldrb	r3, [r7, #6]
 8001196:	b29a      	uxth	r2, r3
 8001198:	2364      	movs	r3, #100	@ 0x64
 800119a:	6839      	ldr	r1, [r7, #0]
 800119c:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <lsm6dsl_read+0x74>)
 800119e:	f006 feaf 	bl	8007f00 <HAL_SPI_Receive>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <lsm6dsl_read+0x5e>
      printf("SPI XLG Receiver error\r\n");
 80011a8:	4808      	ldr	r0, [pc, #32]	@ (80011cc <lsm6dsl_read+0x7c>)
 80011aa:	f009 f98f 	bl	800a4cc <puts>
  }
//  printf("pData = %4X\r\n", *pData);
  HAL_GPIO_WritePin(LSM6DSL_NSS_PORT, LSM6DSL_NSS_PIN, GPIO_PIN_SET); // De-assert CS
 80011ae:	2201      	movs	r2, #1
 80011b0:	2102      	movs	r1, #2
 80011b2:	4803      	ldr	r0, [pc, #12]	@ (80011c0 <lsm6dsl_read+0x70>)
 80011b4:	f002 fca6 	bl	8003b04 <HAL_GPIO_WritePin>
//  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_SET);

#endif
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	58022800 	.word	0x58022800
 80011c4:	24000644 	.word	0x24000644
 80011c8:	0800c324 	.word	0x0800c324
 80011cc:	0800c33c 	.word	0x0800c33c

080011d0 <osDelay>:
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
#include "daemon.h"
#include "cotfactory.h"
void osDelay(uint32_t delay){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f002 f821 	bl	8003220 <HAL_Delay>
};
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <__io_putchar>:
static void MX_SPI5_Init(void);
static void MX_UART8_Init(void);
/* USER CODE BEGIN PFP */

int __io_putchar (int ch)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit (&huart8, (uint8_t *) &ch, 1, 0xFFFF);
 80011f0:	1d39      	adds	r1, r7, #4
 80011f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011f6:	2201      	movs	r2, #1
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <__io_putchar+0x20>)
 80011fa:	f007 fa2c 	bl	8008656 <HAL_UART_Transmit>
 return ch;
 80011fe:	687b      	ldr	r3, [r7, #4]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	240006cc 	.word	0x240006cc

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	@ 0x30
 8001210:	af0a      	add	r7, sp, #40	@ 0x28
//	uint16_t red, green, blue, clear;
//	float temperature, pressure, humidity;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001212:	f000 fa95 	bl	8001740 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001216:	f001 ff71 	bl	80030fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121a:	f000 f8e1 	bl	80013e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121e:	f000 fa2d 	bl	800167c <MX_GPIO_Init>
  MX_I2C3_Init();
 8001222:	f000 f949 	bl	80014b8 <MX_I2C3_Init>
  MX_SPI5_Init();
 8001226:	f000 f987 	bl	8001538 <MX_SPI5_Init>
  MX_UART8_Init();
 800122a:	f000 f9db 	bl	80015e4 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
  if(!apds9250_init()){printf("Fail to init apds9250\r\n\n");}
 800122e:	f7ff fa27 	bl	8000680 <apds9250_init>
 8001232:	4603      	mov	r3, r0
 8001234:	f083 0301 	eor.w	r3, r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <main+0x38>
 800123e:	485e      	ldr	r0, [pc, #376]	@ (80013b8 <main+0x1ac>)
 8001240:	f009 f944 	bl	800a4cc <puts>
  if(!ms8607_init()){printf("Fail to init ms86907\r\n\n");}
 8001244:	f000 fdfe 	bl	8001e44 <ms8607_init>
 8001248:	4603      	mov	r3, r0
 800124a:	f083 0301 	eor.w	r3, r3, #1
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <main+0x4e>
 8001254:	4859      	ldr	r0, [pc, #356]	@ (80013bc <main+0x1b0>)
 8001256:	f009 f939 	bl	800a4cc <puts>
  if(!max1704x_init()){printf("Fail to init max1704x\r\n\n");}
 800125a:	f000 faa3 	bl	80017a4 <max1704x_init>
 800125e:	4603      	mov	r3, r0
 8001260:	f083 0301 	eor.w	r3, r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <main+0x64>
 800126a:	4855      	ldr	r0, [pc, #340]	@ (80013c0 <main+0x1b4>)
 800126c:	f009 f92e 	bl	800a4cc <puts>
  if(!lsm6dsl_init()){printf("Fail to init lsm6dsl\r\n\n");}
 8001270:	f7ff fc82 	bl	8000b78 <lsm6dsl_init>
 8001274:	4603      	mov	r3, r0
 8001276:	f083 0301 	eor.w	r3, r3, #1
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <main+0x7a>
 8001280:	4850      	ldr	r0, [pc, #320]	@ (80013c4 <main+0x1b8>)
 8001282:	f009 f923 	bl	800a4cc <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char* anm = "Hello world\r\n";
 8001286:	4b50      	ldr	r3, [pc, #320]	@ (80013c8 <main+0x1bc>)
 8001288:	603b      	str	r3, [r7, #0]
  uint8_t count = 4;
 800128a:	2304      	movs	r3, #4
 800128c:	71fb      	strb	r3, [r7, #7]
  while (count)
 800128e:	e089      	b.n	80013a4 <main+0x198>
  {
	  max1704x_get_vcell(&data);
 8001290:	484e      	ldr	r0, [pc, #312]	@ (80013cc <main+0x1c0>)
 8001292:	f000 fb15 	bl	80018c0 <max1704x_get_vcell>
	  max1704x_get_soc(&data);
 8001296:	484d      	ldr	r0, [pc, #308]	@ (80013cc <main+0x1c0>)
 8001298:	f000 fb62 	bl	8001960 <max1704x_get_soc>
	  max1704x_get_crate(&data);
 800129c:	484b      	ldr	r0, [pc, #300]	@ (80013cc <main+0x1c0>)
 800129e:	f000 fba3 	bl	80019e8 <max1704x_get_crate>
	  ms8607_get_pt(&data);
 80012a2:	484a      	ldr	r0, [pc, #296]	@ (80013cc <main+0x1c0>)
 80012a4:	f000 fed0 	bl	8002048 <ms8607_get_pt>
	  ms8607_get_rh(&data);
 80012a8:	4848      	ldr	r0, [pc, #288]	@ (80013cc <main+0x1c0>)
 80012aa:	f001 fab1 	bl	8002810 <ms8607_get_rh>
	  apds9250_get_rgb(&data);
 80012ae:	4847      	ldr	r0, [pc, #284]	@ (80013cc <main+0x1c0>)
 80012b0:	f7ff fb0e 	bl	80008d0 <apds9250_get_rgb>
	  lsm6dsl_get_out_xl_g(&data);
 80012b4:	4845      	ldr	r0, [pc, #276]	@ (80013cc <main+0x1c0>)
 80012b6:	f7ff fd61 	bl	8000d7c <lsm6dsl_get_out_xl_g>
	  /* Read MS8607 sensor data */
//	  MS8607_ReadSensor(&hi2c3, &temperature, &pressure, &humidity);
//	  printf("hello in main \r\n\n");
//	  /* Format and transmit sensor data over UART */
	  printf("---------------\r\GX: %.2f, GY: %.2f, GZ: %.2f\r\nXLX: %.2f, XLY: %.2f, XLZ: %.2f\r\n",
			  data.xlgyr.gx, data.xlgyr.gy, data.xlgyr.gz, data.xlgyr.xlx, data.xlgyr.xly, data.xlgyr.xlz);
 80012ba:	4b44      	ldr	r3, [pc, #272]	@ (80013cc <main+0x1c0>)
 80012bc:	edd3 7a58 	vldr	s15, [r3, #352]	@ 0x160
	  printf("---------------\r\GX: %.2f, GY: %.2f, GZ: %.2f\r\nXLX: %.2f, XLY: %.2f, XLZ: %.2f\r\n",
 80012c0:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
			  data.xlgyr.gx, data.xlgyr.gy, data.xlgyr.gz, data.xlgyr.xlx, data.xlgyr.xly, data.xlgyr.xlz);
 80012c4:	4b41      	ldr	r3, [pc, #260]	@ (80013cc <main+0x1c0>)
 80012c6:	edd3 7a59 	vldr	s15, [r3, #356]	@ 0x164
	  printf("---------------\r\GX: %.2f, GY: %.2f, GZ: %.2f\r\nXLX: %.2f, XLY: %.2f, XLZ: %.2f\r\n",
 80012ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  data.xlgyr.gx, data.xlgyr.gy, data.xlgyr.gz, data.xlgyr.xlx, data.xlgyr.xly, data.xlgyr.xlz);
 80012ce:	4b3f      	ldr	r3, [pc, #252]	@ (80013cc <main+0x1c0>)
 80012d0:	edd3 6a5a 	vldr	s13, [r3, #360]	@ 0x168
	  printf("---------------\r\GX: %.2f, GY: %.2f, GZ: %.2f\r\nXLX: %.2f, XLY: %.2f, XLZ: %.2f\r\n",
 80012d4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			  data.xlgyr.gx, data.xlgyr.gy, data.xlgyr.gz, data.xlgyr.xlx, data.xlgyr.xly, data.xlgyr.xlz);
 80012d8:	4b3c      	ldr	r3, [pc, #240]	@ (80013cc <main+0x1c0>)
 80012da:	edd3 5a55 	vldr	s11, [r3, #340]	@ 0x154
	  printf("---------------\r\GX: %.2f, GY: %.2f, GZ: %.2f\r\nXLX: %.2f, XLY: %.2f, XLZ: %.2f\r\n",
 80012de:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			  data.xlgyr.gx, data.xlgyr.gy, data.xlgyr.gz, data.xlgyr.xlx, data.xlgyr.xly, data.xlgyr.xlz);
 80012e2:	4b3a      	ldr	r3, [pc, #232]	@ (80013cc <main+0x1c0>)
 80012e4:	edd3 4a56 	vldr	s9, [r3, #344]	@ 0x158
	  printf("---------------\r\GX: %.2f, GY: %.2f, GZ: %.2f\r\nXLX: %.2f, XLY: %.2f, XLZ: %.2f\r\n",
 80012e8:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			  data.xlgyr.gx, data.xlgyr.gy, data.xlgyr.gz, data.xlgyr.xlx, data.xlgyr.xly, data.xlgyr.xlz);
 80012ec:	4b37      	ldr	r3, [pc, #220]	@ (80013cc <main+0x1c0>)
 80012ee:	edd3 3a57 	vldr	s7, [r3, #348]	@ 0x15c
	  printf("---------------\r\GX: %.2f, GY: %.2f, GZ: %.2f\r\nXLX: %.2f, XLY: %.2f, XLZ: %.2f\r\n",
 80012f2:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80012f6:	ed8d 3b08 	vstr	d3, [sp, #32]
 80012fa:	ed8d 4b06 	vstr	d4, [sp, #24]
 80012fe:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001302:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001306:	ed8d 7b00 	vstr	d7, [sp]
 800130a:	ec53 2b12 	vmov	r2, r3, d2
 800130e:	4830      	ldr	r0, [pc, #192]	@ (80013d0 <main+0x1c4>)
 8001310:	f009 f874 	bl	800a3fc <iprintf>
	  printf("Vcell: %.2f, SOC: %.2f, Crate: %.2f\r\n",
			  data.fgauge.vcell, data.fgauge.soc, data.fgauge.crate);
 8001314:	4b2d      	ldr	r3, [pc, #180]	@ (80013cc <main+0x1c0>)
 8001316:	edd3 7a5e 	vldr	s15, [r3, #376]	@ 0x178
	  printf("Vcell: %.2f, SOC: %.2f, Crate: %.2f\r\n",
 800131a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  data.fgauge.vcell, data.fgauge.soc, data.fgauge.crate);
 800131e:	4b2b      	ldr	r3, [pc, #172]	@ (80013cc <main+0x1c0>)
 8001320:	edd3 7a5f 	vldr	s15, [r3, #380]	@ 0x17c
	  printf("Vcell: %.2f, SOC: %.2f, Crate: %.2f\r\n",
 8001324:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  data.fgauge.vcell, data.fgauge.soc, data.fgauge.crate);
 8001328:	4b28      	ldr	r3, [pc, #160]	@ (80013cc <main+0x1c0>)
 800132a:	edd3 6a60 	vldr	s13, [r3, #384]	@ 0x180
	  printf("Vcell: %.2f, SOC: %.2f, Crate: %.2f\r\n",
 800132e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001332:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001336:	ed8d 7b00 	vstr	d7, [sp]
 800133a:	ec53 2b15 	vmov	r2, r3, d5
 800133e:	4825      	ldr	r0, [pc, #148]	@ (80013d4 <main+0x1c8>)
 8001340:	f009 f85c 	bl	800a3fc <iprintf>
	  printf("Temp: %.2f C, P: %.2f hPa, H: %.2f\r\n",
	  			  data.pth.temperature, data.pth.pressure, data.pth.humidity);
 8001344:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <main+0x1c0>)
 8001346:	edd3 7a5c 	vldr	s15, [r3, #368]	@ 0x170
	  printf("Temp: %.2f C, P: %.2f hPa, H: %.2f\r\n",
 800134a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
	  			  data.pth.temperature, data.pth.pressure, data.pth.humidity);
 800134e:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <main+0x1c0>)
 8001350:	edd3 7a5b 	vldr	s15, [r3, #364]	@ 0x16c
	  printf("Temp: %.2f C, P: %.2f hPa, H: %.2f\r\n",
 8001354:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	  			  data.pth.temperature, data.pth.pressure, data.pth.humidity);
 8001358:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <main+0x1c0>)
 800135a:	edd3 6a5d 	vldr	s13, [r3, #372]	@ 0x174
	  printf("Temp: %.2f C, P: %.2f hPa, H: %.2f\r\n",
 800135e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001362:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001366:	ed8d 7b00 	vstr	d7, [sp]
 800136a:	ec53 2b15 	vmov	r2, r3, d5
 800136e:	481a      	ldr	r0, [pc, #104]	@ (80013d8 <main+0x1cc>)
 8001370:	f009 f844 	bl	800a3fc <iprintf>
	  printf("R:%lu G:%lu B:%lu IR:%lu\r\n---------------\r\n",
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <main+0x1c0>)
 8001376:	f8d3 1150 	ldr.w	r1, [r3, #336]	@ 0x150
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <main+0x1c0>)
 800137c:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <main+0x1c0>)
 8001382:	f8d3 014c 	ldr.w	r0, [r3, #332]	@ 0x14c
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <main+0x1c0>)
 8001388:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	4603      	mov	r3, r0
 8001390:	4812      	ldr	r0, [pc, #72]	@ (80013dc <main+0x1d0>)
 8001392:	f009 f833 	bl	800a3fc <iprintf>
	  			  data.light.red, data.light.green, data.light.blue, data.light.ir);
//	  HAL_UART_Transmit(&huart8, buf, strlen((char*)buf), HAL_MAX_DELAY);

//	  HAL_UART_Transmit(&huart8, anm, strlen(anm), HAL_MAX_DELAY);
	  HAL_Delay(1000);
 8001396:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800139a:	f001 ff41 	bl	8003220 <HAL_Delay>
//	  ms8607_reset_pt();
//	  ms8607_reset_rh();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count--;
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	71fb      	strb	r3, [r7, #7]
  while (count)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f47f af72 	bne.w	8001290 <main+0x84>
 80013ac:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	0800c354 	.word	0x0800c354
 80013bc:	0800c36c 	.word	0x0800c36c
 80013c0:	0800c384 	.word	0x0800c384
 80013c4:	0800c39c 	.word	0x0800c39c
 80013c8:	0800c3b4 	.word	0x0800c3b4
 80013cc:	24000760 	.word	0x24000760
 80013d0:	0800c3c4 	.word	0x0800c3c4
 80013d4:	0800c414 	.word	0x0800c414
 80013d8:	0800c43c 	.word	0x0800c43c
 80013dc:	0800c464 	.word	0x0800c464

080013e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b09c      	sub	sp, #112	@ 0x70
 80013e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ea:	224c      	movs	r2, #76	@ 0x4c
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f009 f94c 	bl	800a68c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2220      	movs	r2, #32
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f009 f946 	bl	800a68c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001400:	2002      	movs	r0, #2
 8001402:	f003 fbf5 	bl	8004bf0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	4b29      	ldr	r3, [pc, #164]	@ (80014b0 <SystemClock_Config+0xd0>)
 800140c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800140e:	4a28      	ldr	r2, [pc, #160]	@ (80014b0 <SystemClock_Config+0xd0>)
 8001410:	f023 0301 	bic.w	r3, r3, #1
 8001414:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001416:	4b26      	ldr	r3, [pc, #152]	@ (80014b0 <SystemClock_Config+0xd0>)
 8001418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	4b24      	ldr	r3, [pc, #144]	@ (80014b4 <SystemClock_Config+0xd4>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001428:	4a22      	ldr	r2, [pc, #136]	@ (80014b4 <SystemClock_Config+0xd4>)
 800142a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <SystemClock_Config+0xd4>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800143c:	bf00      	nop
 800143e:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <SystemClock_Config+0xd4>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800144a:	d1f8      	bne.n	800143e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800144c:	2302      	movs	r3, #2
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001450:	2301      	movs	r3, #1
 8001452:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001454:	2340      	movs	r3, #64	@ 0x40
 8001456:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001458:	2300      	movs	r3, #0
 800145a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fbff 	bl	8004c64 <HAL_RCC_OscConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800146c:	f000 f994 	bl	8001798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001470:	233f      	movs	r3, #63	@ 0x3f
 8001472:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001484:	2340      	movs	r3, #64	@ 0x40
 8001486:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001488:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800148c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2101      	movs	r1, #1
 8001496:	4618      	mov	r0, r3
 8001498:	f004 f83e 	bl	8005518 <HAL_RCC_ClockConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014a2:	f000 f979 	bl	8001798 <Error_Handler>
  }
}
 80014a6:	bf00      	nop
 80014a8:	3770      	adds	r7, #112	@ 0x70
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	58000400 	.word	0x58000400
 80014b4:	58024800 	.word	0x58024800

080014b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <MX_I2C3_Init+0x74>)
 80014be:	4a1c      	ldr	r2, [pc, #112]	@ (8001530 <MX_I2C3_Init+0x78>)
 80014c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <MX_I2C3_Init+0x74>)
 80014c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001534 <MX_I2C3_Init+0x7c>)
 80014c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80014c8:	4b18      	ldr	r3, [pc, #96]	@ (800152c <MX_I2C3_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ce:	4b17      	ldr	r3, [pc, #92]	@ (800152c <MX_I2C3_Init+0x74>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d4:	4b15      	ldr	r3, [pc, #84]	@ (800152c <MX_I2C3_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <MX_I2C3_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <MX_I2C3_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MX_I2C3_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <MX_I2C3_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014f2:	480e      	ldr	r0, [pc, #56]	@ (800152c <MX_I2C3_Init+0x74>)
 80014f4:	f002 fb20 	bl	8003b38 <HAL_I2C_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80014fe:	f000 f94b 	bl	8001798 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001502:	2100      	movs	r1, #0
 8001504:	4809      	ldr	r0, [pc, #36]	@ (800152c <MX_I2C3_Init+0x74>)
 8001506:	f003 fadb 	bl	8004ac0 <HAL_I2CEx_ConfigAnalogFilter>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001510:	f000 f942 	bl	8001798 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001514:	2100      	movs	r1, #0
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_I2C3_Init+0x74>)
 8001518:	f003 fb1d 	bl	8004b56 <HAL_I2CEx_ConfigDigitalFilter>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001522:	f000 f939 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	240005f0 	.word	0x240005f0
 8001530:	40005c00 	.word	0x40005c00
 8001534:	00707cbb 	.word	0x00707cbb

08001538 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800153c:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <MX_SPI5_Init+0xa4>)
 800153e:	4a28      	ldr	r2, [pc, #160]	@ (80015e0 <MX_SPI5_Init+0xa8>)
 8001540:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001542:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <MX_SPI5_Init+0xa4>)
 8001544:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001548:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800154a:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <MX_SPI5_Init+0xa4>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001550:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <MX_SPI5_Init+0xa4>)
 8001552:	2207      	movs	r2, #7
 8001554:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001556:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <MX_SPI5_Init+0xa4>)
 8001558:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800155c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800155e:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <MX_SPI5_Init+0xa4>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001564:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <MX_SPI5_Init+0xa4>)
 8001566:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800156a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800156c:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <MX_SPI5_Init+0xa4>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <MX_SPI5_Init+0xa4>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <MX_SPI5_Init+0xa4>)
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <MX_SPI5_Init+0xa4>)
 8001580:	2200      	movs	r2, #0
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <MX_SPI5_Init+0xa4>)
 8001586:	2200      	movs	r2, #0
 8001588:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <MX_SPI5_Init+0xa4>)
 800158c:	2200      	movs	r2, #0
 800158e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <MX_SPI5_Init+0xa4>)
 8001592:	2200      	movs	r2, #0
 8001594:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <MX_SPI5_Init+0xa4>)
 8001598:	2200      	movs	r2, #0
 800159a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800159c:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <MX_SPI5_Init+0xa4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <MX_SPI5_Init+0xa4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <MX_SPI5_Init+0xa4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <MX_SPI5_Init+0xa4>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015b4:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <MX_SPI5_Init+0xa4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <MX_SPI5_Init+0xa4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MX_SPI5_Init+0xa4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	@ (80015dc <MX_SPI5_Init+0xa4>)
 80015c8:	f006 f95e 	bl	8007888 <HAL_SPI_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 80015d2:	f000 f8e1 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	24000644 	.word	0x24000644
 80015e0:	40015000 	.word	0x40015000

080015e4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80015e8:	4b22      	ldr	r3, [pc, #136]	@ (8001674 <MX_UART8_Init+0x90>)
 80015ea:	4a23      	ldr	r2, [pc, #140]	@ (8001678 <MX_UART8_Init+0x94>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80015ee:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <MX_UART8_Init+0x90>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <MX_UART8_Init+0x90>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001674 <MX_UART8_Init+0x90>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001602:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <MX_UART8_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <MX_UART8_Init+0x90>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <MX_UART8_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <MX_UART8_Init+0x90>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161a:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <MX_UART8_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001620:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <MX_UART8_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001626:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <MX_UART8_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800162c:	4811      	ldr	r0, [pc, #68]	@ (8001674 <MX_UART8_Init+0x90>)
 800162e:	f006 ffc2 	bl	80085b6 <HAL_UART_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001638:	f000 f8ae 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163c:	2100      	movs	r1, #0
 800163e:	480d      	ldr	r0, [pc, #52]	@ (8001674 <MX_UART8_Init+0x90>)
 8001640:	f008 f859 	bl	80096f6 <HAL_UARTEx_SetTxFifoThreshold>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800164a:	f000 f8a5 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800164e:	2100      	movs	r1, #0
 8001650:	4808      	ldr	r0, [pc, #32]	@ (8001674 <MX_UART8_Init+0x90>)
 8001652:	f008 f88e 	bl	8009772 <HAL_UARTEx_SetRxFifoThreshold>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800165c:	f000 f89c 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	@ (8001674 <MX_UART8_Init+0x90>)
 8001662:	f008 f80f 	bl	8009684 <HAL_UARTEx_DisableFifoMode>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800166c:	f000 f894 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	240006cc 	.word	0x240006cc
 8001678:	40007c00 	.word	0x40007c00

0800167c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	@ 0x28
 8001680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b29      	ldr	r3, [pc, #164]	@ (8001738 <MX_GPIO_Init+0xbc>)
 8001694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001698:	4a27      	ldr	r2, [pc, #156]	@ (8001738 <MX_GPIO_Init+0xbc>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016a2:	4b25      	ldr	r3, [pc, #148]	@ (8001738 <MX_GPIO_Init+0xbc>)
 80016a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80016b0:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <MX_GPIO_Init+0xbc>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b6:	4a20      	ldr	r2, [pc, #128]	@ (8001738 <MX_GPIO_Init+0xbc>)
 80016b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <MX_GPIO_Init+0xbc>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <MX_GPIO_Init+0xbc>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d4:	4a18      	ldr	r2, [pc, #96]	@ (8001738 <MX_GPIO_Init+0xbc>)
 80016d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016de:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <MX_GPIO_Init+0xbc>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <MX_GPIO_Init+0xbc>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f2:	4a11      	ldr	r2, [pc, #68]	@ (8001738 <MX_GPIO_Init+0xbc>)
 80016f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <MX_GPIO_Init+0xbc>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	2102      	movs	r1, #2
 800170e:	480b      	ldr	r0, [pc, #44]	@ (800173c <MX_GPIO_Init+0xc0>)
 8001710:	f002 f9f8 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001714:	2302      	movs	r3, #2
 8001716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	4804      	ldr	r0, [pc, #16]	@ (800173c <MX_GPIO_Init+0xc0>)
 800172c:	f001 ff30 	bl	8003590 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	@ 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	58024400 	.word	0x58024400
 800173c:	58022800 	.word	0x58022800

08001740 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001746:	463b      	mov	r3, r7
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001752:	f001 fea5 	bl	80034a0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001756:	2301      	movs	r3, #1
 8001758:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800175a:	2300      	movs	r3, #0
 800175c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001762:	231f      	movs	r3, #31
 8001764:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001766:	2387      	movs	r3, #135	@ 0x87
 8001768:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800176a:	2300      	movs	r3, #0
 800176c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800176e:	2300      	movs	r3, #0
 8001770:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001772:	2301      	movs	r3, #1
 8001774:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001776:	2301      	movs	r3, #1
 8001778:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001782:	463b      	mov	r3, r7
 8001784:	4618      	mov	r0, r3
 8001786:	f001 fec3 	bl	8003510 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800178a:	2004      	movs	r0, #4
 800178c:	f001 fea0 	bl	80034d0 <HAL_MPU_Enable>

}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179c:	b672      	cpsid	i
}
 800179e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <Error_Handler+0x8>

080017a4 <max1704x_init>:
/*************************************************************************
 * Initialization
 *************************************************************************/
extern IC3Daemon ic3;

bool max1704x_init(void) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
	uint8_t id;

	id = max1704x_get_id();
 80017aa:	f000 f871 	bl	8001890 <max1704x_get_id>
 80017ae:	4603      	mov	r3, r0
 80017b0:	77fb      	strb	r3, [r7, #31]
	if(id != MAX1704X_ID) {
 80017b2:	7ffb      	ldrb	r3, [r7, #31]
 80017b4:	2b0c      	cmp	r3, #12
 80017b6:	d001      	beq.n	80017bc <max1704x_init+0x18>
//		L_ERROR("Error: Failed to read MAX1704x Fuel gauge sensor - incorrect MAX1704X ID (%d)", id);
		return false;
 80017b8:	2300      	movs	r3, #0
 80017ba:	e05c      	b.n	8001876 <max1704x_init+0xd2>
	}

  // Configure fuel gauge interrupts
  if(ic3.fgauge_int_enabled) {
 80017bc:	4b30      	ldr	r3, [pc, #192]	@ (8001880 <max1704x_init+0xdc>)
 80017be:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d053      	beq.n	800186e <max1704x_init+0xca>
//    L_INFO("Fuel gauge interrupt enabled. Setting configurations for interrupt...");

    // Configure GPIO for external interrupt
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80017c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001884 <max1704x_init+0xe0>)
 80017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001884 <max1704x_init+0xe0>)
 80017ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001884 <max1704x_init+0xe0>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = MAX1704X_INT_PIN;
 80017f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017f6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017fc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017fe:	2301      	movs	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(MAX1704X_INT_PORT, &GPIO_InitStruct);
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	4619      	mov	r1, r3
 8001806:	4820      	ldr	r0, [pc, #128]	@ (8001888 <max1704x_init+0xe4>)
 8001808:	f001 fec2 	bl	8003590 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(MAX1704X_EXTI_IRQn, 0, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	2028      	movs	r0, #40	@ 0x28
 8001812:	f001 fe10 	bl	8003436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(MAX1704X_EXTI_IRQn);
 8001816:	2028      	movs	r0, #40	@ 0x28
 8001818:	f001 fe27 	bl	800346a <HAL_NVIC_EnableIRQ>

    // clear STATUS alerts
    uint16_t status = max1704x_get_status();
 800181c:	f000 fa7c 	bl	8001d18 <max1704x_get_status>
 8001820:	4603      	mov	r3, r0
 8001822:	83bb      	strh	r3, [r7, #28]
    max1704x_clear_status_alerts(MAX1704X_STATUS_RI_BIT + MAX1704X_STATUS_VH_BIT +
 8001824:	f44f 507c 	mov.w	r0, #16128	@ 0x3f00
 8001828:	f000 faa4 	bl	8001d74 <max1704x_clear_status_alerts>
            MAX1704X_STATUS_VL_BIT + MAX1704X_STATUS_VR_BIT +
            MAX1704X_STATUS_HD_BIT + MAX1704X_STATUS_SC_BIT);

    // Enable STATUS.EnVr (battery removal/reinsertion detection)
    max1704x_set_status_envr(true);
 800182c:	2001      	movs	r0, #1
 800182e:	f000 fad5 	bl	8001ddc <max1704x_set_status_envr>

    // Set VALRT.MIN/MAX (volage low/high)
    max1704x_set_valrt_min(ic3.fgauge_valrt_min);
 8001832:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <max1704x_init+0xdc>)
 8001834:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 8001838:	4618      	mov	r0, r3
 800183a:	f000 fa39 	bl	8001cb0 <max1704x_set_valrt_min>
    max1704x_set_valrt_max(ic3.fgauge_valrt_max);
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <max1704x_init+0xdc>)
 8001840:	f893 3339 	ldrb.w	r3, [r3, #825]	@ 0x339
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fa01 	bl	8001c4c <max1704x_set_valrt_max>

    // Set CONFIG.ATHD (SOC low)
    uint8_t athd = 32 - ic3.fgauge_soc_low;
 800184a:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <max1704x_init+0xdc>)
 800184c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8001850:	f1c3 0320 	rsb	r3, r3, #32
 8001854:	76fb      	strb	r3, [r7, #27]
    max1704x_set_config_athd(athd);
 8001856:	7efb      	ldrb	r3, [r7, #27]
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f969 	bl	8001b30 <max1704x_set_config_athd>

    // Enable CONFIG.ALSC (SOC change alert)
    max1704x_set_config_alsc(ic3.fgauge_soc_change_enabled);
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <max1704x_init+0xdc>)
 8001860:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 8001864:	4618      	mov	r0, r3
 8001866:	f000 f92f 	bl	8001ac8 <max1704x_set_config_alsc>

    // Clear CONFIG.ALRT bit
    max1704x_clear_config_alrt();
 800186a:	f000 f997 	bl	8001b9c <max1704x_clear_config_alrt>

  }

	printf("Fuel Gauge initialization completed\r\n");
 800186e:	4807      	ldr	r0, [pc, #28]	@ (800188c <max1704x_init+0xe8>)
 8001870:	f008 fe2c 	bl	800a4cc <puts>

	return true;
 8001874:	2301      	movs	r3, #1
}
 8001876:	4618      	mov	r0, r3
 8001878:	3720      	adds	r7, #32
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	24000260 	.word	0x24000260
 8001884:	58024400 	.word	0x58024400
 8001888:	58022000 	.word	0x58022000
 800188c:	0800c490 	.word	0x0800c490

08001890 <max1704x_get_id>:
}

/*************************************************************************
 * ID
 *************************************************************************/
uint8_t max1704x_get_id(void) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af04      	add	r7, sp, #16
	uint8_t rData[2] = {0};
 8001896:	2300      	movs	r3, #0
 8001898:	80bb      	strh	r3, [r7, #4]

	HAL_I2C_Mem_Read(&max1704x_i2c, MAX1704X_I2C_ADDR, MAX1704X_VRESET_ID_ADDR, 1, rData, 2, 10);
 800189a:	230a      	movs	r3, #10
 800189c:	9302      	str	r3, [sp, #8]
 800189e:	2302      	movs	r3, #2
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2301      	movs	r3, #1
 80018a8:	2218      	movs	r2, #24
 80018aa:	216c      	movs	r1, #108	@ 0x6c
 80018ac:	4803      	ldr	r0, [pc, #12]	@ (80018bc <max1704x_get_id+0x2c>)
 80018ae:	f002 fbed 	bl	800408c <HAL_I2C_Mem_Read>
//	L_DEBUG("Vreset/Id = %02X/%02X", rData[0], rData[1]);
	return rData[1];
 80018b2:	797b      	ldrb	r3, [r7, #5]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	240005f0 	.word	0x240005f0

080018c0 <max1704x_get_vcell>:
}

/*************************************************************************
 * VCELL
 *************************************************************************/
void max1704x_get_vcell(COT_DATA *data) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	6078      	str	r0, [r7, #4]
	uint8_t rData[2] = {0};
 80018c8:	2300      	movs	r3, #0
 80018ca:	81bb      	strh	r3, [r7, #12]
	uint8_t wData[1] = {MAX1704X_VCELL_ADDR};
 80018cc:	2302      	movs	r3, #2
 80018ce:	723b      	strb	r3, [r7, #8]

	// Problem using HAL_I2C_Mem_Read() where HAL_ERROR returned after 5 mins
	HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 1, 100);
 80018d0:	f107 0208 	add.w	r2, r7, #8
 80018d4:	2364      	movs	r3, #100	@ 0x64
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2301      	movs	r3, #1
 80018da:	216c      	movs	r1, #108	@ 0x6c
 80018dc:	481e      	ldr	r0, [pc, #120]	@ (8001958 <max1704x_get_vcell+0x98>)
 80018de:	f002 f9c7 	bl	8003c70 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(&max1704x_i2c, MAX1704X_I2C_ADDR, rData, 2, 100);
 80018e2:	f107 020c 	add.w	r2, r7, #12
 80018e6:	2364      	movs	r3, #100	@ 0x64
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2302      	movs	r3, #2
 80018ec:	216c      	movs	r1, #108	@ 0x6c
 80018ee:	481a      	ldr	r0, [pc, #104]	@ (8001958 <max1704x_get_vcell+0x98>)
 80018f0:	f002 fad6 	bl	8003ea0 <HAL_I2C_Master_Receive>
 80018f4:	4603      	mov	r3, r0
 80018f6:	73fb      	strb	r3, [r7, #15]
	if(hal_status != HAL_OK) {
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00a      	beq.n	8001914 <max1704x_get_vcell+0x54>
		printf("ERROR: Cannot read VCELL from MAX17048 Fuel Gauge sensor %d", hal_status);
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	4619      	mov	r1, r3
 8001902:	4816      	ldr	r0, [pc, #88]	@ (800195c <max1704x_get_vcell+0x9c>)
 8001904:	f008 fd7a 	bl	800a3fc <iprintf>
		data->fgauge.vcell = 0;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
	} else {
		data->fgauge.vcell = (((uint16_t)rData[0]<<8) + (uint16_t)rData[1]) * 78.125 / 1000000;
//		printf("VCELL = %f V (%02X, %02X)", data->fgauge.vcell, rData[0], rData[1]);
  }
}
 8001912:	e014      	b.n	800193e <max1704x_get_vcell+0x7e>
		data->fgauge.vcell = (((uint16_t)rData[0]<<8) + (uint16_t)rData[1]) * 78.125 / 1000000;
 8001914:	7b3b      	ldrb	r3, [r7, #12]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	7b7a      	ldrb	r2, [r7, #13]
 800191a:	4413      	add	r3, r2
 800191c:	ee07 3a90 	vmov	s15, r3
 8001920:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001924:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8001948 <max1704x_get_vcell+0x88>
 8001928:	ee27 6b06 	vmul.f64	d6, d7, d6
 800192c:	ed9f 5b08 	vldr	d5, [pc, #32]	@ 8001950 <max1704x_get_vcell+0x90>
 8001930:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001934:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	00000000 	.word	0x00000000
 800194c:	40538800 	.word	0x40538800
 8001950:	00000000 	.word	0x00000000
 8001954:	412e8480 	.word	0x412e8480
 8001958:	240005f0 	.word	0x240005f0
 800195c:	0800c4b8 	.word	0x0800c4b8

08001960 <max1704x_get_soc>:

/*************************************************************************
 * SOC
 *************************************************************************/
void max1704x_get_soc(COT_DATA *data) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af02      	add	r7, sp, #8
 8001966:	6078      	str	r0, [r7, #4]
	uint8_t rData[2] = {0};
 8001968:	2300      	movs	r3, #0
 800196a:	81bb      	strh	r3, [r7, #12]
	uint8_t wData[1] = {MAX1704X_SOC_ADDR};
 800196c:	2304      	movs	r3, #4
 800196e:	723b      	strb	r3, [r7, #8]

	HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 1, 100);
 8001970:	f107 0208 	add.w	r2, r7, #8
 8001974:	2364      	movs	r3, #100	@ 0x64
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2301      	movs	r3, #1
 800197a:	216c      	movs	r1, #108	@ 0x6c
 800197c:	4818      	ldr	r0, [pc, #96]	@ (80019e0 <max1704x_get_soc+0x80>)
 800197e:	f002 f977 	bl	8003c70 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(&max1704x_i2c, MAX1704X_I2C_ADDR, rData, 2, 100);
 8001982:	f107 020c 	add.w	r2, r7, #12
 8001986:	2364      	movs	r3, #100	@ 0x64
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2302      	movs	r3, #2
 800198c:	216c      	movs	r1, #108	@ 0x6c
 800198e:	4814      	ldr	r0, [pc, #80]	@ (80019e0 <max1704x_get_soc+0x80>)
 8001990:	f002 fa86 	bl	8003ea0 <HAL_I2C_Master_Receive>
 8001994:	4603      	mov	r3, r0
 8001996:	73fb      	strb	r3, [r7, #15]
	if(hal_status != HAL_OK) {
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <max1704x_get_soc+0x4a>
//		L_ERROR("ERROR: Cannot read SOC from MAX17048 Fuel Gauge sensor %d", hal_status);
		data->fgauge.soc = 0;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
	} else {
    data->fgauge.soc = (((uint16_t)rData[0]<<8) + (uint16_t)rData[1]) / 256.0;
//    L_DEBUG("SOC = %f %% (%02X, %02X)", data->fgauge.soc, rData[0], rData[1]);
  }
}
 80019a8:	e010      	b.n	80019cc <max1704x_get_soc+0x6c>
    data->fgauge.soc = (((uint16_t)rData[0]<<8) + (uint16_t)rData[1]) / 256.0;
 80019aa:	7b3b      	ldrb	r3, [r7, #12]
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	7b7a      	ldrb	r2, [r7, #13]
 80019b0:	4413      	add	r3, r2
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019ba:	ed9f 5b07 	vldr	d5, [pc, #28]	@ 80019d8 <max1704x_get_soc+0x78>
 80019be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	edc3 7a5f 	vstr	s15, [r3, #380]	@ 0x17c
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	f3af 8000 	nop.w
 80019d8:	00000000 	.word	0x00000000
 80019dc:	40700000 	.word	0x40700000
 80019e0:	240005f0 	.word	0x240005f0
 80019e4:	00000000 	.word	0x00000000

080019e8 <max1704x_get_crate>:

/*************************************************************************
 * CRATE
 *************************************************************************/
void max1704x_get_crate(COT_DATA *data) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	6078      	str	r0, [r7, #4]
	uint8_t rData[2];
	uint8_t wData[1] = {MAX1704X_CRATE_ADDR};
 80019f0:	2316      	movs	r3, #22
 80019f2:	723b      	strb	r3, [r7, #8]

	HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 1, 100);
 80019f4:	f107 0208 	add.w	r2, r7, #8
 80019f8:	2364      	movs	r3, #100	@ 0x64
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2301      	movs	r3, #1
 80019fe:	216c      	movs	r1, #108	@ 0x6c
 8001a00:	4819      	ldr	r0, [pc, #100]	@ (8001a68 <max1704x_get_crate+0x80>)
 8001a02:	f002 f935 	bl	8003c70 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(&max1704x_i2c, MAX1704X_I2C_ADDR, rData, 2, 100);
 8001a06:	f107 020c 	add.w	r2, r7, #12
 8001a0a:	2364      	movs	r3, #100	@ 0x64
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2302      	movs	r3, #2
 8001a10:	216c      	movs	r1, #108	@ 0x6c
 8001a12:	4815      	ldr	r0, [pc, #84]	@ (8001a68 <max1704x_get_crate+0x80>)
 8001a14:	f002 fa44 	bl	8003ea0 <HAL_I2C_Master_Receive>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	73fb      	strb	r3, [r7, #15]
	if(hal_status != HAL_OK) {
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <max1704x_get_crate+0x46>
//		L_ERROR("ERROR: Cannot read CRATE from MAX17048 Fuel Gauge sensor %d", hal_status);
		data->fgauge.crate = 0;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
	} else {
    data->fgauge.crate = (int16_t)(((uint16_t)rData[0]<<8) + (uint16_t)rData[1]) * 0.208;
//    L_DEBUG("CRATE = %f %%/hr (%02X, %02X)", data->fgauge.crate, rData[0], rData[1]);
  }
}
 8001a2c:	e013      	b.n	8001a56 <max1704x_get_crate+0x6e>
    data->fgauge.crate = (int16_t)(((uint16_t)rData[0]<<8) + (uint16_t)rData[1]) * 0.208;
 8001a2e:	7b3b      	ldrb	r3, [r7, #12]
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	7b7a      	ldrb	r2, [r7, #13]
 8001a36:	4413      	add	r3, r2
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	ee07 3a90 	vmov	s15, r3
 8001a40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a44:	ed9f 6b06 	vldr	d6, [pc, #24]	@ 8001a60 <max1704x_get_crate+0x78>
 8001a48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	edc3 7a60 	vstr	s15, [r3, #384]	@ 0x180
}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	76c8b439 	.word	0x76c8b439
 8001a64:	3fca9fbe 	.word	0x3fca9fbe
 8001a68:	240005f0 	.word	0x240005f0

08001a6c <max1704x_get_config>:
}

/*************************************************************************
 * CONFIG
 *************************************************************************/
uint16_t max1704x_get_config(void) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af02      	add	r7, sp, #8
  uint8_t rData[2];
  uint8_t wData[1] = {MAX1704X_CONFIG_ADDR};
 8001a72:	230c      	movs	r3, #12
 8001a74:	713b      	strb	r3, [r7, #4]
  uint16_t config = 0x0000;
 8001a76:	2300      	movs	r3, #0
 8001a78:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 1, 100);
 8001a7a:	1d3a      	adds	r2, r7, #4
 8001a7c:	2364      	movs	r3, #100	@ 0x64
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2301      	movs	r3, #1
 8001a82:	216c      	movs	r1, #108	@ 0x6c
 8001a84:	480f      	ldr	r0, [pc, #60]	@ (8001ac4 <max1704x_get_config+0x58>)
 8001a86:	f002 f8f3 	bl	8003c70 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(&max1704x_i2c, MAX1704X_I2C_ADDR, rData, 2, 100);
 8001a8a:	f107 0208 	add.w	r2, r7, #8
 8001a8e:	2364      	movs	r3, #100	@ 0x64
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2302      	movs	r3, #2
 8001a94:	216c      	movs	r1, #108	@ 0x6c
 8001a96:	480b      	ldr	r0, [pc, #44]	@ (8001ac4 <max1704x_get_config+0x58>)
 8001a98:	f002 fa02 	bl	8003ea0 <HAL_I2C_Master_Receive>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	737b      	strb	r3, [r7, #13]
	if(hal_status != HAL_OK) {
 8001aa0:	7b7b      	ldrb	r3, [r7, #13]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <max1704x_get_config+0x40>
//		L_ERROR("ERROR: Cannot read CONFIG from MAX17048 Fuel Gauge sensor %d", hal_status);
		config = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	81fb      	strh	r3, [r7, #14]
 8001aaa:	e005      	b.n	8001ab8 <max1704x_get_config+0x4c>
	} else {
    config = ((uint16_t)rData[0]<<8) + (uint16_t)rData[1];
 8001aac:	7a3b      	ldrb	r3, [r7, #8]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	7a7a      	ldrb	r2, [r7, #9]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	81fb      	strh	r3, [r7, #14]
//    L_DEBUG("CONFIG = %04X (%02X, %02X)", config, rData[0], rData[1]);
  }
  return config;
 8001ab8:	89fb      	ldrh	r3, [r7, #14]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	240005f0 	.word	0x240005f0

08001ac8 <max1704x_set_config_alsc>:
		return false;
	}
	return true;
}

bool max1704x_set_config_alsc(bool alsc) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
  uint16_t config = max1704x_get_config();
 8001ad2:	f7ff ffcb 	bl	8001a6c <max1704x_get_config>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	81fb      	strh	r3, [r7, #14]
  config &= ~0x0040; // clear alsc bit
 8001ada:	89fb      	ldrh	r3, [r7, #14]
 8001adc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ae0:	81fb      	strh	r3, [r7, #14]
  config |= (alsc<<6); // set alsc bit
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	019b      	lsls	r3, r3, #6
 8001ae6:	b21a      	sxth	r2, r3
 8001ae8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	81fb      	strh	r3, [r7, #14]
	uint8_t wData[3] = {MAX1704X_CONFIG_ADDR, (uint8_t)(config>>8), (uint8_t)(config&0x00FF)};
 8001af2:	230c      	movs	r3, #12
 8001af4:	723b      	strb	r3, [r7, #8]
 8001af6:	89fb      	ldrh	r3, [r7, #14]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	727b      	strb	r3, [r7, #9]
 8001b00:	89fb      	ldrh	r3, [r7, #14]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	72bb      	strb	r3, [r7, #10]

//  L_DEBUG("CONFIG: 0x%02X%02X", wData[1], wData[2]);

	if(HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 3, 10) != HAL_OK) {
 8001b06:	f107 0208 	add.w	r2, r7, #8
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2303      	movs	r3, #3
 8001b10:	216c      	movs	r1, #108	@ 0x6c
 8001b12:	4806      	ldr	r0, [pc, #24]	@ (8001b2c <max1704x_set_config_alsc+0x64>)
 8001b14:	f002 f8ac 	bl	8003c70 <HAL_I2C_Master_Transmit>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <max1704x_set_config_alsc+0x5a>
//		L_ERROR("Error: Failed to set CONFIG.ALSC to %04X", config);
		return false;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <max1704x_set_config_alsc+0x5c>
	}
	return true;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	240005f0 	.word	0x240005f0

08001b30 <max1704x_set_config_athd>:

bool max1704x_set_config_athd(uint8_t athd) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af02      	add	r7, sp, #8
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  uint16_t config = max1704x_get_config();
 8001b3a:	f7ff ff97 	bl	8001a6c <max1704x_get_config>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	81fb      	strh	r3, [r7, #14]
  config &= ~0x001F; // clear athd bits
 8001b42:	89fb      	ldrh	r3, [r7, #14]
 8001b44:	f023 031f 	bic.w	r3, r3, #31
 8001b48:	81fb      	strh	r3, [r7, #14]
  config |= athd&0x1F; // set athd bits
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	81fb      	strh	r3, [r7, #14]
	uint8_t wData[3] = {MAX1704X_CONFIG_ADDR, (uint8_t)(config>>8), (uint8_t)(config&0x00FF)};
 8001b5e:	230c      	movs	r3, #12
 8001b60:	723b      	strb	r3, [r7, #8]
 8001b62:	89fb      	ldrh	r3, [r7, #14]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	727b      	strb	r3, [r7, #9]
 8001b6c:	89fb      	ldrh	r3, [r7, #14]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	72bb      	strb	r3, [r7, #10]

//  L_DEBUG("CONFIG: 0x%02X%02X", wData[1], wData[2]);

	if(HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 3, 10) != HAL_OK) {
 8001b72:	f107 0208 	add.w	r2, r7, #8
 8001b76:	230a      	movs	r3, #10
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	216c      	movs	r1, #108	@ 0x6c
 8001b7e:	4806      	ldr	r0, [pc, #24]	@ (8001b98 <max1704x_set_config_athd+0x68>)
 8001b80:	f002 f876 	bl	8003c70 <HAL_I2C_Master_Transmit>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <max1704x_set_config_athd+0x5e>
//		L_ERROR("Error: Failed to set CONFIG.ATHD to %04X", config);
		return false;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e000      	b.n	8001b90 <max1704x_set_config_athd+0x60>
	}
	return true;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	240005f0 	.word	0x240005f0

08001b9c <max1704x_clear_config_alrt>:
	percent = 32 - ((uint8_t)config & 0x1F);
	return percent;
}
#endif

bool max1704x_clear_config_alrt(void) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af02      	add	r7, sp, #8
  uint16_t config = max1704x_get_config();
 8001ba2:	f7ff ff63 	bl	8001a6c <max1704x_get_config>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
  config &= ~0x0020; // clear alrt bit
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	f023 0320 	bic.w	r3, r3, #32
 8001bb0:	80fb      	strh	r3, [r7, #6]
	uint8_t wData[3] = {MAX1704X_CONFIG_ADDR, (uint8_t)(config>>8), (uint8_t)(config&0x00FF)};
 8001bb2:	230c      	movs	r3, #12
 8001bb4:	703b      	strb	r3, [r7, #0]
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	707b      	strb	r3, [r7, #1]
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	70bb      	strb	r3, [r7, #2]

//  L_DEBUG("CONFIG: 0x%02X%02X", wData[1], wData[2]);

	if(HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 3, 10) != HAL_OK) {
 8001bc6:	463a      	mov	r2, r7
 8001bc8:	230a      	movs	r3, #10
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2303      	movs	r3, #3
 8001bce:	216c      	movs	r1, #108	@ 0x6c
 8001bd0:	4806      	ldr	r0, [pc, #24]	@ (8001bec <max1704x_clear_config_alrt+0x50>)
 8001bd2:	f002 f84d 	bl	8003c70 <HAL_I2C_Master_Transmit>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <max1704x_clear_config_alrt+0x44>
//		L_ERROR("Error: Failed to clear CONFIG.ALRT to %04X", config);
		return false;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e000      	b.n	8001be2 <max1704x_clear_config_alrt+0x46>
	}
	return true;
 8001be0:	2301      	movs	r3, #1
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	240005f0 	.word	0x240005f0

08001bf0 <max1704x_get_vlrt>:

/*************************************************************************
 * VALRT (Read/Write)
 *************************************************************************/
uint16_t max1704x_get_vlrt(void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af02      	add	r7, sp, #8
  uint8_t rData[2];
  uint8_t wData[1] = {MAX1704X_VALRT_ADDR};
 8001bf6:	2314      	movs	r3, #20
 8001bf8:	713b      	strb	r3, [r7, #4]
  uint16_t vlrt = 0x0000;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 1, 100);
 8001bfe:	1d3a      	adds	r2, r7, #4
 8001c00:	2364      	movs	r3, #100	@ 0x64
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2301      	movs	r3, #1
 8001c06:	216c      	movs	r1, #108	@ 0x6c
 8001c08:	480f      	ldr	r0, [pc, #60]	@ (8001c48 <max1704x_get_vlrt+0x58>)
 8001c0a:	f002 f831 	bl	8003c70 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(&max1704x_i2c, MAX1704X_I2C_ADDR, rData, 2, 100);
 8001c0e:	f107 0208 	add.w	r2, r7, #8
 8001c12:	2364      	movs	r3, #100	@ 0x64
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2302      	movs	r3, #2
 8001c18:	216c      	movs	r1, #108	@ 0x6c
 8001c1a:	480b      	ldr	r0, [pc, #44]	@ (8001c48 <max1704x_get_vlrt+0x58>)
 8001c1c:	f002 f940 	bl	8003ea0 <HAL_I2C_Master_Receive>
 8001c20:	4603      	mov	r3, r0
 8001c22:	737b      	strb	r3, [r7, #13]
	if(hal_status != HAL_OK) {
 8001c24:	7b7b      	ldrb	r3, [r7, #13]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <max1704x_get_vlrt+0x40>
//		L_ERROR("ERROR: Cannot read VALRT from MAX17048 Fuel Gauge sensor %d", hal_status);
		vlrt = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	81fb      	strh	r3, [r7, #14]
 8001c2e:	e005      	b.n	8001c3c <max1704x_get_vlrt+0x4c>
	} else {
    vlrt = ((uint16_t)rData[0]<<8) + (uint16_t)rData[1];
 8001c30:	7a3b      	ldrb	r3, [r7, #8]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	7a7a      	ldrb	r2, [r7, #9]
 8001c38:	4413      	add	r3, r2
 8001c3a:	81fb      	strh	r3, [r7, #14]
//    L_DEBUG("VALRT = %04X (%02X, %02X)", vlrt, rData[0], rData[1]);
  }
  return vlrt;
 8001c3c:	89fb      	ldrh	r3, [r7, #14]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	240005f0 	.word	0x240005f0

08001c4c <max1704x_set_valrt_max>:

bool max1704x_set_valrt_max(uint8_t max) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  uint16_t valrt = max1704x_get_vlrt();
 8001c56:	f7ff ffcb 	bl	8001bf0 <max1704x_get_vlrt>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	81fb      	strh	r3, [r7, #14]
  valrt &= ~0x00FF; // clear max bits
 8001c5e:	89fb      	ldrh	r3, [r7, #14]
 8001c60:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c64:	81fb      	strh	r3, [r7, #14]
  valrt |= (uint16_t)max; // set max bits
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	89fb      	ldrh	r3, [r7, #14]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	81fb      	strh	r3, [r7, #14]
	uint8_t wData[3] = {MAX1704X_VALRT_ADDR, (uint8_t)(valrt>>8), (uint8_t)(valrt&0x00FF)};
 8001c70:	2314      	movs	r3, #20
 8001c72:	723b      	strb	r3, [r7, #8]
 8001c74:	89fb      	ldrh	r3, [r7, #14]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	727b      	strb	r3, [r7, #9]
 8001c7e:	89fb      	ldrh	r3, [r7, #14]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	72bb      	strb	r3, [r7, #10]

//  L_DEBUG("VALRT: 0x%02X%02X", wData[1], wData[2]);

	if(HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 3, 10) != HAL_OK) {
 8001c84:	f107 0208 	add.w	r2, r7, #8
 8001c88:	230a      	movs	r3, #10
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	216c      	movs	r1, #108	@ 0x6c
 8001c90:	4806      	ldr	r0, [pc, #24]	@ (8001cac <max1704x_set_valrt_max+0x60>)
 8001c92:	f001 ffed 	bl	8003c70 <HAL_I2C_Master_Transmit>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <max1704x_set_valrt_max+0x54>
//		L_ERROR("Error: Failed to set VALRT.MAX to %04X", valrt);
		return false;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e000      	b.n	8001ca2 <max1704x_set_valrt_max+0x56>
	}
	return true;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	240005f0 	.word	0x240005f0

08001cb0 <max1704x_set_valrt_min>:

bool max1704x_set_valrt_min(uint8_t min) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  uint16_t valrt = max1704x_get_vlrt();
 8001cba:	f7ff ff99 	bl	8001bf0 <max1704x_get_vlrt>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	81fb      	strh	r3, [r7, #14]
  valrt &= ~0xFF00; // clear min bits
 8001cc2:	89fb      	ldrh	r3, [r7, #14]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	81fb      	strh	r3, [r7, #14]
  valrt |= (((uint16_t)min)<<8); // set min bits
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b21a      	sxth	r2, r3
 8001cce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	81fb      	strh	r3, [r7, #14]
	uint8_t wData[3] = {MAX1704X_VALRT_ADDR, (uint8_t)(valrt>>8), (uint8_t)(valrt&0x00FF)};
 8001cd8:	2314      	movs	r3, #20
 8001cda:	723b      	strb	r3, [r7, #8]
 8001cdc:	89fb      	ldrh	r3, [r7, #14]
 8001cde:	0a1b      	lsrs	r3, r3, #8
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	727b      	strb	r3, [r7, #9]
 8001ce6:	89fb      	ldrh	r3, [r7, #14]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	72bb      	strb	r3, [r7, #10]

//  L_DEBUG("VALRT: 0x%02X%02X", wData[1], wData[2]);

	if(HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 3, 10) != HAL_OK) {
 8001cec:	f107 0208 	add.w	r2, r7, #8
 8001cf0:	230a      	movs	r3, #10
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	216c      	movs	r1, #108	@ 0x6c
 8001cf8:	4806      	ldr	r0, [pc, #24]	@ (8001d14 <max1704x_set_valrt_min+0x64>)
 8001cfa:	f001 ffb9 	bl	8003c70 <HAL_I2C_Master_Transmit>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <max1704x_set_valrt_min+0x58>
//		L_ERROR("Error: Failed to set VALRT.MAX to %04X", valrt);
		return false;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e000      	b.n	8001d0a <max1704x_set_valrt_min+0x5a>
	}
	return true;
 8001d08:	2301      	movs	r3, #1
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	240005f0 	.word	0x240005f0

08001d18 <max1704x_get_status>:

/*************************************************************************
 * STATUS
 *************************************************************************/
uint16_t max1704x_get_status(void) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af02      	add	r7, sp, #8
  uint8_t rData[2];
  uint8_t wData[1] = {MAX1704X_STATUS_ADDR};
 8001d1e:	231a      	movs	r3, #26
 8001d20:	713b      	strb	r3, [r7, #4]
  uint16_t status = 0x0000;
 8001d22:	2300      	movs	r3, #0
 8001d24:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 1, 100);
 8001d26:	1d3a      	adds	r2, r7, #4
 8001d28:	2364      	movs	r3, #100	@ 0x64
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	216c      	movs	r1, #108	@ 0x6c
 8001d30:	480f      	ldr	r0, [pc, #60]	@ (8001d70 <max1704x_get_status+0x58>)
 8001d32:	f001 ff9d 	bl	8003c70 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(&max1704x_i2c, MAX1704X_I2C_ADDR, rData, 2, 100);
 8001d36:	f107 0208 	add.w	r2, r7, #8
 8001d3a:	2364      	movs	r3, #100	@ 0x64
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2302      	movs	r3, #2
 8001d40:	216c      	movs	r1, #108	@ 0x6c
 8001d42:	480b      	ldr	r0, [pc, #44]	@ (8001d70 <max1704x_get_status+0x58>)
 8001d44:	f002 f8ac 	bl	8003ea0 <HAL_I2C_Master_Receive>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	737b      	strb	r3, [r7, #13]
	if(hal_status != HAL_OK) {
 8001d4c:	7b7b      	ldrb	r3, [r7, #13]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <max1704x_get_status+0x40>
//		L_ERROR("ERROR: Cannot read STATUS from MAX17048 Fuel Gauge sensor %d", hal_status);
		status = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	81fb      	strh	r3, [r7, #14]
 8001d56:	e005      	b.n	8001d64 <max1704x_get_status+0x4c>
	} else {
    status = ((uint16_t)rData[0]<<8) + (uint16_t)rData[1];
 8001d58:	7a3b      	ldrb	r3, [r7, #8]
 8001d5a:	021b      	lsls	r3, r3, #8
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	7a7a      	ldrb	r2, [r7, #9]
 8001d60:	4413      	add	r3, r2
 8001d62:	81fb      	strh	r3, [r7, #14]
//    L_DEBUG("STATUS = %04X (%02X, %02X)", status, rData[0], rData[1]);
  }
  return status;
 8001d64:	89fb      	ldrh	r3, [r7, #14]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	240005f0 	.word	0x240005f0

08001d74 <max1704x_clear_status_alerts>:

// just for clearing alerts
bool max1704x_clear_status_alerts(uint16_t alerts) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
  uint16_t status = max1704x_get_status();
 8001d7e:	f7ff ffcb 	bl	8001d18 <max1704x_get_status>
 8001d82:	4603      	mov	r3, r0
 8001d84:	81fb      	strh	r3, [r7, #14]
  status &= ~(alerts&0x3F00);
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	b21a      	sxth	r2, r3
 8001d94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	b21b      	sxth	r3, r3
 8001d9c:	81fb      	strh	r3, [r7, #14]

	uint8_t wData[3] = {MAX1704X_STATUS_ADDR, (uint8_t)(status>>8), 0x00};
 8001d9e:	231a      	movs	r3, #26
 8001da0:	723b      	strb	r3, [r7, #8]
 8001da2:	89fb      	ldrh	r3, [r7, #14]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	727b      	strb	r3, [r7, #9]
 8001dac:	2300      	movs	r3, #0
 8001dae:	72bb      	strb	r3, [r7, #10]

//  L_DEBUG("STATUS: 0x%02X%02X", (uint8_t)(status>>8), (uint8_t)status);

	if(HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 3, 10) != HAL_OK) {
 8001db0:	f107 0208 	add.w	r2, r7, #8
 8001db4:	230a      	movs	r3, #10
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2303      	movs	r3, #3
 8001dba:	216c      	movs	r1, #108	@ 0x6c
 8001dbc:	4806      	ldr	r0, [pc, #24]	@ (8001dd8 <max1704x_clear_status_alerts+0x64>)
 8001dbe:	f001 ff57 	bl	8003c70 <HAL_I2C_Master_Transmit>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <max1704x_clear_status_alerts+0x58>
//		L_ERROR("Error: Failed to set STATUS to %04X", status);
		return false;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e000      	b.n	8001dce <max1704x_clear_status_alerts+0x5a>
	}
	return true;
 8001dcc:	2301      	movs	r3, #1
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	240005f0 	.word	0x240005f0

08001ddc <max1704x_set_status_envr>:

bool max1704x_set_status_envr(bool envr) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af02      	add	r7, sp, #8
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  uint16_t status = max1704x_get_status();
 8001de6:	f7ff ff97 	bl	8001d18 <max1704x_get_status>
 8001dea:	4603      	mov	r3, r0
 8001dec:	81fb      	strh	r3, [r7, #14]
  status &= ~0x4000; // clear envr bit
 8001dee:	89fb      	ldrh	r3, [r7, #14]
 8001df0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001df4:	81fb      	strh	r3, [r7, #14]
  status |= (envr<<14); // set envr bit
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	039b      	lsls	r3, r3, #14
 8001dfa:	b21a      	sxth	r2, r3
 8001dfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	81fb      	strh	r3, [r7, #14]
	uint8_t wData[3] = {MAX1704X_STATUS_ADDR, (uint8_t)(status>>8), 0x00};
 8001e06:	231a      	movs	r3, #26
 8001e08:	723b      	strb	r3, [r7, #8]
 8001e0a:	89fb      	ldrh	r3, [r7, #14]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	727b      	strb	r3, [r7, #9]
 8001e14:	2300      	movs	r3, #0
 8001e16:	72bb      	strb	r3, [r7, #10]

//  L_DEBUG("STATUS: 0x%02X%02X", wData[1], wData[2]);

	if(HAL_I2C_Master_Transmit(&max1704x_i2c, MAX1704X_I2C_ADDR, wData, 3, 10) != HAL_OK) {
 8001e18:	f107 0208 	add.w	r2, r7, #8
 8001e1c:	230a      	movs	r3, #10
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2303      	movs	r3, #3
 8001e22:	216c      	movs	r1, #108	@ 0x6c
 8001e24:	4806      	ldr	r0, [pc, #24]	@ (8001e40 <max1704x_set_status_envr+0x64>)
 8001e26:	f001 ff23 	bl	8003c70 <HAL_I2C_Master_Transmit>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <max1704x_set_status_envr+0x58>
//		L_ERROR("Error: Failed to set STATUS.EnVR to %04X", status);
		return false;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e000      	b.n	8001e36 <max1704x_set_status_envr+0x5a>
	}
	return true;
 8001e34:	2301      	movs	r3, #1
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	240005f0 	.word	0x240005f0

08001e44 <ms8607_init>:
#define MS8607_RH_HEATER					MS8607_RH_HEATER_DISABLED

ms8607_pt_calib_t calib;

bool ms8607_init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
  ms8607_reset_pt(); // set once after power-on to make sure calibration PROM is loaded
 8001e4a:	f000 f849 	bl	8001ee0 <ms8607_reset_pt>
  if(HAL_I2C_IsDeviceReady(&ms8607_i2c, MS8607_PT_I2C_ADDR, 2, 1000) != HAL_OK){
 8001e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e52:	2202      	movs	r2, #2
 8001e54:	21ec      	movs	r1, #236	@ 0xec
 8001e56:	481c      	ldr	r0, [pc, #112]	@ (8001ec8 <ms8607_init+0x84>)
 8001e58:	f002 fa32 	bl	80042c0 <HAL_I2C_IsDeviceReady>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <ms8607_init+0x28>
		printf("ERROR: Cannot initialize PTH Sensor. Device not ready (PT)");
 8001e62:	481a      	ldr	r0, [pc, #104]	@ (8001ecc <ms8607_init+0x88>)
 8001e64:	f008 faca 	bl	800a3fc <iprintf>
		return false;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e029      	b.n	8001ec0 <ms8607_init+0x7c>
	}
  if(HAL_I2C_IsDeviceReady(&ms8607_i2c, MS8607_RH_I2C_ADDR, 2, 1000) != HAL_OK){
 8001e6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e70:	2202      	movs	r2, #2
 8001e72:	2180      	movs	r1, #128	@ 0x80
 8001e74:	4814      	ldr	r0, [pc, #80]	@ (8001ec8 <ms8607_init+0x84>)
 8001e76:	f002 fa23 	bl	80042c0 <HAL_I2C_IsDeviceReady>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d004      	beq.n	8001e8a <ms8607_init+0x46>
		printf("ERROR: Cannot initialize PTH Sensor. Device not ready (RH)");
 8001e80:	4813      	ldr	r0, [pc, #76]	@ (8001ed0 <ms8607_init+0x8c>)
 8001e82:	f008 fabb 	bl	800a3fc <iprintf>
		return false;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e01a      	b.n	8001ec0 <ms8607_init+0x7c>
	}
  
	// Read calibration data from PROM after power-on or reset
	if(!ms8607_prom_read_all_addr_pt(&calib)) {
 8001e8a:	4812      	ldr	r0, [pc, #72]	@ (8001ed4 <ms8607_init+0x90>)
 8001e8c:	f000 f85e 	bl	8001f4c <ms8607_prom_read_all_addr_pt>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f083 0301 	eor.w	r3, r3, #1
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d004      	beq.n	8001ea6 <ms8607_init+0x62>
		printf("ERROR: Failed to read PT PROM\r\n");
 8001e9c:	480e      	ldr	r0, [pc, #56]	@ (8001ed8 <ms8607_init+0x94>)
 8001e9e:	f008 fb15 	bl	800a4cc <puts>
		return false;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e00c      	b.n	8001ec0 <ms8607_init+0x7c>
//	log_debug(__func__, "c4 = %04X -> TCO", calib.tco);
//	printf("INFO: c5 = %04X -> TREF\r\n", calib.tref);
//	log_debug(__func__, "c6 = %04X -> TEMPSENS", calib.tempsens);
  
  // Configure User Register
	uint8_t user_reg = ms8607_read_usr_reg_rh();
 8001ea6:	f000 fc61 	bl	800276c <ms8607_read_usr_reg_rh>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
//  log_debug(__func__, "user_reg = %02X", user_reg);
	ms8607_write_usr_reg_rh(MS8607_RH_OSR, MS8607_RH_BATT_STATE, MS8607_RH_HEATER);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	f000 fc28 	bl	8002708 <ms8607_write_usr_reg_rh>

	printf("Pressure/Temperature/Humidity sensor initialization completed\r\n");
 8001eb8:	4808      	ldr	r0, [pc, #32]	@ (8001edc <ms8607_init+0x98>)
 8001eba:	f008 fb07 	bl	800a4cc <puts>
  return true;
 8001ebe:	2301      	movs	r3, #1
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	240005f0 	.word	0x240005f0
 8001ecc:	0800c528 	.word	0x0800c528
 8001ed0:	0800c564 	.word	0x0800c564
 8001ed4:	24000900 	.word	0x24000900
 8001ed8:	0800c5a0 	.word	0x0800c5a0
 8001edc:	0800c5c0 	.word	0x0800c5c0

08001ee0 <ms8607_reset_pt>:
 ********************************************************************/
/********************************************************************
 * Reset Sequence
 ********************************************************************/
void ms8607_reset_pt(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af02      	add	r7, sp, #8
  //L_INFO("Resetting the Pressure/Temperature sensor");
	uint8_t wData = MS8607_PT_RESET_CMD;
 8001ee6:	231e      	movs	r3, #30
 8001ee8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&ms8607_i2c, MS8607_PT_I2C_ADDR, &wData, 1, 100);
 8001eea:	1dfa      	adds	r2, r7, #7
 8001eec:	2364      	movs	r3, #100	@ 0x64
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	21ec      	movs	r1, #236	@ 0xec
 8001ef4:	4803      	ldr	r0, [pc, #12]	@ (8001f04 <ms8607_reset_pt+0x24>)
 8001ef6:	f001 febb 	bl	8003c70 <HAL_I2C_Master_Transmit>
//	printf("%d",HAL_I2C_Master_Transmit(&ms8607_i2c, MS8607_PT_I2C_ADDR, &wData, 1, 100));
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	240005f0 	.word	0x240005f0

08001f08 <ms8607_prom_read_one_addr_pt>:

/********************************************************************
 * PROM Read P&T Sequence
 ********************************************************************/
uint16_t ms8607_prom_read_one_addr_pt(uint8_t prom_addr)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
	//uint8_t wData;
	uint8_t rData[2];
	
	HAL_I2C_Master_Transmit(&ms8607_i2c, MS8607_PT_I2C_ADDR, &prom_addr, 1, 100);
 8001f12:	1dfa      	adds	r2, r7, #7
 8001f14:	2364      	movs	r3, #100	@ 0x64
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	21ec      	movs	r1, #236	@ 0xec
 8001f1c:	480a      	ldr	r0, [pc, #40]	@ (8001f48 <ms8607_prom_read_one_addr_pt+0x40>)
 8001f1e:	f001 fea7 	bl	8003c70 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&ms8607_i2c, MS8607_PT_I2C_ADDR, rData, 2, 100);
 8001f22:	f107 020c 	add.w	r2, r7, #12
 8001f26:	2364      	movs	r3, #100	@ 0x64
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	21ec      	movs	r1, #236	@ 0xec
 8001f2e:	4806      	ldr	r0, [pc, #24]	@ (8001f48 <ms8607_prom_read_one_addr_pt+0x40>)
 8001f30:	f001 ffb6 	bl	8003ea0 <HAL_I2C_Master_Receive>
//	log_debug(__func__, "rData[0] = %02X | ", rData[0]);
//	log_debug(__func__, "rData[1] = %02X | ", rData[1]);
//	log_debug(__func__, "PROM[ %02X ] = %04X", prom_addr, (uint16_t)(rData[0]<<8) + (uint16_t)rData[1]);
	return (uint16_t)(rData[0]<<8) + (uint16_t)rData[1];
 8001f34:	7b3b      	ldrb	r3, [r7, #12]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	7b7a      	ldrb	r2, [r7, #13]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	b29b      	uxth	r3, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	240005f0 	.word	0x240005f0

08001f4c <ms8607_prom_read_all_addr_pt>:

bool ms8607_prom_read_all_addr_pt(ms8607_pt_calib_t *calib)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	uint16_t temp[8];
	uint8_t crc_check;
	uint8_t crc;
	
	temp[0] = ms8607_prom_read_one_addr_pt(0xA0);
 8001f54:	20a0      	movs	r0, #160	@ 0xa0
 8001f56:	f7ff ffd7 	bl	8001f08 <ms8607_prom_read_one_addr_pt>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	81bb      	strh	r3, [r7, #12]
	temp[1] = ms8607_prom_read_one_addr_pt(0xA2);
 8001f5e:	20a2      	movs	r0, #162	@ 0xa2
 8001f60:	f7ff ffd2 	bl	8001f08 <ms8607_prom_read_one_addr_pt>
 8001f64:	4603      	mov	r3, r0
 8001f66:	81fb      	strh	r3, [r7, #14]
	temp[2] = ms8607_prom_read_one_addr_pt(0xA4);
 8001f68:	20a4      	movs	r0, #164	@ 0xa4
 8001f6a:	f7ff ffcd 	bl	8001f08 <ms8607_prom_read_one_addr_pt>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	823b      	strh	r3, [r7, #16]
	temp[3] = ms8607_prom_read_one_addr_pt(0xA6);
 8001f72:	20a6      	movs	r0, #166	@ 0xa6
 8001f74:	f7ff ffc8 	bl	8001f08 <ms8607_prom_read_one_addr_pt>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	827b      	strh	r3, [r7, #18]
	temp[4] = ms8607_prom_read_one_addr_pt(0xA8);
 8001f7c:	20a8      	movs	r0, #168	@ 0xa8
 8001f7e:	f7ff ffc3 	bl	8001f08 <ms8607_prom_read_one_addr_pt>
 8001f82:	4603      	mov	r3, r0
 8001f84:	82bb      	strh	r3, [r7, #20]
	temp[5] = ms8607_prom_read_one_addr_pt(0xAA);
 8001f86:	20aa      	movs	r0, #170	@ 0xaa
 8001f88:	f7ff ffbe 	bl	8001f08 <ms8607_prom_read_one_addr_pt>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	82fb      	strh	r3, [r7, #22]
	temp[6] = ms8607_prom_read_one_addr_pt(0xAC);
 8001f90:	20ac      	movs	r0, #172	@ 0xac
 8001f92:	f7ff ffb9 	bl	8001f08 <ms8607_prom_read_one_addr_pt>
 8001f96:	4603      	mov	r3, r0
 8001f98:	833b      	strh	r3, [r7, #24]
//	printf("%04X\r\n%04X\r\n%04X\r\n%04X\r\n%04X\r\n%04X\r\n%04X\r\n",temp[0],temp[1],temp[2],
//			temp[3],temp[4],temp[5],temp[6]);
	
	// check CRC
	crc = ((temp[0] & 0xF000)>>12);
 8001f9a:	89bb      	ldrh	r3, [r7, #12]
 8001f9c:	0b1b      	lsrs	r3, r3, #12
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	77fb      	strb	r3, [r7, #31]
//	printf("real crc= %4X\r\n",crc);

	crc_check = ms8607_crc4_pt(temp);
 8001fa2:	f107 030c 	add.w	r3, r7, #12
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fc8e 	bl	80028c8 <ms8607_crc4_pt>
 8001fac:	4603      	mov	r3, r0
 8001fae:	77bb      	strb	r3, [r7, #30]

//	printf("old crc= %4X\r\n",crc);

//	printf("PT CRC (%02X) =? remainder (%02X)\r\n", crc, crc_check);
	if(crc_check != crc) {
 8001fb0:	7fba      	ldrb	r2, [r7, #30]
 8001fb2:	7ffb      	ldrb	r3, [r7, #31]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d007      	beq.n	8001fc8 <ms8607_prom_read_all_addr_pt+0x7c>
		printf("ERROR: PT CRC (%02X) does not match remainder (%02X)\r\n", crc, crc_check);
 8001fb8:	7ffb      	ldrb	r3, [r7, #31]
 8001fba:	7fba      	ldrb	r2, [r7, #30]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4808      	ldr	r0, [pc, #32]	@ (8001fe0 <ms8607_prom_read_all_addr_pt+0x94>)
 8001fc0:	f008 fa1c 	bl	800a3fc <iprintf>
		return false;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e007      	b.n	8001fd8 <ms8607_prom_read_all_addr_pt+0x8c>
	} 
	memcpy(calib, temp, sizeof(temp));
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	2210      	movs	r2, #16
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f008 fbea 	bl	800a7aa <memcpy>
	return true;
 8001fd6:	2301      	movs	r3, #1
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3720      	adds	r7, #32
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	0800c600 	.word	0x0800c600

08001fe4 <ms8607_read_adc_pt>:

/********************************************************************
 * Conversion Sequence
 ********************************************************************/
uint32_t ms8607_read_adc_pt(uint8_t convert_cmd)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
	uint8_t wData;
	uint8_t rData[3];
	
	// Send command to start conversion
	HAL_I2C_Master_Transmit(&ms8607_i2c, MS8607_PT_I2C_ADDR, &convert_cmd, 1, 100);
 8001fee:	1dfa      	adds	r2, r7, #7
 8001ff0:	2364      	movs	r3, #100	@ 0x64
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	21ec      	movs	r1, #236	@ 0xec
 8001ff8:	4812      	ldr	r0, [pc, #72]	@ (8002044 <ms8607_read_adc_pt+0x60>)
 8001ffa:	f001 fe39 	bl	8003c70 <HAL_I2C_Master_Transmit>
	// Wait for conversion to finish
	osDelay(MS8607_PT_CONVERT_DELAY);
 8001ffe:	2001      	movs	r0, #1
 8002000:	f7ff f8e6 	bl	80011d0 <osDelay>
	// Read ADC
	wData = MS8607_PT_ADC_READ_CMD;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&ms8607_i2c, MS8607_PT_I2C_ADDR, &wData, 1, 100);
 8002008:	f107 020f 	add.w	r2, r7, #15
 800200c:	2364      	movs	r3, #100	@ 0x64
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2301      	movs	r3, #1
 8002012:	21ec      	movs	r1, #236	@ 0xec
 8002014:	480b      	ldr	r0, [pc, #44]	@ (8002044 <ms8607_read_adc_pt+0x60>)
 8002016:	f001 fe2b 	bl	8003c70 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&ms8607_i2c, MS8607_PT_I2C_ADDR, rData, 3, 100);
 800201a:	f107 020c 	add.w	r2, r7, #12
 800201e:	2364      	movs	r3, #100	@ 0x64
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2303      	movs	r3, #3
 8002024:	21ec      	movs	r1, #236	@ 0xec
 8002026:	4807      	ldr	r0, [pc, #28]	@ (8002044 <ms8607_read_adc_pt+0x60>)
 8002028:	f001 ff3a 	bl	8003ea0 <HAL_I2C_Master_Receive>
	
	return ((uint32_t)rData[0]<<16) + ((uint32_t)rData[1]<<8)+ (uint32_t)rData[2];
 800202c:	7b3b      	ldrb	r3, [r7, #12]
 800202e:	041a      	lsls	r2, r3, #16
 8002030:	7b7b      	ldrb	r3, [r7, #13]
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	4413      	add	r3, r2
 8002036:	7bba      	ldrb	r2, [r7, #14]
 8002038:	4413      	add	r3, r2
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	240005f0 	.word	0x240005f0

08002048 <ms8607_get_pt>:

bool ms8607_get_pt(COT_DATA *data)
{
 8002048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800204c:	b0e6      	sub	sp, #408	@ 0x198
 800204e:	af00      	add	r7, sp, #0
 8002050:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
	uint32_t d1, d2;
	int32_t dT, T2;
	int64_t off, sens, off2, sens2;
	int32_t temp, pres;
	
	if(HAL_I2C_IsDeviceReady(&ms8607_i2c, MS8607_PT_I2C_ADDR, 2, 1000) != HAL_OK){
 8002054:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002058:	2202      	movs	r2, #2
 800205a:	21ec      	movs	r1, #236	@ 0xec
 800205c:	4805      	ldr	r0, [pc, #20]	@ (8002074 <ms8607_get_pt+0x2c>)
 800205e:	f002 f92f 	bl	80042c0 <HAL_I2C_IsDeviceReady>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d009      	beq.n	800207c <ms8607_get_pt+0x34>
		printf("ERROR: PTH Sensor not ready (PT)");
 8002068:	4803      	ldr	r0, [pc, #12]	@ (8002078 <ms8607_get_pt+0x30>)
 800206a:	f008 f9c7 	bl	800a3fc <iprintf>
		return false;
 800206e:	2300      	movs	r3, #0
 8002070:	e343      	b.n	80026fa <ms8607_get_pt+0x6b2>
 8002072:	bf00      	nop
 8002074:	240005f0 	.word	0x240005f0
 8002078:	0800c638 	.word	0x0800c638
	}
	
	// Read digital pressure and temperature data
	d1 = ms8607_read_adc_pt(MS8607_PT_OSR_D1_CMD);
 800207c:	2040      	movs	r0, #64	@ 0x40
 800207e:	f7ff ffb1 	bl	8001fe4 <ms8607_read_adc_pt>
 8002082:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
	d2 = ms8607_read_adc_pt(MS8607_PT_OSR_D2_CMD);
 8002086:	2050      	movs	r0, #80	@ 0x50
 8002088:	f7ff ffac 	bl	8001fe4 <ms8607_read_adc_pt>
 800208c:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
//	printf("P_ADC = %X\r\n", d1);
//	printf("T_ADC = %X\r\n", d2);
	
	// Calculate temperature
	dT = (int32_t)d2 - ((int32_t)calib.tref << 8);
 8002090:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002094:	4bd9      	ldr	r3, [pc, #868]	@ (80023fc <ms8607_get_pt+0x3b4>)
 8002096:	895b      	ldrh	r3, [r3, #10]
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
//	printf("dT = %d\r\n", dT);
	temp = 2000 + (((int64_t)dT * (int64_t)calib.tempsens) >> 23);
 80020a0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80020a4:	17da      	asrs	r2, r3, #31
 80020a6:	469a      	mov	sl, r3
 80020a8:	4693      	mov	fp, r2
 80020aa:	4bd4      	ldr	r3, [pc, #848]	@ (80023fc <ms8607_get_pt+0x3b4>)
 80020ac:	899b      	ldrh	r3, [r3, #12]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2200      	movs	r2, #0
 80020b2:	4698      	mov	r8, r3
 80020b4:	4691      	mov	r9, r2
 80020b6:	fb08 f20b 	mul.w	r2, r8, fp
 80020ba:	fb0a f309 	mul.w	r3, sl, r9
 80020be:	4413      	add	r3, r2
 80020c0:	fbaa 4508 	umull	r4, r5, sl, r8
 80020c4:	442b      	add	r3, r5
 80020c6:	461d      	mov	r5, r3
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	0de2      	lsrs	r2, r4, #23
 80020d2:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 80020d6:	15eb      	asrs	r3, r5, #23
 80020d8:	4613      	mov	r3, r2
 80020da:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80020de:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
	
//	data->pth.temperature  = (float)temp / 100;
//	log_debug(__func__, "temperature = %f degC", data->pth.temperature );
	
	// Calculate temperature compensated pressure (first order)
	off = ((int64_t)calib.off << 17) + ((int64_t)(calib.tco * dT) >> 6);
 80020e2:	4bc6      	ldr	r3, [pc, #792]	@ (80023fc <ms8607_get_pt+0x3b4>)
 80020e4:	889b      	ldrh	r3, [r3, #4]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2200      	movs	r2, #0
 80020ea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80020ee:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80020f2:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80020f6:	460b      	mov	r3, r1
 80020f8:	0bdb      	lsrs	r3, r3, #15
 80020fa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80020fe:	460b      	mov	r3, r1
 8002100:	045b      	lsls	r3, r3, #17
 8002102:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002106:	4bbd      	ldr	r3, [pc, #756]	@ (80023fc <ms8607_get_pt+0x3b4>)
 8002108:	891b      	ldrh	r3, [r3, #8]
 800210a:	461a      	mov	r2, r3
 800210c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	119b      	asrs	r3, r3, #6
 8002116:	17da      	asrs	r2, r3, #31
 8002118:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800211c:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8002120:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8002124:	4623      	mov	r3, r4
 8002126:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 800212a:	4602      	mov	r2, r0
 800212c:	189b      	adds	r3, r3, r2
 800212e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002130:	460b      	mov	r3, r1
 8002132:	462a      	mov	r2, r5
 8002134:	eb42 0303 	adc.w	r3, r2, r3
 8002138:	647b      	str	r3, [r7, #68]	@ 0x44
 800213a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800213e:	e9c7 345a 	strd	r3, r4, [r7, #360]	@ 0x168
	sens = ((int64_t)calib.sens << 16) + ((int64_t)(calib.tcs * dT) >> 7);
 8002142:	4bae      	ldr	r3, [pc, #696]	@ (80023fc <ms8607_get_pt+0x3b4>)
 8002144:	885b      	ldrh	r3, [r3, #2]
 8002146:	b29b      	uxth	r3, r3
 8002148:	2200      	movs	r2, #0
 800214a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800214e:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8002152:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002156:	460b      	mov	r3, r1
 8002158:	0c1b      	lsrs	r3, r3, #16
 800215a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800215e:	460b      	mov	r3, r1
 8002160:	041b      	lsls	r3, r3, #16
 8002162:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002166:	4ba5      	ldr	r3, [pc, #660]	@ (80023fc <ms8607_get_pt+0x3b4>)
 8002168:	88db      	ldrh	r3, [r3, #6]
 800216a:	461a      	mov	r2, r3
 800216c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8002170:	fb02 f303 	mul.w	r3, r2, r3
 8002174:	11db      	asrs	r3, r3, #7
 8002176:	17da      	asrs	r2, r3, #31
 8002178:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800217c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002180:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8002184:	4623      	mov	r3, r4
 8002186:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 800218a:	4602      	mov	r2, r0
 800218c:	189b      	adds	r3, r3, r2
 800218e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002190:	460b      	mov	r3, r1
 8002192:	462a      	mov	r2, r5
 8002194:	eb42 0303 	adc.w	r3, r2, r3
 8002198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800219a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800219e:	e9c7 3458 	strd	r3, r4, [r7, #352]	@ 0x160
//	log_debug(__func__, "off = %lld", off);
//	log_debug(__func__, "sens = %lld", sens);
	
	// Calculate temperature compensated pressure (second order)
	if(temp < 2000) { // 20 degC
 80021a2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80021a6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80021aa:	f280 81d0 	bge.w	800254e <ms8607_get_pt+0x506>
		T2 = (3 * (int64_t)dT * (int64_t)dT) >> 33;
 80021ae:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80021b2:	17da      	asrs	r2, r3, #31
 80021b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80021b8:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80021bc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80021c0:	17da      	asrs	r2, r3, #31
 80021c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80021c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80021ca:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80021ce:	462b      	mov	r3, r5
 80021d0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80021d4:	4642      	mov	r2, r8
 80021d6:	fb02 f203 	mul.w	r2, r2, r3
 80021da:	464b      	mov	r3, r9
 80021dc:	4621      	mov	r1, r4
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	4622      	mov	r2, r4
 80021e6:	4641      	mov	r1, r8
 80021e8:	fba2 1201 	umull	r1, r2, r2, r1
 80021ec:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80021f0:	460a      	mov	r2, r1
 80021f2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80021f6:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80021fa:	4413      	add	r3, r2
 80021fc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002200:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 8002204:	4622      	mov	r2, r4
 8002206:	462b      	mov	r3, r5
 8002208:	1891      	adds	r1, r2, r2
 800220a:	6339      	str	r1, [r7, #48]	@ 0x30
 800220c:	415b      	adcs	r3, r3
 800220e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002210:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002214:	4621      	mov	r1, r4
 8002216:	1851      	adds	r1, r2, r1
 8002218:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800221c:	4629      	mov	r1, r5
 800221e:	eb43 0101 	adc.w	r1, r3, r1
 8002222:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8002232:	4629      	mov	r1, r5
 8002234:	104a      	asrs	r2, r1, #1
 8002236:	4629      	mov	r1, r5
 8002238:	17cb      	asrs	r3, r1, #31
 800223a:	4613      	mov	r3, r2
 800223c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
		off2 = (61 * (int64_t)(temp - 2000) * (int64_t)(temp - 2000)) >> 4;
 8002240:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8002244:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8002248:	17da      	asrs	r2, r3, #31
 800224a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800224e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8002252:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8002256:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800225a:	17da      	asrs	r2, r3, #31
 800225c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002260:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002264:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002268:	462b      	mov	r3, r5
 800226a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800226e:	4642      	mov	r2, r8
 8002270:	fb02 f203 	mul.w	r2, r2, r3
 8002274:	464b      	mov	r3, r9
 8002276:	4621      	mov	r1, r4
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	4622      	mov	r2, r4
 8002280:	4641      	mov	r1, r8
 8002282:	fba2 1201 	umull	r1, r2, r2, r1
 8002286:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 800228a:	460a      	mov	r2, r1
 800228c:	f8c7 2140 	str.w	r2, [r7, #320]	@ 0x140
 8002290:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002294:	4413      	add	r3, r2
 8002296:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800229a:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 800229e:	4622      	mov	r2, r4
 80022a0:	462b      	mov	r3, r5
 80022a2:	f04f 0000 	mov.w	r0, #0
 80022a6:	f04f 0100 	mov.w	r1, #0
 80022aa:	0119      	lsls	r1, r3, #4
 80022ac:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80022b0:	0110      	lsls	r0, r2, #4
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4621      	mov	r1, r4
 80022b8:	1a51      	subs	r1, r2, r1
 80022ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80022bc:	4629      	mov	r1, r5
 80022be:	eb63 0301 	sbc.w	r3, r3, r1
 80022c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80022d0:	4649      	mov	r1, r9
 80022d2:	008b      	lsls	r3, r1, #2
 80022d4:	4641      	mov	r1, r8
 80022d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022da:	4641      	mov	r1, r8
 80022dc:	008a      	lsls	r2, r1, #2
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	4603      	mov	r3, r0
 80022e4:	4622      	mov	r2, r4
 80022e6:	189b      	adds	r3, r3, r2
 80022e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022ec:	462b      	mov	r3, r5
 80022ee:	460a      	mov	r2, r1
 80022f0:	eb42 0303 	adc.w	r3, r2, r3
 80022f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8002304:	4621      	mov	r1, r4
 8002306:	090a      	lsrs	r2, r1, #4
 8002308:	4629      	mov	r1, r5
 800230a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800230e:	4629      	mov	r1, r5
 8002310:	110b      	asrs	r3, r1, #4
 8002312:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
		sens2 = (29 * (int64_t)(temp - 2000) * (int64_t)(temp- 2000)) >> 4;
 8002316:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800231a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800231e:	17da      	asrs	r2, r3, #31
 8002320:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002324:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8002328:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800232c:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8002330:	17da      	asrs	r2, r3, #31
 8002332:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002336:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800233a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800233e:	462b      	mov	r3, r5
 8002340:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8002344:	4642      	mov	r2, r8
 8002346:	fb02 f203 	mul.w	r2, r2, r3
 800234a:	464b      	mov	r3, r9
 800234c:	4621      	mov	r1, r4
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	4622      	mov	r2, r4
 8002356:	4641      	mov	r1, r8
 8002358:	fba2 1201 	umull	r1, r2, r2, r1
 800235c:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8002360:	460a      	mov	r2, r1
 8002362:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 8002366:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800236a:	4413      	add	r3, r2
 800236c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002370:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8002374:	4622      	mov	r2, r4
 8002376:	462b      	mov	r3, r5
 8002378:	f04f 0000 	mov.w	r0, #0
 800237c:	f04f 0100 	mov.w	r1, #0
 8002380:	00d9      	lsls	r1, r3, #3
 8002382:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002386:	00d0      	lsls	r0, r2, #3
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4621      	mov	r1, r4
 800238e:	1a51      	subs	r1, r2, r1
 8002390:	6239      	str	r1, [r7, #32]
 8002392:	4629      	mov	r1, r5
 8002394:	eb63 0301 	sbc.w	r3, r3, r1
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023a6:	4649      	mov	r1, r9
 80023a8:	008b      	lsls	r3, r1, #2
 80023aa:	4641      	mov	r1, r8
 80023ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023b0:	4641      	mov	r1, r8
 80023b2:	008a      	lsls	r2, r1, #2
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	4603      	mov	r3, r0
 80023ba:	4622      	mov	r2, r4
 80023bc:	189b      	adds	r3, r3, r2
 80023be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80023c2:	462b      	mov	r3, r5
 80023c4:	460a      	mov	r2, r1
 80023c6:	eb42 0303 	adc.w	r3, r2, r3
 80023ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80023da:	4621      	mov	r1, r4
 80023dc:	090a      	lsrs	r2, r1, #4
 80023de:	4629      	mov	r1, r5
 80023e0:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80023e4:	4629      	mov	r1, r5
 80023e6:	110b      	asrs	r3, r1, #4
 80023e8:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
//		log_debug(__func__, "<20 : T2 = %d", T2);
//		log_debug(__func__, "<20 : OFF2 = %lld", off2);
//		log_debug(__func__, "<20 : SENS2 = %lld", sens2);
		if(temp < -1500) { // -15 degC
 80023ec:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80023f0:	4b03      	ldr	r3, [pc, #12]	@ (8002400 <ms8607_get_pt+0x3b8>)
 80023f2:	429a      	cmp	r2, r3
 80023f4:	f280 80fe 	bge.w	80025f4 <ms8607_get_pt+0x5ac>
 80023f8:	e006      	b.n	8002408 <ms8607_get_pt+0x3c0>
 80023fa:	bf00      	nop
 80023fc:	24000900 	.word	0x24000900
 8002400:	fffffa24 	.word	0xfffffa24
 8002404:	42c80000 	.word	0x42c80000
			off2 += (17 * (int64_t)(temp + 1500) * (int64_t)(temp + 1500));
 8002408:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800240c:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8002410:	17da      	asrs	r2, r3, #31
 8002412:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002416:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800241a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800241e:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8002422:	17da      	asrs	r2, r3, #31
 8002424:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002428:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800242c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8002430:	462b      	mov	r3, r5
 8002432:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8002436:	4642      	mov	r2, r8
 8002438:	fb02 f203 	mul.w	r2, r2, r3
 800243c:	464b      	mov	r3, r9
 800243e:	4621      	mov	r1, r4
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	4622      	mov	r2, r4
 8002448:	4641      	mov	r1, r8
 800244a:	fba2 1201 	umull	r1, r2, r2, r1
 800244e:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8002452:	460a      	mov	r2, r1
 8002454:	f8c7 2130 	str.w	r2, [r7, #304]	@ 0x130
 8002458:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800245c:	4413      	add	r3, r2
 800245e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8002462:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 8002466:	4622      	mov	r2, r4
 8002468:	462b      	mov	r3, r5
 800246a:	f04f 0000 	mov.w	r0, #0
 800246e:	f04f 0100 	mov.w	r1, #0
 8002472:	0119      	lsls	r1, r3, #4
 8002474:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002478:	0110      	lsls	r0, r2, #4
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4621      	mov	r1, r4
 8002480:	1851      	adds	r1, r2, r1
 8002482:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8002486:	4629      	mov	r1, r5
 8002488:	eb43 0101 	adc.w	r1, r3, r1
 800248c:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8002490:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8002494:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8002498:	4621      	mov	r1, r4
 800249a:	1851      	adds	r1, r2, r1
 800249c:	61b9      	str	r1, [r7, #24]
 800249e:	4629      	mov	r1, r5
 80024a0:	eb43 0101 	adc.w	r1, r3, r1
 80024a4:	61f9      	str	r1, [r7, #28]
 80024a6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80024aa:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
			sens2 += (9 * (int64_t)(temp + 1500) * (int64_t)(temp + 1500));
 80024ae:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80024b2:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80024b6:	17da      	asrs	r2, r3, #31
 80024b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80024bc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80024c0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80024c4:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80024c8:	17da      	asrs	r2, r3, #31
 80024ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024cc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80024ce:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80024d2:	462b      	mov	r3, r5
 80024d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80024d8:	4642      	mov	r2, r8
 80024da:	fb02 f203 	mul.w	r2, r2, r3
 80024de:	464b      	mov	r3, r9
 80024e0:	4621      	mov	r1, r4
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	4622      	mov	r2, r4
 80024ea:	4641      	mov	r1, r8
 80024ec:	fba2 1201 	umull	r1, r2, r2, r1
 80024f0:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80024f4:	460a      	mov	r2, r1
 80024f6:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 80024fa:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80024fe:	4413      	add	r3, r2
 8002500:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002504:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 8002508:	4622      	mov	r2, r4
 800250a:	462b      	mov	r3, r5
 800250c:	f04f 0000 	mov.w	r0, #0
 8002510:	f04f 0100 	mov.w	r1, #0
 8002514:	00d9      	lsls	r1, r3, #3
 8002516:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800251a:	00d0      	lsls	r0, r2, #3
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4621      	mov	r1, r4
 8002522:	1851      	adds	r1, r2, r1
 8002524:	6739      	str	r1, [r7, #112]	@ 0x70
 8002526:	4629      	mov	r1, r5
 8002528:	eb43 0101 	adc.w	r1, r3, r1
 800252c:	6779      	str	r1, [r7, #116]	@ 0x74
 800252e:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8002532:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002536:	4621      	mov	r1, r4
 8002538:	1851      	adds	r1, r2, r1
 800253a:	6139      	str	r1, [r7, #16]
 800253c:	4629      	mov	r1, r5
 800253e:	eb43 0101 	adc.w	r1, r3, r1
 8002542:	6179      	str	r1, [r7, #20]
 8002544:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002548:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
 800254c:	e052      	b.n	80025f4 <ms8607_get_pt+0x5ac>
//			log_debug(__func__, "<-15 : OFF2 = %lld", off2);
//			log_debug(__func__, "<-15 : SENS2 = %lld", sens2);
		}
	} else {
		T2 = (5 * (int64_t)dT * (int64_t)dT) >> 38;
 800254e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8002552:	17da      	asrs	r2, r3, #31
 8002554:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002556:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002558:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800255c:	17da      	asrs	r2, r3, #31
 800255e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002560:	667a      	str	r2, [r7, #100]	@ 0x64
 8002562:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8002566:	462b      	mov	r3, r5
 8002568:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800256c:	4642      	mov	r2, r8
 800256e:	fb02 f203 	mul.w	r2, r2, r3
 8002572:	464b      	mov	r3, r9
 8002574:	4621      	mov	r1, r4
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	4622      	mov	r2, r4
 800257e:	4641      	mov	r1, r8
 8002580:	fba2 1201 	umull	r1, r2, r2, r1
 8002584:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8002588:	460a      	mov	r2, r1
 800258a:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 800258e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002592:	4413      	add	r3, r2
 8002594:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002598:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 800259c:	4622      	mov	r2, r4
 800259e:	462b      	mov	r3, r5
 80025a0:	f04f 0000 	mov.w	r0, #0
 80025a4:	f04f 0100 	mov.w	r1, #0
 80025a8:	0099      	lsls	r1, r3, #2
 80025aa:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80025ae:	0090      	lsls	r0, r2, #2
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4621      	mov	r1, r4
 80025b6:	1851      	adds	r1, r2, r1
 80025b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80025ba:	4629      	mov	r1, r5
 80025bc:	eb43 0101 	adc.w	r1, r3, r1
 80025c0:	65f9      	str	r1, [r7, #92]	@ 0x5c
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80025ce:	4629      	mov	r1, r5
 80025d0:	118a      	asrs	r2, r1, #6
 80025d2:	4629      	mov	r1, r5
 80025d4:	17cb      	asrs	r3, r1, #31
 80025d6:	4613      	mov	r3, r2
 80025d8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
//		log_debug(__func__, ">20 : T2 = %d", T2);
		off2 = 0;
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
		sens2 = 0;
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	}
//	log_debug(__func__, "T2 = %d", T2);
//	log_debug(__func__, "OFF2 = %lld", off2);
//	log_debug(__func__, "SENS2 = %lld", sens2);
	
	temp -= T2;
 80025f4:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80025f8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
	off -= off2;
 8002602:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8002606:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 800260a:	1a84      	subs	r4, r0, r2
 800260c:	60bc      	str	r4, [r7, #8]
 800260e:	eb61 0303 	sbc.w	r3, r1, r3
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002618:	e9c7 345a 	strd	r3, r4, [r7, #360]	@ 0x168
	sens -= sens2;
 800261c:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 8002620:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8002624:	1a84      	subs	r4, r0, r2
 8002626:	603c      	str	r4, [r7, #0]
 8002628:	eb61 0303 	sbc.w	r3, r1, r3
 800262c:	607b      	str	r3, [r7, #4]
 800262e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002632:	e9c7 3458 	strd	r3, r4, [r7, #352]	@ 0x160
	
	data->pth.temperature = (float)temp/ 100;
 8002636:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800263a:	ee07 3a90 	vmov	s15, r3
 800263e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002642:	ed5f 6a90 	vldr	s13, [pc, #-576]	@ 8002404 <ms8607_get_pt+0x3bc>
 8002646:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800264a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800264e:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
//	log_debug(__func__, "temperature (2nd order) = %f (%d)", data->pth.temperature , temp);
	
	pres = (((int64_t)(d1 * sens) >> 21) - off) >> 15;
 8002652:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8002656:	2200      	movs	r2, #0
 8002658:	653b      	str	r3, [r7, #80]	@ 0x50
 800265a:	657a      	str	r2, [r7, #84]	@ 0x54
 800265c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002660:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8002664:	462a      	mov	r2, r5
 8002666:	fb02 f203 	mul.w	r2, r2, r3
 800266a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800266e:	4621      	mov	r1, r4
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 800267a:	4621      	mov	r1, r4
 800267c:	fba2 1201 	umull	r1, r2, r2, r1
 8002680:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002684:	460a      	mov	r2, r1
 8002686:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800268a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800268e:	4413      	add	r3, r2
 8002690:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 80026a0:	4621      	mov	r1, r4
 80026a2:	0d4a      	lsrs	r2, r1, #21
 80026a4:	4629      	mov	r1, r5
 80026a6:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 80026aa:	4629      	mov	r1, r5
 80026ac:	154b      	asrs	r3, r1, #21
 80026ae:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 80026b2:	1a14      	subs	r4, r2, r0
 80026b4:	64bc      	str	r4, [r7, #72]	@ 0x48
 80026b6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80026c8:	4621      	mov	r1, r4
 80026ca:	0bca      	lsrs	r2, r1, #15
 80026cc:	4629      	mov	r1, r5
 80026ce:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80026d2:	4629      	mov	r1, r5
 80026d4:	13cb      	asrs	r3, r1, #15
 80026d6:	4613      	mov	r3, r2
 80026d8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	data->pth.pressure = (float)pres / 100;
 80026dc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80026e0:	ee07 3a90 	vmov	s15, r3
 80026e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026e8:	ed5f 6aba 	vldr	s13, [pc, #-744]	@ 8002404 <ms8607_get_pt+0x3bc>
 80026ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026f0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80026f4:	edc3 7a5b 	vstr	s15, [r3, #364]	@ 0x16c
//	log_debug(__func__, "pressure = %f (%d)", data->pth.pressure, pres);
	// atmospheric pressure ~ 1013.25 mbar
	
	return true;
 80026f8:	2301      	movs	r3, #1
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 8002700:	46bd      	mov	sp, r7
 8002702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002706:	bf00      	nop

08002708 <ms8607_write_usr_reg_rh>:

/********************************************************************
 * Read and Wrtie to User Register Sequence
 ********************************************************************/
void ms8607_write_usr_reg_rh(uint8_t res, uint8_t batt, uint8_t heat)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af04      	add	r7, sp, #16
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
 8002712:	460b      	mov	r3, r1
 8002714:	71bb      	strb	r3, [r7, #6]
 8002716:	4613      	mov	r3, r2
 8002718:	717b      	strb	r3, [r7, #5]
	uint8_t rData;
	uint8_t usr_reg;
	uint8_t wData[2] = {MS8607_RH_WRTIE_USER_REG_CMD, 0};
 800271a:	23e6      	movs	r3, #230	@ 0xe6
 800271c:	81bb      	strh	r3, [r7, #12]
	
	// Read
	HAL_I2C_Mem_Read(&ms8607_i2c, MS8607_RH_I2C_ADDR, MS8607_RH_READ_USER_REG_CMD, 1, &rData, 1, 100);
 800271e:	2364      	movs	r3, #100	@ 0x64
 8002720:	9302      	str	r3, [sp, #8]
 8002722:	2301      	movs	r3, #1
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	f107 030e 	add.w	r3, r7, #14
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2301      	movs	r3, #1
 800272e:	22e7      	movs	r2, #231	@ 0xe7
 8002730:	2180      	movs	r1, #128	@ 0x80
 8002732:	480d      	ldr	r0, [pc, #52]	@ (8002768 <ms8607_write_usr_reg_rh+0x60>)
 8002734:	f001 fcaa 	bl	800408c <HAL_I2C_Mem_Read>
	wData[0] = MS8607_RH_WRTIE_USER_REG_CMD;
 8002738:	23e6      	movs	r3, #230	@ 0xe6
 800273a:	733b      	strb	r3, [r7, #12]
	usr_reg = res | batt | heat;
 800273c:	79fa      	ldrb	r2, [r7, #7]
 800273e:	79bb      	ldrb	r3, [r7, #6]
 8002740:	4313      	orrs	r3, r2
 8002742:	b2da      	uxtb	r2, r3
 8002744:	797b      	ldrb	r3, [r7, #5]
 8002746:	4313      	orrs	r3, r2
 8002748:	73fb      	strb	r3, [r7, #15]
	wData[1] = usr_reg;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	737b      	strb	r3, [r7, #13]
//	log_debug(__func__, "res = %X, batt = %X, heat = %X, user_reg = %X", res, batt, heat, wData[1]);
	
	// Write
	HAL_I2C_Master_Transmit(&ms8607_i2c, MS8607_RH_I2C_ADDR, wData, 2, 100);
 800274e:	f107 020c 	add.w	r2, r7, #12
 8002752:	2364      	movs	r3, #100	@ 0x64
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	2302      	movs	r3, #2
 8002758:	2180      	movs	r1, #128	@ 0x80
 800275a:	4803      	ldr	r0, [pc, #12]	@ (8002768 <ms8607_write_usr_reg_rh+0x60>)
 800275c:	f001 fa88 	bl	8003c70 <HAL_I2C_Master_Transmit>
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	240005f0 	.word	0x240005f0

0800276c <ms8607_read_usr_reg_rh>:

uint8_t ms8607_read_usr_reg_rh(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af04      	add	r7, sp, #16
	uint8_t rData;
	
	HAL_I2C_Mem_Read(&ms8607_i2c, MS8607_RH_I2C_ADDR, MS8607_RH_READ_USER_REG_CMD, 1, &rData, 1, 100);
 8002772:	2364      	movs	r3, #100	@ 0x64
 8002774:	9302      	str	r3, [sp, #8]
 8002776:	2301      	movs	r3, #1
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	1dfb      	adds	r3, r7, #7
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2301      	movs	r3, #1
 8002780:	22e7      	movs	r2, #231	@ 0xe7
 8002782:	2180      	movs	r1, #128	@ 0x80
 8002784:	4803      	ldr	r0, [pc, #12]	@ (8002794 <ms8607_read_usr_reg_rh+0x28>)
 8002786:	f001 fc81 	bl	800408c <HAL_I2C_Mem_Read>
//	log_debug(__func__, "user_reg = %02X", rData);
	return rData;
 800278a:	79fb      	ldrb	r3, [r7, #7]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	240005f0 	.word	0x240005f0

08002798 <ms8607_read_adc_rh>:

/********************************************************************
 * Measure RH Hold/No Hold Sequence (using no hold)
 ********************************************************************/
 bool ms8607_read_adc_rh(uint16_t *adc_rh)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af02      	add	r7, sp, #8
 800279e:	6078      	str	r0, [r7, #4]
	uint8_t wData = MS8607_RH_MEAS_NO_HOLD_CMD;
 80027a0:	23f5      	movs	r3, #245	@ 0xf5
 80027a2:	737b      	strb	r3, [r7, #13]
	uint8_t rData[3];
	uint8_t checksum, check;
	
	HAL_I2C_Master_Transmit(&ms8607_i2c, MS8607_RH_I2C_ADDR, &wData, 1, 100);
 80027a4:	f107 020d 	add.w	r2, r7, #13
 80027a8:	2364      	movs	r3, #100	@ 0x64
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2301      	movs	r3, #1
 80027ae:	2180      	movs	r1, #128	@ 0x80
 80027b0:	4815      	ldr	r0, [pc, #84]	@ (8002808 <ms8607_read_adc_rh+0x70>)
 80027b2:	f001 fa5d 	bl	8003c70 <HAL_I2C_Master_Transmit>
	osDelay(MS8607_RH_CONVERT_DELAY);
 80027b6:	2005      	movs	r0, #5
 80027b8:	f7fe fd0a 	bl	80011d0 <osDelay>
	HAL_I2C_Master_Receive(&ms8607_i2c, MS8607_RH_I2C_ADDR, rData, 3, 1000);
 80027bc:	f107 0208 	add.w	r2, r7, #8
 80027c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2303      	movs	r3, #3
 80027c8:	2180      	movs	r1, #128	@ 0x80
 80027ca:	480f      	ldr	r0, [pc, #60]	@ (8002808 <ms8607_read_adc_rh+0x70>)
 80027cc:	f001 fb68 	bl	8003ea0 <HAL_I2C_Master_Receive>
	
	*adc_rh = (uint16_t)(rData[0]<<8) + (uint16_t)rData[1];
 80027d0:	7a3b      	ldrb	r3, [r7, #8]
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	7a7a      	ldrb	r2, [r7, #9]
 80027d8:	4413      	add	r3, r2
 80027da:	b29a      	uxth	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	801a      	strh	r2, [r3, #0]
	checksum = rData[2];
 80027e0:	7abb      	ldrb	r3, [r7, #10]
 80027e2:	73fb      	strb	r3, [r7, #15]
//	log_debug(__func__, "checksum = %02X", checksum);
//	log_debug(__func__, "adc_rh = %04X", *adc_rh);
//	
	check = ms8607_checksum_rh(*adc_rh);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 f8d3 	bl	8002994 <ms8607_checksum_rh>
 80027ee:	4603      	mov	r3, r0
 80027f0:	73bb      	strb	r3, [r7, #14]
//	log_debug(__func__, "check = %02X", check);
	if(check != checksum) {
 80027f2:	7bba      	ldrb	r2, [r7, #14]
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d001      	beq.n	80027fe <ms8607_read_adc_rh+0x66>
		//L_ERROR("ERROR: RH CRC (%02X) does not match remainder (%02X)", checksum, check);;
		return false;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e000      	b.n	8002800 <ms8607_read_adc_rh+0x68>
	}
	return true;
 80027fe:	2301      	movs	r3, #1
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	240005f0 	.word	0x240005f0
 800280c:	00000000 	.word	0x00000000

08002810 <ms8607_get_rh>:

bool ms8607_get_rh(COT_DATA *data)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	uint16_t d3;
	
	if(HAL_I2C_IsDeviceReady(&ms8607_i2c, MS8607_RH_I2C_ADDR, 2, 1000) != HAL_OK){
 8002818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800281c:	2202      	movs	r2, #2
 800281e:	2180      	movs	r1, #128	@ 0x80
 8002820:	4827      	ldr	r0, [pc, #156]	@ (80028c0 <ms8607_get_rh+0xb0>)
 8002822:	f001 fd4d 	bl	80042c0 <HAL_I2C_IsDeviceReady>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <ms8607_get_rh+0x20>
		//L_ERROR("ERROR: PTH Sensor not ready (RH)");
		return false;
 800282c:	2300      	movs	r3, #0
 800282e:	e03c      	b.n	80028aa <ms8607_get_rh+0x9a>
	}
	
	// Read digital relative humidity data
	if(!ms8607_read_adc_rh(&d3)){
 8002830:	f107 030e 	add.w	r3, r7, #14
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ffaf 	bl	8002798 <ms8607_read_adc_rh>
 800283a:	4603      	mov	r3, r0
 800283c:	f083 0301 	eor.w	r3, r3, #1
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <ms8607_get_rh+0x3a>
		//L_ERROR("ERROR: Failed to read RH ADC");
		return false;
 8002846:	2300      	movs	r3, #0
 8002848:	e02f      	b.n	80028aa <ms8607_get_rh+0x9a>
	//d3 >>= 2;
//	log_debug(__func__, "H_ADC = %X", d3);
//	log_debug(__func__, "status = %X", status);
	
	// Calculate relative humidity (in %RH)
	data->pth.humidity = ((float)(125 * d3) / 65536) - 6;
 800284a:	89fb      	ldrh	r3, [r7, #14]
 800284c:	461a      	mov	r2, r3
 800284e:	4613      	mov	r3, r2
 8002850:	015b      	lsls	r3, r3, #5
 8002852:	1a9b      	subs	r3, r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	ee07 3a90 	vmov	s15, r3
 800285c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002860:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80028c4 <ms8607_get_rh+0xb4>
 8002864:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002868:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800286c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	edc3 7a5d 	vstr	s15, [r3, #372]	@ 0x174
//	log_debug(__func__, "humidity = %f &&", data->pth.humidity);
	
	// Calculate compensated relative humidity
	data->pth.humidity += (20 - (data->pth.temperature)) * (-0.18);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	edd3 7a5d 	vldr	s15, [r3, #372]	@ 0x174
 800287c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	edd3 7a5c 	vldr	s15, [r3, #368]	@ 0x170
 8002886:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800288a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002892:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80028b8 <ms8607_get_rh+0xa8>
 8002896:	ee27 7b05 	vmul.f64	d7, d7, d5
 800289a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800289e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	edc3 7a5d 	vstr	s15, [r3, #372]	@ 0x174
	
//	log_debug(__func__, "humidity (compensated) = %f %%", data->pth.humidity);
	
	return true;
 80028a8:	2301      	movs	r3, #1
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	f3af 8000 	nop.w
 80028b8:	70a3d70a 	.word	0x70a3d70a
 80028bc:	bfc70a3d 	.word	0xbfc70a3d
 80028c0:	240005f0 	.word	0x240005f0
 80028c4:	47800000 	.word	0x47800000

080028c8 <ms8607_crc4_pt>:

/********************************************************************
 * CRC (Given in datasheet)
 ********************************************************************/
uint8_t ms8607_crc4_pt(uint16_t *n_prom) 	// n_prom defined as 8x unsigned int (n_prom[8])
{ 
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	uint8_t cnt; 																// simple counter
	uint16_t n_rem=0; 										// crc remainder
 80028d0:	2300      	movs	r3, #0
 80028d2:	81bb      	strh	r3, [r7, #12]
	uint8_t n_bit;
	uint16_t p0 = n_prom[0];
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	813b      	strh	r3, [r7, #8]
	n_prom[0]=((n_prom[0]) & 0x0FFF); 						// CRC byte is replaced by 0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	801a      	strh	r2, [r3, #0]
	n_prom[7]=0;    										// Subsidiary value, set to 0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	330e      	adds	r3, #14
 80028ec:	2200      	movs	r2, #0
 80028ee:	801a      	strh	r2, [r3, #0]
	for (cnt = 0; cnt < 16; cnt++) 							// operation is performed on bytes
 80028f0:	2300      	movs	r3, #0
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e03c      	b.n	8002970 <ms8607_crc4_pt+0xa8>
	{ 														// choose LSB or MSB
		if (cnt%2==1) 
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00f      	beq.n	8002922 <ms8607_crc4_pt+0x5a>
				n_rem ^= ((n_prom[cnt>>1]) & 0x00FF);
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	085b      	lsrs	r3, r3, #1
 8002906:	b2db      	uxtb	r3, r3
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	b21b      	sxth	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	b21a      	sxth	r2, r3
 8002916:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800291a:	4053      	eors	r3, r2
 800291c:	b21b      	sxth	r3, r3
 800291e:	81bb      	strh	r3, [r7, #12]
 8002920:	e00b      	b.n	800293a <ms8607_crc4_pt+0x72>
		else 
				n_rem ^= (n_prom[cnt>>1]>>8);
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	b2db      	uxtb	r3, r3
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	b29a      	uxth	r2, r3
 8002934:	89bb      	ldrh	r3, [r7, #12]
 8002936:	4053      	eors	r3, r2
 8002938:	81bb      	strh	r3, [r7, #12]
		for (n_bit = 8; n_bit > 0; n_bit--) 
 800293a:	2308      	movs	r3, #8
 800293c:	72fb      	strb	r3, [r7, #11]
 800293e:	e011      	b.n	8002964 <ms8607_crc4_pt+0x9c>
		{ 
			if (n_rem & (0x8000)) 
 8002940:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	da07      	bge.n	8002958 <ms8607_crc4_pt+0x90>
					n_rem = (n_rem << 1) ^ 0x3000;
 8002948:	89bb      	ldrh	r3, [r7, #12]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	b21b      	sxth	r3, r3
 800294e:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8002952:	b21b      	sxth	r3, r3
 8002954:	81bb      	strh	r3, [r7, #12]
 8002956:	e002      	b.n	800295e <ms8607_crc4_pt+0x96>
			else 
					n_rem = (n_rem << 1);
 8002958:	89bb      	ldrh	r3, [r7, #12]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	81bb      	strh	r3, [r7, #12]
		for (n_bit = 8; n_bit > 0; n_bit--) 
 800295e:	7afb      	ldrb	r3, [r7, #11]
 8002960:	3b01      	subs	r3, #1
 8002962:	72fb      	strb	r3, [r7, #11]
 8002964:	7afb      	ldrb	r3, [r7, #11]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ea      	bne.n	8002940 <ms8607_crc4_pt+0x78>
	for (cnt = 0; cnt < 16; cnt++) 							// operation is performed on bytes
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	3301      	adds	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	2b0f      	cmp	r3, #15
 8002974:	d9bf      	bls.n	80028f6 <ms8607_crc4_pt+0x2e>
		} 
	} 
	n_rem = ((n_rem >> 12) & 0x000F); 					// final 4-bit remainder is CRC code
 8002976:	89bb      	ldrh	r3, [r7, #12]
 8002978:	0b1b      	lsrs	r3, r3, #12
 800297a:	81bb      	strh	r3, [r7, #12]
	n_prom[0] = p0;															// restore n_prom[0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	893a      	ldrh	r2, [r7, #8]
 8002980:	801a      	strh	r2, [r3, #0]
	return (n_rem ^ 0x00);
 8002982:	89bb      	ldrh	r3, [r7, #12]
 8002984:	b2db      	uxtb	r3, r3
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <ms8607_checksum_rh>:
#endif

// Note: Was not in datasheet, but found in TE drivers in
//			 https://github.com/TEConnectivity/MS8607_Generic_C_Driver
uint8_t ms8607_checksum_rh(uint16_t rh)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	80fb      	strh	r3, [r7, #6]
	uint32_t polynom = 0x988000;
 800299e:	4b17      	ldr	r3, [pc, #92]	@ (80029fc <ms8607_checksum_rh+0x68>)
 80029a0:	617b      	str	r3, [r7, #20]
	uint32_t msb     = 0x800000;
 80029a2:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80029a6:	613b      	str	r3, [r7, #16]
	uint32_t mask    = 0xFF8000;
 80029a8:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <ms8607_checksum_rh+0x6c>)
 80029aa:	60fb      	str	r3, [r7, #12]
	uint32_t result  = (uint32_t)rh<<8;
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	60bb      	str	r3, [r7, #8]
	
	while( msb != 0x80 ) {
 80029b2:	e018      	b.n	80029e6 <ms8607_checksum_rh+0x52>
		
		// Check if msb of current value is 1 and apply XOR mask
		if( result & msb )
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <ms8607_checksum_rh+0x40>
			result = ((result ^ polynom) & mask) | ( result & ~mask);
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	405a      	eors	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	401a      	ands	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	43d9      	mvns	r1, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	400b      	ands	r3, r1
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]
			
		msb >>= 1;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	085b      	lsrs	r3, r3, #1
 80029d8:	613b      	str	r3, [r7, #16]
		mask >>= 1;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	085b      	lsrs	r3, r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
		polynom >>=1;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	617b      	str	r3, [r7, #20]
	while( msb != 0x80 ) {
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	2b80      	cmp	r3, #128	@ 0x80
 80029ea:	d1e3      	bne.n	80029b4 <ms8607_checksum_rh+0x20>
	}
	return (uint8_t)result;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	b2db      	uxtb	r3, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	00988000 	.word	0x00988000
 8002a00:	00ff8000 	.word	0x00ff8000

08002a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a34 <HAL_MspInit+0x30>)
 8002a0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a10:	4a08      	ldr	r2, [pc, #32]	@ (8002a34 <HAL_MspInit+0x30>)
 8002a12:	f043 0302 	orr.w	r3, r3, #2
 8002a16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002a1a:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <HAL_MspInit+0x30>)
 8002a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	607b      	str	r3, [r7, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	58024400 	.word	0x58024400

08002a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b0ba      	sub	sp, #232	@ 0xe8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a50:	f107 0310 	add.w	r3, r7, #16
 8002a54:	22c0      	movs	r2, #192	@ 0xc0
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f007 fe17 	bl	800a68c <memset>
  if(hi2c->Instance==I2C3)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a27      	ldr	r2, [pc, #156]	@ (8002b00 <HAL_I2C_MspInit+0xc8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d146      	bne.n	8002af6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002a68:	f04f 0208 	mov.w	r2, #8
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a7a:	f107 0310 	add.w	r3, r7, #16
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 f8d6 	bl	8005c30 <HAL_RCCEx_PeriphCLKConfig>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002a8a:	f7fe fe85 	bl	8001798 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002b04 <HAL_I2C_MspInit+0xcc>)
 8002a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a94:	4a1b      	ldr	r2, [pc, #108]	@ (8002b04 <HAL_I2C_MspInit+0xcc>)
 8002a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a9e:	4b19      	ldr	r3, [pc, #100]	@ (8002b04 <HAL_I2C_MspInit+0xcc>)
 8002aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH8     ------> I2C3_SDA
    PH7     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8002aac:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ab0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ab4:	2312      	movs	r3, #18
 8002ab6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002acc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	480d      	ldr	r0, [pc, #52]	@ (8002b08 <HAL_I2C_MspInit+0xd0>)
 8002ad4:	f000 fd5c 	bl	8003590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <HAL_I2C_MspInit+0xcc>)
 8002ada:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ade:	4a09      	ldr	r2, [pc, #36]	@ (8002b04 <HAL_I2C_MspInit+0xcc>)
 8002ae0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ae4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ae8:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_I2C_MspInit+0xcc>)
 8002aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002aee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002af6:	bf00      	nop
 8002af8:	37e8      	adds	r7, #232	@ 0xe8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40005c00 	.word	0x40005c00
 8002b04:	58024400 	.word	0x58024400
 8002b08:	58021c00 	.word	0x58021c00

08002b0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b0bc      	sub	sp, #240	@ 0xf0
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b14:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b24:	f107 0318 	add.w	r3, r7, #24
 8002b28:	22c0      	movs	r2, #192	@ 0xc0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f007 fdad 	bl	800a68c <memset>
  if(hspi->Instance==SPI5)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a38      	ldr	r2, [pc, #224]	@ (8002c18 <HAL_SPI_MspInit+0x10c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d169      	bne.n	8002c10 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8002b3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b4c:	f107 0318 	add.w	r3, r7, #24
 8002b50:	4618      	mov	r0, r3
 8002b52:	f003 f86d 	bl	8005c30 <HAL_RCCEx_PeriphCLKConfig>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002b5c:	f7fe fe1c 	bl	8001798 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002b60:	4b2e      	ldr	r3, [pc, #184]	@ (8002c1c <HAL_SPI_MspInit+0x110>)
 8002b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b66:	4a2d      	ldr	r2, [pc, #180]	@ (8002c1c <HAL_SPI_MspInit+0x110>)
 8002b68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b70:	4b2a      	ldr	r3, [pc, #168]	@ (8002c1c <HAL_SPI_MspInit+0x110>)
 8002b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002b7e:	4b27      	ldr	r3, [pc, #156]	@ (8002c1c <HAL_SPI_MspInit+0x110>)
 8002b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b84:	4a25      	ldr	r2, [pc, #148]	@ (8002c1c <HAL_SPI_MspInit+0x110>)
 8002b86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b8e:	4b23      	ldr	r3, [pc, #140]	@ (8002c1c <HAL_SPI_MspInit+0x110>)
 8002b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c1c <HAL_SPI_MspInit+0x110>)
 8002b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c1c <HAL_SPI_MspInit+0x110>)
 8002ba4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bac:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <HAL_SPI_MspInit+0x110>)
 8002bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002bd2:	2305      	movs	r3, #5
 8002bd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002bd8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4810      	ldr	r0, [pc, #64]	@ (8002c20 <HAL_SPI_MspInit+0x114>)
 8002be0:	f000 fcd6 	bl	8003590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002be4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002be8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bec:	2302      	movs	r3, #2
 8002bee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002bfe:	2305      	movs	r3, #5
 8002c00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002c04:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4806      	ldr	r0, [pc, #24]	@ (8002c24 <HAL_SPI_MspInit+0x118>)
 8002c0c:	f000 fcc0 	bl	8003590 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002c10:	bf00      	nop
 8002c12:	37f0      	adds	r7, #240	@ 0xf0
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40015000 	.word	0x40015000
 8002c1c:	58024400 	.word	0x58024400
 8002c20:	58022800 	.word	0x58022800
 8002c24:	58022400 	.word	0x58022400

08002c28 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0b      	ldr	r2, [pc, #44]	@ (8002c64 <HAL_SPI_MspDeInit+0x3c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d110      	bne.n	8002c5c <HAL_SPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <HAL_SPI_MspDeInit+0x40>)
 8002c3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c40:	4a09      	ldr	r2, [pc, #36]	@ (8002c68 <HAL_SPI_MspDeInit+0x40>)
 8002c42:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002c46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOK, GPIO_PIN_0);
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	4807      	ldr	r0, [pc, #28]	@ (8002c6c <HAL_SPI_MspDeInit+0x44>)
 8002c4e:	f000 fe4f 	bl	80038f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_11|GPIO_PIN_10);
 8002c52:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8002c56:	4806      	ldr	r0, [pc, #24]	@ (8002c70 <HAL_SPI_MspDeInit+0x48>)
 8002c58:	f000 fe4a 	bl	80038f0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40015000 	.word	0x40015000
 8002c68:	58024400 	.word	0x58024400
 8002c6c:	58022800 	.word	0x58022800
 8002c70:	58022400 	.word	0x58022400

08002c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b0ba      	sub	sp, #232	@ 0xe8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c8c:	f107 0310 	add.w	r3, r7, #16
 8002c90:	22c0      	movs	r2, #192	@ 0xc0
 8002c92:	2100      	movs	r1, #0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f007 fcf9 	bl	800a68c <memset>
  if(huart->Instance==UART8)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a27      	ldr	r2, [pc, #156]	@ (8002d3c <HAL_UART_MspInit+0xc8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d146      	bne.n	8002d32 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002ca4:	f04f 0202 	mov.w	r2, #2
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cb6:	f107 0310 	add.w	r3, r7, #16
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f002 ffb8 	bl	8005c30 <HAL_RCCEx_PeriphCLKConfig>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002cc6:	f7fe fd67 	bl	8001798 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002cca:	4b1d      	ldr	r3, [pc, #116]	@ (8002d40 <HAL_UART_MspInit+0xcc>)
 8002ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d40 <HAL_UART_MspInit+0xcc>)
 8002cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002cd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002cda:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <HAL_UART_MspInit+0xcc>)
 8002cdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ce0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ce8:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <HAL_UART_MspInit+0xcc>)
 8002cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cee:	4a14      	ldr	r2, [pc, #80]	@ (8002d40 <HAL_UART_MspInit+0xcc>)
 8002cf0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002cf8:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <HAL_UART_MspInit+0xcc>)
 8002cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8002d06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002d20:	2308      	movs	r3, #8
 8002d22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002d26:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4805      	ldr	r0, [pc, #20]	@ (8002d44 <HAL_UART_MspInit+0xd0>)
 8002d2e:	f000 fc2f 	bl	8003590 <HAL_GPIO_Init>

  /* USER CODE END UART8_MspInit 1 */

  }

}
 8002d32:	bf00      	nop
 8002d34:	37e8      	adds	r7, #232	@ 0xe8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40007c00 	.word	0x40007c00
 8002d40:	58024400 	.word	0x58024400
 8002d44:	58022400 	.word	0x58022400

08002d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <NMI_Handler+0x4>

08002d50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <HardFault_Handler+0x4>

08002d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <MemManage_Handler+0x4>

08002d60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <BusFault_Handler+0x4>

08002d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d6c:	bf00      	nop
 8002d6e:	e7fd      	b.n	8002d6c <UsageFault_Handler+0x4>

08002d70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d9e:	f000 fa1f 	bl	80031e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0
  return 1;
 8002daa:	2301      	movs	r3, #1
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <_kill>:

int _kill(int pid, int sig)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dc0:	f007 fcc6 	bl	800a750 <__errno>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2216      	movs	r2, #22
 8002dc8:	601a      	str	r2, [r3, #0]
  return -1;
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <_exit>:

void _exit (int status)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dde:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff ffe7 	bl	8002db6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002de8:	bf00      	nop
 8002dea:	e7fd      	b.n	8002de8 <_exit+0x12>

08002dec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	e00a      	b.n	8002e14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dfe:	f3af 8000 	nop.w
 8002e02:	4601      	mov	r1, r0
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	60ba      	str	r2, [r7, #8]
 8002e0a:	b2ca      	uxtb	r2, r1
 8002e0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3301      	adds	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	dbf0      	blt.n	8002dfe <_read+0x12>
  }

  return len;
 8002e1c:	687b      	ldr	r3, [r7, #4]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b086      	sub	sp, #24
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	e009      	b.n	8002e4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	60ba      	str	r2, [r7, #8]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe f9d1 	bl	80011e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	dbf1      	blt.n	8002e38 <_write+0x12>
  }
  return len;
 8002e54:	687b      	ldr	r3, [r7, #4]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <_close>:

int _close(int file)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e86:	605a      	str	r2, [r3, #4]
  return 0;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <_isatty>:

int _isatty(int file)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e9e:	2301      	movs	r3, #1
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ed0:	4a14      	ldr	r2, [pc, #80]	@ (8002f24 <_sbrk+0x5c>)
 8002ed2:	4b15      	ldr	r3, [pc, #84]	@ (8002f28 <_sbrk+0x60>)
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002edc:	4b13      	ldr	r3, [pc, #76]	@ (8002f2c <_sbrk+0x64>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ee4:	4b11      	ldr	r3, [pc, #68]	@ (8002f2c <_sbrk+0x64>)
 8002ee6:	4a12      	ldr	r2, [pc, #72]	@ (8002f30 <_sbrk+0x68>)
 8002ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eea:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <_sbrk+0x64>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d207      	bcs.n	8002f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef8:	f007 fc2a 	bl	800a750 <__errno>
 8002efc:	4603      	mov	r3, r0
 8002efe:	220c      	movs	r2, #12
 8002f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f06:	e009      	b.n	8002f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f08:	4b08      	ldr	r3, [pc, #32]	@ (8002f2c <_sbrk+0x64>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f0e:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <_sbrk+0x64>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	4a05      	ldr	r2, [pc, #20]	@ (8002f2c <_sbrk+0x64>)
 8002f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	24080000 	.word	0x24080000
 8002f28:	00000800 	.word	0x00000800
 8002f2c:	24000910 	.word	0x24000910
 8002f30:	24000a68 	.word	0x24000a68

08002f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f38:	4b43      	ldr	r3, [pc, #268]	@ (8003048 <SystemInit+0x114>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3e:	4a42      	ldr	r2, [pc, #264]	@ (8003048 <SystemInit+0x114>)
 8002f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f48:	4b40      	ldr	r3, [pc, #256]	@ (800304c <SystemInit+0x118>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	2b06      	cmp	r3, #6
 8002f52:	d807      	bhi.n	8002f64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f54:	4b3d      	ldr	r3, [pc, #244]	@ (800304c <SystemInit+0x118>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f023 030f 	bic.w	r3, r3, #15
 8002f5c:	4a3b      	ldr	r2, [pc, #236]	@ (800304c <SystemInit+0x118>)
 8002f5e:	f043 0307 	orr.w	r3, r3, #7
 8002f62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002f64:	4b3a      	ldr	r3, [pc, #232]	@ (8003050 <SystemInit+0x11c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a39      	ldr	r2, [pc, #228]	@ (8003050 <SystemInit+0x11c>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f70:	4b37      	ldr	r3, [pc, #220]	@ (8003050 <SystemInit+0x11c>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f76:	4b36      	ldr	r3, [pc, #216]	@ (8003050 <SystemInit+0x11c>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4935      	ldr	r1, [pc, #212]	@ (8003050 <SystemInit+0x11c>)
 8002f7c:	4b35      	ldr	r3, [pc, #212]	@ (8003054 <SystemInit+0x120>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f82:	4b32      	ldr	r3, [pc, #200]	@ (800304c <SystemInit+0x118>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800304c <SystemInit+0x118>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 030f 	bic.w	r3, r3, #15
 8002f96:	4a2d      	ldr	r2, [pc, #180]	@ (800304c <SystemInit+0x118>)
 8002f98:	f043 0307 	orr.w	r3, r3, #7
 8002f9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8003050 <SystemInit+0x11c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8003050 <SystemInit+0x11c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002faa:	4b29      	ldr	r3, [pc, #164]	@ (8003050 <SystemInit+0x11c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002fb0:	4b27      	ldr	r3, [pc, #156]	@ (8003050 <SystemInit+0x11c>)
 8002fb2:	4a29      	ldr	r2, [pc, #164]	@ (8003058 <SystemInit+0x124>)
 8002fb4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002fb6:	4b26      	ldr	r3, [pc, #152]	@ (8003050 <SystemInit+0x11c>)
 8002fb8:	4a28      	ldr	r2, [pc, #160]	@ (800305c <SystemInit+0x128>)
 8002fba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002fbc:	4b24      	ldr	r3, [pc, #144]	@ (8003050 <SystemInit+0x11c>)
 8002fbe:	4a28      	ldr	r2, [pc, #160]	@ (8003060 <SystemInit+0x12c>)
 8002fc0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002fc2:	4b23      	ldr	r3, [pc, #140]	@ (8003050 <SystemInit+0x11c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002fc8:	4b21      	ldr	r3, [pc, #132]	@ (8003050 <SystemInit+0x11c>)
 8002fca:	4a25      	ldr	r2, [pc, #148]	@ (8003060 <SystemInit+0x12c>)
 8002fcc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002fce:	4b20      	ldr	r3, [pc, #128]	@ (8003050 <SystemInit+0x11c>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8003050 <SystemInit+0x11c>)
 8002fd6:	4a22      	ldr	r2, [pc, #136]	@ (8003060 <SystemInit+0x12c>)
 8002fd8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002fda:	4b1d      	ldr	r3, [pc, #116]	@ (8003050 <SystemInit+0x11c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <SystemInit+0x11c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1a      	ldr	r2, [pc, #104]	@ (8003050 <SystemInit+0x11c>)
 8002fe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002fec:	4b18      	ldr	r3, [pc, #96]	@ (8003050 <SystemInit+0x11c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8003064 <SystemInit+0x130>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8003068 <SystemInit+0x134>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ffe:	d202      	bcs.n	8003006 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003000:	4b1a      	ldr	r3, [pc, #104]	@ (800306c <SystemInit+0x138>)
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8003006:	4b12      	ldr	r3, [pc, #72]	@ (8003050 <SystemInit+0x11c>)
 8003008:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800300c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d113      	bne.n	800303c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003014:	4b0e      	ldr	r3, [pc, #56]	@ (8003050 <SystemInit+0x11c>)
 8003016:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800301a:	4a0d      	ldr	r2, [pc, #52]	@ (8003050 <SystemInit+0x11c>)
 800301c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003020:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003024:	4b12      	ldr	r3, [pc, #72]	@ (8003070 <SystemInit+0x13c>)
 8003026:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800302a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800302c:	4b08      	ldr	r3, [pc, #32]	@ (8003050 <SystemInit+0x11c>)
 800302e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003032:	4a07      	ldr	r2, [pc, #28]	@ (8003050 <SystemInit+0x11c>)
 8003034:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003038:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e000ed00 	.word	0xe000ed00
 800304c:	52002000 	.word	0x52002000
 8003050:	58024400 	.word	0x58024400
 8003054:	eaf6ed7f 	.word	0xeaf6ed7f
 8003058:	02020200 	.word	0x02020200
 800305c:	01ff0000 	.word	0x01ff0000
 8003060:	01010280 	.word	0x01010280
 8003064:	5c001000 	.word	0x5c001000
 8003068:	ffff0000 	.word	0xffff0000
 800306c:	51008108 	.word	0x51008108
 8003070:	52004000 	.word	0x52004000

08003074 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8003078:	4b09      	ldr	r3, [pc, #36]	@ (80030a0 <ExitRun0Mode+0x2c>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4a08      	ldr	r2, [pc, #32]	@ (80030a0 <ExitRun0Mode+0x2c>)
 800307e:	f043 0302 	orr.w	r3, r3, #2
 8003082:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8003084:	bf00      	nop
 8003086:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <ExitRun0Mode+0x2c>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f9      	beq.n	8003086 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8003092:	bf00      	nop
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	58024800 	.word	0x58024800

080030a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80030a4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80030e0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80030a8:	f7ff ffe4 	bl	8003074 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80030ac:	f7ff ff42 	bl	8002f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030b0:	480c      	ldr	r0, [pc, #48]	@ (80030e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030b2:	490d      	ldr	r1, [pc, #52]	@ (80030e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030b4:	4a0d      	ldr	r2, [pc, #52]	@ (80030ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030b8:	e002      	b.n	80030c0 <LoopCopyDataInit>

080030ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030be:	3304      	adds	r3, #4

080030c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c4:	d3f9      	bcc.n	80030ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030c6:	4a0a      	ldr	r2, [pc, #40]	@ (80030f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030c8:	4c0a      	ldr	r4, [pc, #40]	@ (80030f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030cc:	e001      	b.n	80030d2 <LoopFillZerobss>

080030ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d0:	3204      	adds	r2, #4

080030d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d4:	d3fb      	bcc.n	80030ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030d6:	f007 fb41 	bl	800a75c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030da:	f7fe f897 	bl	800120c <main>
  bx  lr
 80030de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80030e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80030e8:	24000220 	.word	0x24000220
  ldr r2, =_sidata
 80030ec:	0800ca18 	.word	0x0800ca18
  ldr r2, =_sbss
 80030f0:	24000220 	.word	0x24000220
  ldr r4, =_ebss
 80030f4:	24000a64 	.word	0x24000a64

080030f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030f8:	e7fe      	b.n	80030f8 <ADC3_IRQHandler>
	...

080030fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003102:	2003      	movs	r0, #3
 8003104:	f000 f98c 	bl	8003420 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003108:	f002 fbbc 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b15      	ldr	r3, [pc, #84]	@ (8003164 <HAL_Init+0x68>)
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	4913      	ldr	r1, [pc, #76]	@ (8003168 <HAL_Init+0x6c>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
 8003124:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003126:	4b0f      	ldr	r3, [pc, #60]	@ (8003164 <HAL_Init+0x68>)
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	4a0e      	ldr	r2, [pc, #56]	@ (8003168 <HAL_Init+0x6c>)
 8003130:	5cd3      	ldrb	r3, [r2, r3]
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
 800313c:	4a0b      	ldr	r2, [pc, #44]	@ (800316c <HAL_Init+0x70>)
 800313e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003140:	4a0b      	ldr	r2, [pc, #44]	@ (8003170 <HAL_Init+0x74>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003146:	200f      	movs	r0, #15
 8003148:	f000 f814 	bl	8003174 <HAL_InitTick>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e002      	b.n	800315c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003156:	f7ff fc55 	bl	8002a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	58024400 	.word	0x58024400
 8003168:	0800c65c 	.word	0x0800c65c
 800316c:	2400004c 	.word	0x2400004c
 8003170:	24000048 	.word	0x24000048

08003174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800317c:	4b15      	ldr	r3, [pc, #84]	@ (80031d4 <HAL_InitTick+0x60>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e021      	b.n	80031cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003188:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <HAL_InitTick+0x64>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b11      	ldr	r3, [pc, #68]	@ (80031d4 <HAL_InitTick+0x60>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	4619      	mov	r1, r3
 8003192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003196:	fbb3 f3f1 	udiv	r3, r3, r1
 800319a:	fbb2 f3f3 	udiv	r3, r2, r3
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f971 	bl	8003486 <HAL_SYSTICK_Config>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e00e      	b.n	80031cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b0f      	cmp	r3, #15
 80031b2:	d80a      	bhi.n	80031ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031b4:	2200      	movs	r2, #0
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031bc:	f000 f93b 	bl	8003436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031c0:	4a06      	ldr	r2, [pc, #24]	@ (80031dc <HAL_InitTick+0x68>)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e000      	b.n	80031cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	24000054 	.word	0x24000054
 80031d8:	24000048 	.word	0x24000048
 80031dc:	24000050 	.word	0x24000050

080031e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031e4:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <HAL_IncTick+0x20>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <HAL_IncTick+0x24>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4413      	add	r3, r2
 80031f0:	4a04      	ldr	r2, [pc, #16]	@ (8003204 <HAL_IncTick+0x24>)
 80031f2:	6013      	str	r3, [r2, #0]
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	24000054 	.word	0x24000054
 8003204:	24000914 	.word	0x24000914

08003208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return uwTick;
 800320c:	4b03      	ldr	r3, [pc, #12]	@ (800321c <HAL_GetTick+0x14>)
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	24000914 	.word	0x24000914

08003220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003228:	f7ff ffee 	bl	8003208 <HAL_GetTick>
 800322c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003238:	d005      	beq.n	8003246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800323a:	4b0a      	ldr	r3, [pc, #40]	@ (8003264 <HAL_Delay+0x44>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003246:	bf00      	nop
 8003248:	f7ff ffde 	bl	8003208 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	429a      	cmp	r2, r3
 8003256:	d8f7      	bhi.n	8003248 <HAL_Delay+0x28>
  {
  }
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	24000054 	.word	0x24000054

08003268 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800326c:	4b03      	ldr	r3, [pc, #12]	@ (800327c <HAL_GetREVID+0x14>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	0c1b      	lsrs	r3, r3, #16
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	5c001000 	.word	0x5c001000

08003280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003290:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <__NVIC_SetPriorityGrouping+0x40>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800329c:	4013      	ands	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032a8:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <__NVIC_SetPriorityGrouping+0x44>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ae:	4a04      	ldr	r2, [pc, #16]	@ (80032c0 <__NVIC_SetPriorityGrouping+0x40>)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	60d3      	str	r3, [r2, #12]
}
 80032b4:	bf00      	nop
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	e000ed00 	.word	0xe000ed00
 80032c4:	05fa0000 	.word	0x05fa0000

080032c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032cc:	4b04      	ldr	r3, [pc, #16]	@ (80032e0 <__NVIC_GetPriorityGrouping+0x18>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	0a1b      	lsrs	r3, r3, #8
 80032d2:	f003 0307 	and.w	r3, r3, #7
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	db0b      	blt.n	800330e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	f003 021f 	and.w	r2, r3, #31
 80032fc:	4907      	ldr	r1, [pc, #28]	@ (800331c <__NVIC_EnableIRQ+0x38>)
 80032fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2001      	movs	r0, #1
 8003306:	fa00 f202 	lsl.w	r2, r0, r2
 800330a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	e000e100 	.word	0xe000e100

08003320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800332c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003330:	2b00      	cmp	r3, #0
 8003332:	db0a      	blt.n	800334a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	490c      	ldr	r1, [pc, #48]	@ (800336c <__NVIC_SetPriority+0x4c>)
 800333a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800333e:	0112      	lsls	r2, r2, #4
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	440b      	add	r3, r1
 8003344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003348:	e00a      	b.n	8003360 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4908      	ldr	r1, [pc, #32]	@ (8003370 <__NVIC_SetPriority+0x50>)
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	3b04      	subs	r3, #4
 8003358:	0112      	lsls	r2, r2, #4
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	440b      	add	r3, r1
 800335e:	761a      	strb	r2, [r3, #24]
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000e100 	.word	0xe000e100
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003374:	b480      	push	{r7}
 8003376:	b089      	sub	sp, #36	@ 0x24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f1c3 0307 	rsb	r3, r3, #7
 800338e:	2b04      	cmp	r3, #4
 8003390:	bf28      	it	cs
 8003392:	2304      	movcs	r3, #4
 8003394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3304      	adds	r3, #4
 800339a:	2b06      	cmp	r3, #6
 800339c:	d902      	bls.n	80033a4 <NVIC_EncodePriority+0x30>
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3b03      	subs	r3, #3
 80033a2:	e000      	b.n	80033a6 <NVIC_EncodePriority+0x32>
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43da      	mvns	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	401a      	ands	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	fa01 f303 	lsl.w	r3, r1, r3
 80033c6:	43d9      	mvns	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033cc:	4313      	orrs	r3, r2
         );
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3724      	adds	r7, #36	@ 0x24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033ec:	d301      	bcc.n	80033f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ee:	2301      	movs	r3, #1
 80033f0:	e00f      	b.n	8003412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033f2:	4a0a      	ldr	r2, [pc, #40]	@ (800341c <SysTick_Config+0x40>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033fa:	210f      	movs	r1, #15
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003400:	f7ff ff8e 	bl	8003320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003404:	4b05      	ldr	r3, [pc, #20]	@ (800341c <SysTick_Config+0x40>)
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800340a:	4b04      	ldr	r3, [pc, #16]	@ (800341c <SysTick_Config+0x40>)
 800340c:	2207      	movs	r2, #7
 800340e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	e000e010 	.word	0xe000e010

08003420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff29 	bl	8003280 <__NVIC_SetPriorityGrouping>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003444:	f7ff ff40 	bl	80032c8 <__NVIC_GetPriorityGrouping>
 8003448:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	6978      	ldr	r0, [r7, #20]
 8003450:	f7ff ff90 	bl	8003374 <NVIC_EncodePriority>
 8003454:	4602      	mov	r2, r0
 8003456:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff ff5f 	bl	8003320 <__NVIC_SetPriority>
}
 8003462:	bf00      	nop
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	4603      	mov	r3, r0
 8003472:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003474:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff ff33 	bl	80032e4 <__NVIC_EnableIRQ>
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff ffa4 	bl	80033dc <SysTick_Config>
 8003494:	4603      	mov	r3, r0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80034a4:	f3bf 8f5f 	dmb	sy
}
 80034a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80034aa:	4b07      	ldr	r3, [pc, #28]	@ (80034c8 <HAL_MPU_Disable+0x28>)
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	4a06      	ldr	r2, [pc, #24]	@ (80034c8 <HAL_MPU_Disable+0x28>)
 80034b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80034b6:	4b05      	ldr	r3, [pc, #20]	@ (80034cc <HAL_MPU_Disable+0x2c>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	605a      	str	r2, [r3, #4]
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	e000ed00 	.word	0xe000ed00
 80034cc:	e000ed90 	.word	0xe000ed90

080034d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80034d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003508 <HAL_MPU_Enable+0x38>)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80034e2:	4b0a      	ldr	r3, [pc, #40]	@ (800350c <HAL_MPU_Enable+0x3c>)
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	4a09      	ldr	r2, [pc, #36]	@ (800350c <HAL_MPU_Enable+0x3c>)
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ec:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80034ee:	f3bf 8f4f 	dsb	sy
}
 80034f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034f4:	f3bf 8f6f 	isb	sy
}
 80034f8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	e000ed90 	.word	0xe000ed90
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	785a      	ldrb	r2, [r3, #1]
 800351c:	4b1b      	ldr	r3, [pc, #108]	@ (800358c <HAL_MPU_ConfigRegion+0x7c>)
 800351e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003520:	4b1a      	ldr	r3, [pc, #104]	@ (800358c <HAL_MPU_ConfigRegion+0x7c>)
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	4a19      	ldr	r2, [pc, #100]	@ (800358c <HAL_MPU_ConfigRegion+0x7c>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800352c:	4a17      	ldr	r2, [pc, #92]	@ (800358c <HAL_MPU_ConfigRegion+0x7c>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	7b1b      	ldrb	r3, [r3, #12]
 8003538:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	7adb      	ldrb	r3, [r3, #11]
 800353e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003540:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7a9b      	ldrb	r3, [r3, #10]
 8003546:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003548:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	7b5b      	ldrb	r3, [r3, #13]
 800354e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003550:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	7b9b      	ldrb	r3, [r3, #14]
 8003556:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003558:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	7bdb      	ldrb	r3, [r3, #15]
 800355e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003560:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	7a5b      	ldrb	r3, [r3, #9]
 8003566:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003568:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7a1b      	ldrb	r3, [r3, #8]
 800356e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003570:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	7812      	ldrb	r2, [r2, #0]
 8003576:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003578:	4a04      	ldr	r2, [pc, #16]	@ (800358c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800357a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800357c:	6113      	str	r3, [r2, #16]
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000ed90 	.word	0xe000ed90

08003590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003590:	b480      	push	{r7}
 8003592:	b089      	sub	sp, #36	@ 0x24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800359e:	4b89      	ldr	r3, [pc, #548]	@ (80037c4 <HAL_GPIO_Init+0x234>)
 80035a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035a2:	e194      	b.n	80038ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	2101      	movs	r1, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	4013      	ands	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8186 	beq.w	80038c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d005      	beq.n	80035d4 <HAL_GPIO_Init+0x44>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d130      	bne.n	8003636 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2203      	movs	r2, #3
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800360a:	2201      	movs	r2, #1
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	091b      	lsrs	r3, r3, #4
 8003620:	f003 0201 	and.w	r2, r3, #1
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b03      	cmp	r3, #3
 8003640:	d017      	beq.n	8003672 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	2203      	movs	r2, #3
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d123      	bne.n	80036c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	08da      	lsrs	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3208      	adds	r2, #8
 8003686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	220f      	movs	r2, #15
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	08da      	lsrs	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3208      	adds	r2, #8
 80036c0:	69b9      	ldr	r1, [r7, #24]
 80036c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	2203      	movs	r2, #3
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f003 0203 	and.w	r2, r3, #3
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80e0 	beq.w	80038c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003708:	4b2f      	ldr	r3, [pc, #188]	@ (80037c8 <HAL_GPIO_Init+0x238>)
 800370a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800370e:	4a2e      	ldr	r2, [pc, #184]	@ (80037c8 <HAL_GPIO_Init+0x238>)
 8003710:	f043 0302 	orr.w	r3, r3, #2
 8003714:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003718:	4b2b      	ldr	r3, [pc, #172]	@ (80037c8 <HAL_GPIO_Init+0x238>)
 800371a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003726:	4a29      	ldr	r2, [pc, #164]	@ (80037cc <HAL_GPIO_Init+0x23c>)
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	089b      	lsrs	r3, r3, #2
 800372c:	3302      	adds	r3, #2
 800372e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	220f      	movs	r2, #15
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a20      	ldr	r2, [pc, #128]	@ (80037d0 <HAL_GPIO_Init+0x240>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d052      	beq.n	80037f8 <HAL_GPIO_Init+0x268>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a1f      	ldr	r2, [pc, #124]	@ (80037d4 <HAL_GPIO_Init+0x244>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d031      	beq.n	80037be <HAL_GPIO_Init+0x22e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1e      	ldr	r2, [pc, #120]	@ (80037d8 <HAL_GPIO_Init+0x248>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d02b      	beq.n	80037ba <HAL_GPIO_Init+0x22a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a1d      	ldr	r2, [pc, #116]	@ (80037dc <HAL_GPIO_Init+0x24c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d025      	beq.n	80037b6 <HAL_GPIO_Init+0x226>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a1c      	ldr	r2, [pc, #112]	@ (80037e0 <HAL_GPIO_Init+0x250>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d01f      	beq.n	80037b2 <HAL_GPIO_Init+0x222>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a1b      	ldr	r2, [pc, #108]	@ (80037e4 <HAL_GPIO_Init+0x254>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d019      	beq.n	80037ae <HAL_GPIO_Init+0x21e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a1a      	ldr	r2, [pc, #104]	@ (80037e8 <HAL_GPIO_Init+0x258>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_GPIO_Init+0x21a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a19      	ldr	r2, [pc, #100]	@ (80037ec <HAL_GPIO_Init+0x25c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00d      	beq.n	80037a6 <HAL_GPIO_Init+0x216>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a18      	ldr	r2, [pc, #96]	@ (80037f0 <HAL_GPIO_Init+0x260>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d007      	beq.n	80037a2 <HAL_GPIO_Init+0x212>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a17      	ldr	r2, [pc, #92]	@ (80037f4 <HAL_GPIO_Init+0x264>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_GPIO_Init+0x20e>
 800379a:	2309      	movs	r3, #9
 800379c:	e02d      	b.n	80037fa <HAL_GPIO_Init+0x26a>
 800379e:	230a      	movs	r3, #10
 80037a0:	e02b      	b.n	80037fa <HAL_GPIO_Init+0x26a>
 80037a2:	2308      	movs	r3, #8
 80037a4:	e029      	b.n	80037fa <HAL_GPIO_Init+0x26a>
 80037a6:	2307      	movs	r3, #7
 80037a8:	e027      	b.n	80037fa <HAL_GPIO_Init+0x26a>
 80037aa:	2306      	movs	r3, #6
 80037ac:	e025      	b.n	80037fa <HAL_GPIO_Init+0x26a>
 80037ae:	2305      	movs	r3, #5
 80037b0:	e023      	b.n	80037fa <HAL_GPIO_Init+0x26a>
 80037b2:	2304      	movs	r3, #4
 80037b4:	e021      	b.n	80037fa <HAL_GPIO_Init+0x26a>
 80037b6:	2303      	movs	r3, #3
 80037b8:	e01f      	b.n	80037fa <HAL_GPIO_Init+0x26a>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e01d      	b.n	80037fa <HAL_GPIO_Init+0x26a>
 80037be:	2301      	movs	r3, #1
 80037c0:	e01b      	b.n	80037fa <HAL_GPIO_Init+0x26a>
 80037c2:	bf00      	nop
 80037c4:	58000080 	.word	0x58000080
 80037c8:	58024400 	.word	0x58024400
 80037cc:	58000400 	.word	0x58000400
 80037d0:	58020000 	.word	0x58020000
 80037d4:	58020400 	.word	0x58020400
 80037d8:	58020800 	.word	0x58020800
 80037dc:	58020c00 	.word	0x58020c00
 80037e0:	58021000 	.word	0x58021000
 80037e4:	58021400 	.word	0x58021400
 80037e8:	58021800 	.word	0x58021800
 80037ec:	58021c00 	.word	0x58021c00
 80037f0:	58022000 	.word	0x58022000
 80037f4:	58022400 	.word	0x58022400
 80037f8:	2300      	movs	r3, #0
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	f002 0203 	and.w	r2, r2, #3
 8003800:	0092      	lsls	r2, r2, #2
 8003802:	4093      	lsls	r3, r2
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800380a:	4938      	ldr	r1, [pc, #224]	@ (80038ec <HAL_GPIO_Init+0x35c>)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	089b      	lsrs	r3, r3, #2
 8003810:	3302      	adds	r3, #2
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800383e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800386c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	3301      	adds	r3, #1
 80038cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f47f ae63 	bne.w	80035a4 <HAL_GPIO_Init+0x14>
  }
}
 80038de:	bf00      	nop
 80038e0:	bf00      	nop
 80038e2:	3724      	adds	r7, #36	@ 0x24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	58000400 	.word	0x58000400

080038f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80038fe:	4b75      	ldr	r3, [pc, #468]	@ (8003ad4 <HAL_GPIO_DeInit+0x1e4>)
 8003900:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8003902:	e0d9      	b.n	8003ab8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8003904:	2201      	movs	r2, #1
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	4013      	ands	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80cc 	beq.w	8003ab2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800391a:	4a6f      	ldr	r2, [pc, #444]	@ (8003ad8 <HAL_GPIO_DeInit+0x1e8>)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	3302      	adds	r3, #2
 8003922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003926:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	220f      	movs	r2, #15
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	4013      	ands	r3, r2
 800393a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a67      	ldr	r2, [pc, #412]	@ (8003adc <HAL_GPIO_DeInit+0x1ec>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d037      	beq.n	80039b4 <HAL_GPIO_DeInit+0xc4>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a66      	ldr	r2, [pc, #408]	@ (8003ae0 <HAL_GPIO_DeInit+0x1f0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d031      	beq.n	80039b0 <HAL_GPIO_DeInit+0xc0>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a65      	ldr	r2, [pc, #404]	@ (8003ae4 <HAL_GPIO_DeInit+0x1f4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d02b      	beq.n	80039ac <HAL_GPIO_DeInit+0xbc>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a64      	ldr	r2, [pc, #400]	@ (8003ae8 <HAL_GPIO_DeInit+0x1f8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d025      	beq.n	80039a8 <HAL_GPIO_DeInit+0xb8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a63      	ldr	r2, [pc, #396]	@ (8003aec <HAL_GPIO_DeInit+0x1fc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d01f      	beq.n	80039a4 <HAL_GPIO_DeInit+0xb4>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a62      	ldr	r2, [pc, #392]	@ (8003af0 <HAL_GPIO_DeInit+0x200>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d019      	beq.n	80039a0 <HAL_GPIO_DeInit+0xb0>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a61      	ldr	r2, [pc, #388]	@ (8003af4 <HAL_GPIO_DeInit+0x204>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d013      	beq.n	800399c <HAL_GPIO_DeInit+0xac>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a60      	ldr	r2, [pc, #384]	@ (8003af8 <HAL_GPIO_DeInit+0x208>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00d      	beq.n	8003998 <HAL_GPIO_DeInit+0xa8>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a5f      	ldr	r2, [pc, #380]	@ (8003afc <HAL_GPIO_DeInit+0x20c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d007      	beq.n	8003994 <HAL_GPIO_DeInit+0xa4>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a5e      	ldr	r2, [pc, #376]	@ (8003b00 <HAL_GPIO_DeInit+0x210>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d101      	bne.n	8003990 <HAL_GPIO_DeInit+0xa0>
 800398c:	2309      	movs	r3, #9
 800398e:	e012      	b.n	80039b6 <HAL_GPIO_DeInit+0xc6>
 8003990:	230a      	movs	r3, #10
 8003992:	e010      	b.n	80039b6 <HAL_GPIO_DeInit+0xc6>
 8003994:	2308      	movs	r3, #8
 8003996:	e00e      	b.n	80039b6 <HAL_GPIO_DeInit+0xc6>
 8003998:	2307      	movs	r3, #7
 800399a:	e00c      	b.n	80039b6 <HAL_GPIO_DeInit+0xc6>
 800399c:	2306      	movs	r3, #6
 800399e:	e00a      	b.n	80039b6 <HAL_GPIO_DeInit+0xc6>
 80039a0:	2305      	movs	r3, #5
 80039a2:	e008      	b.n	80039b6 <HAL_GPIO_DeInit+0xc6>
 80039a4:	2304      	movs	r3, #4
 80039a6:	e006      	b.n	80039b6 <HAL_GPIO_DeInit+0xc6>
 80039a8:	2303      	movs	r3, #3
 80039aa:	e004      	b.n	80039b6 <HAL_GPIO_DeInit+0xc6>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e002      	b.n	80039b6 <HAL_GPIO_DeInit+0xc6>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <HAL_GPIO_DeInit+0xc6>
 80039b4:	2300      	movs	r3, #0
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	f002 0203 	and.w	r2, r2, #3
 80039bc:	0092      	lsls	r2, r2, #2
 80039be:	4093      	lsls	r3, r2
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d136      	bne.n	8003a34 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	43db      	mvns	r3, r3
 80039ce:	401a      	ands	r2, r3
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	43db      	mvns	r3, r3
 80039dc:	401a      	ands	r2, r3
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80039e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039f0:	4013      	ands	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80039f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	43db      	mvns	r3, r3
 80039fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a02:	4013      	ands	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	220f      	movs	r2, #15
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003a16:	4a30      	ldr	r2, [pc, #192]	@ (8003ad8 <HAL_GPIO_DeInit+0x1e8>)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	43da      	mvns	r2, r3
 8003a26:	482c      	ldr	r0, [pc, #176]	@ (8003ad8 <HAL_GPIO_DeInit+0x1e8>)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	089b      	lsrs	r3, r3, #2
 8003a2c:	400a      	ands	r2, r1
 8003a2e:	3302      	adds	r3, #2
 8003a30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	2103      	movs	r1, #3
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	08da      	lsrs	r2, r3, #3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3208      	adds	r2, #8
 8003a50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	220f      	movs	r2, #15
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	08d2      	lsrs	r2, r2, #3
 8003a68:	4019      	ands	r1, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3208      	adds	r2, #8
 8003a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	2103      	movs	r1, #3
 8003a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	401a      	ands	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	fa01 f303 	lsl.w	r3, r1, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	401a      	ands	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	2103      	movs	r1, #3
 8003aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	401a      	ands	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f47f af1f 	bne.w	8003904 <HAL_GPIO_DeInit+0x14>
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	58000080 	.word	0x58000080
 8003ad8:	58000400 	.word	0x58000400
 8003adc:	58020000 	.word	0x58020000
 8003ae0:	58020400 	.word	0x58020400
 8003ae4:	58020800 	.word	0x58020800
 8003ae8:	58020c00 	.word	0x58020c00
 8003aec:	58021000 	.word	0x58021000
 8003af0:	58021400 	.word	0x58021400
 8003af4:	58021800 	.word	0x58021800
 8003af8:	58021c00 	.word	0x58021c00
 8003afc:	58022000 	.word	0x58022000
 8003b00:	58022400 	.word	0x58022400

08003b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	807b      	strh	r3, [r7, #2]
 8003b10:	4613      	mov	r3, r2
 8003b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b14:	787b      	ldrb	r3, [r7, #1]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b1a:	887a      	ldrh	r2, [r7, #2]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003b20:	e003      	b.n	8003b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b22:	887b      	ldrh	r3, [r7, #2]
 8003b24:	041a      	lsls	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	619a      	str	r2, [r3, #24]
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
	...

08003b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e08b      	b.n	8003c62 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fe ff6a 	bl	8002a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2224      	movs	r2, #36	@ 0x24
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d107      	bne.n	8003bb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bae:	609a      	str	r2, [r3, #8]
 8003bb0:	e006      	b.n	8003bc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003bbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d108      	bne.n	8003bda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bd6:	605a      	str	r2, [r3, #4]
 8003bd8:	e007      	b.n	8003bea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003be8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6859      	ldr	r1, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c6c <HAL_I2C_Init+0x134>)
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691a      	ldr	r2, [r3, #16]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69d9      	ldr	r1, [r3, #28]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1a      	ldr	r2, [r3, #32]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	02008000 	.word	0x02008000

08003c70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	817b      	strh	r3, [r7, #10]
 8003c80:	4613      	mov	r3, r2
 8003c82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	f040 80fd 	bne.w	8003e8c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_I2C_Master_Transmit+0x30>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e0f6      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x21e>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ca8:	f7ff faae 	bl	8003208 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	2319      	movs	r3, #25
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 fc7e 	bl	80045bc <I2C_WaitOnFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e0e1      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2221      	movs	r2, #33	@ 0x21
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	893a      	ldrh	r2, [r7, #8]
 8003cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2bff      	cmp	r3, #255	@ 0xff
 8003cfa:	d906      	bls.n	8003d0a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	22ff      	movs	r2, #255	@ 0xff
 8003d00:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003d02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e007      	b.n	8003d1a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003d14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d18:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d024      	beq.n	8003d6c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	781a      	ldrb	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	8979      	ldrh	r1, [r7, #10]
 8003d5e:	4b4e      	ldr	r3, [pc, #312]	@ (8003e98 <HAL_I2C_Master_Transmit+0x228>)
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 fe79 	bl	8004a5c <I2C_TransferConfig>
 8003d6a:	e066      	b.n	8003e3a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	8979      	ldrh	r1, [r7, #10]
 8003d74:	4b48      	ldr	r3, [pc, #288]	@ (8003e98 <HAL_I2C_Master_Transmit+0x228>)
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 fe6e 	bl	8004a5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003d80:	e05b      	b.n	8003e3a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	6a39      	ldr	r1, [r7, #32]
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 fc71 	bl	800466e <I2C_WaitOnTXISFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e07b      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9a:	781a      	ldrb	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d034      	beq.n	8003e3a <HAL_I2C_Master_Transmit+0x1ca>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d130      	bne.n	8003e3a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	2200      	movs	r2, #0
 8003de0:	2180      	movs	r1, #128	@ 0x80
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fbea 	bl	80045bc <I2C_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e04d      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2bff      	cmp	r3, #255	@ 0xff
 8003dfa:	d90e      	bls.n	8003e1a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	22ff      	movs	r2, #255	@ 0xff
 8003e00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	8979      	ldrh	r1, [r7, #10]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fe22 	bl	8004a5c <I2C_TransferConfig>
 8003e18:	e00f      	b.n	8003e3a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	8979      	ldrh	r1, [r7, #10]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 fe11 	bl	8004a5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d19e      	bne.n	8003d82 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	6a39      	ldr	r1, [r7, #32]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fc57 	bl	80046fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e01a      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6859      	ldr	r1, [r3, #4]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e9c <HAL_I2C_Master_Transmit+0x22c>)
 8003e6c:	400b      	ands	r3, r1
 8003e6e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e000      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
  }
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	80002000 	.word	0x80002000
 8003e9c:	fe00e800 	.word	0xfe00e800

08003ea0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	460b      	mov	r3, r1
 8003eae:	817b      	strh	r3, [r7, #10]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	f040 80db 	bne.w	8004078 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_I2C_Master_Receive+0x30>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e0d4      	b.n	800407a <HAL_I2C_Master_Receive+0x1da>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ed8:	f7ff f996 	bl	8003208 <HAL_GetTick>
 8003edc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	2319      	movs	r3, #25
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 fb66 	bl	80045bc <I2C_WaitOnFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e0bf      	b.n	800407a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2222      	movs	r2, #34	@ 0x22
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2210      	movs	r2, #16
 8003f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	893a      	ldrh	r2, [r7, #8]
 8003f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2bff      	cmp	r3, #255	@ 0xff
 8003f2a:	d90e      	bls.n	8003f4a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	22ff      	movs	r2, #255	@ 0xff
 8003f30:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	8979      	ldrh	r1, [r7, #10]
 8003f3a:	4b52      	ldr	r3, [pc, #328]	@ (8004084 <HAL_I2C_Master_Receive+0x1e4>)
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fd8a 	bl	8004a5c <I2C_TransferConfig>
 8003f48:	e06d      	b.n	8004026 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	8979      	ldrh	r1, [r7, #10]
 8003f5c:	4b49      	ldr	r3, [pc, #292]	@ (8004084 <HAL_I2C_Master_Receive+0x1e4>)
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 fd79 	bl	8004a5c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003f6a:	e05c      	b.n	8004026 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	6a39      	ldr	r1, [r7, #32]
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 fc07 	bl	8004784 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e07c      	b.n	800407a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d034      	beq.n	8004026 <HAL_I2C_Master_Receive+0x186>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d130      	bne.n	8004026 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2180      	movs	r1, #128	@ 0x80
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 faf4 	bl	80045bc <I2C_WaitOnFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e04d      	b.n	800407a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2bff      	cmp	r3, #255	@ 0xff
 8003fe6:	d90e      	bls.n	8004006 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	22ff      	movs	r2, #255	@ 0xff
 8003fec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	8979      	ldrh	r1, [r7, #10]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fd2c 	bl	8004a5c <I2C_TransferConfig>
 8004004:	e00f      	b.n	8004026 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004014:	b2da      	uxtb	r2, r3
 8004016:	8979      	ldrh	r1, [r7, #10]
 8004018:	2300      	movs	r3, #0
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fd1b 	bl	8004a5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d19d      	bne.n	8003f6c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	6a39      	ldr	r1, [r7, #32]
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fb61 	bl	80046fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e01a      	b.n	800407a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2220      	movs	r2, #32
 800404a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6859      	ldr	r1, [r3, #4]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4b0c      	ldr	r3, [pc, #48]	@ (8004088 <HAL_I2C_Master_Receive+0x1e8>)
 8004058:	400b      	ands	r3, r1
 800405a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	e000      	b.n	800407a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
  }
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	80002400 	.word	0x80002400
 8004088:	fe00e800 	.word	0xfe00e800

0800408c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af02      	add	r7, sp, #8
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	4608      	mov	r0, r1
 8004096:	4611      	mov	r1, r2
 8004098:	461a      	mov	r2, r3
 800409a:	4603      	mov	r3, r0
 800409c:	817b      	strh	r3, [r7, #10]
 800409e:	460b      	mov	r3, r1
 80040a0:	813b      	strh	r3, [r7, #8]
 80040a2:	4613      	mov	r3, r2
 80040a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	f040 80fd 	bne.w	80042ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_I2C_Mem_Read+0x34>
 80040ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d105      	bne.n	80040cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0f1      	b.n	80042b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_I2C_Mem_Read+0x4e>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e0ea      	b.n	80042b0 <HAL_I2C_Mem_Read+0x224>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040e2:	f7ff f891 	bl	8003208 <HAL_GetTick>
 80040e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	2319      	movs	r3, #25
 80040ee:	2201      	movs	r2, #1
 80040f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fa61 	bl	80045bc <I2C_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0d5      	b.n	80042b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2222      	movs	r2, #34	@ 0x22
 8004108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2240      	movs	r2, #64	@ 0x40
 8004110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a3a      	ldr	r2, [r7, #32]
 800411e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004124:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800412c:	88f8      	ldrh	r0, [r7, #6]
 800412e:	893a      	ldrh	r2, [r7, #8]
 8004130:	8979      	ldrh	r1, [r7, #10]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	9301      	str	r3, [sp, #4]
 8004136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	4603      	mov	r3, r0
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f9c5 	bl	80044cc <I2C_RequestMemoryRead>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0ad      	b.n	80042b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	2bff      	cmp	r3, #255	@ 0xff
 800415c:	d90e      	bls.n	800417c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	22ff      	movs	r2, #255	@ 0xff
 8004162:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004168:	b2da      	uxtb	r2, r3
 800416a:	8979      	ldrh	r1, [r7, #10]
 800416c:	4b52      	ldr	r3, [pc, #328]	@ (80042b8 <HAL_I2C_Mem_Read+0x22c>)
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fc71 	bl	8004a5c <I2C_TransferConfig>
 800417a:	e00f      	b.n	800419c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800418a:	b2da      	uxtb	r2, r3
 800418c:	8979      	ldrh	r1, [r7, #10]
 800418e:	4b4a      	ldr	r3, [pc, #296]	@ (80042b8 <HAL_I2C_Mem_Read+0x22c>)
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 fc60 	bl	8004a5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a2:	2200      	movs	r2, #0
 80041a4:	2104      	movs	r1, #4
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fa08 	bl	80045bc <I2C_WaitOnFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e07c      	b.n	80042b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d034      	beq.n	800425c <HAL_I2C_Mem_Read+0x1d0>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d130      	bne.n	800425c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004200:	2200      	movs	r2, #0
 8004202:	2180      	movs	r1, #128	@ 0x80
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f9d9 	bl	80045bc <I2C_WaitOnFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e04d      	b.n	80042b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2bff      	cmp	r3, #255	@ 0xff
 800421c:	d90e      	bls.n	800423c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	22ff      	movs	r2, #255	@ 0xff
 8004222:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004228:	b2da      	uxtb	r2, r3
 800422a:	8979      	ldrh	r1, [r7, #10]
 800422c:	2300      	movs	r3, #0
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fc11 	bl	8004a5c <I2C_TransferConfig>
 800423a:	e00f      	b.n	800425c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424a:	b2da      	uxtb	r2, r3
 800424c:	8979      	ldrh	r1, [r7, #10]
 800424e:	2300      	movs	r3, #0
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 fc00 	bl	8004a5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d19a      	bne.n	800419c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fa46 	bl	80046fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e01a      	b.n	80042b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2220      	movs	r2, #32
 8004280:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6859      	ldr	r1, [r3, #4]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4b0b      	ldr	r3, [pc, #44]	@ (80042bc <HAL_I2C_Mem_Read+0x230>)
 800428e:	400b      	ands	r3, r1
 8004290:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e000      	b.n	80042b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
  }
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	80002400 	.word	0x80002400
 80042bc:	fe00e800 	.word	0xfe00e800

080042c0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08a      	sub	sp, #40	@ 0x28
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	460b      	mov	r3, r1
 80042ce:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	f040 80e9 	bne.w	80044b8 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042f4:	d101      	bne.n	80042fa <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 80042f6:	2302      	movs	r3, #2
 80042f8:	e0df      	b.n	80044ba <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_I2C_IsDeviceReady+0x48>
 8004304:	2302      	movs	r3, #2
 8004306:	e0d8      	b.n	80044ba <HAL_I2C_IsDeviceReady+0x1fa>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2224      	movs	r2, #36	@ 0x24
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d105      	bne.n	8004332 <HAL_I2C_IsDeviceReady+0x72>
 8004326:	897b      	ldrh	r3, [r7, #10]
 8004328:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800432c:	4b65      	ldr	r3, [pc, #404]	@ (80044c4 <HAL_I2C_IsDeviceReady+0x204>)
 800432e:	4313      	orrs	r3, r2
 8004330:	e004      	b.n	800433c <HAL_I2C_IsDeviceReady+0x7c>
 8004332:	897b      	ldrh	r3, [r7, #10]
 8004334:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004338:	4b63      	ldr	r3, [pc, #396]	@ (80044c8 <HAL_I2C_IsDeviceReady+0x208>)
 800433a:	4313      	orrs	r3, r2
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004342:	f7fe ff61 	bl	8003208 <HAL_GetTick>
 8004346:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b20      	cmp	r3, #32
 8004354:	bf0c      	ite	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	2300      	movne	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b10      	cmp	r3, #16
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004374:	e034      	b.n	80043e0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800437c:	d01a      	beq.n	80043b4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800437e:	f7fe ff43 	bl	8003208 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d302      	bcc.n	8004394 <HAL_I2C_IsDeviceReady+0xd4>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10f      	bne.n	80043b4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a0:	f043 0220 	orr.w	r2, r3, #32
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e082      	b.n	80044ba <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b20      	cmp	r3, #32
 80043c0:	bf0c      	ite	eq
 80043c2:	2301      	moveq	r3, #1
 80043c4:	2300      	movne	r3, #0
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80043e0:	7fbb      	ldrb	r3, [r7, #30]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d102      	bne.n	80043ec <HAL_I2C_IsDeviceReady+0x12c>
 80043e6:	7f7b      	ldrb	r3, [r7, #29]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0c4      	beq.n	8004376 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d027      	beq.n	800444a <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2200      	movs	r2, #0
 8004402:	2120      	movs	r1, #32
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f8d9 	bl	80045bc <I2C_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00e      	beq.n	800442e <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004414:	2b04      	cmp	r3, #4
 8004416:	d107      	bne.n	8004428 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2220      	movs	r2, #32
 800441e:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	645a      	str	r2, [r3, #68]	@ 0x44
 8004426:	e026      	b.n	8004476 <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	77fb      	strb	r3, [r7, #31]
 800442c:	e023      	b.n	8004476 <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2220      	movs	r2, #32
 8004434:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	e037      	b.n	80044ba <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2210      	movs	r2, #16
 8004450:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2200      	movs	r2, #0
 800445a:	2120      	movs	r1, #32
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f8ad 	bl	80045bc <I2C_WaitOnFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	77fb      	strb	r3, [r7, #31]
 800446c:	e003      	b.n	8004476 <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2220      	movs	r2, #32
 8004474:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	3301      	adds	r3, #1
 800447a:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	d904      	bls.n	800448e <HAL_I2C_IsDeviceReady+0x1ce>
 8004484:	7ffb      	ldrb	r3, [r7, #31]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	429a      	cmp	r2, r3
 8004494:	f63f af43 	bhi.w	800431e <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a4:	f043 0220 	orr.w	r2, r3, #32
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 80044b8:	2302      	movs	r3, #2
  }
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3720      	adds	r7, #32
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	02002000 	.word	0x02002000
 80044c8:	02002800 	.word	0x02002800

080044cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	4608      	mov	r0, r1
 80044d6:	4611      	mov	r1, r2
 80044d8:	461a      	mov	r2, r3
 80044da:	4603      	mov	r3, r0
 80044dc:	817b      	strh	r3, [r7, #10]
 80044de:	460b      	mov	r3, r1
 80044e0:	813b      	strh	r3, [r7, #8]
 80044e2:	4613      	mov	r3, r2
 80044e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	8979      	ldrh	r1, [r7, #10]
 80044ec:	4b20      	ldr	r3, [pc, #128]	@ (8004570 <I2C_RequestMemoryRead+0xa4>)
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	2300      	movs	r3, #0
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 fab2 	bl	8004a5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	69b9      	ldr	r1, [r7, #24]
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f8b6 	bl	800466e <I2C_WaitOnTXISFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e02c      	b.n	8004566 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d105      	bne.n	800451e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004512:	893b      	ldrh	r3, [r7, #8]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	629a      	str	r2, [r3, #40]	@ 0x28
 800451c:	e015      	b.n	800454a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800451e:	893b      	ldrh	r3, [r7, #8]
 8004520:	0a1b      	lsrs	r3, r3, #8
 8004522:	b29b      	uxth	r3, r3
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	69b9      	ldr	r1, [r7, #24]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f89c 	bl	800466e <I2C_WaitOnTXISFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e012      	b.n	8004566 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004540:	893b      	ldrh	r3, [r7, #8]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2200      	movs	r2, #0
 8004552:	2140      	movs	r1, #64	@ 0x40
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f831 	bl	80045bc <I2C_WaitOnFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	80002000 	.word	0x80002000

08004574 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b02      	cmp	r3, #2
 8004588:	d103      	bne.n	8004592 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2200      	movs	r2, #0
 8004590:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d007      	beq.n	80045b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	619a      	str	r2, [r3, #24]
  }
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	4613      	mov	r3, r2
 80045ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045cc:	e03b      	b.n	8004646 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	6839      	ldr	r1, [r7, #0]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f962 	bl	800489c <I2C_IsErrorOccurred>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e041      	b.n	8004666 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045e8:	d02d      	beq.n	8004646 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ea:	f7fe fe0d 	bl	8003208 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <I2C_WaitOnFlagUntilTimeout+0x44>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d122      	bne.n	8004646 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4013      	ands	r3, r2
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	429a      	cmp	r2, r3
 800460e:	bf0c      	ite	eq
 8004610:	2301      	moveq	r3, #1
 8004612:	2300      	movne	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	429a      	cmp	r2, r3
 800461c:	d113      	bne.n	8004646 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e00f      	b.n	8004666 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	699a      	ldr	r2, [r3, #24]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4013      	ands	r3, r2
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	429a      	cmp	r2, r3
 8004654:	bf0c      	ite	eq
 8004656:	2301      	moveq	r3, #1
 8004658:	2300      	movne	r3, #0
 800465a:	b2db      	uxtb	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	429a      	cmp	r2, r3
 8004662:	d0b4      	beq.n	80045ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800467a:	e033      	b.n	80046e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f90b 	bl	800489c <I2C_IsErrorOccurred>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e031      	b.n	80046f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004696:	d025      	beq.n	80046e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004698:	f7fe fdb6 	bl	8003208 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d302      	bcc.n	80046ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d11a      	bne.n	80046e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d013      	beq.n	80046e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c0:	f043 0220 	orr.w	r2, r3, #32
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e007      	b.n	80046f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d1c4      	bne.n	800467c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004708:	e02f      	b.n	800476a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f8c4 	bl	800489c <I2C_IsErrorOccurred>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e02d      	b.n	800477a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471e:	f7fe fd73 	bl	8003208 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	429a      	cmp	r2, r3
 800472c:	d302      	bcc.n	8004734 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d11a      	bne.n	800476a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b20      	cmp	r3, #32
 8004740:	d013      	beq.n	800476a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004746:	f043 0220 	orr.w	r2, r3, #32
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e007      	b.n	800477a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b20      	cmp	r3, #32
 8004776:	d1c8      	bne.n	800470a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004794:	e071      	b.n	800487a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f87e 	bl	800489c <I2C_IsErrorOccurred>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d13b      	bne.n	8004830 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80047b8:	7dfb      	ldrb	r3, [r7, #23]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d138      	bne.n	8004830 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d105      	bne.n	80047d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	2b10      	cmp	r3, #16
 80047e4:	d121      	bne.n	800482a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2210      	movs	r2, #16
 80047ec:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2204      	movs	r2, #4
 80047f2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2220      	movs	r2, #32
 80047fa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6859      	ldr	r1, [r3, #4]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4b24      	ldr	r3, [pc, #144]	@ (8004898 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004808:	400b      	ands	r3, r1
 800480a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	75fb      	strb	r3, [r7, #23]
 8004828:	e002      	b.n	8004830 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004830:	f7fe fcea 	bl	8003208 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	429a      	cmp	r2, r3
 800483e:	d302      	bcc.n	8004846 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d119      	bne.n	800487a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004846:	7dfb      	ldrb	r3, [r7, #23]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d116      	bne.n	800487a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b04      	cmp	r3, #4
 8004858:	d00f      	beq.n	800487a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485e:	f043 0220 	orr.w	r2, r3, #32
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b04      	cmp	r3, #4
 8004886:	d002      	beq.n	800488e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004888:	7dfb      	ldrb	r3, [r7, #23]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d083      	beq.n	8004796 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800488e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	fe00e800 	.word	0xfe00e800

0800489c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08a      	sub	sp, #40	@ 0x28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d068      	beq.n	800499a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2210      	movs	r2, #16
 80048ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048d0:	e049      	b.n	8004966 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048d8:	d045      	beq.n	8004966 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048da:	f7fe fc95 	bl	8003208 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <I2C_IsErrorOccurred+0x54>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d13a      	bne.n	8004966 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004902:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800490e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004912:	d121      	bne.n	8004958 <I2C_IsErrorOccurred+0xbc>
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800491a:	d01d      	beq.n	8004958 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800491c:	7cfb      	ldrb	r3, [r7, #19]
 800491e:	2b20      	cmp	r3, #32
 8004920:	d01a      	beq.n	8004958 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004930:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004932:	f7fe fc69 	bl	8003208 <HAL_GetTick>
 8004936:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004938:	e00e      	b.n	8004958 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800493a:	f7fe fc65 	bl	8003208 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b19      	cmp	r3, #25
 8004946:	d907      	bls.n	8004958 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	f043 0320 	orr.w	r3, r3, #32
 800494e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004956:	e006      	b.n	8004966 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b20      	cmp	r3, #32
 8004964:	d1e9      	bne.n	800493a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b20      	cmp	r3, #32
 8004972:	d003      	beq.n	800497c <I2C_IsErrorOccurred+0xe0>
 8004974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0aa      	beq.n	80048d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800497c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004980:	2b00      	cmp	r3, #0
 8004982:	d103      	bne.n	800498c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2220      	movs	r2, #32
 800498a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	f043 0304 	orr.w	r3, r3, #4
 8004992:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00b      	beq.n	80049c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	f043 0308 	orr.w	r3, r3, #8
 80049d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00b      	beq.n	8004a08 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	f043 0302 	orr.w	r3, r3, #2
 80049f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004a08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01c      	beq.n	8004a4a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7ff fdaf 	bl	8004574 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6859      	ldr	r1, [r3, #4]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b0d      	ldr	r3, [pc, #52]	@ (8004a58 <I2C_IsErrorOccurred+0x1bc>)
 8004a22:	400b      	ands	r3, r1
 8004a24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3728      	adds	r7, #40	@ 0x28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	fe00e800 	.word	0xfe00e800

08004a5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	607b      	str	r3, [r7, #4]
 8004a66:	460b      	mov	r3, r1
 8004a68:	817b      	strh	r3, [r7, #10]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a6e:	897b      	ldrh	r3, [r7, #10]
 8004a70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a74:	7a7b      	ldrb	r3, [r7, #9]
 8004a76:	041b      	lsls	r3, r3, #16
 8004a78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a7c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a8a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	0d5b      	lsrs	r3, r3, #21
 8004a96:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004a9a:	4b08      	ldr	r3, [pc, #32]	@ (8004abc <I2C_TransferConfig+0x60>)
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	ea02 0103 	and.w	r1, r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004aae:	bf00      	nop
 8004ab0:	371c      	adds	r7, #28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	03ff63ff 	.word	0x03ff63ff

08004ac0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	d138      	bne.n	8004b48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e032      	b.n	8004b4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2224      	movs	r2, #36	@ 0x24
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6819      	ldr	r1, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e000      	b.n	8004b4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b48:	2302      	movs	r3, #2
  }
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d139      	bne.n	8004be0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b76:	2302      	movs	r3, #2
 8004b78:	e033      	b.n	8004be2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2224      	movs	r2, #36	@ 0x24
 8004b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0201 	bic.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004ba8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e000      	b.n	8004be2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004be0:	2302      	movs	r3, #2
  }
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004bf8:	4b19      	ldr	r3, [pc, #100]	@ (8004c60 <HAL_PWREx_ConfigSupply+0x70>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d00a      	beq.n	8004c1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c04:	4b16      	ldr	r3, [pc, #88]	@ (8004c60 <HAL_PWREx_ConfigSupply+0x70>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d001      	beq.n	8004c16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e01f      	b.n	8004c56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	e01d      	b.n	8004c56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c1a:	4b11      	ldr	r3, [pc, #68]	@ (8004c60 <HAL_PWREx_ConfigSupply+0x70>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f023 0207 	bic.w	r2, r3, #7
 8004c22:	490f      	ldr	r1, [pc, #60]	@ (8004c60 <HAL_PWREx_ConfigSupply+0x70>)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c2a:	f7fe faed 	bl	8003208 <HAL_GetTick>
 8004c2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c30:	e009      	b.n	8004c46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c32:	f7fe fae9 	bl	8003208 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c40:	d901      	bls.n	8004c46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e007      	b.n	8004c56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c46:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <HAL_PWREx_ConfigSupply+0x70>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c52:	d1ee      	bne.n	8004c32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	58024800 	.word	0x58024800

08004c64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08c      	sub	sp, #48	@ 0x30
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d102      	bne.n	8004c78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f000 bc48 	b.w	8005508 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8088 	beq.w	8004d96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c86:	4b99      	ldr	r3, [pc, #612]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c90:	4b96      	ldr	r3, [pc, #600]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c94:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c98:	2b10      	cmp	r3, #16
 8004c9a:	d007      	beq.n	8004cac <HAL_RCC_OscConfig+0x48>
 8004c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c9e:	2b18      	cmp	r3, #24
 8004ca0:	d111      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x62>
 8004ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d10c      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cac:	4b8f      	ldr	r3, [pc, #572]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d06d      	beq.n	8004d94 <HAL_RCC_OscConfig+0x130>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d169      	bne.n	8004d94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	f000 bc21 	b.w	8005508 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cce:	d106      	bne.n	8004cde <HAL_RCC_OscConfig+0x7a>
 8004cd0:	4b86      	ldr	r3, [pc, #536]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a85      	ldr	r2, [pc, #532]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	e02e      	b.n	8004d3c <HAL_RCC_OscConfig+0xd8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10c      	bne.n	8004d00 <HAL_RCC_OscConfig+0x9c>
 8004ce6:	4b81      	ldr	r3, [pc, #516]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a80      	ldr	r2, [pc, #512]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	4b7e      	ldr	r3, [pc, #504]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a7d      	ldr	r2, [pc, #500]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004cf8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	e01d      	b.n	8004d3c <HAL_RCC_OscConfig+0xd8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0xc0>
 8004d0a:	4b78      	ldr	r3, [pc, #480]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a77      	ldr	r2, [pc, #476]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	4b75      	ldr	r3, [pc, #468]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a74      	ldr	r2, [pc, #464]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e00b      	b.n	8004d3c <HAL_RCC_OscConfig+0xd8>
 8004d24:	4b71      	ldr	r3, [pc, #452]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a70      	ldr	r2, [pc, #448]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4b6e      	ldr	r3, [pc, #440]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a6d      	ldr	r2, [pc, #436]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d013      	beq.n	8004d6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d44:	f7fe fa60 	bl	8003208 <HAL_GetTick>
 8004d48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fe fa5c 	bl	8003208 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	@ 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e3d4      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d5e:	4b63      	ldr	r3, [pc, #396]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0xe8>
 8004d6a:	e014      	b.n	8004d96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fe fa4c 	bl	8003208 <HAL_GetTick>
 8004d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fe fa48 	bl	8003208 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	@ 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e3c0      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d86:	4b59      	ldr	r3, [pc, #356]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0x110>
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 80ca 	beq.w	8004f38 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004da4:	4b51      	ldr	r3, [pc, #324]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dae:	4b4f      	ldr	r3, [pc, #316]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <HAL_RCC_OscConfig+0x166>
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	2b18      	cmp	r3, #24
 8004dbe:	d156      	bne.n	8004e6e <HAL_RCC_OscConfig+0x20a>
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d151      	bne.n	8004e6e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dca:	4b48      	ldr	r3, [pc, #288]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <HAL_RCC_OscConfig+0x17e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e392      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004de2:	4b42      	ldr	r3, [pc, #264]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 0219 	bic.w	r2, r3, #25
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	493f      	ldr	r1, [pc, #252]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fe fa08 	bl	8003208 <HAL_GetTick>
 8004df8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dfc:	f7fe fa04 	bl	8003208 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e37c      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e0e:	4b37      	ldr	r3, [pc, #220]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e1a:	f7fe fa25 	bl	8003268 <HAL_GetREVID>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d817      	bhi.n	8004e58 <HAL_RCC_OscConfig+0x1f4>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b40      	cmp	r3, #64	@ 0x40
 8004e2e:	d108      	bne.n	8004e42 <HAL_RCC_OscConfig+0x1de>
 8004e30:	4b2e      	ldr	r3, [pc, #184]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004e38:	4a2c      	ldr	r2, [pc, #176]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e3e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e40:	e07a      	b.n	8004f38 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e42:	4b2a      	ldr	r3, [pc, #168]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	031b      	lsls	r3, r3, #12
 8004e50:	4926      	ldr	r1, [pc, #152]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e56:	e06f      	b.n	8004f38 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e58:	4b24      	ldr	r3, [pc, #144]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	061b      	lsls	r3, r3, #24
 8004e66:	4921      	ldr	r1, [pc, #132]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e6c:	e064      	b.n	8004f38 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d047      	beq.n	8004f06 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e76:	4b1d      	ldr	r3, [pc, #116]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f023 0219 	bic.w	r2, r3, #25
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	491a      	ldr	r1, [pc, #104]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e88:	f7fe f9be 	bl	8003208 <HAL_GetTick>
 8004e8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e90:	f7fe f9ba 	bl	8003208 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e332      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ea2:	4b12      	ldr	r3, [pc, #72]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0f0      	beq.n	8004e90 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eae:	f7fe f9db 	bl	8003268 <HAL_GetREVID>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d819      	bhi.n	8004ef0 <HAL_RCC_OscConfig+0x28c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2b40      	cmp	r3, #64	@ 0x40
 8004ec2:	d108      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x272>
 8004ec4:	4b09      	ldr	r3, [pc, #36]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004ecc:	4a07      	ldr	r2, [pc, #28]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ed2:	6053      	str	r3, [r2, #4]
 8004ed4:	e030      	b.n	8004f38 <HAL_RCC_OscConfig+0x2d4>
 8004ed6:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	031b      	lsls	r3, r3, #12
 8004ee4:	4901      	ldr	r1, [pc, #4]	@ (8004eec <HAL_RCC_OscConfig+0x288>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	604b      	str	r3, [r1, #4]
 8004eea:	e025      	b.n	8004f38 <HAL_RCC_OscConfig+0x2d4>
 8004eec:	58024400 	.word	0x58024400
 8004ef0:	4b9a      	ldr	r3, [pc, #616]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	061b      	lsls	r3, r3, #24
 8004efe:	4997      	ldr	r1, [pc, #604]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	604b      	str	r3, [r1, #4]
 8004f04:	e018      	b.n	8004f38 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f06:	4b95      	ldr	r3, [pc, #596]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a94      	ldr	r2, [pc, #592]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8004f0c:	f023 0301 	bic.w	r3, r3, #1
 8004f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f12:	f7fe f979 	bl	8003208 <HAL_GetTick>
 8004f16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f1a:	f7fe f975 	bl	8003208 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e2ed      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f2c:	4b8b      	ldr	r3, [pc, #556]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f0      	bne.n	8004f1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 80a9 	beq.w	8005098 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f46:	4b85      	ldr	r3, [pc, #532]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f4e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f50:	4b82      	ldr	r3, [pc, #520]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8004f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f54:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d007      	beq.n	8004f6c <HAL_RCC_OscConfig+0x308>
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2b18      	cmp	r3, #24
 8004f60:	d13a      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x374>
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d135      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f6c:	4b7b      	ldr	r3, [pc, #492]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <HAL_RCC_OscConfig+0x320>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	2b80      	cmp	r3, #128	@ 0x80
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e2c1      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f84:	f7fe f970 	bl	8003268 <HAL_GetREVID>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d817      	bhi.n	8004fc2 <HAL_RCC_OscConfig+0x35e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	d108      	bne.n	8004fac <HAL_RCC_OscConfig+0x348>
 8004f9a:	4b70      	ldr	r3, [pc, #448]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004fa2:	4a6e      	ldr	r2, [pc, #440]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8004fa4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fa8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004faa:	e075      	b.n	8005098 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fac:	4b6b      	ldr	r3, [pc, #428]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	069b      	lsls	r3, r3, #26
 8004fba:	4968      	ldr	r1, [pc, #416]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fc0:	e06a      	b.n	8005098 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fc2:	4b66      	ldr	r3, [pc, #408]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	061b      	lsls	r3, r3, #24
 8004fd0:	4962      	ldr	r1, [pc, #392]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fd6:	e05f      	b.n	8005098 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d042      	beq.n	8005066 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a5d      	ldr	r2, [pc, #372]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8004fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fec:	f7fe f90c 	bl	8003208 <HAL_GetTick>
 8004ff0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ff4:	f7fe f908 	bl	8003208 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e280      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005006:	4b55      	ldr	r3, [pc, #340]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005012:	f7fe f929 	bl	8003268 <HAL_GetREVID>
 8005016:	4603      	mov	r3, r0
 8005018:	f241 0203 	movw	r2, #4099	@ 0x1003
 800501c:	4293      	cmp	r3, r2
 800501e:	d817      	bhi.n	8005050 <HAL_RCC_OscConfig+0x3ec>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	2b20      	cmp	r3, #32
 8005026:	d108      	bne.n	800503a <HAL_RCC_OscConfig+0x3d6>
 8005028:	4b4c      	ldr	r3, [pc, #304]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005030:	4a4a      	ldr	r2, [pc, #296]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8005032:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005036:	6053      	str	r3, [r2, #4]
 8005038:	e02e      	b.n	8005098 <HAL_RCC_OscConfig+0x434>
 800503a:	4b48      	ldr	r3, [pc, #288]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	069b      	lsls	r3, r3, #26
 8005048:	4944      	ldr	r1, [pc, #272]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 800504a:	4313      	orrs	r3, r2
 800504c:	604b      	str	r3, [r1, #4]
 800504e:	e023      	b.n	8005098 <HAL_RCC_OscConfig+0x434>
 8005050:	4b42      	ldr	r3, [pc, #264]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	061b      	lsls	r3, r3, #24
 800505e:	493f      	ldr	r1, [pc, #252]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8005060:	4313      	orrs	r3, r2
 8005062:	60cb      	str	r3, [r1, #12]
 8005064:	e018      	b.n	8005098 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005066:	4b3d      	ldr	r3, [pc, #244]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a3c      	ldr	r2, [pc, #240]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 800506c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005072:	f7fe f8c9 	bl	8003208 <HAL_GetTick>
 8005076:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800507a:	f7fe f8c5 	bl	8003208 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e23d      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800508c:	4b33      	ldr	r3, [pc, #204]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1f0      	bne.n	800507a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d036      	beq.n	8005112 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d019      	beq.n	80050e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ac:	4b2b      	ldr	r3, [pc, #172]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 80050ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b0:	4a2a      	ldr	r2, [pc, #168]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b8:	f7fe f8a6 	bl	8003208 <HAL_GetTick>
 80050bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050c0:	f7fe f8a2 	bl	8003208 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e21a      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050d2:	4b22      	ldr	r3, [pc, #136]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 80050d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f0      	beq.n	80050c0 <HAL_RCC_OscConfig+0x45c>
 80050de:	e018      	b.n	8005112 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050e0:	4b1e      	ldr	r3, [pc, #120]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 80050e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e4:	4a1d      	ldr	r2, [pc, #116]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 80050e6:	f023 0301 	bic.w	r3, r3, #1
 80050ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ec:	f7fe f88c 	bl	8003208 <HAL_GetTick>
 80050f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050f4:	f7fe f888 	bl	8003208 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e200      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005106:	4b15      	ldr	r3, [pc, #84]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8005108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b00      	cmp	r3, #0
 800511c:	d039      	beq.n	8005192 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01c      	beq.n	8005160 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005126:	4b0d      	ldr	r3, [pc, #52]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a0c      	ldr	r2, [pc, #48]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 800512c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005130:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005132:	f7fe f869 	bl	8003208 <HAL_GetTick>
 8005136:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800513a:	f7fe f865 	bl	8003208 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e1dd      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800514c:	4b03      	ldr	r3, [pc, #12]	@ (800515c <HAL_RCC_OscConfig+0x4f8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <HAL_RCC_OscConfig+0x4d6>
 8005158:	e01b      	b.n	8005192 <HAL_RCC_OscConfig+0x52e>
 800515a:	bf00      	nop
 800515c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005160:	4b9b      	ldr	r3, [pc, #620]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a9a      	ldr	r2, [pc, #616]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005166:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800516a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800516c:	f7fe f84c 	bl	8003208 <HAL_GetTick>
 8005170:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005174:	f7fe f848 	bl	8003208 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e1c0      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005186:	4b92      	ldr	r3, [pc, #584]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f0      	bne.n	8005174 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 8081 	beq.w	80052a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051a0:	4b8c      	ldr	r3, [pc, #560]	@ (80053d4 <HAL_RCC_OscConfig+0x770>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a8b      	ldr	r2, [pc, #556]	@ (80053d4 <HAL_RCC_OscConfig+0x770>)
 80051a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051ac:	f7fe f82c 	bl	8003208 <HAL_GetTick>
 80051b0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051b4:	f7fe f828 	bl	8003208 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b64      	cmp	r3, #100	@ 0x64
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e1a0      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051c6:	4b83      	ldr	r3, [pc, #524]	@ (80053d4 <HAL_RCC_OscConfig+0x770>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d106      	bne.n	80051e8 <HAL_RCC_OscConfig+0x584>
 80051da:	4b7d      	ldr	r3, [pc, #500]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051de:	4a7c      	ldr	r2, [pc, #496]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051e6:	e02d      	b.n	8005244 <HAL_RCC_OscConfig+0x5e0>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10c      	bne.n	800520a <HAL_RCC_OscConfig+0x5a6>
 80051f0:	4b77      	ldr	r3, [pc, #476]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 80051f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f4:	4a76      	ldr	r2, [pc, #472]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 80051f6:	f023 0301 	bic.w	r3, r3, #1
 80051fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80051fc:	4b74      	ldr	r3, [pc, #464]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 80051fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005200:	4a73      	ldr	r2, [pc, #460]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005202:	f023 0304 	bic.w	r3, r3, #4
 8005206:	6713      	str	r3, [r2, #112]	@ 0x70
 8005208:	e01c      	b.n	8005244 <HAL_RCC_OscConfig+0x5e0>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b05      	cmp	r3, #5
 8005210:	d10c      	bne.n	800522c <HAL_RCC_OscConfig+0x5c8>
 8005212:	4b6f      	ldr	r3, [pc, #444]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005216:	4a6e      	ldr	r2, [pc, #440]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005218:	f043 0304 	orr.w	r3, r3, #4
 800521c:	6713      	str	r3, [r2, #112]	@ 0x70
 800521e:	4b6c      	ldr	r3, [pc, #432]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005222:	4a6b      	ldr	r2, [pc, #428]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005224:	f043 0301 	orr.w	r3, r3, #1
 8005228:	6713      	str	r3, [r2, #112]	@ 0x70
 800522a:	e00b      	b.n	8005244 <HAL_RCC_OscConfig+0x5e0>
 800522c:	4b68      	ldr	r3, [pc, #416]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005230:	4a67      	ldr	r2, [pc, #412]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005232:	f023 0301 	bic.w	r3, r3, #1
 8005236:	6713      	str	r3, [r2, #112]	@ 0x70
 8005238:	4b65      	ldr	r3, [pc, #404]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523c:	4a64      	ldr	r2, [pc, #400]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 800523e:	f023 0304 	bic.w	r3, r3, #4
 8005242:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d015      	beq.n	8005278 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524c:	f7fd ffdc 	bl	8003208 <HAL_GetTick>
 8005250:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005252:	e00a      	b.n	800526a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005254:	f7fd ffd8 	bl	8003208 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e14e      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800526a:	4b59      	ldr	r3, [pc, #356]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 800526c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0ee      	beq.n	8005254 <HAL_RCC_OscConfig+0x5f0>
 8005276:	e014      	b.n	80052a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005278:	f7fd ffc6 	bl	8003208 <HAL_GetTick>
 800527c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800527e:	e00a      	b.n	8005296 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005280:	f7fd ffc2 	bl	8003208 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528e:	4293      	cmp	r3, r2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e138      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005296:	4b4e      	ldr	r3, [pc, #312]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1ee      	bne.n	8005280 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 812d 	beq.w	8005506 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80052ac:	4b48      	ldr	r3, [pc, #288]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052b4:	2b18      	cmp	r3, #24
 80052b6:	f000 80bd 	beq.w	8005434 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052be:	2b02      	cmp	r3, #2
 80052c0:	f040 809e 	bne.w	8005400 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c4:	4b42      	ldr	r3, [pc, #264]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a41      	ldr	r2, [pc, #260]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 80052ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d0:	f7fd ff9a 	bl	8003208 <HAL_GetTick>
 80052d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d8:	f7fd ff96 	bl	8003208 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e10e      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052ea:	4b39      	ldr	r3, [pc, #228]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f0      	bne.n	80052d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052f6:	4b36      	ldr	r3, [pc, #216]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 80052f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052fa:	4b37      	ldr	r3, [pc, #220]	@ (80053d8 <HAL_RCC_OscConfig+0x774>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005306:	0112      	lsls	r2, r2, #4
 8005308:	430a      	orrs	r2, r1
 800530a:	4931      	ldr	r1, [pc, #196]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 800530c:	4313      	orrs	r3, r2
 800530e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005314:	3b01      	subs	r3, #1
 8005316:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800531e:	3b01      	subs	r3, #1
 8005320:	025b      	lsls	r3, r3, #9
 8005322:	b29b      	uxth	r3, r3
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532a:	3b01      	subs	r3, #1
 800532c:	041b      	lsls	r3, r3, #16
 800532e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005338:	3b01      	subs	r3, #1
 800533a:	061b      	lsls	r3, r3, #24
 800533c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005340:	4923      	ldr	r1, [pc, #140]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005342:	4313      	orrs	r3, r2
 8005344:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005346:	4b22      	ldr	r3, [pc, #136]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534a:	4a21      	ldr	r2, [pc, #132]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 800534c:	f023 0301 	bic.w	r3, r3, #1
 8005350:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005352:	4b1f      	ldr	r3, [pc, #124]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005354:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005356:	4b21      	ldr	r3, [pc, #132]	@ (80053dc <HAL_RCC_OscConfig+0x778>)
 8005358:	4013      	ands	r3, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800535e:	00d2      	lsls	r2, r2, #3
 8005360:	491b      	ldr	r1, [pc, #108]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005362:	4313      	orrs	r3, r2
 8005364:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005366:	4b1a      	ldr	r3, [pc, #104]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536a:	f023 020c 	bic.w	r2, r3, #12
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	4917      	ldr	r1, [pc, #92]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005374:	4313      	orrs	r3, r2
 8005376:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005378:	4b15      	ldr	r3, [pc, #84]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 800537a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537c:	f023 0202 	bic.w	r2, r3, #2
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005384:	4912      	ldr	r1, [pc, #72]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005386:	4313      	orrs	r3, r2
 8005388:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800538a:	4b11      	ldr	r3, [pc, #68]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 800538c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538e:	4a10      	ldr	r2, [pc, #64]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005394:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005396:	4b0e      	ldr	r3, [pc, #56]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 8005398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539a:	4a0d      	ldr	r2, [pc, #52]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 800539c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80053a2:	4b0b      	ldr	r3, [pc, #44]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 80053a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a6:	4a0a      	ldr	r2, [pc, #40]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 80053a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80053ae:	4b08      	ldr	r3, [pc, #32]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	4a07      	ldr	r2, [pc, #28]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ba:	4b05      	ldr	r3, [pc, #20]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a04      	ldr	r2, [pc, #16]	@ (80053d0 <HAL_RCC_OscConfig+0x76c>)
 80053c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c6:	f7fd ff1f 	bl	8003208 <HAL_GetTick>
 80053ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053cc:	e011      	b.n	80053f2 <HAL_RCC_OscConfig+0x78e>
 80053ce:	bf00      	nop
 80053d0:	58024400 	.word	0x58024400
 80053d4:	58024800 	.word	0x58024800
 80053d8:	fffffc0c 	.word	0xfffffc0c
 80053dc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e0:	f7fd ff12 	bl	8003208 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e08a      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053f2:	4b47      	ldr	r3, [pc, #284]	@ (8005510 <HAL_RCC_OscConfig+0x8ac>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCC_OscConfig+0x77c>
 80053fe:	e082      	b.n	8005506 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005400:	4b43      	ldr	r3, [pc, #268]	@ (8005510 <HAL_RCC_OscConfig+0x8ac>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a42      	ldr	r2, [pc, #264]	@ (8005510 <HAL_RCC_OscConfig+0x8ac>)
 8005406:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800540a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fd fefc 	bl	8003208 <HAL_GetTick>
 8005410:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005414:	f7fd fef8 	bl	8003208 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e070      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005426:	4b3a      	ldr	r3, [pc, #232]	@ (8005510 <HAL_RCC_OscConfig+0x8ac>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x7b0>
 8005432:	e068      	b.n	8005506 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005434:	4b36      	ldr	r3, [pc, #216]	@ (8005510 <HAL_RCC_OscConfig+0x8ac>)
 8005436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005438:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800543a:	4b35      	ldr	r3, [pc, #212]	@ (8005510 <HAL_RCC_OscConfig+0x8ac>)
 800543c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005444:	2b01      	cmp	r3, #1
 8005446:	d031      	beq.n	80054ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f003 0203 	and.w	r2, r3, #3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005452:	429a      	cmp	r2, r3
 8005454:	d12a      	bne.n	80054ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005462:	429a      	cmp	r2, r3
 8005464:	d122      	bne.n	80054ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005470:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005472:	429a      	cmp	r2, r3
 8005474:	d11a      	bne.n	80054ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	0a5b      	lsrs	r3, r3, #9
 800547a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005482:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005484:	429a      	cmp	r2, r3
 8005486:	d111      	bne.n	80054ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	0c1b      	lsrs	r3, r3, #16
 800548c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005494:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005496:	429a      	cmp	r2, r3
 8005498:	d108      	bne.n	80054ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	0e1b      	lsrs	r3, r3, #24
 800549e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d001      	beq.n	80054b0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e02b      	b.n	8005508 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80054b0:	4b17      	ldr	r3, [pc, #92]	@ (8005510 <HAL_RCC_OscConfig+0x8ac>)
 80054b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b4:	08db      	lsrs	r3, r3, #3
 80054b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d01f      	beq.n	8005506 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80054c6:	4b12      	ldr	r3, [pc, #72]	@ (8005510 <HAL_RCC_OscConfig+0x8ac>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ca:	4a11      	ldr	r2, [pc, #68]	@ (8005510 <HAL_RCC_OscConfig+0x8ac>)
 80054cc:	f023 0301 	bic.w	r3, r3, #1
 80054d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054d2:	f7fd fe99 	bl	8003208 <HAL_GetTick>
 80054d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80054d8:	bf00      	nop
 80054da:	f7fd fe95 	bl	8003208 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d0f9      	beq.n	80054da <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005510 <HAL_RCC_OscConfig+0x8ac>)
 80054e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005514 <HAL_RCC_OscConfig+0x8b0>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80054f2:	00d2      	lsls	r2, r2, #3
 80054f4:	4906      	ldr	r1, [pc, #24]	@ (8005510 <HAL_RCC_OscConfig+0x8ac>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80054fa:	4b05      	ldr	r3, [pc, #20]	@ (8005510 <HAL_RCC_OscConfig+0x8ac>)
 80054fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fe:	4a04      	ldr	r2, [pc, #16]	@ (8005510 <HAL_RCC_OscConfig+0x8ac>)
 8005500:	f043 0301 	orr.w	r3, r3, #1
 8005504:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3730      	adds	r7, #48	@ 0x30
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	58024400 	.word	0x58024400
 8005514:	ffff0007 	.word	0xffff0007

08005518 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e19c      	b.n	8005866 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800552c:	4b8a      	ldr	r3, [pc, #552]	@ (8005758 <HAL_RCC_ClockConfig+0x240>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d910      	bls.n	800555c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553a:	4b87      	ldr	r3, [pc, #540]	@ (8005758 <HAL_RCC_ClockConfig+0x240>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f023 020f 	bic.w	r2, r3, #15
 8005542:	4985      	ldr	r1, [pc, #532]	@ (8005758 <HAL_RCC_ClockConfig+0x240>)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	4313      	orrs	r3, r2
 8005548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800554a:	4b83      	ldr	r3, [pc, #524]	@ (8005758 <HAL_RCC_ClockConfig+0x240>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d001      	beq.n	800555c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e184      	b.n	8005866 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d010      	beq.n	800558a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	4b7b      	ldr	r3, [pc, #492]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005574:	429a      	cmp	r2, r3
 8005576:	d908      	bls.n	800558a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005578:	4b78      	ldr	r3, [pc, #480]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	4975      	ldr	r1, [pc, #468]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 8005586:	4313      	orrs	r3, r2
 8005588:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d010      	beq.n	80055b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	4b70      	ldr	r3, [pc, #448]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d908      	bls.n	80055b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055a6:	4b6d      	ldr	r3, [pc, #436]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	496a      	ldr	r1, [pc, #424]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d010      	beq.n	80055e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699a      	ldr	r2, [r3, #24]
 80055c8:	4b64      	ldr	r3, [pc, #400]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d908      	bls.n	80055e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055d4:	4b61      	ldr	r3, [pc, #388]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	495e      	ldr	r1, [pc, #376]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d010      	beq.n	8005614 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69da      	ldr	r2, [r3, #28]
 80055f6:	4b59      	ldr	r3, [pc, #356]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055fe:	429a      	cmp	r2, r3
 8005600:	d908      	bls.n	8005614 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005602:	4b56      	ldr	r3, [pc, #344]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	4953      	ldr	r1, [pc, #332]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 8005610:	4313      	orrs	r3, r2
 8005612:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d010      	beq.n	8005642 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	4b4d      	ldr	r3, [pc, #308]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	429a      	cmp	r2, r3
 800562e:	d908      	bls.n	8005642 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005630:	4b4a      	ldr	r3, [pc, #296]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f023 020f 	bic.w	r2, r3, #15
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4947      	ldr	r1, [pc, #284]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 800563e:	4313      	orrs	r3, r2
 8005640:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d055      	beq.n	80056fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800564e:	4b43      	ldr	r3, [pc, #268]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	4940      	ldr	r1, [pc, #256]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 800565c:	4313      	orrs	r3, r2
 800565e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d107      	bne.n	8005678 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005668:	4b3c      	ldr	r3, [pc, #240]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d121      	bne.n	80056b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e0f6      	b.n	8005866 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d107      	bne.n	8005690 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005680:	4b36      	ldr	r3, [pc, #216]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d115      	bne.n	80056b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e0ea      	b.n	8005866 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d107      	bne.n	80056a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005698:	4b30      	ldr	r3, [pc, #192]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d109      	bne.n	80056b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0de      	b.n	8005866 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056a8:	4b2c      	ldr	r3, [pc, #176]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e0d6      	b.n	8005866 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056b8:	4b28      	ldr	r3, [pc, #160]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f023 0207 	bic.w	r2, r3, #7
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	4925      	ldr	r1, [pc, #148]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ca:	f7fd fd9d 	bl	8003208 <HAL_GetTick>
 80056ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d0:	e00a      	b.n	80056e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d2:	f7fd fd99 	bl	8003208 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e0be      	b.n	8005866 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e8:	4b1c      	ldr	r3, [pc, #112]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d1eb      	bne.n	80056d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d010      	beq.n	8005728 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	4b14      	ldr	r3, [pc, #80]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	429a      	cmp	r2, r3
 8005714:	d208      	bcs.n	8005728 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005716:	4b11      	ldr	r3, [pc, #68]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f023 020f 	bic.w	r2, r3, #15
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	490e      	ldr	r1, [pc, #56]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 8005724:	4313      	orrs	r3, r2
 8005726:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005728:	4b0b      	ldr	r3, [pc, #44]	@ (8005758 <HAL_RCC_ClockConfig+0x240>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 030f 	and.w	r3, r3, #15
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d214      	bcs.n	8005760 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005736:	4b08      	ldr	r3, [pc, #32]	@ (8005758 <HAL_RCC_ClockConfig+0x240>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f023 020f 	bic.w	r2, r3, #15
 800573e:	4906      	ldr	r1, [pc, #24]	@ (8005758 <HAL_RCC_ClockConfig+0x240>)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	4313      	orrs	r3, r2
 8005744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005746:	4b04      	ldr	r3, [pc, #16]	@ (8005758 <HAL_RCC_ClockConfig+0x240>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	429a      	cmp	r2, r3
 8005752:	d005      	beq.n	8005760 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e086      	b.n	8005866 <HAL_RCC_ClockConfig+0x34e>
 8005758:	52002000 	.word	0x52002000
 800575c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d010      	beq.n	800578e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	4b3f      	ldr	r3, [pc, #252]	@ (8005870 <HAL_RCC_ClockConfig+0x358>)
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005778:	429a      	cmp	r2, r3
 800577a:	d208      	bcs.n	800578e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800577c:	4b3c      	ldr	r3, [pc, #240]	@ (8005870 <HAL_RCC_ClockConfig+0x358>)
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	4939      	ldr	r1, [pc, #228]	@ (8005870 <HAL_RCC_ClockConfig+0x358>)
 800578a:	4313      	orrs	r3, r2
 800578c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	2b00      	cmp	r3, #0
 8005798:	d010      	beq.n	80057bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695a      	ldr	r2, [r3, #20]
 800579e:	4b34      	ldr	r3, [pc, #208]	@ (8005870 <HAL_RCC_ClockConfig+0x358>)
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d208      	bcs.n	80057bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057aa:	4b31      	ldr	r3, [pc, #196]	@ (8005870 <HAL_RCC_ClockConfig+0x358>)
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	492e      	ldr	r1, [pc, #184]	@ (8005870 <HAL_RCC_ClockConfig+0x358>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0310 	and.w	r3, r3, #16
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d010      	beq.n	80057ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699a      	ldr	r2, [r3, #24]
 80057cc:	4b28      	ldr	r3, [pc, #160]	@ (8005870 <HAL_RCC_ClockConfig+0x358>)
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d208      	bcs.n	80057ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057d8:	4b25      	ldr	r3, [pc, #148]	@ (8005870 <HAL_RCC_ClockConfig+0x358>)
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	4922      	ldr	r1, [pc, #136]	@ (8005870 <HAL_RCC_ClockConfig+0x358>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d010      	beq.n	8005818 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	69da      	ldr	r2, [r3, #28]
 80057fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005870 <HAL_RCC_ClockConfig+0x358>)
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005802:	429a      	cmp	r2, r3
 8005804:	d208      	bcs.n	8005818 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005806:	4b1a      	ldr	r3, [pc, #104]	@ (8005870 <HAL_RCC_ClockConfig+0x358>)
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	4917      	ldr	r1, [pc, #92]	@ (8005870 <HAL_RCC_ClockConfig+0x358>)
 8005814:	4313      	orrs	r3, r2
 8005816:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005818:	f000 f834 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 800581c:	4602      	mov	r2, r0
 800581e:	4b14      	ldr	r3, [pc, #80]	@ (8005870 <HAL_RCC_ClockConfig+0x358>)
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	0a1b      	lsrs	r3, r3, #8
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	4912      	ldr	r1, [pc, #72]	@ (8005874 <HAL_RCC_ClockConfig+0x35c>)
 800582a:	5ccb      	ldrb	r3, [r1, r3]
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	fa22 f303 	lsr.w	r3, r2, r3
 8005834:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005836:	4b0e      	ldr	r3, [pc, #56]	@ (8005870 <HAL_RCC_ClockConfig+0x358>)
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	4a0d      	ldr	r2, [pc, #52]	@ (8005874 <HAL_RCC_ClockConfig+0x35c>)
 8005840:	5cd3      	ldrb	r3, [r2, r3]
 8005842:	f003 031f 	and.w	r3, r3, #31
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
 800584c:	4a0a      	ldr	r2, [pc, #40]	@ (8005878 <HAL_RCC_ClockConfig+0x360>)
 800584e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005850:	4a0a      	ldr	r2, [pc, #40]	@ (800587c <HAL_RCC_ClockConfig+0x364>)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005856:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <HAL_RCC_ClockConfig+0x368>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4618      	mov	r0, r3
 800585c:	f7fd fc8a 	bl	8003174 <HAL_InitTick>
 8005860:	4603      	mov	r3, r0
 8005862:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005864:	7bfb      	ldrb	r3, [r7, #15]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	58024400 	.word	0x58024400
 8005874:	0800c65c 	.word	0x0800c65c
 8005878:	2400004c 	.word	0x2400004c
 800587c:	24000048 	.word	0x24000048
 8005880:	24000050 	.word	0x24000050

08005884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005884:	b480      	push	{r7}
 8005886:	b089      	sub	sp, #36	@ 0x24
 8005888:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800588a:	4bb3      	ldr	r3, [pc, #716]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005892:	2b18      	cmp	r3, #24
 8005894:	f200 8155 	bhi.w	8005b42 <HAL_RCC_GetSysClockFreq+0x2be>
 8005898:	a201      	add	r2, pc, #4	@ (adr r2, 80058a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800589a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589e:	bf00      	nop
 80058a0:	08005905 	.word	0x08005905
 80058a4:	08005b43 	.word	0x08005b43
 80058a8:	08005b43 	.word	0x08005b43
 80058ac:	08005b43 	.word	0x08005b43
 80058b0:	08005b43 	.word	0x08005b43
 80058b4:	08005b43 	.word	0x08005b43
 80058b8:	08005b43 	.word	0x08005b43
 80058bc:	08005b43 	.word	0x08005b43
 80058c0:	0800592b 	.word	0x0800592b
 80058c4:	08005b43 	.word	0x08005b43
 80058c8:	08005b43 	.word	0x08005b43
 80058cc:	08005b43 	.word	0x08005b43
 80058d0:	08005b43 	.word	0x08005b43
 80058d4:	08005b43 	.word	0x08005b43
 80058d8:	08005b43 	.word	0x08005b43
 80058dc:	08005b43 	.word	0x08005b43
 80058e0:	08005931 	.word	0x08005931
 80058e4:	08005b43 	.word	0x08005b43
 80058e8:	08005b43 	.word	0x08005b43
 80058ec:	08005b43 	.word	0x08005b43
 80058f0:	08005b43 	.word	0x08005b43
 80058f4:	08005b43 	.word	0x08005b43
 80058f8:	08005b43 	.word	0x08005b43
 80058fc:	08005b43 	.word	0x08005b43
 8005900:	08005937 	.word	0x08005937
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005904:	4b94      	ldr	r3, [pc, #592]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d009      	beq.n	8005924 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005910:	4b91      	ldr	r3, [pc, #580]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	08db      	lsrs	r3, r3, #3
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	4a90      	ldr	r2, [pc, #576]	@ (8005b5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800591c:	fa22 f303 	lsr.w	r3, r2, r3
 8005920:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005922:	e111      	b.n	8005b48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005924:	4b8d      	ldr	r3, [pc, #564]	@ (8005b5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005926:	61bb      	str	r3, [r7, #24]
      break;
 8005928:	e10e      	b.n	8005b48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800592a:	4b8d      	ldr	r3, [pc, #564]	@ (8005b60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800592c:	61bb      	str	r3, [r7, #24]
      break;
 800592e:	e10b      	b.n	8005b48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005930:	4b8c      	ldr	r3, [pc, #560]	@ (8005b64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005932:	61bb      	str	r3, [r7, #24]
      break;
 8005934:	e108      	b.n	8005b48 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005936:	4b88      	ldr	r3, [pc, #544]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005940:	4b85      	ldr	r3, [pc, #532]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005944:	091b      	lsrs	r3, r3, #4
 8005946:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800594a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800594c:	4b82      	ldr	r3, [pc, #520]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800594e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005956:	4b80      	ldr	r3, [pc, #512]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800595a:	08db      	lsrs	r3, r3, #3
 800595c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	fb02 f303 	mul.w	r3, r2, r3
 8005966:	ee07 3a90 	vmov	s15, r3
 800596a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 80e1 	beq.w	8005b3c <HAL_RCC_GetSysClockFreq+0x2b8>
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b02      	cmp	r3, #2
 800597e:	f000 8083 	beq.w	8005a88 <HAL_RCC_GetSysClockFreq+0x204>
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2b02      	cmp	r3, #2
 8005986:	f200 80a1 	bhi.w	8005acc <HAL_RCC_GetSysClockFreq+0x248>
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_RCC_GetSysClockFreq+0x114>
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d056      	beq.n	8005a44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005996:	e099      	b.n	8005acc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005998:	4b6f      	ldr	r3, [pc, #444]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d02d      	beq.n	8005a00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059a4:	4b6c      	ldr	r3, [pc, #432]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	08db      	lsrs	r3, r3, #3
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	4a6b      	ldr	r2, [pc, #428]	@ (8005b5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059b0:	fa22 f303 	lsr.w	r3, r2, r3
 80059b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	ee07 3a90 	vmov	s15, r3
 80059bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	ee07 3a90 	vmov	s15, r3
 80059c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ce:	4b62      	ldr	r3, [pc, #392]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059de:	ed97 6a02 	vldr	s12, [r7, #8]
 80059e2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80059fe:	e087      	b.n	8005b10 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005b6c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a12:	4b51      	ldr	r3, [pc, #324]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a26:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a42:	e065      	b.n	8005b10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005b70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a56:	4b40      	ldr	r3, [pc, #256]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a6a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a86:	e043      	b.n	8005b10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a92:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005b74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005aca:	e021      	b.n	8005b10 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	ee07 3a90 	vmov	s15, r3
 8005ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005b70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ade:	4b1e      	ldr	r3, [pc, #120]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005af2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b0e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005b10:	4b11      	ldr	r3, [pc, #68]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b14:	0a5b      	lsrs	r3, r3, #9
 8005b16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	ee07 3a90 	vmov	s15, r3
 8005b24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b28:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b34:	ee17 3a90 	vmov	r3, s15
 8005b38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005b3a:	e005      	b.n	8005b48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61bb      	str	r3, [r7, #24]
      break;
 8005b40:	e002      	b.n	8005b48 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005b42:	4b07      	ldr	r3, [pc, #28]	@ (8005b60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b44:	61bb      	str	r3, [r7, #24]
      break;
 8005b46:	bf00      	nop
  }

  return sysclockfreq;
 8005b48:	69bb      	ldr	r3, [r7, #24]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3724      	adds	r7, #36	@ 0x24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	58024400 	.word	0x58024400
 8005b5c:	03d09000 	.word	0x03d09000
 8005b60:	003d0900 	.word	0x003d0900
 8005b64:	017d7840 	.word	0x017d7840
 8005b68:	46000000 	.word	0x46000000
 8005b6c:	4c742400 	.word	0x4c742400
 8005b70:	4a742400 	.word	0x4a742400
 8005b74:	4bbebc20 	.word	0x4bbebc20

08005b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b7e:	f7ff fe81 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 8005b82:	4602      	mov	r2, r0
 8005b84:	4b10      	ldr	r3, [pc, #64]	@ (8005bc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	0a1b      	lsrs	r3, r3, #8
 8005b8a:	f003 030f 	and.w	r3, r3, #15
 8005b8e:	490f      	ldr	r1, [pc, #60]	@ (8005bcc <HAL_RCC_GetHCLKFreq+0x54>)
 8005b90:	5ccb      	ldrb	r3, [r1, r3]
 8005b92:	f003 031f 	and.w	r3, r3, #31
 8005b96:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	4a09      	ldr	r2, [pc, #36]	@ (8005bcc <HAL_RCC_GetHCLKFreq+0x54>)
 8005ba6:	5cd3      	ldrb	r3, [r2, r3]
 8005ba8:	f003 031f 	and.w	r3, r3, #31
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb2:	4a07      	ldr	r2, [pc, #28]	@ (8005bd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005bb4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bb6:	4a07      	ldr	r2, [pc, #28]	@ (8005bd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005bbc:	4b04      	ldr	r3, [pc, #16]	@ (8005bd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	58024400 	.word	0x58024400
 8005bcc:	0800c65c 	.word	0x0800c65c
 8005bd0:	2400004c 	.word	0x2400004c
 8005bd4:	24000048 	.word	0x24000048

08005bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005bdc:	f7ff ffcc 	bl	8005b78 <HAL_RCC_GetHCLKFreq>
 8005be0:	4602      	mov	r2, r0
 8005be2:	4b06      	ldr	r3, [pc, #24]	@ (8005bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	091b      	lsrs	r3, r3, #4
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	4904      	ldr	r1, [pc, #16]	@ (8005c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bee:	5ccb      	ldrb	r3, [r1, r3]
 8005bf0:	f003 031f 	and.w	r3, r3, #31
 8005bf4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	58024400 	.word	0x58024400
 8005c00:	0800c65c 	.word	0x0800c65c

08005c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005c08:	f7ff ffb6 	bl	8005b78 <HAL_RCC_GetHCLKFreq>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	4b06      	ldr	r3, [pc, #24]	@ (8005c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	0a1b      	lsrs	r3, r3, #8
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	4904      	ldr	r1, [pc, #16]	@ (8005c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c1a:	5ccb      	ldrb	r3, [r1, r3]
 8005c1c:	f003 031f 	and.w	r3, r3, #31
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	58024400 	.word	0x58024400
 8005c2c:	0800c65c 	.word	0x0800c65c

08005c30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c34:	b0ca      	sub	sp, #296	@ 0x128
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c42:	2300      	movs	r3, #0
 8005c44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005c54:	2500      	movs	r5, #0
 8005c56:	ea54 0305 	orrs.w	r3, r4, r5
 8005c5a:	d049      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c66:	d02f      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c6c:	d828      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c72:	d01a      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c78:	d822      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c82:	d007      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c84:	e01c      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c86:	4bb8      	ldr	r3, [pc, #736]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8a:	4ab7      	ldr	r2, [pc, #732]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c92:	e01a      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c98:	3308      	adds	r3, #8
 8005c9a:	2102      	movs	r1, #2
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f001 fc8f 	bl	80075c0 <RCCEx_PLL2_Config>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ca8:	e00f      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cae:	3328      	adds	r3, #40	@ 0x28
 8005cb0:	2102      	movs	r1, #2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 fd36 	bl	8007724 <RCCEx_PLL3_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cbe:	e004      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cc6:	e000      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005cd2:	4ba5      	ldr	r3, [pc, #660]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ce0:	4aa1      	ldr	r2, [pc, #644]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ce2:	430b      	orrs	r3, r1
 8005ce4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ce6:	e003      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005cfc:	f04f 0900 	mov.w	r9, #0
 8005d00:	ea58 0309 	orrs.w	r3, r8, r9
 8005d04:	d047      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	d82a      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005d10:	a201      	add	r2, pc, #4	@ (adr r2, 8005d18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d16:	bf00      	nop
 8005d18:	08005d2d 	.word	0x08005d2d
 8005d1c:	08005d3b 	.word	0x08005d3b
 8005d20:	08005d51 	.word	0x08005d51
 8005d24:	08005d6f 	.word	0x08005d6f
 8005d28:	08005d6f 	.word	0x08005d6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d2c:	4b8e      	ldr	r3, [pc, #568]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d30:	4a8d      	ldr	r2, [pc, #564]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d38:	e01a      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3e:	3308      	adds	r3, #8
 8005d40:	2100      	movs	r1, #0
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 fc3c 	bl	80075c0 <RCCEx_PLL2_Config>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d4e:	e00f      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d54:	3328      	adds	r3, #40	@ 0x28
 8005d56:	2100      	movs	r1, #0
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 fce3 	bl	8007724 <RCCEx_PLL3_Config>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d64:	e004      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d6c:	e000      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d78:	4b7b      	ldr	r3, [pc, #492]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d7c:	f023 0107 	bic.w	r1, r3, #7
 8005d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d86:	4a78      	ldr	r2, [pc, #480]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d8c:	e003      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005da2:	f04f 0b00 	mov.w	fp, #0
 8005da6:	ea5a 030b 	orrs.w	r3, sl, fp
 8005daa:	d04c      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005db6:	d030      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005db8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dbc:	d829      	bhi.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005dbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dc0:	d02d      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005dc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dc4:	d825      	bhi.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005dc6:	2b80      	cmp	r3, #128	@ 0x80
 8005dc8:	d018      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005dca:	2b80      	cmp	r3, #128	@ 0x80
 8005dcc:	d821      	bhi.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005dd2:	2b40      	cmp	r3, #64	@ 0x40
 8005dd4:	d007      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005dd6:	e01c      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd8:	4b63      	ldr	r3, [pc, #396]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ddc:	4a62      	ldr	r2, [pc, #392]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005de2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005de4:	e01c      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dea:	3308      	adds	r3, #8
 8005dec:	2100      	movs	r1, #0
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 fbe6 	bl	80075c0 <RCCEx_PLL2_Config>
 8005df4:	4603      	mov	r3, r0
 8005df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005dfa:	e011      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e00:	3328      	adds	r3, #40	@ 0x28
 8005e02:	2100      	movs	r1, #0
 8005e04:	4618      	mov	r0, r3
 8005e06:	f001 fc8d 	bl	8007724 <RCCEx_PLL3_Config>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e10:	e006      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e18:	e002      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005e1a:	bf00      	nop
 8005e1c:	e000      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005e28:	4b4f      	ldr	r3, [pc, #316]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e2c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e36:	4a4c      	ldr	r2, [pc, #304]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e3c:	e003      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005e52:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005e56:	2300      	movs	r3, #0
 8005e58:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005e5c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005e60:	460b      	mov	r3, r1
 8005e62:	4313      	orrs	r3, r2
 8005e64:	d053      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e72:	d035      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005e74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e78:	d82e      	bhi.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e7a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e7e:	d031      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005e80:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e84:	d828      	bhi.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e8a:	d01a      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005e8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e90:	d822      	bhi.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005e96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e9a:	d007      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005e9c:	e01c      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e9e:	4b32      	ldr	r3, [pc, #200]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea2:	4a31      	ldr	r2, [pc, #196]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005eaa:	e01c      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f001 fb83 	bl	80075c0 <RCCEx_PLL2_Config>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005ec0:	e011      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec6:	3328      	adds	r3, #40	@ 0x28
 8005ec8:	2100      	movs	r1, #0
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f001 fc2a 	bl	8007724 <RCCEx_PLL3_Config>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ed6:	e006      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ede:	e002      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ee0:	bf00      	nop
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10b      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005eee:	4b1e      	ldr	r3, [pc, #120]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005efe:	4a1a      	ldr	r2, [pc, #104]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f04:	e003      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005f1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005f24:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	d056      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f3a:	d038      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005f3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f40:	d831      	bhi.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f42:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f46:	d034      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005f48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f4c:	d82b      	bhi.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f52:	d01d      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005f54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f58:	d825      	bhi.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d006      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005f5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f62:	d00a      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005f64:	e01f      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f66:	bf00      	nop
 8005f68:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f6c:	4ba2      	ldr	r3, [pc, #648]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f70:	4aa1      	ldr	r2, [pc, #644]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f78:	e01c      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f7e:	3308      	adds	r3, #8
 8005f80:	2100      	movs	r1, #0
 8005f82:	4618      	mov	r0, r3
 8005f84:	f001 fb1c 	bl	80075c0 <RCCEx_PLL2_Config>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f8e:	e011      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f94:	3328      	adds	r3, #40	@ 0x28
 8005f96:	2100      	movs	r1, #0
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f001 fbc3 	bl	8007724 <RCCEx_PLL3_Config>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fa4:	e006      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fac:	e002      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005fae:	bf00      	nop
 8005fb0:	e000      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10b      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005fbc:	4b8e      	ldr	r3, [pc, #568]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005fcc:	4a8a      	ldr	r2, [pc, #552]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fce:	430b      	orrs	r3, r1
 8005fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fd2:	e003      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005fec:	2300      	movs	r3, #0
 8005fee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ff2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	d03a      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006002:	2b30      	cmp	r3, #48	@ 0x30
 8006004:	d01f      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006006:	2b30      	cmp	r3, #48	@ 0x30
 8006008:	d819      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800600a:	2b20      	cmp	r3, #32
 800600c:	d00c      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800600e:	2b20      	cmp	r3, #32
 8006010:	d815      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006012:	2b00      	cmp	r3, #0
 8006014:	d019      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006016:	2b10      	cmp	r3, #16
 8006018:	d111      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800601a:	4b77      	ldr	r3, [pc, #476]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800601c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601e:	4a76      	ldr	r2, [pc, #472]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006024:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006026:	e011      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602c:	3308      	adds	r3, #8
 800602e:	2102      	movs	r1, #2
 8006030:	4618      	mov	r0, r3
 8006032:	f001 fac5 	bl	80075c0 <RCCEx_PLL2_Config>
 8006036:	4603      	mov	r3, r0
 8006038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800603c:	e006      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006044:	e002      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006046:	bf00      	nop
 8006048:	e000      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800604a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800604c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006054:	4b68      	ldr	r3, [pc, #416]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006058:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800605c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006062:	4a65      	ldr	r2, [pc, #404]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006064:	430b      	orrs	r3, r1
 8006066:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006068:	e003      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800606e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800607e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006082:	2300      	movs	r3, #0
 8006084:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006088:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800608c:	460b      	mov	r3, r1
 800608e:	4313      	orrs	r3, r2
 8006090:	d051      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006098:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800609c:	d035      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800609e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060a2:	d82e      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060a8:	d031      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80060aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060ae:	d828      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060b4:	d01a      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80060b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ba:	d822      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80060c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060c4:	d007      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80060c6:	e01c      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c8:	4b4b      	ldr	r3, [pc, #300]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060cc:	4a4a      	ldr	r2, [pc, #296]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060d4:	e01c      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060da:	3308      	adds	r3, #8
 80060dc:	2100      	movs	r1, #0
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 fa6e 	bl	80075c0 <RCCEx_PLL2_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060ea:	e011      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f0:	3328      	adds	r3, #40	@ 0x28
 80060f2:	2100      	movs	r1, #0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 fb15 	bl	8007724 <RCCEx_PLL3_Config>
 80060fa:	4603      	mov	r3, r0
 80060fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006100:	e006      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006108:	e002      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800610a:	bf00      	nop
 800610c:	e000      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800610e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10a      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006118:	4b37      	ldr	r3, [pc, #220]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800611a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800611c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006126:	4a34      	ldr	r2, [pc, #208]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006128:	430b      	orrs	r3, r1
 800612a:	6513      	str	r3, [r2, #80]	@ 0x50
 800612c:	e003      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006132:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006142:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006146:	2300      	movs	r3, #0
 8006148:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800614c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006150:	460b      	mov	r3, r1
 8006152:	4313      	orrs	r3, r2
 8006154:	d056      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800615c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006160:	d033      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006162:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006166:	d82c      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006168:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800616c:	d02f      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800616e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006172:	d826      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006174:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006178:	d02b      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800617a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800617e:	d820      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006180:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006184:	d012      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006186:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800618a:	d81a      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800618c:	2b00      	cmp	r3, #0
 800618e:	d022      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006194:	d115      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619a:	3308      	adds	r3, #8
 800619c:	2101      	movs	r1, #1
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 fa0e 	bl	80075c0 <RCCEx_PLL2_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80061aa:	e015      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b0:	3328      	adds	r3, #40	@ 0x28
 80061b2:	2101      	movs	r1, #1
 80061b4:	4618      	mov	r0, r3
 80061b6:	f001 fab5 	bl	8007724 <RCCEx_PLL3_Config>
 80061ba:	4603      	mov	r3, r0
 80061bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80061c0:	e00a      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061c8:	e006      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061ca:	bf00      	nop
 80061cc:	e004      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061ce:	bf00      	nop
 80061d0:	e002      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061d2:	bf00      	nop
 80061d4:	e000      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10d      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80061e0:	4b05      	ldr	r3, [pc, #20]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80061e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061ee:	4a02      	ldr	r2, [pc, #8]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061f0:	430b      	orrs	r3, r1
 80061f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80061f4:	e006      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80061f6:	bf00      	nop
 80061f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006200:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006210:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006214:	2300      	movs	r3, #0
 8006216:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800621a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800621e:	460b      	mov	r3, r1
 8006220:	4313      	orrs	r3, r2
 8006222:	d055      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006228:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800622c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006230:	d033      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006232:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006236:	d82c      	bhi.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800623c:	d02f      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800623e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006242:	d826      	bhi.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006244:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006248:	d02b      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800624a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800624e:	d820      	bhi.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006254:	d012      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006256:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800625a:	d81a      	bhi.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d022      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006260:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006264:	d115      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626a:	3308      	adds	r3, #8
 800626c:	2101      	movs	r1, #1
 800626e:	4618      	mov	r0, r3
 8006270:	f001 f9a6 	bl	80075c0 <RCCEx_PLL2_Config>
 8006274:	4603      	mov	r3, r0
 8006276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800627a:	e015      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800627c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006280:	3328      	adds	r3, #40	@ 0x28
 8006282:	2101      	movs	r1, #1
 8006284:	4618      	mov	r0, r3
 8006286:	f001 fa4d 	bl	8007724 <RCCEx_PLL3_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006290:	e00a      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006298:	e006      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800629a:	bf00      	nop
 800629c:	e004      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800629e:	bf00      	nop
 80062a0:	e002      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062a2:	bf00      	nop
 80062a4:	e000      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10b      	bne.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80062b0:	4ba3      	ldr	r3, [pc, #652]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80062b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062c0:	4a9f      	ldr	r2, [pc, #636]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062c2:	430b      	orrs	r3, r1
 80062c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80062c6:	e003      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80062d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80062dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062e0:	2300      	movs	r3, #0
 80062e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80062e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80062ea:	460b      	mov	r3, r1
 80062ec:	4313      	orrs	r3, r2
 80062ee:	d037      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062fa:	d00e      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80062fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006300:	d816      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d018      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006306:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800630a:	d111      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800630c:	4b8c      	ldr	r3, [pc, #560]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800630e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006310:	4a8b      	ldr	r2, [pc, #556]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006316:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006318:	e00f      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631e:	3308      	adds	r3, #8
 8006320:	2101      	movs	r1, #1
 8006322:	4618      	mov	r0, r3
 8006324:	f001 f94c 	bl	80075c0 <RCCEx_PLL2_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800632e:	e004      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006336:	e000      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10a      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006342:	4b7f      	ldr	r3, [pc, #508]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006346:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800634a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006350:	4a7b      	ldr	r2, [pc, #492]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006352:	430b      	orrs	r3, r1
 8006354:	6513      	str	r3, [r2, #80]	@ 0x50
 8006356:	e003      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800635c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006368:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800636c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006370:	2300      	movs	r3, #0
 8006372:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006376:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800637a:	460b      	mov	r3, r1
 800637c:	4313      	orrs	r3, r2
 800637e:	d039      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006386:	2b03      	cmp	r3, #3
 8006388:	d81c      	bhi.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800638a:	a201      	add	r2, pc, #4	@ (adr r2, 8006390 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800638c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006390:	080063cd 	.word	0x080063cd
 8006394:	080063a1 	.word	0x080063a1
 8006398:	080063af 	.word	0x080063af
 800639c:	080063cd 	.word	0x080063cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a0:	4b67      	ldr	r3, [pc, #412]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a4:	4a66      	ldr	r2, [pc, #408]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063ac:	e00f      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b2:	3308      	adds	r3, #8
 80063b4:	2102      	movs	r1, #2
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 f902 	bl	80075c0 <RCCEx_PLL2_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063c2:	e004      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063ca:	e000      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80063cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10a      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80063d6:	4b5a      	ldr	r3, [pc, #360]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063da:	f023 0103 	bic.w	r1, r3, #3
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063e4:	4a56      	ldr	r2, [pc, #344]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063e6:	430b      	orrs	r3, r1
 80063e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80063ea:	e003      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006400:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006404:	2300      	movs	r3, #0
 8006406:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800640a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800640e:	460b      	mov	r3, r1
 8006410:	4313      	orrs	r3, r2
 8006412:	f000 809f 	beq.w	8006554 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006416:	4b4b      	ldr	r3, [pc, #300]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a4a      	ldr	r2, [pc, #296]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800641c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006420:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006422:	f7fc fef1 	bl	8003208 <HAL_GetTick>
 8006426:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800642a:	e00b      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800642c:	f7fc feec 	bl	8003208 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b64      	cmp	r3, #100	@ 0x64
 800643a:	d903      	bls.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006442:	e005      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006444:	4b3f      	ldr	r3, [pc, #252]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0ed      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006454:	2b00      	cmp	r3, #0
 8006456:	d179      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006458:	4b39      	ldr	r3, [pc, #228]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800645a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800645c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006460:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006464:	4053      	eors	r3, r2
 8006466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800646a:	2b00      	cmp	r3, #0
 800646c:	d015      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800646e:	4b34      	ldr	r3, [pc, #208]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006472:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006476:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800647a:	4b31      	ldr	r3, [pc, #196]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800647c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800647e:	4a30      	ldr	r2, [pc, #192]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006484:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006486:	4b2e      	ldr	r3, [pc, #184]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800648a:	4a2d      	ldr	r2, [pc, #180]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800648c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006490:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006492:	4a2b      	ldr	r2, [pc, #172]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006494:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006498:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800649a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064a6:	d118      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a8:	f7fc feae 	bl	8003208 <HAL_GetTick>
 80064ac:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064b0:	e00d      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064b2:	f7fc fea9 	bl	8003208 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80064bc:	1ad2      	subs	r2, r2, r3
 80064be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d903      	bls.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80064cc:	e005      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0eb      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80064da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d129      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064f2:	d10e      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80064f4:	4b12      	ldr	r3, [pc, #72]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80064fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006500:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006504:	091a      	lsrs	r2, r3, #4
 8006506:	4b10      	ldr	r3, [pc, #64]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006508:	4013      	ands	r3, r2
 800650a:	4a0d      	ldr	r2, [pc, #52]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800650c:	430b      	orrs	r3, r1
 800650e:	6113      	str	r3, [r2, #16]
 8006510:	e005      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006512:	4b0b      	ldr	r3, [pc, #44]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	4a0a      	ldr	r2, [pc, #40]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006518:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800651c:	6113      	str	r3, [r2, #16]
 800651e:	4b08      	ldr	r3, [pc, #32]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006520:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006526:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800652a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800652e:	4a04      	ldr	r2, [pc, #16]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006530:	430b      	orrs	r3, r1
 8006532:	6713      	str	r3, [r2, #112]	@ 0x70
 8006534:	e00e      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800653a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800653e:	e009      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006540:	58024400 	.word	0x58024400
 8006544:	58024800 	.word	0x58024800
 8006548:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f002 0301 	and.w	r3, r2, #1
 8006560:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006564:	2300      	movs	r3, #0
 8006566:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800656a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800656e:	460b      	mov	r3, r1
 8006570:	4313      	orrs	r3, r2
 8006572:	f000 8089 	beq.w	8006688 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800657c:	2b28      	cmp	r3, #40	@ 0x28
 800657e:	d86b      	bhi.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006580:	a201      	add	r2, pc, #4	@ (adr r2, 8006588 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006586:	bf00      	nop
 8006588:	08006661 	.word	0x08006661
 800658c:	08006659 	.word	0x08006659
 8006590:	08006659 	.word	0x08006659
 8006594:	08006659 	.word	0x08006659
 8006598:	08006659 	.word	0x08006659
 800659c:	08006659 	.word	0x08006659
 80065a0:	08006659 	.word	0x08006659
 80065a4:	08006659 	.word	0x08006659
 80065a8:	0800662d 	.word	0x0800662d
 80065ac:	08006659 	.word	0x08006659
 80065b0:	08006659 	.word	0x08006659
 80065b4:	08006659 	.word	0x08006659
 80065b8:	08006659 	.word	0x08006659
 80065bc:	08006659 	.word	0x08006659
 80065c0:	08006659 	.word	0x08006659
 80065c4:	08006659 	.word	0x08006659
 80065c8:	08006643 	.word	0x08006643
 80065cc:	08006659 	.word	0x08006659
 80065d0:	08006659 	.word	0x08006659
 80065d4:	08006659 	.word	0x08006659
 80065d8:	08006659 	.word	0x08006659
 80065dc:	08006659 	.word	0x08006659
 80065e0:	08006659 	.word	0x08006659
 80065e4:	08006659 	.word	0x08006659
 80065e8:	08006661 	.word	0x08006661
 80065ec:	08006659 	.word	0x08006659
 80065f0:	08006659 	.word	0x08006659
 80065f4:	08006659 	.word	0x08006659
 80065f8:	08006659 	.word	0x08006659
 80065fc:	08006659 	.word	0x08006659
 8006600:	08006659 	.word	0x08006659
 8006604:	08006659 	.word	0x08006659
 8006608:	08006661 	.word	0x08006661
 800660c:	08006659 	.word	0x08006659
 8006610:	08006659 	.word	0x08006659
 8006614:	08006659 	.word	0x08006659
 8006618:	08006659 	.word	0x08006659
 800661c:	08006659 	.word	0x08006659
 8006620:	08006659 	.word	0x08006659
 8006624:	08006659 	.word	0x08006659
 8006628:	08006661 	.word	0x08006661
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800662c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006630:	3308      	adds	r3, #8
 8006632:	2101      	movs	r1, #1
 8006634:	4618      	mov	r0, r3
 8006636:	f000 ffc3 	bl	80075c0 <RCCEx_PLL2_Config>
 800663a:	4603      	mov	r3, r0
 800663c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006640:	e00f      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006646:	3328      	adds	r3, #40	@ 0x28
 8006648:	2101      	movs	r1, #1
 800664a:	4618      	mov	r0, r3
 800664c:	f001 f86a 	bl	8007724 <RCCEx_PLL3_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006656:	e004      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800665e:	e000      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10a      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800666a:	4bbf      	ldr	r3, [pc, #764]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800666c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800666e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006676:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006678:	4abb      	ldr	r2, [pc, #748]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800667a:	430b      	orrs	r3, r1
 800667c:	6553      	str	r3, [r2, #84]	@ 0x54
 800667e:	e003      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006684:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f002 0302 	and.w	r3, r2, #2
 8006694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006698:	2300      	movs	r3, #0
 800669a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800669e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80066a2:	460b      	mov	r3, r1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d041      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80066a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066ae:	2b05      	cmp	r3, #5
 80066b0:	d824      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80066b2:	a201      	add	r2, pc, #4	@ (adr r2, 80066b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80066b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b8:	08006705 	.word	0x08006705
 80066bc:	080066d1 	.word	0x080066d1
 80066c0:	080066e7 	.word	0x080066e7
 80066c4:	08006705 	.word	0x08006705
 80066c8:	08006705 	.word	0x08006705
 80066cc:	08006705 	.word	0x08006705
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d4:	3308      	adds	r3, #8
 80066d6:	2101      	movs	r1, #1
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 ff71 	bl	80075c0 <RCCEx_PLL2_Config>
 80066de:	4603      	mov	r3, r0
 80066e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066e4:	e00f      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ea:	3328      	adds	r3, #40	@ 0x28
 80066ec:	2101      	movs	r1, #1
 80066ee:	4618      	mov	r0, r3
 80066f0:	f001 f818 	bl	8007724 <RCCEx_PLL3_Config>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066fa:	e004      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006702:	e000      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10a      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800670e:	4b96      	ldr	r3, [pc, #600]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006712:	f023 0107 	bic.w	r1, r3, #7
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800671c:	4a92      	ldr	r2, [pc, #584]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800671e:	430b      	orrs	r3, r1
 8006720:	6553      	str	r3, [r2, #84]	@ 0x54
 8006722:	e003      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006728:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f002 0304 	and.w	r3, r2, #4
 8006738:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800673c:	2300      	movs	r3, #0
 800673e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006742:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006746:	460b      	mov	r3, r1
 8006748:	4313      	orrs	r3, r2
 800674a:	d044      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800674c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006750:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006754:	2b05      	cmp	r3, #5
 8006756:	d825      	bhi.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006758:	a201      	add	r2, pc, #4	@ (adr r2, 8006760 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800675a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675e:	bf00      	nop
 8006760:	080067ad 	.word	0x080067ad
 8006764:	08006779 	.word	0x08006779
 8006768:	0800678f 	.word	0x0800678f
 800676c:	080067ad 	.word	0x080067ad
 8006770:	080067ad 	.word	0x080067ad
 8006774:	080067ad 	.word	0x080067ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677c:	3308      	adds	r3, #8
 800677e:	2101      	movs	r1, #1
 8006780:	4618      	mov	r0, r3
 8006782:	f000 ff1d 	bl	80075c0 <RCCEx_PLL2_Config>
 8006786:	4603      	mov	r3, r0
 8006788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800678c:	e00f      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800678e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006792:	3328      	adds	r3, #40	@ 0x28
 8006794:	2101      	movs	r1, #1
 8006796:	4618      	mov	r0, r3
 8006798:	f000 ffc4 	bl	8007724 <RCCEx_PLL3_Config>
 800679c:	4603      	mov	r3, r0
 800679e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80067a2:	e004      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067aa:	e000      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80067ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10b      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067b6:	4b6c      	ldr	r3, [pc, #432]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ba:	f023 0107 	bic.w	r1, r3, #7
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067c6:	4a68      	ldr	r2, [pc, #416]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067c8:	430b      	orrs	r3, r1
 80067ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80067cc:	e003      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f002 0320 	and.w	r3, r2, #32
 80067e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067e6:	2300      	movs	r3, #0
 80067e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067f0:	460b      	mov	r3, r1
 80067f2:	4313      	orrs	r3, r2
 80067f4:	d055      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80067f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006802:	d033      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006804:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006808:	d82c      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800680a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800680e:	d02f      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006814:	d826      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006816:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800681a:	d02b      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800681c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006820:	d820      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006822:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006826:	d012      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800682c:	d81a      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d022      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006836:	d115      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683c:	3308      	adds	r3, #8
 800683e:	2100      	movs	r1, #0
 8006840:	4618      	mov	r0, r3
 8006842:	f000 febd 	bl	80075c0 <RCCEx_PLL2_Config>
 8006846:	4603      	mov	r3, r0
 8006848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800684c:	e015      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800684e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006852:	3328      	adds	r3, #40	@ 0x28
 8006854:	2102      	movs	r1, #2
 8006856:	4618      	mov	r0, r3
 8006858:	f000 ff64 	bl	8007724 <RCCEx_PLL3_Config>
 800685c:	4603      	mov	r3, r0
 800685e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006862:	e00a      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800686a:	e006      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800686c:	bf00      	nop
 800686e:	e004      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006870:	bf00      	nop
 8006872:	e002      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006874:	bf00      	nop
 8006876:	e000      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800687a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10b      	bne.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006882:	4b39      	ldr	r3, [pc, #228]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006886:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800688a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006892:	4a35      	ldr	r2, [pc, #212]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006894:	430b      	orrs	r3, r1
 8006896:	6553      	str	r3, [r2, #84]	@ 0x54
 8006898:	e003      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800689e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80068a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068aa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80068ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068b2:	2300      	movs	r3, #0
 80068b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80068b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80068bc:	460b      	mov	r3, r1
 80068be:	4313      	orrs	r3, r2
 80068c0:	d058      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068ca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80068ce:	d033      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80068d0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80068d4:	d82c      	bhi.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068da:	d02f      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80068dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068e0:	d826      	bhi.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068e6:	d02b      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80068e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068ec:	d820      	bhi.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068f2:	d012      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80068f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068f8:	d81a      	bhi.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d022      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80068fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006902:	d115      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006908:	3308      	adds	r3, #8
 800690a:	2100      	movs	r1, #0
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fe57 	bl	80075c0 <RCCEx_PLL2_Config>
 8006912:	4603      	mov	r3, r0
 8006914:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006918:	e015      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800691a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691e:	3328      	adds	r3, #40	@ 0x28
 8006920:	2102      	movs	r1, #2
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fefe 	bl	8007724 <RCCEx_PLL3_Config>
 8006928:	4603      	mov	r3, r0
 800692a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800692e:	e00a      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006936:	e006      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006938:	bf00      	nop
 800693a:	e004      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800693c:	bf00      	nop
 800693e:	e002      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006940:	bf00      	nop
 8006942:	e000      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10e      	bne.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800694e:	4b06      	ldr	r3, [pc, #24]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006952:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800695e:	4a02      	ldr	r2, [pc, #8]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006960:	430b      	orrs	r3, r1
 8006962:	6593      	str	r3, [r2, #88]	@ 0x58
 8006964:	e006      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006966:	bf00      	nop
 8006968:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006970:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006984:	2300      	movs	r3, #0
 8006986:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800698a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800698e:	460b      	mov	r3, r1
 8006990:	4313      	orrs	r3, r2
 8006992:	d055      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006998:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800699c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80069a0:	d033      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80069a2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80069a6:	d82c      	bhi.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ac:	d02f      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80069ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069b2:	d826      	bhi.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069b4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80069b8:	d02b      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80069ba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80069be:	d820      	bhi.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069c4:	d012      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80069c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069ca:	d81a      	bhi.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d022      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80069d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069d4:	d115      	bne.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069da:	3308      	adds	r3, #8
 80069dc:	2100      	movs	r1, #0
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 fdee 	bl	80075c0 <RCCEx_PLL2_Config>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80069ea:	e015      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f0:	3328      	adds	r3, #40	@ 0x28
 80069f2:	2102      	movs	r1, #2
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fe95 	bl	8007724 <RCCEx_PLL3_Config>
 80069fa:	4603      	mov	r3, r0
 80069fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a00:	e00a      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a08:	e006      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a0a:	bf00      	nop
 8006a0c:	e004      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a0e:	bf00      	nop
 8006a10:	e002      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a12:	bf00      	nop
 8006a14:	e000      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10b      	bne.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a20:	4ba1      	ldr	r3, [pc, #644]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a24:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a30:	4a9d      	ldr	r2, [pc, #628]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a32:	430b      	orrs	r3, r1
 8006a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a36:	e003      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f002 0308 	and.w	r3, r2, #8
 8006a4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a50:	2300      	movs	r3, #0
 8006a52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	d01e      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a6c:	d10c      	bne.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a72:	3328      	adds	r3, #40	@ 0x28
 8006a74:	2102      	movs	r1, #2
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fe54 	bl	8007724 <RCCEx_PLL3_Config>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006a88:	4b87      	ldr	r3, [pc, #540]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a98:	4a83      	ldr	r2, [pc, #524]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a9a:	430b      	orrs	r3, r1
 8006a9c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	f002 0310 	and.w	r3, r2, #16
 8006aaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ab4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4313      	orrs	r3, r2
 8006abc:	d01e      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aca:	d10c      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad0:	3328      	adds	r3, #40	@ 0x28
 8006ad2:	2102      	movs	r1, #2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fe25 	bl	8007724 <RCCEx_PLL3_Config>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ae6:	4b70      	ldr	r3, [pc, #448]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006af6:	4a6c      	ldr	r2, [pc, #432]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006af8:	430b      	orrs	r3, r1
 8006afa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006b08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b12:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006b16:	460b      	mov	r3, r1
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	d03e      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b28:	d022      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006b2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b2e:	d81b      	bhi.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b38:	d00b      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006b3a:	e015      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b40:	3308      	adds	r3, #8
 8006b42:	2100      	movs	r1, #0
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fd3b 	bl	80075c0 <RCCEx_PLL2_Config>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b50:	e00f      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b56:	3328      	adds	r3, #40	@ 0x28
 8006b58:	2102      	movs	r1, #2
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 fde2 	bl	8007724 <RCCEx_PLL3_Config>
 8006b60:	4603      	mov	r3, r0
 8006b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b66:	e004      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b6e:	e000      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b7a:	4b4b      	ldr	r3, [pc, #300]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b7e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b8a:	4a47      	ldr	r2, [pc, #284]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b90:	e003      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006ba6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ba8:	2300      	movs	r3, #0
 8006baa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006bac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	d03b      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bc2:	d01f      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006bc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bc8:	d818      	bhi.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006bca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bce:	d003      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006bd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bd4:	d007      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006bd6:	e011      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd8:	4b33      	ldr	r3, [pc, #204]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bdc:	4a32      	ldr	r2, [pc, #200]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006be4:	e00f      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bea:	3328      	adds	r3, #40	@ 0x28
 8006bec:	2101      	movs	r1, #1
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fd98 	bl	8007724 <RCCEx_PLL3_Config>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006bfa:	e004      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c02:	e000      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10b      	bne.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c0e:	4b26      	ldr	r3, [pc, #152]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c1e:	4a22      	ldr	r2, [pc, #136]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c20:	430b      	orrs	r3, r1
 8006c22:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c24:	e003      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006c3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006c44:	460b      	mov	r3, r1
 8006c46:	4313      	orrs	r3, r2
 8006c48:	d034      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c58:	d007      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006c5a:	e011      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c5c:	4b12      	ldr	r3, [pc, #72]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c60:	4a11      	ldr	r2, [pc, #68]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c68:	e00e      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6e:	3308      	adds	r3, #8
 8006c70:	2102      	movs	r1, #2
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 fca4 	bl	80075c0 <RCCEx_PLL2_Config>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c7e:	e003      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10d      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c90:	4b05      	ldr	r3, [pc, #20]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c94:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c9e:	4a02      	ldr	r2, [pc, #8]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ca4:	e006      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006ca6:	bf00      	nop
 8006ca8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006cc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006cc6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	d00c      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd4:	3328      	adds	r3, #40	@ 0x28
 8006cd6:	2102      	movs	r1, #2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fd23 	bl	8007724 <RCCEx_PLL3_Config>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006cf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cfc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006d00:	460b      	mov	r3, r1
 8006d02:	4313      	orrs	r3, r2
 8006d04:	d038      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d12:	d018      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006d14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d18:	d811      	bhi.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006d1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d1e:	d014      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d24:	d80b      	bhi.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d011      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006d2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d2e:	d106      	bne.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d30:	4bc3      	ldr	r3, [pc, #780]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d34:	4ac2      	ldr	r2, [pc, #776]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006d3c:	e008      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d44:	e004      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d46:	bf00      	nop
 8006d48:	e002      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d4a:	bf00      	nop
 8006d4c:	e000      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10b      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d58:	4bb9      	ldr	r3, [pc, #740]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d5c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d68:	4ab5      	ldr	r2, [pc, #724]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d6a:	430b      	orrs	r3, r1
 8006d6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d6e:	e003      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006d84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d86:	2300      	movs	r3, #0
 8006d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d8a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4313      	orrs	r3, r2
 8006d92:	d009      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d94:	4baa      	ldr	r3, [pc, #680]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006da2:	4aa7      	ldr	r2, [pc, #668]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006da4:	430b      	orrs	r3, r1
 8006da6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006db4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006db6:	2300      	movs	r3, #0
 8006db8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006dba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	d00a      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006dc4:	4b9e      	ldr	r3, [pc, #632]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006dd4:	4a9a      	ldr	r2, [pc, #616]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dd6:	430b      	orrs	r3, r1
 8006dd8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006de6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006de8:	2300      	movs	r3, #0
 8006dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006df0:	460b      	mov	r3, r1
 8006df2:	4313      	orrs	r3, r2
 8006df4:	d009      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006df6:	4b92      	ldr	r3, [pc, #584]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dfa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e04:	4a8e      	ldr	r2, [pc, #568]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e06:	430b      	orrs	r3, r1
 8006e08:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e12:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006e16:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e18:	2300      	movs	r3, #0
 8006e1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e1c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006e20:	460b      	mov	r3, r1
 8006e22:	4313      	orrs	r3, r2
 8006e24:	d00e      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e26:	4b86      	ldr	r3, [pc, #536]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	4a85      	ldr	r2, [pc, #532]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e2c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e30:	6113      	str	r3, [r2, #16]
 8006e32:	4b83      	ldr	r3, [pc, #524]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e34:	6919      	ldr	r1, [r3, #16]
 8006e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006e3e:	4a80      	ldr	r2, [pc, #512]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e40:	430b      	orrs	r3, r1
 8006e42:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006e50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e52:	2300      	movs	r3, #0
 8006e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e56:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	d009      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e60:	4b77      	ldr	r3, [pc, #476]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e64:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e6e:	4a74      	ldr	r2, [pc, #464]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e70:	430b      	orrs	r3, r1
 8006e72:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e82:	2300      	movs	r3, #0
 8006e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e86:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	d00a      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e90:	4b6b      	ldr	r3, [pc, #428]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e94:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ea0:	4a67      	ldr	r2, [pc, #412]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ea2:	430b      	orrs	r3, r1
 8006ea4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	2100      	movs	r1, #0
 8006eb0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eb8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	d011      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec6:	3308      	adds	r3, #8
 8006ec8:	2100      	movs	r1, #0
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fb78 	bl	80075c0 <RCCEx_PLL2_Config>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	2100      	movs	r1, #0
 8006ef0:	6239      	str	r1, [r7, #32]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ef8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006efc:	460b      	mov	r3, r1
 8006efe:	4313      	orrs	r3, r2
 8006f00:	d011      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f06:	3308      	adds	r3, #8
 8006f08:	2101      	movs	r1, #1
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fb58 	bl	80075c0 <RCCEx_PLL2_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2e:	2100      	movs	r1, #0
 8006f30:	61b9      	str	r1, [r7, #24]
 8006f32:	f003 0304 	and.w	r3, r3, #4
 8006f36:	61fb      	str	r3, [r7, #28]
 8006f38:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	d011      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f46:	3308      	adds	r3, #8
 8006f48:	2102      	movs	r1, #2
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 fb38 	bl	80075c0 <RCCEx_PLL2_Config>
 8006f50:	4603      	mov	r3, r0
 8006f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	2100      	movs	r1, #0
 8006f70:	6139      	str	r1, [r7, #16]
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	d011      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f86:	3328      	adds	r3, #40	@ 0x28
 8006f88:	2100      	movs	r1, #0
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fbca 	bl	8007724 <RCCEx_PLL3_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	2100      	movs	r1, #0
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	f003 0310 	and.w	r3, r3, #16
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	d011      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc6:	3328      	adds	r3, #40	@ 0x28
 8006fc8:	2101      	movs	r1, #1
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fbaa 	bl	8007724 <RCCEx_PLL3_Config>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fee:	2100      	movs	r1, #0
 8006ff0:	6039      	str	r1, [r7, #0]
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	607b      	str	r3, [r7, #4]
 8006ff8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4313      	orrs	r3, r2
 8007000:	d011      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007006:	3328      	adds	r3, #40	@ 0x28
 8007008:	2102      	movs	r1, #2
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fb8a 	bl	8007724 <RCCEx_PLL3_Config>
 8007010:	4603      	mov	r3, r0
 8007012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007026:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	e000      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
}
 8007034:	4618      	mov	r0, r3
 8007036:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800703a:	46bd      	mov	sp, r7
 800703c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007040:	58024400 	.word	0x58024400

08007044 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007048:	f7fe fd96 	bl	8005b78 <HAL_RCC_GetHCLKFreq>
 800704c:	4602      	mov	r2, r0
 800704e:	4b06      	ldr	r3, [pc, #24]	@ (8007068 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	091b      	lsrs	r3, r3, #4
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	4904      	ldr	r1, [pc, #16]	@ (800706c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800705a:	5ccb      	ldrb	r3, [r1, r3]
 800705c:	f003 031f 	and.w	r3, r3, #31
 8007060:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007064:	4618      	mov	r0, r3
 8007066:	bd80      	pop	{r7, pc}
 8007068:	58024400 	.word	0x58024400
 800706c:	0800c65c 	.word	0x0800c65c

08007070 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007070:	b480      	push	{r7}
 8007072:	b089      	sub	sp, #36	@ 0x24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007078:	4ba1      	ldr	r3, [pc, #644]	@ (8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800707a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707c:	f003 0303 	and.w	r3, r3, #3
 8007080:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007082:	4b9f      	ldr	r3, [pc, #636]	@ (8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007086:	0b1b      	lsrs	r3, r3, #12
 8007088:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800708c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800708e:	4b9c      	ldr	r3, [pc, #624]	@ (8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007092:	091b      	lsrs	r3, r3, #4
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800709a:	4b99      	ldr	r3, [pc, #612]	@ (8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800709c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709e:	08db      	lsrs	r3, r3, #3
 80070a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	fb02 f303 	mul.w	r3, r2, r3
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 8111 	beq.w	80072e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	f000 8083 	beq.w	80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	f200 80a1 	bhi.w	8007210 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d056      	beq.n	8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80070da:	e099      	b.n	8007210 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070dc:	4b88      	ldr	r3, [pc, #544]	@ (8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0320 	and.w	r3, r3, #32
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d02d      	beq.n	8007144 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070e8:	4b85      	ldr	r3, [pc, #532]	@ (8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	08db      	lsrs	r3, r3, #3
 80070ee:	f003 0303 	and.w	r3, r3, #3
 80070f2:	4a84      	ldr	r2, [pc, #528]	@ (8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80070f4:	fa22 f303 	lsr.w	r3, r2, r3
 80070f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	ee07 3a90 	vmov	s15, r3
 8007100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007112:	4b7b      	ldr	r3, [pc, #492]	@ (8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007122:	ed97 6a03 	vldr	s12, [r7, #12]
 8007126:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800712a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007142:	e087      	b.n	8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800730c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007156:	4b6a      	ldr	r3, [pc, #424]	@ (8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007166:	ed97 6a03 	vldr	s12, [r7, #12]
 800716a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800716e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800717a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007186:	e065      	b.n	8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007192:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007310 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719a:	4b59      	ldr	r3, [pc, #356]	@ (8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800719c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ca:	e043      	b.n	8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007314 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80071da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071de:	4b48      	ldr	r3, [pc, #288]	@ (8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800720e:	e021      	b.n	8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007310 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800721e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007222:	4b37      	ldr	r3, [pc, #220]	@ (8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007232:	ed97 6a03 	vldr	s12, [r7, #12]
 8007236:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800723a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007252:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007254:	4b2a      	ldr	r3, [pc, #168]	@ (8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007258:	0a5b      	lsrs	r3, r3, #9
 800725a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007266:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800726a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800726e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800727a:	ee17 2a90 	vmov	r2, s15
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007282:	4b1f      	ldr	r3, [pc, #124]	@ (8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007286:	0c1b      	lsrs	r3, r3, #16
 8007288:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800728c:	ee07 3a90 	vmov	s15, r3
 8007290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007294:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007298:	ee37 7a87 	vadd.f32	s14, s15, s14
 800729c:	edd7 6a07 	vldr	s13, [r7, #28]
 80072a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072a8:	ee17 2a90 	vmov	r2, s15
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80072b0:	4b13      	ldr	r3, [pc, #76]	@ (8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b4:	0e1b      	lsrs	r3, r3, #24
 80072b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072d6:	ee17 2a90 	vmov	r2, s15
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80072de:	e008      	b.n	80072f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	609a      	str	r2, [r3, #8]
}
 80072f2:	bf00      	nop
 80072f4:	3724      	adds	r7, #36	@ 0x24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	58024400 	.word	0x58024400
 8007304:	03d09000 	.word	0x03d09000
 8007308:	46000000 	.word	0x46000000
 800730c:	4c742400 	.word	0x4c742400
 8007310:	4a742400 	.word	0x4a742400
 8007314:	4bbebc20 	.word	0x4bbebc20

08007318 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007318:	b480      	push	{r7}
 800731a:	b089      	sub	sp, #36	@ 0x24
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007320:	4ba1      	ldr	r3, [pc, #644]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007324:	f003 0303 	and.w	r3, r3, #3
 8007328:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800732a:	4b9f      	ldr	r3, [pc, #636]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800732c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732e:	0d1b      	lsrs	r3, r3, #20
 8007330:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007334:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007336:	4b9c      	ldr	r3, [pc, #624]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733a:	0a1b      	lsrs	r3, r3, #8
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007342:	4b99      	ldr	r3, [pc, #612]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007346:	08db      	lsrs	r3, r3, #3
 8007348:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	fb02 f303 	mul.w	r3, r2, r3
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 8111 	beq.w	8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	2b02      	cmp	r3, #2
 800736a:	f000 8083 	beq.w	8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	2b02      	cmp	r3, #2
 8007372:	f200 80a1 	bhi.w	80074b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d056      	beq.n	8007430 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007382:	e099      	b.n	80074b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007384:	4b88      	ldr	r3, [pc, #544]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0320 	and.w	r3, r3, #32
 800738c:	2b00      	cmp	r3, #0
 800738e:	d02d      	beq.n	80073ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007390:	4b85      	ldr	r3, [pc, #532]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	08db      	lsrs	r3, r3, #3
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	4a84      	ldr	r2, [pc, #528]	@ (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800739c:	fa22 f303 	lsr.w	r3, r2, r3
 80073a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	ee07 3a90 	vmov	s15, r3
 80073a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ba:	4b7b      	ldr	r3, [pc, #492]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c2:	ee07 3a90 	vmov	s15, r3
 80073c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80073ea:	e087      	b.n	80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80073fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073fe:	4b6a      	ldr	r3, [pc, #424]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007412:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800741a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800741e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800742a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800742e:	e065      	b.n	80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800743e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007442:	4b59      	ldr	r3, [pc, #356]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007452:	ed97 6a03 	vldr	s12, [r7, #12]
 8007456:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800745a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800745e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800746a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800746e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007472:	e043      	b.n	80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80075bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007486:	4b48      	ldr	r3, [pc, #288]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007496:	ed97 6a03 	vldr	s12, [r7, #12]
 800749a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800749e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074b6:	e021      	b.n	80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ca:	4b37      	ldr	r3, [pc, #220]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074da:	ed97 6a03 	vldr	s12, [r7, #12]
 80074de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80074fc:	4b2a      	ldr	r3, [pc, #168]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007500:	0a5b      	lsrs	r3, r3, #9
 8007502:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007512:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007516:	edd7 6a07 	vldr	s13, [r7, #28]
 800751a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800751e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007522:	ee17 2a90 	vmov	r2, s15
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800752a:	4b1f      	ldr	r3, [pc, #124]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800752c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752e:	0c1b      	lsrs	r3, r3, #16
 8007530:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007534:	ee07 3a90 	vmov	s15, r3
 8007538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007540:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007544:	edd7 6a07 	vldr	s13, [r7, #28]
 8007548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800754c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007550:	ee17 2a90 	vmov	r2, s15
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007558:	4b13      	ldr	r3, [pc, #76]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800755a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755c:	0e1b      	lsrs	r3, r3, #24
 800755e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800756e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007572:	edd7 6a07 	vldr	s13, [r7, #28]
 8007576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800757a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800757e:	ee17 2a90 	vmov	r2, s15
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007586:	e008      	b.n	800759a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	609a      	str	r2, [r3, #8]
}
 800759a:	bf00      	nop
 800759c:	3724      	adds	r7, #36	@ 0x24
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	58024400 	.word	0x58024400
 80075ac:	03d09000 	.word	0x03d09000
 80075b0:	46000000 	.word	0x46000000
 80075b4:	4c742400 	.word	0x4c742400
 80075b8:	4a742400 	.word	0x4a742400
 80075bc:	4bbebc20 	.word	0x4bbebc20

080075c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075ce:	4b53      	ldr	r3, [pc, #332]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 80075d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d2:	f003 0303 	and.w	r3, r3, #3
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d101      	bne.n	80075de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e099      	b.n	8007712 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80075de:	4b4f      	ldr	r3, [pc, #316]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a4e      	ldr	r2, [pc, #312]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 80075e4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ea:	f7fb fe0d 	bl	8003208 <HAL_GetTick>
 80075ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075f0:	e008      	b.n	8007604 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075f2:	f7fb fe09 	bl	8003208 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d901      	bls.n	8007604 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e086      	b.n	8007712 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007604:	4b45      	ldr	r3, [pc, #276]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1f0      	bne.n	80075f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007610:	4b42      	ldr	r3, [pc, #264]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 8007612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007614:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	031b      	lsls	r3, r3, #12
 800761e:	493f      	ldr	r1, [pc, #252]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 8007620:	4313      	orrs	r3, r2
 8007622:	628b      	str	r3, [r1, #40]	@ 0x28
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	3b01      	subs	r3, #1
 800762a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	3b01      	subs	r3, #1
 8007634:	025b      	lsls	r3, r3, #9
 8007636:	b29b      	uxth	r3, r3
 8007638:	431a      	orrs	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	3b01      	subs	r3, #1
 8007640:	041b      	lsls	r3, r3, #16
 8007642:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007646:	431a      	orrs	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	3b01      	subs	r3, #1
 800764e:	061b      	lsls	r3, r3, #24
 8007650:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007654:	4931      	ldr	r1, [pc, #196]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 8007656:	4313      	orrs	r3, r2
 8007658:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800765a:	4b30      	ldr	r3, [pc, #192]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 800765c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	492d      	ldr	r1, [pc, #180]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 8007668:	4313      	orrs	r3, r2
 800766a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800766c:	4b2b      	ldr	r3, [pc, #172]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 800766e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007670:	f023 0220 	bic.w	r2, r3, #32
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	4928      	ldr	r1, [pc, #160]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 800767a:	4313      	orrs	r3, r2
 800767c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800767e:	4b27      	ldr	r3, [pc, #156]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 8007680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007682:	4a26      	ldr	r2, [pc, #152]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 8007684:	f023 0310 	bic.w	r3, r3, #16
 8007688:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800768a:	4b24      	ldr	r3, [pc, #144]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 800768c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800768e:	4b24      	ldr	r3, [pc, #144]	@ (8007720 <RCCEx_PLL2_Config+0x160>)
 8007690:	4013      	ands	r3, r2
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	69d2      	ldr	r2, [r2, #28]
 8007696:	00d2      	lsls	r2, r2, #3
 8007698:	4920      	ldr	r1, [pc, #128]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 800769a:	4313      	orrs	r3, r2
 800769c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800769e:	4b1f      	ldr	r3, [pc, #124]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 80076a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a2:	4a1e      	ldr	r2, [pc, #120]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 80076a4:	f043 0310 	orr.w	r3, r3, #16
 80076a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d106      	bne.n	80076be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076b0:	4b1a      	ldr	r3, [pc, #104]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 80076b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b4:	4a19      	ldr	r2, [pc, #100]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 80076b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076bc:	e00f      	b.n	80076de <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d106      	bne.n	80076d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076c4:	4b15      	ldr	r3, [pc, #84]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 80076c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c8:	4a14      	ldr	r2, [pc, #80]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 80076ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076d0:	e005      	b.n	80076de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076d2:	4b12      	ldr	r3, [pc, #72]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 80076d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d6:	4a11      	ldr	r2, [pc, #68]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 80076d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80076dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80076de:	4b0f      	ldr	r3, [pc, #60]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a0e      	ldr	r2, [pc, #56]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 80076e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80076e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ea:	f7fb fd8d 	bl	8003208 <HAL_GetTick>
 80076ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076f0:	e008      	b.n	8007704 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076f2:	f7fb fd89 	bl	8003208 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d901      	bls.n	8007704 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e006      	b.n	8007712 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007704:	4b05      	ldr	r3, [pc, #20]	@ (800771c <RCCEx_PLL2_Config+0x15c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0f0      	beq.n	80076f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007710:	7bfb      	ldrb	r3, [r7, #15]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	58024400 	.word	0x58024400
 8007720:	ffff0007 	.word	0xffff0007

08007724 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007732:	4b53      	ldr	r3, [pc, #332]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 8007734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	2b03      	cmp	r3, #3
 800773c:	d101      	bne.n	8007742 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e099      	b.n	8007876 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007742:	4b4f      	ldr	r3, [pc, #316]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a4e      	ldr	r2, [pc, #312]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 8007748:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800774c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800774e:	f7fb fd5b 	bl	8003208 <HAL_GetTick>
 8007752:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007754:	e008      	b.n	8007768 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007756:	f7fb fd57 	bl	8003208 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	2b02      	cmp	r3, #2
 8007762:	d901      	bls.n	8007768 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e086      	b.n	8007876 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007768:	4b45      	ldr	r3, [pc, #276]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1f0      	bne.n	8007756 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007774:	4b42      	ldr	r3, [pc, #264]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 8007776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007778:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	051b      	lsls	r3, r3, #20
 8007782:	493f      	ldr	r1, [pc, #252]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 8007784:	4313      	orrs	r3, r2
 8007786:	628b      	str	r3, [r1, #40]	@ 0x28
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	3b01      	subs	r3, #1
 800778e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	3b01      	subs	r3, #1
 8007798:	025b      	lsls	r3, r3, #9
 800779a:	b29b      	uxth	r3, r3
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	041b      	lsls	r3, r3, #16
 80077a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80077aa:	431a      	orrs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	061b      	lsls	r3, r3, #24
 80077b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80077b8:	4931      	ldr	r1, [pc, #196]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80077be:	4b30      	ldr	r3, [pc, #192]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 80077c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	492d      	ldr	r1, [pc, #180]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80077d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 80077d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	4928      	ldr	r1, [pc, #160]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80077e2:	4b27      	ldr	r3, [pc, #156]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 80077e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e6:	4a26      	ldr	r2, [pc, #152]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 80077e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077ee:	4b24      	ldr	r3, [pc, #144]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 80077f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077f2:	4b24      	ldr	r3, [pc, #144]	@ (8007884 <RCCEx_PLL3_Config+0x160>)
 80077f4:	4013      	ands	r3, r2
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	69d2      	ldr	r2, [r2, #28]
 80077fa:	00d2      	lsls	r2, r2, #3
 80077fc:	4920      	ldr	r1, [pc, #128]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007802:	4b1f      	ldr	r3, [pc, #124]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 8007804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007806:	4a1e      	ldr	r2, [pc, #120]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 8007808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800780c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d106      	bne.n	8007822 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007814:	4b1a      	ldr	r3, [pc, #104]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 8007816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007818:	4a19      	ldr	r2, [pc, #100]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 800781a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800781e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007820:	e00f      	b.n	8007842 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d106      	bne.n	8007836 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007828:	4b15      	ldr	r3, [pc, #84]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 800782a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782c:	4a14      	ldr	r2, [pc, #80]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 800782e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007832:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007834:	e005      	b.n	8007842 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007836:	4b12      	ldr	r3, [pc, #72]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 8007838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783a:	4a11      	ldr	r2, [pc, #68]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 800783c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007840:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007842:	4b0f      	ldr	r3, [pc, #60]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a0e      	ldr	r2, [pc, #56]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 8007848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800784c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800784e:	f7fb fcdb 	bl	8003208 <HAL_GetTick>
 8007852:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007854:	e008      	b.n	8007868 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007856:	f7fb fcd7 	bl	8003208 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	2b02      	cmp	r3, #2
 8007862:	d901      	bls.n	8007868 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e006      	b.n	8007876 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007868:	4b05      	ldr	r3, [pc, #20]	@ (8007880 <RCCEx_PLL3_Config+0x15c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d0f0      	beq.n	8007856 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	58024400 	.word	0x58024400
 8007884:	ffff0007 	.word	0xffff0007

08007888 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e10f      	b.n	8007aba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a87      	ldr	r2, [pc, #540]	@ (8007ac4 <HAL_SPI_Init+0x23c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d00f      	beq.n	80078ca <HAL_SPI_Init+0x42>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a86      	ldr	r2, [pc, #536]	@ (8007ac8 <HAL_SPI_Init+0x240>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d00a      	beq.n	80078ca <HAL_SPI_Init+0x42>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a84      	ldr	r2, [pc, #528]	@ (8007acc <HAL_SPI_Init+0x244>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d005      	beq.n	80078ca <HAL_SPI_Init+0x42>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	2b0f      	cmp	r3, #15
 80078c4:	d901      	bls.n	80078ca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e0f7      	b.n	8007aba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fe58 	bl	8008580 <SPI_GetPacketSize>
 80078d0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a7b      	ldr	r2, [pc, #492]	@ (8007ac4 <HAL_SPI_Init+0x23c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d00c      	beq.n	80078f6 <HAL_SPI_Init+0x6e>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a79      	ldr	r2, [pc, #484]	@ (8007ac8 <HAL_SPI_Init+0x240>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d007      	beq.n	80078f6 <HAL_SPI_Init+0x6e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a78      	ldr	r2, [pc, #480]	@ (8007acc <HAL_SPI_Init+0x244>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d002      	beq.n	80078f6 <HAL_SPI_Init+0x6e>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	d811      	bhi.n	800791a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078fa:	4a72      	ldr	r2, [pc, #456]	@ (8007ac4 <HAL_SPI_Init+0x23c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d009      	beq.n	8007914 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a70      	ldr	r2, [pc, #448]	@ (8007ac8 <HAL_SPI_Init+0x240>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d004      	beq.n	8007914 <HAL_SPI_Init+0x8c>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a6f      	ldr	r2, [pc, #444]	@ (8007acc <HAL_SPI_Init+0x244>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d104      	bne.n	800791e <HAL_SPI_Init+0x96>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b10      	cmp	r3, #16
 8007918:	d901      	bls.n	800791e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e0cd      	b.n	8007aba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d106      	bne.n	8007938 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fb f8ea 	bl	8002b0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f022 0201 	bic.w	r2, r2, #1
 800794e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800795a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007964:	d119      	bne.n	800799a <HAL_SPI_Init+0x112>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800796e:	d103      	bne.n	8007978 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007974:	2b00      	cmp	r3, #0
 8007976:	d008      	beq.n	800798a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10c      	bne.n	800799a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007984:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007988:	d107      	bne.n	800799a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007998:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00f      	beq.n	80079c6 <HAL_SPI_Init+0x13e>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	2b06      	cmp	r3, #6
 80079ac:	d90b      	bls.n	80079c6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	430a      	orrs	r2, r1
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	e007      	b.n	80079d6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80079d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	69da      	ldr	r2, [r3, #28]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079de:	431a      	orrs	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	431a      	orrs	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e8:	ea42 0103 	orr.w	r1, r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a00:	431a      	orrs	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a06:	431a      	orrs	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	431a      	orrs	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	431a      	orrs	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	431a      	orrs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a36:	ea42 0103 	orr.w	r1, r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d113      	bne.n	8007a76 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a60:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007a74:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0201 	bic.w	r2, r2, #1
 8007a84:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00a      	beq.n	8007aa8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	40013000 	.word	0x40013000
 8007ac8:	40003800 	.word	0x40003800
 8007acc:	40003c00 	.word	0x40003c00

08007ad0 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e01b      	b.n	8007b1a <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 0201 	bic.w	r2, r2, #1
 8007af8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7fb f894 	bl	8002c28 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b088      	sub	sp, #32
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	603b      	str	r3, [r7, #0]
 8007b30:	4613      	mov	r3, r2
 8007b32:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3320      	adds	r3, #32
 8007b3a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b3c:	f7fb fb64 	bl	8003208 <HAL_GetTick>
 8007b40:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d001      	beq.n	8007b52 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007b4e:	2302      	movs	r3, #2
 8007b50:	e1d1      	b.n	8007ef6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <HAL_SPI_Transmit+0x3a>
 8007b58:	88fb      	ldrh	r3, [r7, #6]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e1c9      	b.n	8007ef6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d101      	bne.n	8007b70 <HAL_SPI_Transmit+0x4c>
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	e1c2      	b.n	8007ef6 <HAL_SPI_Transmit+0x3d2>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2203      	movs	r2, #3
 8007b7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	88fa      	ldrh	r2, [r7, #6]
 8007b92:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	88fa      	ldrh	r2, [r7, #6]
 8007b9a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007bc8:	d108      	bne.n	8007bdc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	e009      	b.n	8007bf0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007bee:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	4b96      	ldr	r3, [pc, #600]	@ (8007e50 <HAL_SPI_Transmit+0x32c>)
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	88f9      	ldrh	r1, [r7, #6]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	6812      	ldr	r2, [r2, #0]
 8007c00:	430b      	orrs	r3, r1
 8007c02:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0201 	orr.w	r2, r2, #1
 8007c12:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c1c:	d107      	bne.n	8007c2e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	2b0f      	cmp	r3, #15
 8007c34:	d947      	bls.n	8007cc6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007c36:	e03f      	b.n	8007cb8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d114      	bne.n	8007c70 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6812      	ldr	r2, [r2, #0]
 8007c50:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c56:	1d1a      	adds	r2, r3, #4
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	3b01      	subs	r3, #1
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007c6e:	e023      	b.n	8007cb8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c70:	f7fb faca 	bl	8003208 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d803      	bhi.n	8007c88 <HAL_SPI_Transmit+0x164>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c86:	d102      	bne.n	8007c8e <HAL_SPI_Transmit+0x16a>
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d114      	bne.n	8007cb8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 fba8 	bl	80083e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e11e      	b.n	8007ef6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1b9      	bne.n	8007c38 <HAL_SPI_Transmit+0x114>
 8007cc4:	e0f1      	b.n	8007eaa <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	2b07      	cmp	r3, #7
 8007ccc:	f240 80e6 	bls.w	8007e9c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007cd0:	e05d      	b.n	8007d8e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d132      	bne.n	8007d46 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d918      	bls.n	8007d1e <HAL_SPI_Transmit+0x1fa>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d014      	beq.n	8007d1e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6812      	ldr	r2, [r2, #0]
 8007cfe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d04:	1d1a      	adds	r2, r3, #4
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	3b02      	subs	r3, #2
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007d1c:	e037      	b.n	8007d8e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d22:	881a      	ldrh	r2, [r3, #0]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d2c:	1c9a      	adds	r2, r3, #2
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007d44:	e023      	b.n	8007d8e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d46:	f7fb fa5f 	bl	8003208 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d803      	bhi.n	8007d5e <HAL_SPI_Transmit+0x23a>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d5c:	d102      	bne.n	8007d64 <HAL_SPI_Transmit+0x240>
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d114      	bne.n	8007d8e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 fb3d 	bl	80083e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e0b3      	b.n	8007ef6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d19b      	bne.n	8007cd2 <HAL_SPI_Transmit+0x1ae>
 8007d9a:	e086      	b.n	8007eaa <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d154      	bne.n	8007e54 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d918      	bls.n	8007de8 <HAL_SPI_Transmit+0x2c4>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dba:	2b40      	cmp	r3, #64	@ 0x40
 8007dbc:	d914      	bls.n	8007de8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6812      	ldr	r2, [r2, #0]
 8007dc8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dce:	1d1a      	adds	r2, r3, #4
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	3b04      	subs	r3, #4
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007de6:	e059      	b.n	8007e9c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d917      	bls.n	8007e24 <HAL_SPI_Transmit+0x300>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d013      	beq.n	8007e24 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e00:	881a      	ldrh	r2, [r3, #0]
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e0a:	1c9a      	adds	r2, r3, #2
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	3b02      	subs	r3, #2
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007e22:	e03b      	b.n	8007e9c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3320      	adds	r3, #32
 8007e2e:	7812      	ldrb	r2, [r2, #0]
 8007e30:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007e4e:	e025      	b.n	8007e9c <HAL_SPI_Transmit+0x378>
 8007e50:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e54:	f7fb f9d8 	bl	8003208 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d803      	bhi.n	8007e6c <HAL_SPI_Transmit+0x348>
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e6a:	d102      	bne.n	8007e72 <HAL_SPI_Transmit+0x34e>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d114      	bne.n	8007e9c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 fab6 	bl	80083e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e02c      	b.n	8007ef6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f47f af79 	bne.w	8007d9c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2108      	movs	r1, #8
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 fb35 	bl	8008524 <SPI_WaitOnFlagUntilTimeout>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d007      	beq.n	8007ed0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ec6:	f043 0220 	orr.w	r2, r3, #32
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 fa87 	bl	80083e4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e000      	b.n	8007ef6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
  }
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop

08007f00 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b088      	sub	sp, #32
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f14:	095b      	lsrs	r3, r3, #5
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	3301      	adds	r3, #1
 8007f1a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3330      	adds	r3, #48	@ 0x30
 8007f22:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f24:	f7fb f970 	bl	8003208 <HAL_GetTick>
 8007f28:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d001      	beq.n	8007f3a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8007f36:	2302      	movs	r3, #2
 8007f38:	e250      	b.n	80083dc <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <HAL_SPI_Receive+0x46>
 8007f40:	88fb      	ldrh	r3, [r7, #6]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e248      	b.n	80083dc <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d101      	bne.n	8007f58 <HAL_SPI_Receive+0x58>
 8007f54:	2302      	movs	r3, #2
 8007f56:	e241      	b.n	80083dc <HAL_SPI_Receive+0x4dc>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2204      	movs	r2, #4
 8007f64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	88fa      	ldrh	r2, [r7, #6]
 8007f7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	88fa      	ldrh	r2, [r7, #6]
 8007f82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007fb0:	d108      	bne.n	8007fc4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	e009      	b.n	8007fd8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007fd6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	4b95      	ldr	r3, [pc, #596]	@ (8008234 <HAL_SPI_Receive+0x334>)
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	88f9      	ldrh	r1, [r7, #6]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	6812      	ldr	r2, [r2, #0]
 8007fe8:	430b      	orrs	r3, r1
 8007fea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0201 	orr.w	r2, r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008004:	d107      	bne.n	8008016 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008014:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	2b0f      	cmp	r3, #15
 800801c:	d96c      	bls.n	80080f8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800801e:	e064      	b.n	80080ea <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b01      	cmp	r3, #1
 8008034:	d114      	bne.n	8008060 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800803e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008040:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008046:	1d1a      	adds	r2, r3, #4
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008052:	b29b      	uxth	r3, r3
 8008054:	3b01      	subs	r3, #1
 8008056:	b29a      	uxth	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800805e:	e044      	b.n	80080ea <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008066:	b29b      	uxth	r3, r3
 8008068:	8bfa      	ldrh	r2, [r7, #30]
 800806a:	429a      	cmp	r2, r3
 800806c:	d919      	bls.n	80080a2 <HAL_SPI_Receive+0x1a2>
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d014      	beq.n	80080a2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008080:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008082:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008088:	1d1a      	adds	r2, r3, #4
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008094:	b29b      	uxth	r3, r3
 8008096:	3b01      	subs	r3, #1
 8008098:	b29a      	uxth	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80080a0:	e023      	b.n	80080ea <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080a2:	f7fb f8b1 	bl	8003208 <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d803      	bhi.n	80080ba <HAL_SPI_Receive+0x1ba>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080b8:	d102      	bne.n	80080c0 <HAL_SPI_Receive+0x1c0>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d114      	bne.n	80080ea <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f000 f98f 	bl	80083e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e178      	b.n	80083dc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d194      	bne.n	8008020 <HAL_SPI_Receive+0x120>
 80080f6:	e15e      	b.n	80083b6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	2b07      	cmp	r3, #7
 80080fe:	f240 8153 	bls.w	80083a8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008102:	e08f      	b.n	8008224 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b01      	cmp	r3, #1
 8008118:	d114      	bne.n	8008144 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800811e:	69ba      	ldr	r2, [r7, #24]
 8008120:	8812      	ldrh	r2, [r2, #0]
 8008122:	b292      	uxth	r2, r2
 8008124:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800812a:	1c9a      	adds	r2, r3, #2
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008136:	b29b      	uxth	r3, r3
 8008138:	3b01      	subs	r3, #1
 800813a:	b29a      	uxth	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008142:	e06f      	b.n	8008224 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800814a:	b29b      	uxth	r3, r3
 800814c:	8bfa      	ldrh	r2, [r7, #30]
 800814e:	429a      	cmp	r2, r3
 8008150:	d924      	bls.n	800819c <HAL_SPI_Receive+0x29c>
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01f      	beq.n	800819c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	8812      	ldrh	r2, [r2, #0]
 8008164:	b292      	uxth	r2, r2
 8008166:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800816c:	1c9a      	adds	r2, r3, #2
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	8812      	ldrh	r2, [r2, #0]
 800817a:	b292      	uxth	r2, r2
 800817c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008182:	1c9a      	adds	r2, r3, #2
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800818e:	b29b      	uxth	r3, r3
 8008190:	3b02      	subs	r3, #2
 8008192:	b29a      	uxth	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800819a:	e043      	b.n	8008224 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d119      	bne.n	80081dc <HAL_SPI_Receive+0x2dc>
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d014      	beq.n	80081dc <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081b6:	69ba      	ldr	r2, [r7, #24]
 80081b8:	8812      	ldrh	r2, [r2, #0]
 80081ba:	b292      	uxth	r2, r2
 80081bc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081c2:	1c9a      	adds	r2, r3, #2
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	3b01      	subs	r3, #1
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80081da:	e023      	b.n	8008224 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081dc:	f7fb f814 	bl	8003208 <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d803      	bhi.n	80081f4 <HAL_SPI_Receive+0x2f4>
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081f2:	d102      	bne.n	80081fa <HAL_SPI_Receive+0x2fa>
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d114      	bne.n	8008224 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 f8f2 	bl	80083e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008206:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e0db      	b.n	80083dc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800822a:	b29b      	uxth	r3, r3
 800822c:	2b00      	cmp	r3, #0
 800822e:	f47f af69 	bne.w	8008104 <HAL_SPI_Receive+0x204>
 8008232:	e0c0      	b.n	80083b6 <HAL_SPI_Receive+0x4b6>
 8008234:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b01      	cmp	r3, #1
 800824c:	d117      	bne.n	800827e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800825a:	7812      	ldrb	r2, [r2, #0]
 800825c:	b2d2      	uxtb	r2, r2
 800825e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008264:	1c5a      	adds	r2, r3, #1
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008270:	b29b      	uxth	r3, r3
 8008272:	3b01      	subs	r3, #1
 8008274:	b29a      	uxth	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800827c:	e094      	b.n	80083a8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008284:	b29b      	uxth	r3, r3
 8008286:	8bfa      	ldrh	r2, [r7, #30]
 8008288:	429a      	cmp	r2, r3
 800828a:	d946      	bls.n	800831a <HAL_SPI_Receive+0x41a>
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d041      	beq.n	800831a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082a2:	7812      	ldrb	r2, [r2, #0]
 80082a4:	b2d2      	uxtb	r2, r2
 80082a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082be:	7812      	ldrb	r2, [r2, #0]
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082da:	7812      	ldrb	r2, [r2, #0]
 80082dc:	b2d2      	uxtb	r2, r2
 80082de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082e4:	1c5a      	adds	r2, r3, #1
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082f6:	7812      	ldrb	r2, [r2, #0]
 80082f8:	b2d2      	uxtb	r2, r2
 80082fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008300:	1c5a      	adds	r2, r3, #1
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800830c:	b29b      	uxth	r3, r3
 800830e:	3b04      	subs	r3, #4
 8008310:	b29a      	uxth	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008318:	e046      	b.n	80083a8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b03      	cmp	r3, #3
 8008324:	d81c      	bhi.n	8008360 <HAL_SPI_Receive+0x460>
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d017      	beq.n	8008360 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800833c:	7812      	ldrb	r2, [r2, #0]
 800833e:	b2d2      	uxtb	r2, r2
 8008340:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008352:	b29b      	uxth	r3, r3
 8008354:	3b01      	subs	r3, #1
 8008356:	b29a      	uxth	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800835e:	e023      	b.n	80083a8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008360:	f7fa ff52 	bl	8003208 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	429a      	cmp	r2, r3
 800836e:	d803      	bhi.n	8008378 <HAL_SPI_Receive+0x478>
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008376:	d102      	bne.n	800837e <HAL_SPI_Receive+0x47e>
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d114      	bne.n	80083a8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 f830 	bl	80083e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800838a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e019      	b.n	80083dc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f47f af41 	bne.w	8008238 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 f814 	bl	80083e4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e000      	b.n	80083dc <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80083da:	2300      	movs	r3, #0
  }
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3720      	adds	r7, #32
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	699a      	ldr	r2, [r3, #24]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f042 0208 	orr.w	r2, r2, #8
 8008402:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	699a      	ldr	r2, [r3, #24]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f042 0210 	orr.w	r2, r2, #16
 8008412:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 0201 	bic.w	r2, r2, #1
 8008422:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6919      	ldr	r1, [r3, #16]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	4b3c      	ldr	r3, [pc, #240]	@ (8008520 <SPI_CloseTransfer+0x13c>)
 8008430:	400b      	ands	r3, r1
 8008432:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008442:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b04      	cmp	r3, #4
 800844e:	d014      	beq.n	800847a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f003 0320 	and.w	r3, r3, #32
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00f      	beq.n	800847a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008460:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	699a      	ldr	r2, [r3, #24]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f042 0220 	orr.w	r2, r2, #32
 8008478:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b03      	cmp	r3, #3
 8008484:	d014      	beq.n	80084b0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00f      	beq.n	80084b0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008496:	f043 0204 	orr.w	r2, r3, #4
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	699a      	ldr	r2, [r3, #24]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084ae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00f      	beq.n	80084da <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084c0:	f043 0201 	orr.w	r2, r3, #1
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	699a      	ldr	r2, [r3, #24]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084d8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00f      	beq.n	8008504 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084ea:	f043 0208 	orr.w	r2, r3, #8
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	699a      	ldr	r2, [r3, #24]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008502:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008514:	bf00      	nop
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	fffffc90 	.word	0xfffffc90

08008524 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	603b      	str	r3, [r7, #0]
 8008530:	4613      	mov	r3, r2
 8008532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008534:	e010      	b.n	8008558 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008536:	f7fa fe67 	bl	8003208 <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	429a      	cmp	r2, r3
 8008544:	d803      	bhi.n	800854e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800854c:	d102      	bne.n	8008554 <SPI_WaitOnFlagUntilTimeout+0x30>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	e00f      	b.n	8008578 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	695a      	ldr	r2, [r3, #20]
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	4013      	ands	r3, r2
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	429a      	cmp	r2, r3
 8008566:	bf0c      	ite	eq
 8008568:	2301      	moveq	r3, #1
 800856a:	2300      	movne	r3, #0
 800856c:	b2db      	uxtb	r3, r3
 800856e:	461a      	mov	r2, r3
 8008570:	79fb      	ldrb	r3, [r7, #7]
 8008572:	429a      	cmp	r2, r3
 8008574:	d0df      	beq.n	8008536 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800858c:	095b      	lsrs	r3, r3, #5
 800858e:	3301      	adds	r3, #1
 8008590:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	3301      	adds	r3, #1
 8008598:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	3307      	adds	r3, #7
 800859e:	08db      	lsrs	r3, r3, #3
 80085a0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	fb02 f303 	mul.w	r3, r2, r3
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b082      	sub	sp, #8
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e042      	b.n	800864e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d106      	bne.n	80085e0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7fa fb4a 	bl	8002c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2224      	movs	r2, #36	@ 0x24
 80085e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 0201 	bic.w	r2, r2, #1
 80085f6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fe1f 	bl	8009244 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f8b4 	bl	8008774 <UART_SetConfig>
 800860c:	4603      	mov	r3, r0
 800860e:	2b01      	cmp	r3, #1
 8008610:	d101      	bne.n	8008616 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e01b      	b.n	800864e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008624:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008634:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f042 0201 	orr.w	r2, r2, #1
 8008644:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fe9e 	bl	8009388 <UART_CheckIdleState>
 800864c:	4603      	mov	r3, r0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b08a      	sub	sp, #40	@ 0x28
 800865a:	af02      	add	r7, sp, #8
 800865c:	60f8      	str	r0, [r7, #12]
 800865e:	60b9      	str	r1, [r7, #8]
 8008660:	603b      	str	r3, [r7, #0]
 8008662:	4613      	mov	r3, r2
 8008664:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800866c:	2b20      	cmp	r3, #32
 800866e:	d17b      	bne.n	8008768 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <HAL_UART_Transmit+0x26>
 8008676:	88fb      	ldrh	r3, [r7, #6]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e074      	b.n	800876a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2221      	movs	r2, #33	@ 0x21
 800868c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008690:	f7fa fdba 	bl	8003208 <HAL_GetTick>
 8008694:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	88fa      	ldrh	r2, [r7, #6]
 800869a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	88fa      	ldrh	r2, [r7, #6]
 80086a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086ae:	d108      	bne.n	80086c2 <HAL_UART_Transmit+0x6c>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d104      	bne.n	80086c2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80086b8:	2300      	movs	r3, #0
 80086ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	61bb      	str	r3, [r7, #24]
 80086c0:	e003      	b.n	80086ca <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80086ca:	e030      	b.n	800872e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2200      	movs	r2, #0
 80086d4:	2180      	movs	r1, #128	@ 0x80
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f000 ff00 	bl	80094dc <UART_WaitOnFlagUntilTimeout>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d005      	beq.n	80086ee <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e03d      	b.n	800876a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10b      	bne.n	800870c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	461a      	mov	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008702:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	3302      	adds	r3, #2
 8008708:	61bb      	str	r3, [r7, #24]
 800870a:	e007      	b.n	800871c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	781a      	ldrb	r2, [r3, #0]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	3301      	adds	r3, #1
 800871a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008722:	b29b      	uxth	r3, r3
 8008724:	3b01      	subs	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008734:	b29b      	uxth	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1c8      	bne.n	80086cc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2200      	movs	r2, #0
 8008742:	2140      	movs	r1, #64	@ 0x40
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 fec9 	bl	80094dc <UART_WaitOnFlagUntilTimeout>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d005      	beq.n	800875c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2220      	movs	r2, #32
 8008754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e006      	b.n	800876a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2220      	movs	r2, #32
 8008760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	e000      	b.n	800876a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008768:	2302      	movs	r3, #2
  }
}
 800876a:	4618      	mov	r0, r3
 800876c:	3720      	adds	r7, #32
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
	...

08008774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008778:	b092      	sub	sp, #72	@ 0x48
 800877a:	af00      	add	r7, sp, #0
 800877c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	689a      	ldr	r2, [r3, #8]
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	431a      	orrs	r2, r3
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	431a      	orrs	r2, r3
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	4313      	orrs	r3, r2
 800879a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	4bbe      	ldr	r3, [pc, #760]	@ (8008a9c <UART_SetConfig+0x328>)
 80087a4:	4013      	ands	r3, r2
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	6812      	ldr	r2, [r2, #0]
 80087aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80087ac:	430b      	orrs	r3, r1
 80087ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	68da      	ldr	r2, [r3, #12]
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4ab3      	ldr	r2, [pc, #716]	@ (8008aa0 <UART_SetConfig+0x32c>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d004      	beq.n	80087e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087dc:	4313      	orrs	r3, r2
 80087de:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	689a      	ldr	r2, [r3, #8]
 80087e6:	4baf      	ldr	r3, [pc, #700]	@ (8008aa4 <UART_SetConfig+0x330>)
 80087e8:	4013      	ands	r3, r2
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	6812      	ldr	r2, [r2, #0]
 80087ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80087f0:	430b      	orrs	r3, r1
 80087f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fa:	f023 010f 	bic.w	r1, r3, #15
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	430a      	orrs	r2, r1
 8008808:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4aa6      	ldr	r2, [pc, #664]	@ (8008aa8 <UART_SetConfig+0x334>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d177      	bne.n	8008904 <UART_SetConfig+0x190>
 8008814:	4ba5      	ldr	r3, [pc, #660]	@ (8008aac <UART_SetConfig+0x338>)
 8008816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008818:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800881c:	2b28      	cmp	r3, #40	@ 0x28
 800881e:	d86d      	bhi.n	80088fc <UART_SetConfig+0x188>
 8008820:	a201      	add	r2, pc, #4	@ (adr r2, 8008828 <UART_SetConfig+0xb4>)
 8008822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008826:	bf00      	nop
 8008828:	080088cd 	.word	0x080088cd
 800882c:	080088fd 	.word	0x080088fd
 8008830:	080088fd 	.word	0x080088fd
 8008834:	080088fd 	.word	0x080088fd
 8008838:	080088fd 	.word	0x080088fd
 800883c:	080088fd 	.word	0x080088fd
 8008840:	080088fd 	.word	0x080088fd
 8008844:	080088fd 	.word	0x080088fd
 8008848:	080088d5 	.word	0x080088d5
 800884c:	080088fd 	.word	0x080088fd
 8008850:	080088fd 	.word	0x080088fd
 8008854:	080088fd 	.word	0x080088fd
 8008858:	080088fd 	.word	0x080088fd
 800885c:	080088fd 	.word	0x080088fd
 8008860:	080088fd 	.word	0x080088fd
 8008864:	080088fd 	.word	0x080088fd
 8008868:	080088dd 	.word	0x080088dd
 800886c:	080088fd 	.word	0x080088fd
 8008870:	080088fd 	.word	0x080088fd
 8008874:	080088fd 	.word	0x080088fd
 8008878:	080088fd 	.word	0x080088fd
 800887c:	080088fd 	.word	0x080088fd
 8008880:	080088fd 	.word	0x080088fd
 8008884:	080088fd 	.word	0x080088fd
 8008888:	080088e5 	.word	0x080088e5
 800888c:	080088fd 	.word	0x080088fd
 8008890:	080088fd 	.word	0x080088fd
 8008894:	080088fd 	.word	0x080088fd
 8008898:	080088fd 	.word	0x080088fd
 800889c:	080088fd 	.word	0x080088fd
 80088a0:	080088fd 	.word	0x080088fd
 80088a4:	080088fd 	.word	0x080088fd
 80088a8:	080088ed 	.word	0x080088ed
 80088ac:	080088fd 	.word	0x080088fd
 80088b0:	080088fd 	.word	0x080088fd
 80088b4:	080088fd 	.word	0x080088fd
 80088b8:	080088fd 	.word	0x080088fd
 80088bc:	080088fd 	.word	0x080088fd
 80088c0:	080088fd 	.word	0x080088fd
 80088c4:	080088fd 	.word	0x080088fd
 80088c8:	080088f5 	.word	0x080088f5
 80088cc:	2301      	movs	r3, #1
 80088ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d2:	e222      	b.n	8008d1a <UART_SetConfig+0x5a6>
 80088d4:	2304      	movs	r3, #4
 80088d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088da:	e21e      	b.n	8008d1a <UART_SetConfig+0x5a6>
 80088dc:	2308      	movs	r3, #8
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e2:	e21a      	b.n	8008d1a <UART_SetConfig+0x5a6>
 80088e4:	2310      	movs	r3, #16
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ea:	e216      	b.n	8008d1a <UART_SetConfig+0x5a6>
 80088ec:	2320      	movs	r3, #32
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f2:	e212      	b.n	8008d1a <UART_SetConfig+0x5a6>
 80088f4:	2340      	movs	r3, #64	@ 0x40
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fa:	e20e      	b.n	8008d1a <UART_SetConfig+0x5a6>
 80088fc:	2380      	movs	r3, #128	@ 0x80
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008902:	e20a      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a69      	ldr	r2, [pc, #420]	@ (8008ab0 <UART_SetConfig+0x33c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d130      	bne.n	8008970 <UART_SetConfig+0x1fc>
 800890e:	4b67      	ldr	r3, [pc, #412]	@ (8008aac <UART_SetConfig+0x338>)
 8008910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008912:	f003 0307 	and.w	r3, r3, #7
 8008916:	2b05      	cmp	r3, #5
 8008918:	d826      	bhi.n	8008968 <UART_SetConfig+0x1f4>
 800891a:	a201      	add	r2, pc, #4	@ (adr r2, 8008920 <UART_SetConfig+0x1ac>)
 800891c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008920:	08008939 	.word	0x08008939
 8008924:	08008941 	.word	0x08008941
 8008928:	08008949 	.word	0x08008949
 800892c:	08008951 	.word	0x08008951
 8008930:	08008959 	.word	0x08008959
 8008934:	08008961 	.word	0x08008961
 8008938:	2300      	movs	r3, #0
 800893a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893e:	e1ec      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008940:	2304      	movs	r3, #4
 8008942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008946:	e1e8      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008948:	2308      	movs	r3, #8
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894e:	e1e4      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008950:	2310      	movs	r3, #16
 8008952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008956:	e1e0      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008958:	2320      	movs	r3, #32
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895e:	e1dc      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008960:	2340      	movs	r3, #64	@ 0x40
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008966:	e1d8      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008968:	2380      	movs	r3, #128	@ 0x80
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896e:	e1d4      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a4f      	ldr	r2, [pc, #316]	@ (8008ab4 <UART_SetConfig+0x340>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d130      	bne.n	80089dc <UART_SetConfig+0x268>
 800897a:	4b4c      	ldr	r3, [pc, #304]	@ (8008aac <UART_SetConfig+0x338>)
 800897c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800897e:	f003 0307 	and.w	r3, r3, #7
 8008982:	2b05      	cmp	r3, #5
 8008984:	d826      	bhi.n	80089d4 <UART_SetConfig+0x260>
 8008986:	a201      	add	r2, pc, #4	@ (adr r2, 800898c <UART_SetConfig+0x218>)
 8008988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898c:	080089a5 	.word	0x080089a5
 8008990:	080089ad 	.word	0x080089ad
 8008994:	080089b5 	.word	0x080089b5
 8008998:	080089bd 	.word	0x080089bd
 800899c:	080089c5 	.word	0x080089c5
 80089a0:	080089cd 	.word	0x080089cd
 80089a4:	2300      	movs	r3, #0
 80089a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089aa:	e1b6      	b.n	8008d1a <UART_SetConfig+0x5a6>
 80089ac:	2304      	movs	r3, #4
 80089ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089b2:	e1b2      	b.n	8008d1a <UART_SetConfig+0x5a6>
 80089b4:	2308      	movs	r3, #8
 80089b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ba:	e1ae      	b.n	8008d1a <UART_SetConfig+0x5a6>
 80089bc:	2310      	movs	r3, #16
 80089be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c2:	e1aa      	b.n	8008d1a <UART_SetConfig+0x5a6>
 80089c4:	2320      	movs	r3, #32
 80089c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ca:	e1a6      	b.n	8008d1a <UART_SetConfig+0x5a6>
 80089cc:	2340      	movs	r3, #64	@ 0x40
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d2:	e1a2      	b.n	8008d1a <UART_SetConfig+0x5a6>
 80089d4:	2380      	movs	r3, #128	@ 0x80
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089da:	e19e      	b.n	8008d1a <UART_SetConfig+0x5a6>
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a35      	ldr	r2, [pc, #212]	@ (8008ab8 <UART_SetConfig+0x344>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d130      	bne.n	8008a48 <UART_SetConfig+0x2d4>
 80089e6:	4b31      	ldr	r3, [pc, #196]	@ (8008aac <UART_SetConfig+0x338>)
 80089e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ea:	f003 0307 	and.w	r3, r3, #7
 80089ee:	2b05      	cmp	r3, #5
 80089f0:	d826      	bhi.n	8008a40 <UART_SetConfig+0x2cc>
 80089f2:	a201      	add	r2, pc, #4	@ (adr r2, 80089f8 <UART_SetConfig+0x284>)
 80089f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f8:	08008a11 	.word	0x08008a11
 80089fc:	08008a19 	.word	0x08008a19
 8008a00:	08008a21 	.word	0x08008a21
 8008a04:	08008a29 	.word	0x08008a29
 8008a08:	08008a31 	.word	0x08008a31
 8008a0c:	08008a39 	.word	0x08008a39
 8008a10:	2300      	movs	r3, #0
 8008a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a16:	e180      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008a18:	2304      	movs	r3, #4
 8008a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a1e:	e17c      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008a20:	2308      	movs	r3, #8
 8008a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a26:	e178      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008a28:	2310      	movs	r3, #16
 8008a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2e:	e174      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008a30:	2320      	movs	r3, #32
 8008a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a36:	e170      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008a38:	2340      	movs	r3, #64	@ 0x40
 8008a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a3e:	e16c      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008a40:	2380      	movs	r3, #128	@ 0x80
 8008a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a46:	e168      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8008abc <UART_SetConfig+0x348>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d142      	bne.n	8008ad8 <UART_SetConfig+0x364>
 8008a52:	4b16      	ldr	r3, [pc, #88]	@ (8008aac <UART_SetConfig+0x338>)
 8008a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	2b05      	cmp	r3, #5
 8008a5c:	d838      	bhi.n	8008ad0 <UART_SetConfig+0x35c>
 8008a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a64 <UART_SetConfig+0x2f0>)
 8008a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a64:	08008a7d 	.word	0x08008a7d
 8008a68:	08008a85 	.word	0x08008a85
 8008a6c:	08008a8d 	.word	0x08008a8d
 8008a70:	08008a95 	.word	0x08008a95
 8008a74:	08008ac1 	.word	0x08008ac1
 8008a78:	08008ac9 	.word	0x08008ac9
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a82:	e14a      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008a84:	2304      	movs	r3, #4
 8008a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a8a:	e146      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008a8c:	2308      	movs	r3, #8
 8008a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a92:	e142      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008a94:	2310      	movs	r3, #16
 8008a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a9a:	e13e      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008a9c:	cfff69f3 	.word	0xcfff69f3
 8008aa0:	58000c00 	.word	0x58000c00
 8008aa4:	11fff4ff 	.word	0x11fff4ff
 8008aa8:	40011000 	.word	0x40011000
 8008aac:	58024400 	.word	0x58024400
 8008ab0:	40004400 	.word	0x40004400
 8008ab4:	40004800 	.word	0x40004800
 8008ab8:	40004c00 	.word	0x40004c00
 8008abc:	40005000 	.word	0x40005000
 8008ac0:	2320      	movs	r3, #32
 8008ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ac6:	e128      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008ac8:	2340      	movs	r3, #64	@ 0x40
 8008aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ace:	e124      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008ad0:	2380      	movs	r3, #128	@ 0x80
 8008ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad6:	e120      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4acb      	ldr	r2, [pc, #812]	@ (8008e0c <UART_SetConfig+0x698>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d176      	bne.n	8008bd0 <UART_SetConfig+0x45c>
 8008ae2:	4bcb      	ldr	r3, [pc, #812]	@ (8008e10 <UART_SetConfig+0x69c>)
 8008ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ae6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008aea:	2b28      	cmp	r3, #40	@ 0x28
 8008aec:	d86c      	bhi.n	8008bc8 <UART_SetConfig+0x454>
 8008aee:	a201      	add	r2, pc, #4	@ (adr r2, 8008af4 <UART_SetConfig+0x380>)
 8008af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af4:	08008b99 	.word	0x08008b99
 8008af8:	08008bc9 	.word	0x08008bc9
 8008afc:	08008bc9 	.word	0x08008bc9
 8008b00:	08008bc9 	.word	0x08008bc9
 8008b04:	08008bc9 	.word	0x08008bc9
 8008b08:	08008bc9 	.word	0x08008bc9
 8008b0c:	08008bc9 	.word	0x08008bc9
 8008b10:	08008bc9 	.word	0x08008bc9
 8008b14:	08008ba1 	.word	0x08008ba1
 8008b18:	08008bc9 	.word	0x08008bc9
 8008b1c:	08008bc9 	.word	0x08008bc9
 8008b20:	08008bc9 	.word	0x08008bc9
 8008b24:	08008bc9 	.word	0x08008bc9
 8008b28:	08008bc9 	.word	0x08008bc9
 8008b2c:	08008bc9 	.word	0x08008bc9
 8008b30:	08008bc9 	.word	0x08008bc9
 8008b34:	08008ba9 	.word	0x08008ba9
 8008b38:	08008bc9 	.word	0x08008bc9
 8008b3c:	08008bc9 	.word	0x08008bc9
 8008b40:	08008bc9 	.word	0x08008bc9
 8008b44:	08008bc9 	.word	0x08008bc9
 8008b48:	08008bc9 	.word	0x08008bc9
 8008b4c:	08008bc9 	.word	0x08008bc9
 8008b50:	08008bc9 	.word	0x08008bc9
 8008b54:	08008bb1 	.word	0x08008bb1
 8008b58:	08008bc9 	.word	0x08008bc9
 8008b5c:	08008bc9 	.word	0x08008bc9
 8008b60:	08008bc9 	.word	0x08008bc9
 8008b64:	08008bc9 	.word	0x08008bc9
 8008b68:	08008bc9 	.word	0x08008bc9
 8008b6c:	08008bc9 	.word	0x08008bc9
 8008b70:	08008bc9 	.word	0x08008bc9
 8008b74:	08008bb9 	.word	0x08008bb9
 8008b78:	08008bc9 	.word	0x08008bc9
 8008b7c:	08008bc9 	.word	0x08008bc9
 8008b80:	08008bc9 	.word	0x08008bc9
 8008b84:	08008bc9 	.word	0x08008bc9
 8008b88:	08008bc9 	.word	0x08008bc9
 8008b8c:	08008bc9 	.word	0x08008bc9
 8008b90:	08008bc9 	.word	0x08008bc9
 8008b94:	08008bc1 	.word	0x08008bc1
 8008b98:	2301      	movs	r3, #1
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9e:	e0bc      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008ba0:	2304      	movs	r3, #4
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba6:	e0b8      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008ba8:	2308      	movs	r3, #8
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bae:	e0b4      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008bb0:	2310      	movs	r3, #16
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb6:	e0b0      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008bb8:	2320      	movs	r3, #32
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bbe:	e0ac      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008bc0:	2340      	movs	r3, #64	@ 0x40
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc6:	e0a8      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008bc8:	2380      	movs	r3, #128	@ 0x80
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bce:	e0a4      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a8f      	ldr	r2, [pc, #572]	@ (8008e14 <UART_SetConfig+0x6a0>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d130      	bne.n	8008c3c <UART_SetConfig+0x4c8>
 8008bda:	4b8d      	ldr	r3, [pc, #564]	@ (8008e10 <UART_SetConfig+0x69c>)
 8008bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bde:	f003 0307 	and.w	r3, r3, #7
 8008be2:	2b05      	cmp	r3, #5
 8008be4:	d826      	bhi.n	8008c34 <UART_SetConfig+0x4c0>
 8008be6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bec <UART_SetConfig+0x478>)
 8008be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bec:	08008c05 	.word	0x08008c05
 8008bf0:	08008c0d 	.word	0x08008c0d
 8008bf4:	08008c15 	.word	0x08008c15
 8008bf8:	08008c1d 	.word	0x08008c1d
 8008bfc:	08008c25 	.word	0x08008c25
 8008c00:	08008c2d 	.word	0x08008c2d
 8008c04:	2300      	movs	r3, #0
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c0a:	e086      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008c0c:	2304      	movs	r3, #4
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c12:	e082      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008c14:	2308      	movs	r3, #8
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1a:	e07e      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008c1c:	2310      	movs	r3, #16
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c22:	e07a      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008c24:	2320      	movs	r3, #32
 8008c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2a:	e076      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008c2c:	2340      	movs	r3, #64	@ 0x40
 8008c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c32:	e072      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008c34:	2380      	movs	r3, #128	@ 0x80
 8008c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3a:	e06e      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a75      	ldr	r2, [pc, #468]	@ (8008e18 <UART_SetConfig+0x6a4>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d130      	bne.n	8008ca8 <UART_SetConfig+0x534>
 8008c46:	4b72      	ldr	r3, [pc, #456]	@ (8008e10 <UART_SetConfig+0x69c>)
 8008c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c4a:	f003 0307 	and.w	r3, r3, #7
 8008c4e:	2b05      	cmp	r3, #5
 8008c50:	d826      	bhi.n	8008ca0 <UART_SetConfig+0x52c>
 8008c52:	a201      	add	r2, pc, #4	@ (adr r2, 8008c58 <UART_SetConfig+0x4e4>)
 8008c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c58:	08008c71 	.word	0x08008c71
 8008c5c:	08008c79 	.word	0x08008c79
 8008c60:	08008c81 	.word	0x08008c81
 8008c64:	08008c89 	.word	0x08008c89
 8008c68:	08008c91 	.word	0x08008c91
 8008c6c:	08008c99 	.word	0x08008c99
 8008c70:	2300      	movs	r3, #0
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c76:	e050      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008c78:	2304      	movs	r3, #4
 8008c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7e:	e04c      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008c80:	2308      	movs	r3, #8
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c86:	e048      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008c88:	2310      	movs	r3, #16
 8008c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8e:	e044      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008c90:	2320      	movs	r3, #32
 8008c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c96:	e040      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008c98:	2340      	movs	r3, #64	@ 0x40
 8008c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9e:	e03c      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008ca0:	2380      	movs	r3, #128	@ 0x80
 8008ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca6:	e038      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a5b      	ldr	r2, [pc, #364]	@ (8008e1c <UART_SetConfig+0x6a8>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d130      	bne.n	8008d14 <UART_SetConfig+0x5a0>
 8008cb2:	4b57      	ldr	r3, [pc, #348]	@ (8008e10 <UART_SetConfig+0x69c>)
 8008cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	2b05      	cmp	r3, #5
 8008cbc:	d826      	bhi.n	8008d0c <UART_SetConfig+0x598>
 8008cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008cc4 <UART_SetConfig+0x550>)
 8008cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc4:	08008cdd 	.word	0x08008cdd
 8008cc8:	08008ce5 	.word	0x08008ce5
 8008ccc:	08008ced 	.word	0x08008ced
 8008cd0:	08008cf5 	.word	0x08008cf5
 8008cd4:	08008cfd 	.word	0x08008cfd
 8008cd8:	08008d05 	.word	0x08008d05
 8008cdc:	2302      	movs	r3, #2
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce2:	e01a      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008ce4:	2304      	movs	r3, #4
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cea:	e016      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008cec:	2308      	movs	r3, #8
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf2:	e012      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008cf4:	2310      	movs	r3, #16
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfa:	e00e      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008cfc:	2320      	movs	r3, #32
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d02:	e00a      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008d04:	2340      	movs	r3, #64	@ 0x40
 8008d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0a:	e006      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008d0c:	2380      	movs	r3, #128	@ 0x80
 8008d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d12:	e002      	b.n	8008d1a <UART_SetConfig+0x5a6>
 8008d14:	2380      	movs	r3, #128	@ 0x80
 8008d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a3f      	ldr	r2, [pc, #252]	@ (8008e1c <UART_SetConfig+0x6a8>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	f040 80f8 	bne.w	8008f16 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d2a:	2b20      	cmp	r3, #32
 8008d2c:	dc46      	bgt.n	8008dbc <UART_SetConfig+0x648>
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	f2c0 8082 	blt.w	8008e38 <UART_SetConfig+0x6c4>
 8008d34:	3b02      	subs	r3, #2
 8008d36:	2b1e      	cmp	r3, #30
 8008d38:	d87e      	bhi.n	8008e38 <UART_SetConfig+0x6c4>
 8008d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d40 <UART_SetConfig+0x5cc>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008dc3 	.word	0x08008dc3
 8008d44:	08008e39 	.word	0x08008e39
 8008d48:	08008dcb 	.word	0x08008dcb
 8008d4c:	08008e39 	.word	0x08008e39
 8008d50:	08008e39 	.word	0x08008e39
 8008d54:	08008e39 	.word	0x08008e39
 8008d58:	08008ddb 	.word	0x08008ddb
 8008d5c:	08008e39 	.word	0x08008e39
 8008d60:	08008e39 	.word	0x08008e39
 8008d64:	08008e39 	.word	0x08008e39
 8008d68:	08008e39 	.word	0x08008e39
 8008d6c:	08008e39 	.word	0x08008e39
 8008d70:	08008e39 	.word	0x08008e39
 8008d74:	08008e39 	.word	0x08008e39
 8008d78:	08008deb 	.word	0x08008deb
 8008d7c:	08008e39 	.word	0x08008e39
 8008d80:	08008e39 	.word	0x08008e39
 8008d84:	08008e39 	.word	0x08008e39
 8008d88:	08008e39 	.word	0x08008e39
 8008d8c:	08008e39 	.word	0x08008e39
 8008d90:	08008e39 	.word	0x08008e39
 8008d94:	08008e39 	.word	0x08008e39
 8008d98:	08008e39 	.word	0x08008e39
 8008d9c:	08008e39 	.word	0x08008e39
 8008da0:	08008e39 	.word	0x08008e39
 8008da4:	08008e39 	.word	0x08008e39
 8008da8:	08008e39 	.word	0x08008e39
 8008dac:	08008e39 	.word	0x08008e39
 8008db0:	08008e39 	.word	0x08008e39
 8008db4:	08008e39 	.word	0x08008e39
 8008db8:	08008e2b 	.word	0x08008e2b
 8008dbc:	2b40      	cmp	r3, #64	@ 0x40
 8008dbe:	d037      	beq.n	8008e30 <UART_SetConfig+0x6bc>
 8008dc0:	e03a      	b.n	8008e38 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008dc2:	f7fe f93f 	bl	8007044 <HAL_RCCEx_GetD3PCLK1Freq>
 8008dc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008dc8:	e03c      	b.n	8008e44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe f94e 	bl	8007070 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd8:	e034      	b.n	8008e44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dda:	f107 0318 	add.w	r3, r7, #24
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe fa9a 	bl	8007318 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de8:	e02c      	b.n	8008e44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dea:	4b09      	ldr	r3, [pc, #36]	@ (8008e10 <UART_SetConfig+0x69c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d016      	beq.n	8008e24 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008df6:	4b06      	ldr	r3, [pc, #24]	@ (8008e10 <UART_SetConfig+0x69c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	08db      	lsrs	r3, r3, #3
 8008dfc:	f003 0303 	and.w	r3, r3, #3
 8008e00:	4a07      	ldr	r2, [pc, #28]	@ (8008e20 <UART_SetConfig+0x6ac>)
 8008e02:	fa22 f303 	lsr.w	r3, r2, r3
 8008e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e08:	e01c      	b.n	8008e44 <UART_SetConfig+0x6d0>
 8008e0a:	bf00      	nop
 8008e0c:	40011400 	.word	0x40011400
 8008e10:	58024400 	.word	0x58024400
 8008e14:	40007800 	.word	0x40007800
 8008e18:	40007c00 	.word	0x40007c00
 8008e1c:	58000c00 	.word	0x58000c00
 8008e20:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008e24:	4b9d      	ldr	r3, [pc, #628]	@ (800909c <UART_SetConfig+0x928>)
 8008e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e28:	e00c      	b.n	8008e44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e2a:	4b9d      	ldr	r3, [pc, #628]	@ (80090a0 <UART_SetConfig+0x92c>)
 8008e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e2e:	e009      	b.n	8008e44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e36:	e005      	b.n	8008e44 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 81de 	beq.w	8009208 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e50:	4a94      	ldr	r2, [pc, #592]	@ (80090a4 <UART_SetConfig+0x930>)
 8008e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e56:	461a      	mov	r2, r3
 8008e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e5e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	4613      	mov	r3, r2
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	4413      	add	r3, r2
 8008e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d305      	bcc.n	8008e7c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d903      	bls.n	8008e84 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008e82:	e1c1      	b.n	8009208 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e86:	2200      	movs	r2, #0
 8008e88:	60bb      	str	r3, [r7, #8]
 8008e8a:	60fa      	str	r2, [r7, #12]
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e90:	4a84      	ldr	r2, [pc, #528]	@ (80090a4 <UART_SetConfig+0x930>)
 8008e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	2200      	movs	r2, #0
 8008e9a:	603b      	str	r3, [r7, #0]
 8008e9c:	607a      	str	r2, [r7, #4]
 8008e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ea2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ea6:	f7f7 fa73 	bl	8000390 <__aeabi_uldivmod>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	4610      	mov	r0, r2
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	f04f 0200 	mov.w	r2, #0
 8008eb6:	f04f 0300 	mov.w	r3, #0
 8008eba:	020b      	lsls	r3, r1, #8
 8008ebc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ec0:	0202      	lsls	r2, r0, #8
 8008ec2:	6979      	ldr	r1, [r7, #20]
 8008ec4:	6849      	ldr	r1, [r1, #4]
 8008ec6:	0849      	lsrs	r1, r1, #1
 8008ec8:	2000      	movs	r0, #0
 8008eca:	460c      	mov	r4, r1
 8008ecc:	4605      	mov	r5, r0
 8008ece:	eb12 0804 	adds.w	r8, r2, r4
 8008ed2:	eb43 0905 	adc.w	r9, r3, r5
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	469a      	mov	sl, r3
 8008ede:	4693      	mov	fp, r2
 8008ee0:	4652      	mov	r2, sl
 8008ee2:	465b      	mov	r3, fp
 8008ee4:	4640      	mov	r0, r8
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	f7f7 fa52 	bl	8000390 <__aeabi_uldivmod>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008efa:	d308      	bcc.n	8008f0e <UART_SetConfig+0x79a>
 8008efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f02:	d204      	bcs.n	8008f0e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f0a:	60da      	str	r2, [r3, #12]
 8008f0c:	e17c      	b.n	8009208 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008f14:	e178      	b.n	8009208 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f1e:	f040 80c5 	bne.w	80090ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008f22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f26:	2b20      	cmp	r3, #32
 8008f28:	dc48      	bgt.n	8008fbc <UART_SetConfig+0x848>
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	db7b      	blt.n	8009026 <UART_SetConfig+0x8b2>
 8008f2e:	2b20      	cmp	r3, #32
 8008f30:	d879      	bhi.n	8009026 <UART_SetConfig+0x8b2>
 8008f32:	a201      	add	r2, pc, #4	@ (adr r2, 8008f38 <UART_SetConfig+0x7c4>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008fc3 	.word	0x08008fc3
 8008f3c:	08008fcb 	.word	0x08008fcb
 8008f40:	08009027 	.word	0x08009027
 8008f44:	08009027 	.word	0x08009027
 8008f48:	08008fd3 	.word	0x08008fd3
 8008f4c:	08009027 	.word	0x08009027
 8008f50:	08009027 	.word	0x08009027
 8008f54:	08009027 	.word	0x08009027
 8008f58:	08008fe3 	.word	0x08008fe3
 8008f5c:	08009027 	.word	0x08009027
 8008f60:	08009027 	.word	0x08009027
 8008f64:	08009027 	.word	0x08009027
 8008f68:	08009027 	.word	0x08009027
 8008f6c:	08009027 	.word	0x08009027
 8008f70:	08009027 	.word	0x08009027
 8008f74:	08009027 	.word	0x08009027
 8008f78:	08008ff3 	.word	0x08008ff3
 8008f7c:	08009027 	.word	0x08009027
 8008f80:	08009027 	.word	0x08009027
 8008f84:	08009027 	.word	0x08009027
 8008f88:	08009027 	.word	0x08009027
 8008f8c:	08009027 	.word	0x08009027
 8008f90:	08009027 	.word	0x08009027
 8008f94:	08009027 	.word	0x08009027
 8008f98:	08009027 	.word	0x08009027
 8008f9c:	08009027 	.word	0x08009027
 8008fa0:	08009027 	.word	0x08009027
 8008fa4:	08009027 	.word	0x08009027
 8008fa8:	08009027 	.word	0x08009027
 8008fac:	08009027 	.word	0x08009027
 8008fb0:	08009027 	.word	0x08009027
 8008fb4:	08009027 	.word	0x08009027
 8008fb8:	08009019 	.word	0x08009019
 8008fbc:	2b40      	cmp	r3, #64	@ 0x40
 8008fbe:	d02e      	beq.n	800901e <UART_SetConfig+0x8aa>
 8008fc0:	e031      	b.n	8009026 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fc2:	f7fc fe09 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8008fc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fc8:	e033      	b.n	8009032 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fca:	f7fc fe1b 	bl	8005c04 <HAL_RCC_GetPCLK2Freq>
 8008fce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fd0:	e02f      	b.n	8009032 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe f84a 	bl	8007070 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fe0:	e027      	b.n	8009032 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fe2:	f107 0318 	add.w	r3, r7, #24
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe f996 	bl	8007318 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff0:	e01f      	b.n	8009032 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80090a8 <UART_SetConfig+0x934>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0320 	and.w	r3, r3, #32
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d009      	beq.n	8009012 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80090a8 <UART_SetConfig+0x934>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	08db      	lsrs	r3, r3, #3
 8009004:	f003 0303 	and.w	r3, r3, #3
 8009008:	4a24      	ldr	r2, [pc, #144]	@ (800909c <UART_SetConfig+0x928>)
 800900a:	fa22 f303 	lsr.w	r3, r2, r3
 800900e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009010:	e00f      	b.n	8009032 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009012:	4b22      	ldr	r3, [pc, #136]	@ (800909c <UART_SetConfig+0x928>)
 8009014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009016:	e00c      	b.n	8009032 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009018:	4b21      	ldr	r3, [pc, #132]	@ (80090a0 <UART_SetConfig+0x92c>)
 800901a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800901c:	e009      	b.n	8009032 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800901e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009024:	e005      	b.n	8009032 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009026:	2300      	movs	r3, #0
 8009028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009030:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 80e7 	beq.w	8009208 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903e:	4a19      	ldr	r2, [pc, #100]	@ (80090a4 <UART_SetConfig+0x930>)
 8009040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009044:	461a      	mov	r2, r3
 8009046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009048:	fbb3 f3f2 	udiv	r3, r3, r2
 800904c:	005a      	lsls	r2, r3, #1
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	085b      	lsrs	r3, r3, #1
 8009054:	441a      	add	r2, r3
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	fbb2 f3f3 	udiv	r3, r2, r3
 800905e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009062:	2b0f      	cmp	r3, #15
 8009064:	d916      	bls.n	8009094 <UART_SetConfig+0x920>
 8009066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800906c:	d212      	bcs.n	8009094 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800906e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009070:	b29b      	uxth	r3, r3
 8009072:	f023 030f 	bic.w	r3, r3, #15
 8009076:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907a:	085b      	lsrs	r3, r3, #1
 800907c:	b29b      	uxth	r3, r3
 800907e:	f003 0307 	and.w	r3, r3, #7
 8009082:	b29a      	uxth	r2, r3
 8009084:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009086:	4313      	orrs	r3, r2
 8009088:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009090:	60da      	str	r2, [r3, #12]
 8009092:	e0b9      	b.n	8009208 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800909a:	e0b5      	b.n	8009208 <UART_SetConfig+0xa94>
 800909c:	03d09000 	.word	0x03d09000
 80090a0:	003d0900 	.word	0x003d0900
 80090a4:	0800c66c 	.word	0x0800c66c
 80090a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80090ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80090b0:	2b20      	cmp	r3, #32
 80090b2:	dc49      	bgt.n	8009148 <UART_SetConfig+0x9d4>
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	db7c      	blt.n	80091b2 <UART_SetConfig+0xa3e>
 80090b8:	2b20      	cmp	r3, #32
 80090ba:	d87a      	bhi.n	80091b2 <UART_SetConfig+0xa3e>
 80090bc:	a201      	add	r2, pc, #4	@ (adr r2, 80090c4 <UART_SetConfig+0x950>)
 80090be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c2:	bf00      	nop
 80090c4:	0800914f 	.word	0x0800914f
 80090c8:	08009157 	.word	0x08009157
 80090cc:	080091b3 	.word	0x080091b3
 80090d0:	080091b3 	.word	0x080091b3
 80090d4:	0800915f 	.word	0x0800915f
 80090d8:	080091b3 	.word	0x080091b3
 80090dc:	080091b3 	.word	0x080091b3
 80090e0:	080091b3 	.word	0x080091b3
 80090e4:	0800916f 	.word	0x0800916f
 80090e8:	080091b3 	.word	0x080091b3
 80090ec:	080091b3 	.word	0x080091b3
 80090f0:	080091b3 	.word	0x080091b3
 80090f4:	080091b3 	.word	0x080091b3
 80090f8:	080091b3 	.word	0x080091b3
 80090fc:	080091b3 	.word	0x080091b3
 8009100:	080091b3 	.word	0x080091b3
 8009104:	0800917f 	.word	0x0800917f
 8009108:	080091b3 	.word	0x080091b3
 800910c:	080091b3 	.word	0x080091b3
 8009110:	080091b3 	.word	0x080091b3
 8009114:	080091b3 	.word	0x080091b3
 8009118:	080091b3 	.word	0x080091b3
 800911c:	080091b3 	.word	0x080091b3
 8009120:	080091b3 	.word	0x080091b3
 8009124:	080091b3 	.word	0x080091b3
 8009128:	080091b3 	.word	0x080091b3
 800912c:	080091b3 	.word	0x080091b3
 8009130:	080091b3 	.word	0x080091b3
 8009134:	080091b3 	.word	0x080091b3
 8009138:	080091b3 	.word	0x080091b3
 800913c:	080091b3 	.word	0x080091b3
 8009140:	080091b3 	.word	0x080091b3
 8009144:	080091a5 	.word	0x080091a5
 8009148:	2b40      	cmp	r3, #64	@ 0x40
 800914a:	d02e      	beq.n	80091aa <UART_SetConfig+0xa36>
 800914c:	e031      	b.n	80091b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800914e:	f7fc fd43 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8009152:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009154:	e033      	b.n	80091be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009156:	f7fc fd55 	bl	8005c04 <HAL_RCC_GetPCLK2Freq>
 800915a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800915c:	e02f      	b.n	80091be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800915e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009162:	4618      	mov	r0, r3
 8009164:	f7fd ff84 	bl	8007070 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800916a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800916c:	e027      	b.n	80091be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800916e:	f107 0318 	add.w	r3, r7, #24
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe f8d0 	bl	8007318 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800917c:	e01f      	b.n	80091be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800917e:	4b2d      	ldr	r3, [pc, #180]	@ (8009234 <UART_SetConfig+0xac0>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0320 	and.w	r3, r3, #32
 8009186:	2b00      	cmp	r3, #0
 8009188:	d009      	beq.n	800919e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800918a:	4b2a      	ldr	r3, [pc, #168]	@ (8009234 <UART_SetConfig+0xac0>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	08db      	lsrs	r3, r3, #3
 8009190:	f003 0303 	and.w	r3, r3, #3
 8009194:	4a28      	ldr	r2, [pc, #160]	@ (8009238 <UART_SetConfig+0xac4>)
 8009196:	fa22 f303 	lsr.w	r3, r2, r3
 800919a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800919c:	e00f      	b.n	80091be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800919e:	4b26      	ldr	r3, [pc, #152]	@ (8009238 <UART_SetConfig+0xac4>)
 80091a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091a2:	e00c      	b.n	80091be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091a4:	4b25      	ldr	r3, [pc, #148]	@ (800923c <UART_SetConfig+0xac8>)
 80091a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091a8:	e009      	b.n	80091be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091b0:	e005      	b.n	80091be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80091b2:	2300      	movs	r3, #0
 80091b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80091bc:	bf00      	nop
    }

    if (pclk != 0U)
 80091be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d021      	beq.n	8009208 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009240 <UART_SetConfig+0xacc>)
 80091ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091ce:	461a      	mov	r2, r3
 80091d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	085b      	lsrs	r3, r3, #1
 80091dc:	441a      	add	r2, r3
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ea:	2b0f      	cmp	r3, #15
 80091ec:	d909      	bls.n	8009202 <UART_SetConfig+0xa8e>
 80091ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091f4:	d205      	bcs.n	8009202 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	60da      	str	r2, [r3, #12]
 8009200:	e002      	b.n	8009208 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	2201      	movs	r2, #1
 800920c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2201      	movs	r2, #1
 8009214:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2200      	movs	r2, #0
 800921c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2200      	movs	r2, #0
 8009222:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009224:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009228:	4618      	mov	r0, r3
 800922a:	3748      	adds	r7, #72	@ 0x48
 800922c:	46bd      	mov	sp, r7
 800922e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009232:	bf00      	nop
 8009234:	58024400 	.word	0x58024400
 8009238:	03d09000 	.word	0x03d09000
 800923c:	003d0900 	.word	0x003d0900
 8009240:	0800c66c 	.word	0x0800c66c

08009244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009250:	f003 0308 	and.w	r3, r3, #8
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00a      	beq.n	800926e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	430a      	orrs	r2, r1
 800926c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00a      	beq.n	8009290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	430a      	orrs	r2, r1
 800928e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009294:	f003 0302 	and.w	r3, r3, #2
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00a      	beq.n	80092b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b6:	f003 0304 	and.w	r3, r3, #4
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	430a      	orrs	r2, r1
 80092d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00a      	beq.n	80092f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fa:	f003 0320 	and.w	r3, r3, #32
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00a      	beq.n	8009318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	430a      	orrs	r2, r1
 8009316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800931c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009320:	2b00      	cmp	r3, #0
 8009322:	d01a      	beq.n	800935a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800933e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009342:	d10a      	bne.n	800935a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	430a      	orrs	r2, r1
 8009358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800935e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00a      	beq.n	800937c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	430a      	orrs	r2, r1
 800937a:	605a      	str	r2, [r3, #4]
  }
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b098      	sub	sp, #96	@ 0x60
 800938c:	af02      	add	r7, sp, #8
 800938e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009398:	f7f9 ff36 	bl	8003208 <HAL_GetTick>
 800939c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 0308 	and.w	r3, r3, #8
 80093a8:	2b08      	cmp	r3, #8
 80093aa:	d12f      	bne.n	800940c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093b4:	2200      	movs	r2, #0
 80093b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f88e 	bl	80094dc <UART_WaitOnFlagUntilTimeout>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d022      	beq.n	800940c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ce:	e853 3f00 	ldrex	r3, [r3]
 80093d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093da:	653b      	str	r3, [r7, #80]	@ 0x50
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	461a      	mov	r2, r3
 80093e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80093e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093ec:	e841 2300 	strex	r3, r2, [r1]
 80093f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1e6      	bne.n	80093c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2220      	movs	r2, #32
 80093fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e063      	b.n	80094d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0304 	and.w	r3, r3, #4
 8009416:	2b04      	cmp	r3, #4
 8009418:	d149      	bne.n	80094ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800941a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009422:	2200      	movs	r2, #0
 8009424:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f857 	bl	80094dc <UART_WaitOnFlagUntilTimeout>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d03c      	beq.n	80094ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943c:	e853 3f00 	ldrex	r3, [r3]
 8009440:	623b      	str	r3, [r7, #32]
   return(result);
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009452:	633b      	str	r3, [r7, #48]	@ 0x30
 8009454:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009456:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800945a:	e841 2300 	strex	r3, r2, [r1]
 800945e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1e6      	bne.n	8009434 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3308      	adds	r3, #8
 800946c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	60fb      	str	r3, [r7, #12]
   return(result);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f023 0301 	bic.w	r3, r3, #1
 800947c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3308      	adds	r3, #8
 8009484:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009486:	61fa      	str	r2, [r7, #28]
 8009488:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948a:	69b9      	ldr	r1, [r7, #24]
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	e841 2300 	strex	r3, r2, [r1]
 8009492:	617b      	str	r3, [r7, #20]
   return(result);
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1e5      	bne.n	8009466 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2220      	movs	r2, #32
 800949e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e012      	b.n	80094d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2220      	movs	r2, #32
 80094b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3758      	adds	r7, #88	@ 0x58
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	603b      	str	r3, [r7, #0]
 80094e8:	4613      	mov	r3, r2
 80094ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ec:	e04f      	b.n	800958e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094f4:	d04b      	beq.n	800958e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094f6:	f7f9 fe87 	bl	8003208 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	429a      	cmp	r2, r3
 8009504:	d302      	bcc.n	800950c <UART_WaitOnFlagUntilTimeout+0x30>
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d101      	bne.n	8009510 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	e04e      	b.n	80095ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0304 	and.w	r3, r3, #4
 800951a:	2b00      	cmp	r3, #0
 800951c:	d037      	beq.n	800958e <UART_WaitOnFlagUntilTimeout+0xb2>
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b80      	cmp	r3, #128	@ 0x80
 8009522:	d034      	beq.n	800958e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	2b40      	cmp	r3, #64	@ 0x40
 8009528:	d031      	beq.n	800958e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	69db      	ldr	r3, [r3, #28]
 8009530:	f003 0308 	and.w	r3, r3, #8
 8009534:	2b08      	cmp	r3, #8
 8009536:	d110      	bne.n	800955a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2208      	movs	r2, #8
 800953e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f000 f839 	bl	80095b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2208      	movs	r2, #8
 800954a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e029      	b.n	80095ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009564:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009568:	d111      	bne.n	800958e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 f81f 	bl	80095b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2220      	movs	r2, #32
 800957e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	e00f      	b.n	80095ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	69da      	ldr	r2, [r3, #28]
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	4013      	ands	r3, r2
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	429a      	cmp	r2, r3
 800959c:	bf0c      	ite	eq
 800959e:	2301      	moveq	r3, #1
 80095a0:	2300      	movne	r3, #0
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	461a      	mov	r2, r3
 80095a6:	79fb      	ldrb	r3, [r7, #7]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d0a0      	beq.n	80094ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
	...

080095b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b095      	sub	sp, #84	@ 0x54
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095c8:	e853 3f00 	ldrex	r3, [r3]
 80095cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80095ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095de:	643b      	str	r3, [r7, #64]	@ 0x40
 80095e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e6      	bne.n	80095c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3308      	adds	r3, #8
 80095f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	6a3b      	ldr	r3, [r7, #32]
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	61fb      	str	r3, [r7, #28]
   return(result);
 8009602:	69fa      	ldr	r2, [r7, #28]
 8009604:	4b1e      	ldr	r3, [pc, #120]	@ (8009680 <UART_EndRxTransfer+0xc8>)
 8009606:	4013      	ands	r3, r2
 8009608:	64bb      	str	r3, [r7, #72]	@ 0x48
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3308      	adds	r3, #8
 8009610:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009612:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009614:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e5      	bne.n	80095f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800962a:	2b01      	cmp	r3, #1
 800962c:	d118      	bne.n	8009660 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	e853 3f00 	ldrex	r3, [r3]
 800963a:	60bb      	str	r3, [r7, #8]
   return(result);
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	f023 0310 	bic.w	r3, r3, #16
 8009642:	647b      	str	r3, [r7, #68]	@ 0x44
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	461a      	mov	r2, r3
 800964a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800964c:	61bb      	str	r3, [r7, #24]
 800964e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009650:	6979      	ldr	r1, [r7, #20]
 8009652:	69ba      	ldr	r2, [r7, #24]
 8009654:	e841 2300 	strex	r3, r2, [r1]
 8009658:	613b      	str	r3, [r7, #16]
   return(result);
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1e6      	bne.n	800962e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2220      	movs	r2, #32
 8009664:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009674:	bf00      	nop
 8009676:	3754      	adds	r7, #84	@ 0x54
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	effffffe 	.word	0xeffffffe

08009684 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009692:	2b01      	cmp	r3, #1
 8009694:	d101      	bne.n	800969a <HAL_UARTEx_DisableFifoMode+0x16>
 8009696:	2302      	movs	r3, #2
 8009698:	e027      	b.n	80096ea <HAL_UARTEx_DisableFifoMode+0x66>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2224      	movs	r2, #36	@ 0x24
 80096a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 0201 	bic.w	r2, r2, #1
 80096c0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80096c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2220      	movs	r2, #32
 80096dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009706:	2b01      	cmp	r3, #1
 8009708:	d101      	bne.n	800970e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800970a:	2302      	movs	r3, #2
 800970c:	e02d      	b.n	800976a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2224      	movs	r2, #36	@ 0x24
 800971a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f022 0201 	bic.w	r2, r2, #1
 8009734:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	430a      	orrs	r2, r1
 8009748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f850 	bl	80097f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2220      	movs	r2, #32
 800975c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b084      	sub	sp, #16
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009782:	2b01      	cmp	r3, #1
 8009784:	d101      	bne.n	800978a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009786:	2302      	movs	r3, #2
 8009788:	e02d      	b.n	80097e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2224      	movs	r2, #36	@ 0x24
 8009796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f022 0201 	bic.w	r2, r2, #1
 80097b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	430a      	orrs	r2, r1
 80097c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f812 	bl	80097f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2220      	movs	r2, #32
 80097d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
	...

080097f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d108      	bne.n	8009812 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009810:	e031      	b.n	8009876 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009812:	2310      	movs	r3, #16
 8009814:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009816:	2310      	movs	r3, #16
 8009818:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	0e5b      	lsrs	r3, r3, #25
 8009822:	b2db      	uxtb	r3, r3
 8009824:	f003 0307 	and.w	r3, r3, #7
 8009828:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	0f5b      	lsrs	r3, r3, #29
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f003 0307 	and.w	r3, r3, #7
 8009838:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800983a:	7bbb      	ldrb	r3, [r7, #14]
 800983c:	7b3a      	ldrb	r2, [r7, #12]
 800983e:	4911      	ldr	r1, [pc, #68]	@ (8009884 <UARTEx_SetNbDataToProcess+0x94>)
 8009840:	5c8a      	ldrb	r2, [r1, r2]
 8009842:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009846:	7b3a      	ldrb	r2, [r7, #12]
 8009848:	490f      	ldr	r1, [pc, #60]	@ (8009888 <UARTEx_SetNbDataToProcess+0x98>)
 800984a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800984c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009850:	b29a      	uxth	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009858:	7bfb      	ldrb	r3, [r7, #15]
 800985a:	7b7a      	ldrb	r2, [r7, #13]
 800985c:	4909      	ldr	r1, [pc, #36]	@ (8009884 <UARTEx_SetNbDataToProcess+0x94>)
 800985e:	5c8a      	ldrb	r2, [r1, r2]
 8009860:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009864:	7b7a      	ldrb	r2, [r7, #13]
 8009866:	4908      	ldr	r1, [pc, #32]	@ (8009888 <UARTEx_SetNbDataToProcess+0x98>)
 8009868:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800986a:	fb93 f3f2 	sdiv	r3, r3, r2
 800986e:	b29a      	uxth	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009876:	bf00      	nop
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	0800c684 	.word	0x0800c684
 8009888:	0800c68c 	.word	0x0800c68c

0800988c <malloc>:
 800988c:	4b02      	ldr	r3, [pc, #8]	@ (8009898 <malloc+0xc>)
 800988e:	4601      	mov	r1, r0
 8009890:	6818      	ldr	r0, [r3, #0]
 8009892:	f000 b82d 	b.w	80098f0 <_malloc_r>
 8009896:	bf00      	nop
 8009898:	24000064 	.word	0x24000064

0800989c <free>:
 800989c:	4b02      	ldr	r3, [pc, #8]	@ (80098a8 <free+0xc>)
 800989e:	4601      	mov	r1, r0
 80098a0:	6818      	ldr	r0, [r3, #0]
 80098a2:	f001 bd6f 	b.w	800b384 <_free_r>
 80098a6:	bf00      	nop
 80098a8:	24000064 	.word	0x24000064

080098ac <sbrk_aligned>:
 80098ac:	b570      	push	{r4, r5, r6, lr}
 80098ae:	4e0f      	ldr	r6, [pc, #60]	@ (80098ec <sbrk_aligned+0x40>)
 80098b0:	460c      	mov	r4, r1
 80098b2:	6831      	ldr	r1, [r6, #0]
 80098b4:	4605      	mov	r5, r0
 80098b6:	b911      	cbnz	r1, 80098be <sbrk_aligned+0x12>
 80098b8:	f000 ff28 	bl	800a70c <_sbrk_r>
 80098bc:	6030      	str	r0, [r6, #0]
 80098be:	4621      	mov	r1, r4
 80098c0:	4628      	mov	r0, r5
 80098c2:	f000 ff23 	bl	800a70c <_sbrk_r>
 80098c6:	1c43      	adds	r3, r0, #1
 80098c8:	d103      	bne.n	80098d2 <sbrk_aligned+0x26>
 80098ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80098ce:	4620      	mov	r0, r4
 80098d0:	bd70      	pop	{r4, r5, r6, pc}
 80098d2:	1cc4      	adds	r4, r0, #3
 80098d4:	f024 0403 	bic.w	r4, r4, #3
 80098d8:	42a0      	cmp	r0, r4
 80098da:	d0f8      	beq.n	80098ce <sbrk_aligned+0x22>
 80098dc:	1a21      	subs	r1, r4, r0
 80098de:	4628      	mov	r0, r5
 80098e0:	f000 ff14 	bl	800a70c <_sbrk_r>
 80098e4:	3001      	adds	r0, #1
 80098e6:	d1f2      	bne.n	80098ce <sbrk_aligned+0x22>
 80098e8:	e7ef      	b.n	80098ca <sbrk_aligned+0x1e>
 80098ea:	bf00      	nop
 80098ec:	24000918 	.word	0x24000918

080098f0 <_malloc_r>:
 80098f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f4:	1ccd      	adds	r5, r1, #3
 80098f6:	f025 0503 	bic.w	r5, r5, #3
 80098fa:	3508      	adds	r5, #8
 80098fc:	2d0c      	cmp	r5, #12
 80098fe:	bf38      	it	cc
 8009900:	250c      	movcc	r5, #12
 8009902:	2d00      	cmp	r5, #0
 8009904:	4606      	mov	r6, r0
 8009906:	db01      	blt.n	800990c <_malloc_r+0x1c>
 8009908:	42a9      	cmp	r1, r5
 800990a:	d904      	bls.n	8009916 <_malloc_r+0x26>
 800990c:	230c      	movs	r3, #12
 800990e:	6033      	str	r3, [r6, #0]
 8009910:	2000      	movs	r0, #0
 8009912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099ec <_malloc_r+0xfc>
 800991a:	f000 f869 	bl	80099f0 <__malloc_lock>
 800991e:	f8d8 3000 	ldr.w	r3, [r8]
 8009922:	461c      	mov	r4, r3
 8009924:	bb44      	cbnz	r4, 8009978 <_malloc_r+0x88>
 8009926:	4629      	mov	r1, r5
 8009928:	4630      	mov	r0, r6
 800992a:	f7ff ffbf 	bl	80098ac <sbrk_aligned>
 800992e:	1c43      	adds	r3, r0, #1
 8009930:	4604      	mov	r4, r0
 8009932:	d158      	bne.n	80099e6 <_malloc_r+0xf6>
 8009934:	f8d8 4000 	ldr.w	r4, [r8]
 8009938:	4627      	mov	r7, r4
 800993a:	2f00      	cmp	r7, #0
 800993c:	d143      	bne.n	80099c6 <_malloc_r+0xd6>
 800993e:	2c00      	cmp	r4, #0
 8009940:	d04b      	beq.n	80099da <_malloc_r+0xea>
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	4639      	mov	r1, r7
 8009946:	4630      	mov	r0, r6
 8009948:	eb04 0903 	add.w	r9, r4, r3
 800994c:	f000 fede 	bl	800a70c <_sbrk_r>
 8009950:	4581      	cmp	r9, r0
 8009952:	d142      	bne.n	80099da <_malloc_r+0xea>
 8009954:	6821      	ldr	r1, [r4, #0]
 8009956:	1a6d      	subs	r5, r5, r1
 8009958:	4629      	mov	r1, r5
 800995a:	4630      	mov	r0, r6
 800995c:	f7ff ffa6 	bl	80098ac <sbrk_aligned>
 8009960:	3001      	adds	r0, #1
 8009962:	d03a      	beq.n	80099da <_malloc_r+0xea>
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	442b      	add	r3, r5
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	f8d8 3000 	ldr.w	r3, [r8]
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	bb62      	cbnz	r2, 80099cc <_malloc_r+0xdc>
 8009972:	f8c8 7000 	str.w	r7, [r8]
 8009976:	e00f      	b.n	8009998 <_malloc_r+0xa8>
 8009978:	6822      	ldr	r2, [r4, #0]
 800997a:	1b52      	subs	r2, r2, r5
 800997c:	d420      	bmi.n	80099c0 <_malloc_r+0xd0>
 800997e:	2a0b      	cmp	r2, #11
 8009980:	d917      	bls.n	80099b2 <_malloc_r+0xc2>
 8009982:	1961      	adds	r1, r4, r5
 8009984:	42a3      	cmp	r3, r4
 8009986:	6025      	str	r5, [r4, #0]
 8009988:	bf18      	it	ne
 800998a:	6059      	strne	r1, [r3, #4]
 800998c:	6863      	ldr	r3, [r4, #4]
 800998e:	bf08      	it	eq
 8009990:	f8c8 1000 	streq.w	r1, [r8]
 8009994:	5162      	str	r2, [r4, r5]
 8009996:	604b      	str	r3, [r1, #4]
 8009998:	4630      	mov	r0, r6
 800999a:	f000 f82f 	bl	80099fc <__malloc_unlock>
 800999e:	f104 000b 	add.w	r0, r4, #11
 80099a2:	1d23      	adds	r3, r4, #4
 80099a4:	f020 0007 	bic.w	r0, r0, #7
 80099a8:	1ac2      	subs	r2, r0, r3
 80099aa:	bf1c      	itt	ne
 80099ac:	1a1b      	subne	r3, r3, r0
 80099ae:	50a3      	strne	r3, [r4, r2]
 80099b0:	e7af      	b.n	8009912 <_malloc_r+0x22>
 80099b2:	6862      	ldr	r2, [r4, #4]
 80099b4:	42a3      	cmp	r3, r4
 80099b6:	bf0c      	ite	eq
 80099b8:	f8c8 2000 	streq.w	r2, [r8]
 80099bc:	605a      	strne	r2, [r3, #4]
 80099be:	e7eb      	b.n	8009998 <_malloc_r+0xa8>
 80099c0:	4623      	mov	r3, r4
 80099c2:	6864      	ldr	r4, [r4, #4]
 80099c4:	e7ae      	b.n	8009924 <_malloc_r+0x34>
 80099c6:	463c      	mov	r4, r7
 80099c8:	687f      	ldr	r7, [r7, #4]
 80099ca:	e7b6      	b.n	800993a <_malloc_r+0x4a>
 80099cc:	461a      	mov	r2, r3
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	42a3      	cmp	r3, r4
 80099d2:	d1fb      	bne.n	80099cc <_malloc_r+0xdc>
 80099d4:	2300      	movs	r3, #0
 80099d6:	6053      	str	r3, [r2, #4]
 80099d8:	e7de      	b.n	8009998 <_malloc_r+0xa8>
 80099da:	230c      	movs	r3, #12
 80099dc:	6033      	str	r3, [r6, #0]
 80099de:	4630      	mov	r0, r6
 80099e0:	f000 f80c 	bl	80099fc <__malloc_unlock>
 80099e4:	e794      	b.n	8009910 <_malloc_r+0x20>
 80099e6:	6005      	str	r5, [r0, #0]
 80099e8:	e7d6      	b.n	8009998 <_malloc_r+0xa8>
 80099ea:	bf00      	nop
 80099ec:	2400091c 	.word	0x2400091c

080099f0 <__malloc_lock>:
 80099f0:	4801      	ldr	r0, [pc, #4]	@ (80099f8 <__malloc_lock+0x8>)
 80099f2:	f000 bed8 	b.w	800a7a6 <__retarget_lock_acquire_recursive>
 80099f6:	bf00      	nop
 80099f8:	24000a60 	.word	0x24000a60

080099fc <__malloc_unlock>:
 80099fc:	4801      	ldr	r0, [pc, #4]	@ (8009a04 <__malloc_unlock+0x8>)
 80099fe:	f000 bed3 	b.w	800a7a8 <__retarget_lock_release_recursive>
 8009a02:	bf00      	nop
 8009a04:	24000a60 	.word	0x24000a60

08009a08 <__cvt>:
 8009a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a0a:	ed2d 8b02 	vpush	{d8}
 8009a0e:	eeb0 8b40 	vmov.f64	d8, d0
 8009a12:	b085      	sub	sp, #20
 8009a14:	4617      	mov	r7, r2
 8009a16:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009a18:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a1a:	ee18 2a90 	vmov	r2, s17
 8009a1e:	f025 0520 	bic.w	r5, r5, #32
 8009a22:	2a00      	cmp	r2, #0
 8009a24:	bfb6      	itet	lt
 8009a26:	222d      	movlt	r2, #45	@ 0x2d
 8009a28:	2200      	movge	r2, #0
 8009a2a:	eeb1 8b40 	vneglt.f64	d8, d0
 8009a2e:	2d46      	cmp	r5, #70	@ 0x46
 8009a30:	460c      	mov	r4, r1
 8009a32:	701a      	strb	r2, [r3, #0]
 8009a34:	d004      	beq.n	8009a40 <__cvt+0x38>
 8009a36:	2d45      	cmp	r5, #69	@ 0x45
 8009a38:	d100      	bne.n	8009a3c <__cvt+0x34>
 8009a3a:	3401      	adds	r4, #1
 8009a3c:	2102      	movs	r1, #2
 8009a3e:	e000      	b.n	8009a42 <__cvt+0x3a>
 8009a40:	2103      	movs	r1, #3
 8009a42:	ab03      	add	r3, sp, #12
 8009a44:	9301      	str	r3, [sp, #4]
 8009a46:	ab02      	add	r3, sp, #8
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	4622      	mov	r2, r4
 8009a4c:	4633      	mov	r3, r6
 8009a4e:	eeb0 0b48 	vmov.f64	d0, d8
 8009a52:	f000 ff41 	bl	800a8d8 <_dtoa_r>
 8009a56:	2d47      	cmp	r5, #71	@ 0x47
 8009a58:	d114      	bne.n	8009a84 <__cvt+0x7c>
 8009a5a:	07fb      	lsls	r3, r7, #31
 8009a5c:	d50a      	bpl.n	8009a74 <__cvt+0x6c>
 8009a5e:	1902      	adds	r2, r0, r4
 8009a60:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a68:	bf08      	it	eq
 8009a6a:	9203      	streq	r2, [sp, #12]
 8009a6c:	2130      	movs	r1, #48	@ 0x30
 8009a6e:	9b03      	ldr	r3, [sp, #12]
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d319      	bcc.n	8009aa8 <__cvt+0xa0>
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a78:	1a1b      	subs	r3, r3, r0
 8009a7a:	6013      	str	r3, [r2, #0]
 8009a7c:	b005      	add	sp, #20
 8009a7e:	ecbd 8b02 	vpop	{d8}
 8009a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a84:	2d46      	cmp	r5, #70	@ 0x46
 8009a86:	eb00 0204 	add.w	r2, r0, r4
 8009a8a:	d1e9      	bne.n	8009a60 <__cvt+0x58>
 8009a8c:	7803      	ldrb	r3, [r0, #0]
 8009a8e:	2b30      	cmp	r3, #48	@ 0x30
 8009a90:	d107      	bne.n	8009aa2 <__cvt+0x9a>
 8009a92:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a9a:	bf1c      	itt	ne
 8009a9c:	f1c4 0401 	rsbne	r4, r4, #1
 8009aa0:	6034      	strne	r4, [r6, #0]
 8009aa2:	6833      	ldr	r3, [r6, #0]
 8009aa4:	441a      	add	r2, r3
 8009aa6:	e7db      	b.n	8009a60 <__cvt+0x58>
 8009aa8:	1c5c      	adds	r4, r3, #1
 8009aaa:	9403      	str	r4, [sp, #12]
 8009aac:	7019      	strb	r1, [r3, #0]
 8009aae:	e7de      	b.n	8009a6e <__cvt+0x66>

08009ab0 <__exponent>:
 8009ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ab2:	2900      	cmp	r1, #0
 8009ab4:	bfba      	itte	lt
 8009ab6:	4249      	neglt	r1, r1
 8009ab8:	232d      	movlt	r3, #45	@ 0x2d
 8009aba:	232b      	movge	r3, #43	@ 0x2b
 8009abc:	2909      	cmp	r1, #9
 8009abe:	7002      	strb	r2, [r0, #0]
 8009ac0:	7043      	strb	r3, [r0, #1]
 8009ac2:	dd29      	ble.n	8009b18 <__exponent+0x68>
 8009ac4:	f10d 0307 	add.w	r3, sp, #7
 8009ac8:	461d      	mov	r5, r3
 8009aca:	270a      	movs	r7, #10
 8009acc:	461a      	mov	r2, r3
 8009ace:	fbb1 f6f7 	udiv	r6, r1, r7
 8009ad2:	fb07 1416 	mls	r4, r7, r6, r1
 8009ad6:	3430      	adds	r4, #48	@ 0x30
 8009ad8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009adc:	460c      	mov	r4, r1
 8009ade:	2c63      	cmp	r4, #99	@ 0x63
 8009ae0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009ae4:	4631      	mov	r1, r6
 8009ae6:	dcf1      	bgt.n	8009acc <__exponent+0x1c>
 8009ae8:	3130      	adds	r1, #48	@ 0x30
 8009aea:	1e94      	subs	r4, r2, #2
 8009aec:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009af0:	1c41      	adds	r1, r0, #1
 8009af2:	4623      	mov	r3, r4
 8009af4:	42ab      	cmp	r3, r5
 8009af6:	d30a      	bcc.n	8009b0e <__exponent+0x5e>
 8009af8:	f10d 0309 	add.w	r3, sp, #9
 8009afc:	1a9b      	subs	r3, r3, r2
 8009afe:	42ac      	cmp	r4, r5
 8009b00:	bf88      	it	hi
 8009b02:	2300      	movhi	r3, #0
 8009b04:	3302      	adds	r3, #2
 8009b06:	4403      	add	r3, r0
 8009b08:	1a18      	subs	r0, r3, r0
 8009b0a:	b003      	add	sp, #12
 8009b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b0e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009b12:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009b16:	e7ed      	b.n	8009af4 <__exponent+0x44>
 8009b18:	2330      	movs	r3, #48	@ 0x30
 8009b1a:	3130      	adds	r1, #48	@ 0x30
 8009b1c:	7083      	strb	r3, [r0, #2]
 8009b1e:	70c1      	strb	r1, [r0, #3]
 8009b20:	1d03      	adds	r3, r0, #4
 8009b22:	e7f1      	b.n	8009b08 <__exponent+0x58>
 8009b24:	0000      	movs	r0, r0
	...

08009b28 <_printf_float>:
 8009b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	b08d      	sub	sp, #52	@ 0x34
 8009b2e:	460c      	mov	r4, r1
 8009b30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009b34:	4616      	mov	r6, r2
 8009b36:	461f      	mov	r7, r3
 8009b38:	4605      	mov	r5, r0
 8009b3a:	f000 fdaf 	bl	800a69c <_localeconv_r>
 8009b3e:	f8d0 b000 	ldr.w	fp, [r0]
 8009b42:	4658      	mov	r0, fp
 8009b44:	f7f6 fc1c 	bl	8000380 <strlen>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b50:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009b54:	6822      	ldr	r2, [r4, #0]
 8009b56:	9005      	str	r0, [sp, #20]
 8009b58:	3307      	adds	r3, #7
 8009b5a:	f023 0307 	bic.w	r3, r3, #7
 8009b5e:	f103 0108 	add.w	r1, r3, #8
 8009b62:	f8c8 1000 	str.w	r1, [r8]
 8009b66:	ed93 0b00 	vldr	d0, [r3]
 8009b6a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009dc8 <_printf_float+0x2a0>
 8009b6e:	eeb0 7bc0 	vabs.f64	d7, d0
 8009b72:	eeb4 7b46 	vcmp.f64	d7, d6
 8009b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b7a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009b7e:	dd24      	ble.n	8009bca <_printf_float+0xa2>
 8009b80:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b88:	d502      	bpl.n	8009b90 <_printf_float+0x68>
 8009b8a:	232d      	movs	r3, #45	@ 0x2d
 8009b8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b90:	498f      	ldr	r1, [pc, #572]	@ (8009dd0 <_printf_float+0x2a8>)
 8009b92:	4b90      	ldr	r3, [pc, #576]	@ (8009dd4 <_printf_float+0x2ac>)
 8009b94:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009b98:	bf94      	ite	ls
 8009b9a:	4688      	movls	r8, r1
 8009b9c:	4698      	movhi	r8, r3
 8009b9e:	f022 0204 	bic.w	r2, r2, #4
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	6123      	str	r3, [r4, #16]
 8009ba6:	6022      	str	r2, [r4, #0]
 8009ba8:	f04f 0a00 	mov.w	sl, #0
 8009bac:	9700      	str	r7, [sp, #0]
 8009bae:	4633      	mov	r3, r6
 8009bb0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f000 f9d1 	bl	8009f5c <_printf_common>
 8009bba:	3001      	adds	r0, #1
 8009bbc:	f040 8089 	bne.w	8009cd2 <_printf_float+0x1aa>
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bc4:	b00d      	add	sp, #52	@ 0x34
 8009bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bca:	eeb4 0b40 	vcmp.f64	d0, d0
 8009bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd2:	d709      	bvc.n	8009be8 <_printf_float+0xc0>
 8009bd4:	ee10 3a90 	vmov	r3, s1
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	bfbc      	itt	lt
 8009bdc:	232d      	movlt	r3, #45	@ 0x2d
 8009bde:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009be2:	497d      	ldr	r1, [pc, #500]	@ (8009dd8 <_printf_float+0x2b0>)
 8009be4:	4b7d      	ldr	r3, [pc, #500]	@ (8009ddc <_printf_float+0x2b4>)
 8009be6:	e7d5      	b.n	8009b94 <_printf_float+0x6c>
 8009be8:	6863      	ldr	r3, [r4, #4]
 8009bea:	1c59      	adds	r1, r3, #1
 8009bec:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009bf0:	d139      	bne.n	8009c66 <_printf_float+0x13e>
 8009bf2:	2306      	movs	r3, #6
 8009bf4:	6063      	str	r3, [r4, #4]
 8009bf6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	6022      	str	r2, [r4, #0]
 8009bfe:	9303      	str	r3, [sp, #12]
 8009c00:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c02:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009c06:	ab09      	add	r3, sp, #36	@ 0x24
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	6861      	ldr	r1, [r4, #4]
 8009c0c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009c10:	4628      	mov	r0, r5
 8009c12:	f7ff fef9 	bl	8009a08 <__cvt>
 8009c16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009c1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c1c:	4680      	mov	r8, r0
 8009c1e:	d129      	bne.n	8009c74 <_printf_float+0x14c>
 8009c20:	1cc8      	adds	r0, r1, #3
 8009c22:	db02      	blt.n	8009c2a <_printf_float+0x102>
 8009c24:	6863      	ldr	r3, [r4, #4]
 8009c26:	4299      	cmp	r1, r3
 8009c28:	dd41      	ble.n	8009cae <_printf_float+0x186>
 8009c2a:	f1a9 0902 	sub.w	r9, r9, #2
 8009c2e:	fa5f f989 	uxtb.w	r9, r9
 8009c32:	3901      	subs	r1, #1
 8009c34:	464a      	mov	r2, r9
 8009c36:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c3c:	f7ff ff38 	bl	8009ab0 <__exponent>
 8009c40:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c42:	1813      	adds	r3, r2, r0
 8009c44:	2a01      	cmp	r2, #1
 8009c46:	4682      	mov	sl, r0
 8009c48:	6123      	str	r3, [r4, #16]
 8009c4a:	dc02      	bgt.n	8009c52 <_printf_float+0x12a>
 8009c4c:	6822      	ldr	r2, [r4, #0]
 8009c4e:	07d2      	lsls	r2, r2, #31
 8009c50:	d501      	bpl.n	8009c56 <_printf_float+0x12e>
 8009c52:	3301      	adds	r3, #1
 8009c54:	6123      	str	r3, [r4, #16]
 8009c56:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d0a6      	beq.n	8009bac <_printf_float+0x84>
 8009c5e:	232d      	movs	r3, #45	@ 0x2d
 8009c60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c64:	e7a2      	b.n	8009bac <_printf_float+0x84>
 8009c66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009c6a:	d1c4      	bne.n	8009bf6 <_printf_float+0xce>
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1c2      	bne.n	8009bf6 <_printf_float+0xce>
 8009c70:	2301      	movs	r3, #1
 8009c72:	e7bf      	b.n	8009bf4 <_printf_float+0xcc>
 8009c74:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009c78:	d9db      	bls.n	8009c32 <_printf_float+0x10a>
 8009c7a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009c7e:	d118      	bne.n	8009cb2 <_printf_float+0x18a>
 8009c80:	2900      	cmp	r1, #0
 8009c82:	6863      	ldr	r3, [r4, #4]
 8009c84:	dd0b      	ble.n	8009c9e <_printf_float+0x176>
 8009c86:	6121      	str	r1, [r4, #16]
 8009c88:	b913      	cbnz	r3, 8009c90 <_printf_float+0x168>
 8009c8a:	6822      	ldr	r2, [r4, #0]
 8009c8c:	07d0      	lsls	r0, r2, #31
 8009c8e:	d502      	bpl.n	8009c96 <_printf_float+0x16e>
 8009c90:	3301      	adds	r3, #1
 8009c92:	440b      	add	r3, r1
 8009c94:	6123      	str	r3, [r4, #16]
 8009c96:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009c98:	f04f 0a00 	mov.w	sl, #0
 8009c9c:	e7db      	b.n	8009c56 <_printf_float+0x12e>
 8009c9e:	b913      	cbnz	r3, 8009ca6 <_printf_float+0x17e>
 8009ca0:	6822      	ldr	r2, [r4, #0]
 8009ca2:	07d2      	lsls	r2, r2, #31
 8009ca4:	d501      	bpl.n	8009caa <_printf_float+0x182>
 8009ca6:	3302      	adds	r3, #2
 8009ca8:	e7f4      	b.n	8009c94 <_printf_float+0x16c>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e7f2      	b.n	8009c94 <_printf_float+0x16c>
 8009cae:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009cb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cb4:	4299      	cmp	r1, r3
 8009cb6:	db05      	blt.n	8009cc4 <_printf_float+0x19c>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	6121      	str	r1, [r4, #16]
 8009cbc:	07d8      	lsls	r0, r3, #31
 8009cbe:	d5ea      	bpl.n	8009c96 <_printf_float+0x16e>
 8009cc0:	1c4b      	adds	r3, r1, #1
 8009cc2:	e7e7      	b.n	8009c94 <_printf_float+0x16c>
 8009cc4:	2900      	cmp	r1, #0
 8009cc6:	bfd4      	ite	le
 8009cc8:	f1c1 0202 	rsble	r2, r1, #2
 8009ccc:	2201      	movgt	r2, #1
 8009cce:	4413      	add	r3, r2
 8009cd0:	e7e0      	b.n	8009c94 <_printf_float+0x16c>
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	055a      	lsls	r2, r3, #21
 8009cd6:	d407      	bmi.n	8009ce8 <_printf_float+0x1c0>
 8009cd8:	6923      	ldr	r3, [r4, #16]
 8009cda:	4642      	mov	r2, r8
 8009cdc:	4631      	mov	r1, r6
 8009cde:	4628      	mov	r0, r5
 8009ce0:	47b8      	blx	r7
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	d12a      	bne.n	8009d3c <_printf_float+0x214>
 8009ce6:	e76b      	b.n	8009bc0 <_printf_float+0x98>
 8009ce8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009cec:	f240 80e0 	bls.w	8009eb0 <_printf_float+0x388>
 8009cf0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009cf4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cfc:	d133      	bne.n	8009d66 <_printf_float+0x23e>
 8009cfe:	4a38      	ldr	r2, [pc, #224]	@ (8009de0 <_printf_float+0x2b8>)
 8009d00:	2301      	movs	r3, #1
 8009d02:	4631      	mov	r1, r6
 8009d04:	4628      	mov	r0, r5
 8009d06:	47b8      	blx	r7
 8009d08:	3001      	adds	r0, #1
 8009d0a:	f43f af59 	beq.w	8009bc0 <_printf_float+0x98>
 8009d0e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009d12:	4543      	cmp	r3, r8
 8009d14:	db02      	blt.n	8009d1c <_printf_float+0x1f4>
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	07d8      	lsls	r0, r3, #31
 8009d1a:	d50f      	bpl.n	8009d3c <_printf_float+0x214>
 8009d1c:	9b05      	ldr	r3, [sp, #20]
 8009d1e:	465a      	mov	r2, fp
 8009d20:	4631      	mov	r1, r6
 8009d22:	4628      	mov	r0, r5
 8009d24:	47b8      	blx	r7
 8009d26:	3001      	adds	r0, #1
 8009d28:	f43f af4a 	beq.w	8009bc0 <_printf_float+0x98>
 8009d2c:	f04f 0900 	mov.w	r9, #0
 8009d30:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009d34:	f104 0a1a 	add.w	sl, r4, #26
 8009d38:	45c8      	cmp	r8, r9
 8009d3a:	dc09      	bgt.n	8009d50 <_printf_float+0x228>
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	079b      	lsls	r3, r3, #30
 8009d40:	f100 8107 	bmi.w	8009f52 <_printf_float+0x42a>
 8009d44:	68e0      	ldr	r0, [r4, #12]
 8009d46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d48:	4298      	cmp	r0, r3
 8009d4a:	bfb8      	it	lt
 8009d4c:	4618      	movlt	r0, r3
 8009d4e:	e739      	b.n	8009bc4 <_printf_float+0x9c>
 8009d50:	2301      	movs	r3, #1
 8009d52:	4652      	mov	r2, sl
 8009d54:	4631      	mov	r1, r6
 8009d56:	4628      	mov	r0, r5
 8009d58:	47b8      	blx	r7
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	f43f af30 	beq.w	8009bc0 <_printf_float+0x98>
 8009d60:	f109 0901 	add.w	r9, r9, #1
 8009d64:	e7e8      	b.n	8009d38 <_printf_float+0x210>
 8009d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	dc3b      	bgt.n	8009de4 <_printf_float+0x2bc>
 8009d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8009de0 <_printf_float+0x2b8>)
 8009d6e:	2301      	movs	r3, #1
 8009d70:	4631      	mov	r1, r6
 8009d72:	4628      	mov	r0, r5
 8009d74:	47b8      	blx	r7
 8009d76:	3001      	adds	r0, #1
 8009d78:	f43f af22 	beq.w	8009bc0 <_printf_float+0x98>
 8009d7c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009d80:	ea59 0303 	orrs.w	r3, r9, r3
 8009d84:	d102      	bne.n	8009d8c <_printf_float+0x264>
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	07d9      	lsls	r1, r3, #31
 8009d8a:	d5d7      	bpl.n	8009d3c <_printf_float+0x214>
 8009d8c:	9b05      	ldr	r3, [sp, #20]
 8009d8e:	465a      	mov	r2, fp
 8009d90:	4631      	mov	r1, r6
 8009d92:	4628      	mov	r0, r5
 8009d94:	47b8      	blx	r7
 8009d96:	3001      	adds	r0, #1
 8009d98:	f43f af12 	beq.w	8009bc0 <_printf_float+0x98>
 8009d9c:	f04f 0a00 	mov.w	sl, #0
 8009da0:	f104 0b1a 	add.w	fp, r4, #26
 8009da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da6:	425b      	negs	r3, r3
 8009da8:	4553      	cmp	r3, sl
 8009daa:	dc01      	bgt.n	8009db0 <_printf_float+0x288>
 8009dac:	464b      	mov	r3, r9
 8009dae:	e794      	b.n	8009cda <_printf_float+0x1b2>
 8009db0:	2301      	movs	r3, #1
 8009db2:	465a      	mov	r2, fp
 8009db4:	4631      	mov	r1, r6
 8009db6:	4628      	mov	r0, r5
 8009db8:	47b8      	blx	r7
 8009dba:	3001      	adds	r0, #1
 8009dbc:	f43f af00 	beq.w	8009bc0 <_printf_float+0x98>
 8009dc0:	f10a 0a01 	add.w	sl, sl, #1
 8009dc4:	e7ee      	b.n	8009da4 <_printf_float+0x27c>
 8009dc6:	bf00      	nop
 8009dc8:	ffffffff 	.word	0xffffffff
 8009dcc:	7fefffff 	.word	0x7fefffff
 8009dd0:	0800c694 	.word	0x0800c694
 8009dd4:	0800c698 	.word	0x0800c698
 8009dd8:	0800c69c 	.word	0x0800c69c
 8009ddc:	0800c6a0 	.word	0x0800c6a0
 8009de0:	0800c6a4 	.word	0x0800c6a4
 8009de4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009de6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009dea:	4553      	cmp	r3, sl
 8009dec:	bfa8      	it	ge
 8009dee:	4653      	movge	r3, sl
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	4699      	mov	r9, r3
 8009df4:	dc37      	bgt.n	8009e66 <_printf_float+0x33e>
 8009df6:	2300      	movs	r3, #0
 8009df8:	9307      	str	r3, [sp, #28]
 8009dfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dfe:	f104 021a 	add.w	r2, r4, #26
 8009e02:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e04:	9907      	ldr	r1, [sp, #28]
 8009e06:	9306      	str	r3, [sp, #24]
 8009e08:	eba3 0309 	sub.w	r3, r3, r9
 8009e0c:	428b      	cmp	r3, r1
 8009e0e:	dc31      	bgt.n	8009e74 <_printf_float+0x34c>
 8009e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e12:	459a      	cmp	sl, r3
 8009e14:	dc3b      	bgt.n	8009e8e <_printf_float+0x366>
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	07da      	lsls	r2, r3, #31
 8009e1a:	d438      	bmi.n	8009e8e <_printf_float+0x366>
 8009e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e1e:	ebaa 0903 	sub.w	r9, sl, r3
 8009e22:	9b06      	ldr	r3, [sp, #24]
 8009e24:	ebaa 0303 	sub.w	r3, sl, r3
 8009e28:	4599      	cmp	r9, r3
 8009e2a:	bfa8      	it	ge
 8009e2c:	4699      	movge	r9, r3
 8009e2e:	f1b9 0f00 	cmp.w	r9, #0
 8009e32:	dc34      	bgt.n	8009e9e <_printf_float+0x376>
 8009e34:	f04f 0800 	mov.w	r8, #0
 8009e38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e3c:	f104 0b1a 	add.w	fp, r4, #26
 8009e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e42:	ebaa 0303 	sub.w	r3, sl, r3
 8009e46:	eba3 0309 	sub.w	r3, r3, r9
 8009e4a:	4543      	cmp	r3, r8
 8009e4c:	f77f af76 	ble.w	8009d3c <_printf_float+0x214>
 8009e50:	2301      	movs	r3, #1
 8009e52:	465a      	mov	r2, fp
 8009e54:	4631      	mov	r1, r6
 8009e56:	4628      	mov	r0, r5
 8009e58:	47b8      	blx	r7
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	f43f aeb0 	beq.w	8009bc0 <_printf_float+0x98>
 8009e60:	f108 0801 	add.w	r8, r8, #1
 8009e64:	e7ec      	b.n	8009e40 <_printf_float+0x318>
 8009e66:	4642      	mov	r2, r8
 8009e68:	4631      	mov	r1, r6
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	47b8      	blx	r7
 8009e6e:	3001      	adds	r0, #1
 8009e70:	d1c1      	bne.n	8009df6 <_printf_float+0x2ce>
 8009e72:	e6a5      	b.n	8009bc0 <_printf_float+0x98>
 8009e74:	2301      	movs	r3, #1
 8009e76:	4631      	mov	r1, r6
 8009e78:	4628      	mov	r0, r5
 8009e7a:	9206      	str	r2, [sp, #24]
 8009e7c:	47b8      	blx	r7
 8009e7e:	3001      	adds	r0, #1
 8009e80:	f43f ae9e 	beq.w	8009bc0 <_printf_float+0x98>
 8009e84:	9b07      	ldr	r3, [sp, #28]
 8009e86:	9a06      	ldr	r2, [sp, #24]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	9307      	str	r3, [sp, #28]
 8009e8c:	e7b9      	b.n	8009e02 <_printf_float+0x2da>
 8009e8e:	9b05      	ldr	r3, [sp, #20]
 8009e90:	465a      	mov	r2, fp
 8009e92:	4631      	mov	r1, r6
 8009e94:	4628      	mov	r0, r5
 8009e96:	47b8      	blx	r7
 8009e98:	3001      	adds	r0, #1
 8009e9a:	d1bf      	bne.n	8009e1c <_printf_float+0x2f4>
 8009e9c:	e690      	b.n	8009bc0 <_printf_float+0x98>
 8009e9e:	9a06      	ldr	r2, [sp, #24]
 8009ea0:	464b      	mov	r3, r9
 8009ea2:	4442      	add	r2, r8
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	47b8      	blx	r7
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d1c2      	bne.n	8009e34 <_printf_float+0x30c>
 8009eae:	e687      	b.n	8009bc0 <_printf_float+0x98>
 8009eb0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009eb4:	f1b9 0f01 	cmp.w	r9, #1
 8009eb8:	dc01      	bgt.n	8009ebe <_printf_float+0x396>
 8009eba:	07db      	lsls	r3, r3, #31
 8009ebc:	d536      	bpl.n	8009f2c <_printf_float+0x404>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	4642      	mov	r2, r8
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	47b8      	blx	r7
 8009ec8:	3001      	adds	r0, #1
 8009eca:	f43f ae79 	beq.w	8009bc0 <_printf_float+0x98>
 8009ece:	9b05      	ldr	r3, [sp, #20]
 8009ed0:	465a      	mov	r2, fp
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	47b8      	blx	r7
 8009ed8:	3001      	adds	r0, #1
 8009eda:	f43f ae71 	beq.w	8009bc0 <_printf_float+0x98>
 8009ede:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009ee2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eea:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8009eee:	d018      	beq.n	8009f22 <_printf_float+0x3fa>
 8009ef0:	464b      	mov	r3, r9
 8009ef2:	f108 0201 	add.w	r2, r8, #1
 8009ef6:	4631      	mov	r1, r6
 8009ef8:	4628      	mov	r0, r5
 8009efa:	47b8      	blx	r7
 8009efc:	3001      	adds	r0, #1
 8009efe:	d10c      	bne.n	8009f1a <_printf_float+0x3f2>
 8009f00:	e65e      	b.n	8009bc0 <_printf_float+0x98>
 8009f02:	2301      	movs	r3, #1
 8009f04:	465a      	mov	r2, fp
 8009f06:	4631      	mov	r1, r6
 8009f08:	4628      	mov	r0, r5
 8009f0a:	47b8      	blx	r7
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	f43f ae57 	beq.w	8009bc0 <_printf_float+0x98>
 8009f12:	f108 0801 	add.w	r8, r8, #1
 8009f16:	45c8      	cmp	r8, r9
 8009f18:	dbf3      	blt.n	8009f02 <_printf_float+0x3da>
 8009f1a:	4653      	mov	r3, sl
 8009f1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009f20:	e6dc      	b.n	8009cdc <_printf_float+0x1b4>
 8009f22:	f04f 0800 	mov.w	r8, #0
 8009f26:	f104 0b1a 	add.w	fp, r4, #26
 8009f2a:	e7f4      	b.n	8009f16 <_printf_float+0x3ee>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	4642      	mov	r2, r8
 8009f30:	e7e1      	b.n	8009ef6 <_printf_float+0x3ce>
 8009f32:	2301      	movs	r3, #1
 8009f34:	464a      	mov	r2, r9
 8009f36:	4631      	mov	r1, r6
 8009f38:	4628      	mov	r0, r5
 8009f3a:	47b8      	blx	r7
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	f43f ae3f 	beq.w	8009bc0 <_printf_float+0x98>
 8009f42:	f108 0801 	add.w	r8, r8, #1
 8009f46:	68e3      	ldr	r3, [r4, #12]
 8009f48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f4a:	1a5b      	subs	r3, r3, r1
 8009f4c:	4543      	cmp	r3, r8
 8009f4e:	dcf0      	bgt.n	8009f32 <_printf_float+0x40a>
 8009f50:	e6f8      	b.n	8009d44 <_printf_float+0x21c>
 8009f52:	f04f 0800 	mov.w	r8, #0
 8009f56:	f104 0919 	add.w	r9, r4, #25
 8009f5a:	e7f4      	b.n	8009f46 <_printf_float+0x41e>

08009f5c <_printf_common>:
 8009f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f60:	4616      	mov	r6, r2
 8009f62:	4698      	mov	r8, r3
 8009f64:	688a      	ldr	r2, [r1, #8]
 8009f66:	690b      	ldr	r3, [r1, #16]
 8009f68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	bfb8      	it	lt
 8009f70:	4613      	movlt	r3, r2
 8009f72:	6033      	str	r3, [r6, #0]
 8009f74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f78:	4607      	mov	r7, r0
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	b10a      	cbz	r2, 8009f82 <_printf_common+0x26>
 8009f7e:	3301      	adds	r3, #1
 8009f80:	6033      	str	r3, [r6, #0]
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	0699      	lsls	r1, r3, #26
 8009f86:	bf42      	ittt	mi
 8009f88:	6833      	ldrmi	r3, [r6, #0]
 8009f8a:	3302      	addmi	r3, #2
 8009f8c:	6033      	strmi	r3, [r6, #0]
 8009f8e:	6825      	ldr	r5, [r4, #0]
 8009f90:	f015 0506 	ands.w	r5, r5, #6
 8009f94:	d106      	bne.n	8009fa4 <_printf_common+0x48>
 8009f96:	f104 0a19 	add.w	sl, r4, #25
 8009f9a:	68e3      	ldr	r3, [r4, #12]
 8009f9c:	6832      	ldr	r2, [r6, #0]
 8009f9e:	1a9b      	subs	r3, r3, r2
 8009fa0:	42ab      	cmp	r3, r5
 8009fa2:	dc26      	bgt.n	8009ff2 <_printf_common+0x96>
 8009fa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009fa8:	6822      	ldr	r2, [r4, #0]
 8009faa:	3b00      	subs	r3, #0
 8009fac:	bf18      	it	ne
 8009fae:	2301      	movne	r3, #1
 8009fb0:	0692      	lsls	r2, r2, #26
 8009fb2:	d42b      	bmi.n	800a00c <_printf_common+0xb0>
 8009fb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009fb8:	4641      	mov	r1, r8
 8009fba:	4638      	mov	r0, r7
 8009fbc:	47c8      	blx	r9
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	d01e      	beq.n	800a000 <_printf_common+0xa4>
 8009fc2:	6823      	ldr	r3, [r4, #0]
 8009fc4:	6922      	ldr	r2, [r4, #16]
 8009fc6:	f003 0306 	and.w	r3, r3, #6
 8009fca:	2b04      	cmp	r3, #4
 8009fcc:	bf02      	ittt	eq
 8009fce:	68e5      	ldreq	r5, [r4, #12]
 8009fd0:	6833      	ldreq	r3, [r6, #0]
 8009fd2:	1aed      	subeq	r5, r5, r3
 8009fd4:	68a3      	ldr	r3, [r4, #8]
 8009fd6:	bf0c      	ite	eq
 8009fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fdc:	2500      	movne	r5, #0
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	bfc4      	itt	gt
 8009fe2:	1a9b      	subgt	r3, r3, r2
 8009fe4:	18ed      	addgt	r5, r5, r3
 8009fe6:	2600      	movs	r6, #0
 8009fe8:	341a      	adds	r4, #26
 8009fea:	42b5      	cmp	r5, r6
 8009fec:	d11a      	bne.n	800a024 <_printf_common+0xc8>
 8009fee:	2000      	movs	r0, #0
 8009ff0:	e008      	b.n	800a004 <_printf_common+0xa8>
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	4652      	mov	r2, sl
 8009ff6:	4641      	mov	r1, r8
 8009ff8:	4638      	mov	r0, r7
 8009ffa:	47c8      	blx	r9
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	d103      	bne.n	800a008 <_printf_common+0xac>
 800a000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a008:	3501      	adds	r5, #1
 800a00a:	e7c6      	b.n	8009f9a <_printf_common+0x3e>
 800a00c:	18e1      	adds	r1, r4, r3
 800a00e:	1c5a      	adds	r2, r3, #1
 800a010:	2030      	movs	r0, #48	@ 0x30
 800a012:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a016:	4422      	add	r2, r4
 800a018:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a01c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a020:	3302      	adds	r3, #2
 800a022:	e7c7      	b.n	8009fb4 <_printf_common+0x58>
 800a024:	2301      	movs	r3, #1
 800a026:	4622      	mov	r2, r4
 800a028:	4641      	mov	r1, r8
 800a02a:	4638      	mov	r0, r7
 800a02c:	47c8      	blx	r9
 800a02e:	3001      	adds	r0, #1
 800a030:	d0e6      	beq.n	800a000 <_printf_common+0xa4>
 800a032:	3601      	adds	r6, #1
 800a034:	e7d9      	b.n	8009fea <_printf_common+0x8e>
	...

0800a038 <_printf_i>:
 800a038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a03c:	7e0f      	ldrb	r7, [r1, #24]
 800a03e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a040:	2f78      	cmp	r7, #120	@ 0x78
 800a042:	4691      	mov	r9, r2
 800a044:	4680      	mov	r8, r0
 800a046:	460c      	mov	r4, r1
 800a048:	469a      	mov	sl, r3
 800a04a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a04e:	d807      	bhi.n	800a060 <_printf_i+0x28>
 800a050:	2f62      	cmp	r7, #98	@ 0x62
 800a052:	d80a      	bhi.n	800a06a <_printf_i+0x32>
 800a054:	2f00      	cmp	r7, #0
 800a056:	f000 80d2 	beq.w	800a1fe <_printf_i+0x1c6>
 800a05a:	2f58      	cmp	r7, #88	@ 0x58
 800a05c:	f000 80b9 	beq.w	800a1d2 <_printf_i+0x19a>
 800a060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a064:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a068:	e03a      	b.n	800a0e0 <_printf_i+0xa8>
 800a06a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a06e:	2b15      	cmp	r3, #21
 800a070:	d8f6      	bhi.n	800a060 <_printf_i+0x28>
 800a072:	a101      	add	r1, pc, #4	@ (adr r1, 800a078 <_printf_i+0x40>)
 800a074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a078:	0800a0d1 	.word	0x0800a0d1
 800a07c:	0800a0e5 	.word	0x0800a0e5
 800a080:	0800a061 	.word	0x0800a061
 800a084:	0800a061 	.word	0x0800a061
 800a088:	0800a061 	.word	0x0800a061
 800a08c:	0800a061 	.word	0x0800a061
 800a090:	0800a0e5 	.word	0x0800a0e5
 800a094:	0800a061 	.word	0x0800a061
 800a098:	0800a061 	.word	0x0800a061
 800a09c:	0800a061 	.word	0x0800a061
 800a0a0:	0800a061 	.word	0x0800a061
 800a0a4:	0800a1e5 	.word	0x0800a1e5
 800a0a8:	0800a10f 	.word	0x0800a10f
 800a0ac:	0800a19f 	.word	0x0800a19f
 800a0b0:	0800a061 	.word	0x0800a061
 800a0b4:	0800a061 	.word	0x0800a061
 800a0b8:	0800a207 	.word	0x0800a207
 800a0bc:	0800a061 	.word	0x0800a061
 800a0c0:	0800a10f 	.word	0x0800a10f
 800a0c4:	0800a061 	.word	0x0800a061
 800a0c8:	0800a061 	.word	0x0800a061
 800a0cc:	0800a1a7 	.word	0x0800a1a7
 800a0d0:	6833      	ldr	r3, [r6, #0]
 800a0d2:	1d1a      	adds	r2, r3, #4
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	6032      	str	r2, [r6, #0]
 800a0d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e09d      	b.n	800a220 <_printf_i+0x1e8>
 800a0e4:	6833      	ldr	r3, [r6, #0]
 800a0e6:	6820      	ldr	r0, [r4, #0]
 800a0e8:	1d19      	adds	r1, r3, #4
 800a0ea:	6031      	str	r1, [r6, #0]
 800a0ec:	0606      	lsls	r6, r0, #24
 800a0ee:	d501      	bpl.n	800a0f4 <_printf_i+0xbc>
 800a0f0:	681d      	ldr	r5, [r3, #0]
 800a0f2:	e003      	b.n	800a0fc <_printf_i+0xc4>
 800a0f4:	0645      	lsls	r5, r0, #25
 800a0f6:	d5fb      	bpl.n	800a0f0 <_printf_i+0xb8>
 800a0f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0fc:	2d00      	cmp	r5, #0
 800a0fe:	da03      	bge.n	800a108 <_printf_i+0xd0>
 800a100:	232d      	movs	r3, #45	@ 0x2d
 800a102:	426d      	negs	r5, r5
 800a104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a108:	4859      	ldr	r0, [pc, #356]	@ (800a270 <_printf_i+0x238>)
 800a10a:	230a      	movs	r3, #10
 800a10c:	e011      	b.n	800a132 <_printf_i+0xfa>
 800a10e:	6821      	ldr	r1, [r4, #0]
 800a110:	6833      	ldr	r3, [r6, #0]
 800a112:	0608      	lsls	r0, r1, #24
 800a114:	f853 5b04 	ldr.w	r5, [r3], #4
 800a118:	d402      	bmi.n	800a120 <_printf_i+0xe8>
 800a11a:	0649      	lsls	r1, r1, #25
 800a11c:	bf48      	it	mi
 800a11e:	b2ad      	uxthmi	r5, r5
 800a120:	2f6f      	cmp	r7, #111	@ 0x6f
 800a122:	4853      	ldr	r0, [pc, #332]	@ (800a270 <_printf_i+0x238>)
 800a124:	6033      	str	r3, [r6, #0]
 800a126:	bf14      	ite	ne
 800a128:	230a      	movne	r3, #10
 800a12a:	2308      	moveq	r3, #8
 800a12c:	2100      	movs	r1, #0
 800a12e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a132:	6866      	ldr	r6, [r4, #4]
 800a134:	60a6      	str	r6, [r4, #8]
 800a136:	2e00      	cmp	r6, #0
 800a138:	bfa2      	ittt	ge
 800a13a:	6821      	ldrge	r1, [r4, #0]
 800a13c:	f021 0104 	bicge.w	r1, r1, #4
 800a140:	6021      	strge	r1, [r4, #0]
 800a142:	b90d      	cbnz	r5, 800a148 <_printf_i+0x110>
 800a144:	2e00      	cmp	r6, #0
 800a146:	d04b      	beq.n	800a1e0 <_printf_i+0x1a8>
 800a148:	4616      	mov	r6, r2
 800a14a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a14e:	fb03 5711 	mls	r7, r3, r1, r5
 800a152:	5dc7      	ldrb	r7, [r0, r7]
 800a154:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a158:	462f      	mov	r7, r5
 800a15a:	42bb      	cmp	r3, r7
 800a15c:	460d      	mov	r5, r1
 800a15e:	d9f4      	bls.n	800a14a <_printf_i+0x112>
 800a160:	2b08      	cmp	r3, #8
 800a162:	d10b      	bne.n	800a17c <_printf_i+0x144>
 800a164:	6823      	ldr	r3, [r4, #0]
 800a166:	07df      	lsls	r7, r3, #31
 800a168:	d508      	bpl.n	800a17c <_printf_i+0x144>
 800a16a:	6923      	ldr	r3, [r4, #16]
 800a16c:	6861      	ldr	r1, [r4, #4]
 800a16e:	4299      	cmp	r1, r3
 800a170:	bfde      	ittt	le
 800a172:	2330      	movle	r3, #48	@ 0x30
 800a174:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a178:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a17c:	1b92      	subs	r2, r2, r6
 800a17e:	6122      	str	r2, [r4, #16]
 800a180:	f8cd a000 	str.w	sl, [sp]
 800a184:	464b      	mov	r3, r9
 800a186:	aa03      	add	r2, sp, #12
 800a188:	4621      	mov	r1, r4
 800a18a:	4640      	mov	r0, r8
 800a18c:	f7ff fee6 	bl	8009f5c <_printf_common>
 800a190:	3001      	adds	r0, #1
 800a192:	d14a      	bne.n	800a22a <_printf_i+0x1f2>
 800a194:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a198:	b004      	add	sp, #16
 800a19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	f043 0320 	orr.w	r3, r3, #32
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	4833      	ldr	r0, [pc, #204]	@ (800a274 <_printf_i+0x23c>)
 800a1a8:	2778      	movs	r7, #120	@ 0x78
 800a1aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	6831      	ldr	r1, [r6, #0]
 800a1b2:	061f      	lsls	r7, r3, #24
 800a1b4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a1b8:	d402      	bmi.n	800a1c0 <_printf_i+0x188>
 800a1ba:	065f      	lsls	r7, r3, #25
 800a1bc:	bf48      	it	mi
 800a1be:	b2ad      	uxthmi	r5, r5
 800a1c0:	6031      	str	r1, [r6, #0]
 800a1c2:	07d9      	lsls	r1, r3, #31
 800a1c4:	bf44      	itt	mi
 800a1c6:	f043 0320 	orrmi.w	r3, r3, #32
 800a1ca:	6023      	strmi	r3, [r4, #0]
 800a1cc:	b11d      	cbz	r5, 800a1d6 <_printf_i+0x19e>
 800a1ce:	2310      	movs	r3, #16
 800a1d0:	e7ac      	b.n	800a12c <_printf_i+0xf4>
 800a1d2:	4827      	ldr	r0, [pc, #156]	@ (800a270 <_printf_i+0x238>)
 800a1d4:	e7e9      	b.n	800a1aa <_printf_i+0x172>
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	f023 0320 	bic.w	r3, r3, #32
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	e7f6      	b.n	800a1ce <_printf_i+0x196>
 800a1e0:	4616      	mov	r6, r2
 800a1e2:	e7bd      	b.n	800a160 <_printf_i+0x128>
 800a1e4:	6833      	ldr	r3, [r6, #0]
 800a1e6:	6825      	ldr	r5, [r4, #0]
 800a1e8:	6961      	ldr	r1, [r4, #20]
 800a1ea:	1d18      	adds	r0, r3, #4
 800a1ec:	6030      	str	r0, [r6, #0]
 800a1ee:	062e      	lsls	r6, r5, #24
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	d501      	bpl.n	800a1f8 <_printf_i+0x1c0>
 800a1f4:	6019      	str	r1, [r3, #0]
 800a1f6:	e002      	b.n	800a1fe <_printf_i+0x1c6>
 800a1f8:	0668      	lsls	r0, r5, #25
 800a1fa:	d5fb      	bpl.n	800a1f4 <_printf_i+0x1bc>
 800a1fc:	8019      	strh	r1, [r3, #0]
 800a1fe:	2300      	movs	r3, #0
 800a200:	6123      	str	r3, [r4, #16]
 800a202:	4616      	mov	r6, r2
 800a204:	e7bc      	b.n	800a180 <_printf_i+0x148>
 800a206:	6833      	ldr	r3, [r6, #0]
 800a208:	1d1a      	adds	r2, r3, #4
 800a20a:	6032      	str	r2, [r6, #0]
 800a20c:	681e      	ldr	r6, [r3, #0]
 800a20e:	6862      	ldr	r2, [r4, #4]
 800a210:	2100      	movs	r1, #0
 800a212:	4630      	mov	r0, r6
 800a214:	f7f6 f864 	bl	80002e0 <memchr>
 800a218:	b108      	cbz	r0, 800a21e <_printf_i+0x1e6>
 800a21a:	1b80      	subs	r0, r0, r6
 800a21c:	6060      	str	r0, [r4, #4]
 800a21e:	6863      	ldr	r3, [r4, #4]
 800a220:	6123      	str	r3, [r4, #16]
 800a222:	2300      	movs	r3, #0
 800a224:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a228:	e7aa      	b.n	800a180 <_printf_i+0x148>
 800a22a:	6923      	ldr	r3, [r4, #16]
 800a22c:	4632      	mov	r2, r6
 800a22e:	4649      	mov	r1, r9
 800a230:	4640      	mov	r0, r8
 800a232:	47d0      	blx	sl
 800a234:	3001      	adds	r0, #1
 800a236:	d0ad      	beq.n	800a194 <_printf_i+0x15c>
 800a238:	6823      	ldr	r3, [r4, #0]
 800a23a:	079b      	lsls	r3, r3, #30
 800a23c:	d413      	bmi.n	800a266 <_printf_i+0x22e>
 800a23e:	68e0      	ldr	r0, [r4, #12]
 800a240:	9b03      	ldr	r3, [sp, #12]
 800a242:	4298      	cmp	r0, r3
 800a244:	bfb8      	it	lt
 800a246:	4618      	movlt	r0, r3
 800a248:	e7a6      	b.n	800a198 <_printf_i+0x160>
 800a24a:	2301      	movs	r3, #1
 800a24c:	4632      	mov	r2, r6
 800a24e:	4649      	mov	r1, r9
 800a250:	4640      	mov	r0, r8
 800a252:	47d0      	blx	sl
 800a254:	3001      	adds	r0, #1
 800a256:	d09d      	beq.n	800a194 <_printf_i+0x15c>
 800a258:	3501      	adds	r5, #1
 800a25a:	68e3      	ldr	r3, [r4, #12]
 800a25c:	9903      	ldr	r1, [sp, #12]
 800a25e:	1a5b      	subs	r3, r3, r1
 800a260:	42ab      	cmp	r3, r5
 800a262:	dcf2      	bgt.n	800a24a <_printf_i+0x212>
 800a264:	e7eb      	b.n	800a23e <_printf_i+0x206>
 800a266:	2500      	movs	r5, #0
 800a268:	f104 0619 	add.w	r6, r4, #25
 800a26c:	e7f5      	b.n	800a25a <_printf_i+0x222>
 800a26e:	bf00      	nop
 800a270:	0800c6a6 	.word	0x0800c6a6
 800a274:	0800c6b7 	.word	0x0800c6b7

0800a278 <std>:
 800a278:	2300      	movs	r3, #0
 800a27a:	b510      	push	{r4, lr}
 800a27c:	4604      	mov	r4, r0
 800a27e:	e9c0 3300 	strd	r3, r3, [r0]
 800a282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a286:	6083      	str	r3, [r0, #8]
 800a288:	8181      	strh	r1, [r0, #12]
 800a28a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a28c:	81c2      	strh	r2, [r0, #14]
 800a28e:	6183      	str	r3, [r0, #24]
 800a290:	4619      	mov	r1, r3
 800a292:	2208      	movs	r2, #8
 800a294:	305c      	adds	r0, #92	@ 0x5c
 800a296:	f000 f9f9 	bl	800a68c <memset>
 800a29a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d0 <std+0x58>)
 800a29c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a29e:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d4 <std+0x5c>)
 800a2a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d8 <std+0x60>)
 800a2a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a2dc <std+0x64>)
 800a2a8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e0 <std+0x68>)
 800a2ac:	6224      	str	r4, [r4, #32]
 800a2ae:	429c      	cmp	r4, r3
 800a2b0:	d006      	beq.n	800a2c0 <std+0x48>
 800a2b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2b6:	4294      	cmp	r4, r2
 800a2b8:	d002      	beq.n	800a2c0 <std+0x48>
 800a2ba:	33d0      	adds	r3, #208	@ 0xd0
 800a2bc:	429c      	cmp	r4, r3
 800a2be:	d105      	bne.n	800a2cc <std+0x54>
 800a2c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c8:	f000 ba6c 	b.w	800a7a4 <__retarget_lock_init_recursive>
 800a2cc:	bd10      	pop	{r4, pc}
 800a2ce:	bf00      	nop
 800a2d0:	0800a4dd 	.word	0x0800a4dd
 800a2d4:	0800a4ff 	.word	0x0800a4ff
 800a2d8:	0800a537 	.word	0x0800a537
 800a2dc:	0800a55b 	.word	0x0800a55b
 800a2e0:	24000920 	.word	0x24000920

0800a2e4 <stdio_exit_handler>:
 800a2e4:	4a02      	ldr	r2, [pc, #8]	@ (800a2f0 <stdio_exit_handler+0xc>)
 800a2e6:	4903      	ldr	r1, [pc, #12]	@ (800a2f4 <stdio_exit_handler+0x10>)
 800a2e8:	4803      	ldr	r0, [pc, #12]	@ (800a2f8 <stdio_exit_handler+0x14>)
 800a2ea:	f000 b869 	b.w	800a3c0 <_fwalk_sglue>
 800a2ee:	bf00      	nop
 800a2f0:	24000058 	.word	0x24000058
 800a2f4:	0800bea9 	.word	0x0800bea9
 800a2f8:	24000068 	.word	0x24000068

0800a2fc <cleanup_stdio>:
 800a2fc:	6841      	ldr	r1, [r0, #4]
 800a2fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a330 <cleanup_stdio+0x34>)
 800a300:	4299      	cmp	r1, r3
 800a302:	b510      	push	{r4, lr}
 800a304:	4604      	mov	r4, r0
 800a306:	d001      	beq.n	800a30c <cleanup_stdio+0x10>
 800a308:	f001 fdce 	bl	800bea8 <_fflush_r>
 800a30c:	68a1      	ldr	r1, [r4, #8]
 800a30e:	4b09      	ldr	r3, [pc, #36]	@ (800a334 <cleanup_stdio+0x38>)
 800a310:	4299      	cmp	r1, r3
 800a312:	d002      	beq.n	800a31a <cleanup_stdio+0x1e>
 800a314:	4620      	mov	r0, r4
 800a316:	f001 fdc7 	bl	800bea8 <_fflush_r>
 800a31a:	68e1      	ldr	r1, [r4, #12]
 800a31c:	4b06      	ldr	r3, [pc, #24]	@ (800a338 <cleanup_stdio+0x3c>)
 800a31e:	4299      	cmp	r1, r3
 800a320:	d004      	beq.n	800a32c <cleanup_stdio+0x30>
 800a322:	4620      	mov	r0, r4
 800a324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a328:	f001 bdbe 	b.w	800bea8 <_fflush_r>
 800a32c:	bd10      	pop	{r4, pc}
 800a32e:	bf00      	nop
 800a330:	24000920 	.word	0x24000920
 800a334:	24000988 	.word	0x24000988
 800a338:	240009f0 	.word	0x240009f0

0800a33c <global_stdio_init.part.0>:
 800a33c:	b510      	push	{r4, lr}
 800a33e:	4b0b      	ldr	r3, [pc, #44]	@ (800a36c <global_stdio_init.part.0+0x30>)
 800a340:	4c0b      	ldr	r4, [pc, #44]	@ (800a370 <global_stdio_init.part.0+0x34>)
 800a342:	4a0c      	ldr	r2, [pc, #48]	@ (800a374 <global_stdio_init.part.0+0x38>)
 800a344:	601a      	str	r2, [r3, #0]
 800a346:	4620      	mov	r0, r4
 800a348:	2200      	movs	r2, #0
 800a34a:	2104      	movs	r1, #4
 800a34c:	f7ff ff94 	bl	800a278 <std>
 800a350:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a354:	2201      	movs	r2, #1
 800a356:	2109      	movs	r1, #9
 800a358:	f7ff ff8e 	bl	800a278 <std>
 800a35c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a360:	2202      	movs	r2, #2
 800a362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a366:	2112      	movs	r1, #18
 800a368:	f7ff bf86 	b.w	800a278 <std>
 800a36c:	24000a58 	.word	0x24000a58
 800a370:	24000920 	.word	0x24000920
 800a374:	0800a2e5 	.word	0x0800a2e5

0800a378 <__sfp_lock_acquire>:
 800a378:	4801      	ldr	r0, [pc, #4]	@ (800a380 <__sfp_lock_acquire+0x8>)
 800a37a:	f000 ba14 	b.w	800a7a6 <__retarget_lock_acquire_recursive>
 800a37e:	bf00      	nop
 800a380:	24000a61 	.word	0x24000a61

0800a384 <__sfp_lock_release>:
 800a384:	4801      	ldr	r0, [pc, #4]	@ (800a38c <__sfp_lock_release+0x8>)
 800a386:	f000 ba0f 	b.w	800a7a8 <__retarget_lock_release_recursive>
 800a38a:	bf00      	nop
 800a38c:	24000a61 	.word	0x24000a61

0800a390 <__sinit>:
 800a390:	b510      	push	{r4, lr}
 800a392:	4604      	mov	r4, r0
 800a394:	f7ff fff0 	bl	800a378 <__sfp_lock_acquire>
 800a398:	6a23      	ldr	r3, [r4, #32]
 800a39a:	b11b      	cbz	r3, 800a3a4 <__sinit+0x14>
 800a39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3a0:	f7ff bff0 	b.w	800a384 <__sfp_lock_release>
 800a3a4:	4b04      	ldr	r3, [pc, #16]	@ (800a3b8 <__sinit+0x28>)
 800a3a6:	6223      	str	r3, [r4, #32]
 800a3a8:	4b04      	ldr	r3, [pc, #16]	@ (800a3bc <__sinit+0x2c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1f5      	bne.n	800a39c <__sinit+0xc>
 800a3b0:	f7ff ffc4 	bl	800a33c <global_stdio_init.part.0>
 800a3b4:	e7f2      	b.n	800a39c <__sinit+0xc>
 800a3b6:	bf00      	nop
 800a3b8:	0800a2fd 	.word	0x0800a2fd
 800a3bc:	24000a58 	.word	0x24000a58

0800a3c0 <_fwalk_sglue>:
 800a3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3c4:	4607      	mov	r7, r0
 800a3c6:	4688      	mov	r8, r1
 800a3c8:	4614      	mov	r4, r2
 800a3ca:	2600      	movs	r6, #0
 800a3cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3d0:	f1b9 0901 	subs.w	r9, r9, #1
 800a3d4:	d505      	bpl.n	800a3e2 <_fwalk_sglue+0x22>
 800a3d6:	6824      	ldr	r4, [r4, #0]
 800a3d8:	2c00      	cmp	r4, #0
 800a3da:	d1f7      	bne.n	800a3cc <_fwalk_sglue+0xc>
 800a3dc:	4630      	mov	r0, r6
 800a3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3e2:	89ab      	ldrh	r3, [r5, #12]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d907      	bls.n	800a3f8 <_fwalk_sglue+0x38>
 800a3e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	d003      	beq.n	800a3f8 <_fwalk_sglue+0x38>
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	47c0      	blx	r8
 800a3f6:	4306      	orrs	r6, r0
 800a3f8:	3568      	adds	r5, #104	@ 0x68
 800a3fa:	e7e9      	b.n	800a3d0 <_fwalk_sglue+0x10>

0800a3fc <iprintf>:
 800a3fc:	b40f      	push	{r0, r1, r2, r3}
 800a3fe:	b507      	push	{r0, r1, r2, lr}
 800a400:	4906      	ldr	r1, [pc, #24]	@ (800a41c <iprintf+0x20>)
 800a402:	ab04      	add	r3, sp, #16
 800a404:	6808      	ldr	r0, [r1, #0]
 800a406:	f853 2b04 	ldr.w	r2, [r3], #4
 800a40a:	6881      	ldr	r1, [r0, #8]
 800a40c:	9301      	str	r3, [sp, #4]
 800a40e:	f001 fbaf 	bl	800bb70 <_vfiprintf_r>
 800a412:	b003      	add	sp, #12
 800a414:	f85d eb04 	ldr.w	lr, [sp], #4
 800a418:	b004      	add	sp, #16
 800a41a:	4770      	bx	lr
 800a41c:	24000064 	.word	0x24000064

0800a420 <_puts_r>:
 800a420:	6a03      	ldr	r3, [r0, #32]
 800a422:	b570      	push	{r4, r5, r6, lr}
 800a424:	6884      	ldr	r4, [r0, #8]
 800a426:	4605      	mov	r5, r0
 800a428:	460e      	mov	r6, r1
 800a42a:	b90b      	cbnz	r3, 800a430 <_puts_r+0x10>
 800a42c:	f7ff ffb0 	bl	800a390 <__sinit>
 800a430:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a432:	07db      	lsls	r3, r3, #31
 800a434:	d405      	bmi.n	800a442 <_puts_r+0x22>
 800a436:	89a3      	ldrh	r3, [r4, #12]
 800a438:	0598      	lsls	r0, r3, #22
 800a43a:	d402      	bmi.n	800a442 <_puts_r+0x22>
 800a43c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a43e:	f000 f9b2 	bl	800a7a6 <__retarget_lock_acquire_recursive>
 800a442:	89a3      	ldrh	r3, [r4, #12]
 800a444:	0719      	lsls	r1, r3, #28
 800a446:	d502      	bpl.n	800a44e <_puts_r+0x2e>
 800a448:	6923      	ldr	r3, [r4, #16]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d135      	bne.n	800a4ba <_puts_r+0x9a>
 800a44e:	4621      	mov	r1, r4
 800a450:	4628      	mov	r0, r5
 800a452:	f000 f8c5 	bl	800a5e0 <__swsetup_r>
 800a456:	b380      	cbz	r0, 800a4ba <_puts_r+0x9a>
 800a458:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a45c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a45e:	07da      	lsls	r2, r3, #31
 800a460:	d405      	bmi.n	800a46e <_puts_r+0x4e>
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	059b      	lsls	r3, r3, #22
 800a466:	d402      	bmi.n	800a46e <_puts_r+0x4e>
 800a468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a46a:	f000 f99d 	bl	800a7a8 <__retarget_lock_release_recursive>
 800a46e:	4628      	mov	r0, r5
 800a470:	bd70      	pop	{r4, r5, r6, pc}
 800a472:	2b00      	cmp	r3, #0
 800a474:	da04      	bge.n	800a480 <_puts_r+0x60>
 800a476:	69a2      	ldr	r2, [r4, #24]
 800a478:	429a      	cmp	r2, r3
 800a47a:	dc17      	bgt.n	800a4ac <_puts_r+0x8c>
 800a47c:	290a      	cmp	r1, #10
 800a47e:	d015      	beq.n	800a4ac <_puts_r+0x8c>
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	6022      	str	r2, [r4, #0]
 800a486:	7019      	strb	r1, [r3, #0]
 800a488:	68a3      	ldr	r3, [r4, #8]
 800a48a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a48e:	3b01      	subs	r3, #1
 800a490:	60a3      	str	r3, [r4, #8]
 800a492:	2900      	cmp	r1, #0
 800a494:	d1ed      	bne.n	800a472 <_puts_r+0x52>
 800a496:	2b00      	cmp	r3, #0
 800a498:	da11      	bge.n	800a4be <_puts_r+0x9e>
 800a49a:	4622      	mov	r2, r4
 800a49c:	210a      	movs	r1, #10
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f000 f85f 	bl	800a562 <__swbuf_r>
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	d0d7      	beq.n	800a458 <_puts_r+0x38>
 800a4a8:	250a      	movs	r5, #10
 800a4aa:	e7d7      	b.n	800a45c <_puts_r+0x3c>
 800a4ac:	4622      	mov	r2, r4
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	f000 f857 	bl	800a562 <__swbuf_r>
 800a4b4:	3001      	adds	r0, #1
 800a4b6:	d1e7      	bne.n	800a488 <_puts_r+0x68>
 800a4b8:	e7ce      	b.n	800a458 <_puts_r+0x38>
 800a4ba:	3e01      	subs	r6, #1
 800a4bc:	e7e4      	b.n	800a488 <_puts_r+0x68>
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	1c5a      	adds	r2, r3, #1
 800a4c2:	6022      	str	r2, [r4, #0]
 800a4c4:	220a      	movs	r2, #10
 800a4c6:	701a      	strb	r2, [r3, #0]
 800a4c8:	e7ee      	b.n	800a4a8 <_puts_r+0x88>
	...

0800a4cc <puts>:
 800a4cc:	4b02      	ldr	r3, [pc, #8]	@ (800a4d8 <puts+0xc>)
 800a4ce:	4601      	mov	r1, r0
 800a4d0:	6818      	ldr	r0, [r3, #0]
 800a4d2:	f7ff bfa5 	b.w	800a420 <_puts_r>
 800a4d6:	bf00      	nop
 800a4d8:	24000064 	.word	0x24000064

0800a4dc <__sread>:
 800a4dc:	b510      	push	{r4, lr}
 800a4de:	460c      	mov	r4, r1
 800a4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e4:	f000 f900 	bl	800a6e8 <_read_r>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	bfab      	itete	ge
 800a4ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a4ee:	89a3      	ldrhlt	r3, [r4, #12]
 800a4f0:	181b      	addge	r3, r3, r0
 800a4f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a4f6:	bfac      	ite	ge
 800a4f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a4fa:	81a3      	strhlt	r3, [r4, #12]
 800a4fc:	bd10      	pop	{r4, pc}

0800a4fe <__swrite>:
 800a4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a502:	461f      	mov	r7, r3
 800a504:	898b      	ldrh	r3, [r1, #12]
 800a506:	05db      	lsls	r3, r3, #23
 800a508:	4605      	mov	r5, r0
 800a50a:	460c      	mov	r4, r1
 800a50c:	4616      	mov	r6, r2
 800a50e:	d505      	bpl.n	800a51c <__swrite+0x1e>
 800a510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a514:	2302      	movs	r3, #2
 800a516:	2200      	movs	r2, #0
 800a518:	f000 f8d4 	bl	800a6c4 <_lseek_r>
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a522:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a526:	81a3      	strh	r3, [r4, #12]
 800a528:	4632      	mov	r2, r6
 800a52a:	463b      	mov	r3, r7
 800a52c:	4628      	mov	r0, r5
 800a52e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a532:	f000 b8fb 	b.w	800a72c <_write_r>

0800a536 <__sseek>:
 800a536:	b510      	push	{r4, lr}
 800a538:	460c      	mov	r4, r1
 800a53a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a53e:	f000 f8c1 	bl	800a6c4 <_lseek_r>
 800a542:	1c43      	adds	r3, r0, #1
 800a544:	89a3      	ldrh	r3, [r4, #12]
 800a546:	bf15      	itete	ne
 800a548:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a54a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a54e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a552:	81a3      	strheq	r3, [r4, #12]
 800a554:	bf18      	it	ne
 800a556:	81a3      	strhne	r3, [r4, #12]
 800a558:	bd10      	pop	{r4, pc}

0800a55a <__sclose>:
 800a55a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a55e:	f000 b8a1 	b.w	800a6a4 <_close_r>

0800a562 <__swbuf_r>:
 800a562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a564:	460e      	mov	r6, r1
 800a566:	4614      	mov	r4, r2
 800a568:	4605      	mov	r5, r0
 800a56a:	b118      	cbz	r0, 800a574 <__swbuf_r+0x12>
 800a56c:	6a03      	ldr	r3, [r0, #32]
 800a56e:	b90b      	cbnz	r3, 800a574 <__swbuf_r+0x12>
 800a570:	f7ff ff0e 	bl	800a390 <__sinit>
 800a574:	69a3      	ldr	r3, [r4, #24]
 800a576:	60a3      	str	r3, [r4, #8]
 800a578:	89a3      	ldrh	r3, [r4, #12]
 800a57a:	071a      	lsls	r2, r3, #28
 800a57c:	d501      	bpl.n	800a582 <__swbuf_r+0x20>
 800a57e:	6923      	ldr	r3, [r4, #16]
 800a580:	b943      	cbnz	r3, 800a594 <__swbuf_r+0x32>
 800a582:	4621      	mov	r1, r4
 800a584:	4628      	mov	r0, r5
 800a586:	f000 f82b 	bl	800a5e0 <__swsetup_r>
 800a58a:	b118      	cbz	r0, 800a594 <__swbuf_r+0x32>
 800a58c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a590:	4638      	mov	r0, r7
 800a592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a594:	6823      	ldr	r3, [r4, #0]
 800a596:	6922      	ldr	r2, [r4, #16]
 800a598:	1a98      	subs	r0, r3, r2
 800a59a:	6963      	ldr	r3, [r4, #20]
 800a59c:	b2f6      	uxtb	r6, r6
 800a59e:	4283      	cmp	r3, r0
 800a5a0:	4637      	mov	r7, r6
 800a5a2:	dc05      	bgt.n	800a5b0 <__swbuf_r+0x4e>
 800a5a4:	4621      	mov	r1, r4
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	f001 fc7e 	bl	800bea8 <_fflush_r>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d1ed      	bne.n	800a58c <__swbuf_r+0x2a>
 800a5b0:	68a3      	ldr	r3, [r4, #8]
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	60a3      	str	r3, [r4, #8]
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	1c5a      	adds	r2, r3, #1
 800a5ba:	6022      	str	r2, [r4, #0]
 800a5bc:	701e      	strb	r6, [r3, #0]
 800a5be:	6962      	ldr	r2, [r4, #20]
 800a5c0:	1c43      	adds	r3, r0, #1
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d004      	beq.n	800a5d0 <__swbuf_r+0x6e>
 800a5c6:	89a3      	ldrh	r3, [r4, #12]
 800a5c8:	07db      	lsls	r3, r3, #31
 800a5ca:	d5e1      	bpl.n	800a590 <__swbuf_r+0x2e>
 800a5cc:	2e0a      	cmp	r6, #10
 800a5ce:	d1df      	bne.n	800a590 <__swbuf_r+0x2e>
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	f001 fc68 	bl	800bea8 <_fflush_r>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	d0d9      	beq.n	800a590 <__swbuf_r+0x2e>
 800a5dc:	e7d6      	b.n	800a58c <__swbuf_r+0x2a>
	...

0800a5e0 <__swsetup_r>:
 800a5e0:	b538      	push	{r3, r4, r5, lr}
 800a5e2:	4b29      	ldr	r3, [pc, #164]	@ (800a688 <__swsetup_r+0xa8>)
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	6818      	ldr	r0, [r3, #0]
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	b118      	cbz	r0, 800a5f4 <__swsetup_r+0x14>
 800a5ec:	6a03      	ldr	r3, [r0, #32]
 800a5ee:	b90b      	cbnz	r3, 800a5f4 <__swsetup_r+0x14>
 800a5f0:	f7ff fece 	bl	800a390 <__sinit>
 800a5f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5f8:	0719      	lsls	r1, r3, #28
 800a5fa:	d422      	bmi.n	800a642 <__swsetup_r+0x62>
 800a5fc:	06da      	lsls	r2, r3, #27
 800a5fe:	d407      	bmi.n	800a610 <__swsetup_r+0x30>
 800a600:	2209      	movs	r2, #9
 800a602:	602a      	str	r2, [r5, #0]
 800a604:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a608:	81a3      	strh	r3, [r4, #12]
 800a60a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a60e:	e033      	b.n	800a678 <__swsetup_r+0x98>
 800a610:	0758      	lsls	r0, r3, #29
 800a612:	d512      	bpl.n	800a63a <__swsetup_r+0x5a>
 800a614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a616:	b141      	cbz	r1, 800a62a <__swsetup_r+0x4a>
 800a618:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a61c:	4299      	cmp	r1, r3
 800a61e:	d002      	beq.n	800a626 <__swsetup_r+0x46>
 800a620:	4628      	mov	r0, r5
 800a622:	f000 feaf 	bl	800b384 <_free_r>
 800a626:	2300      	movs	r3, #0
 800a628:	6363      	str	r3, [r4, #52]	@ 0x34
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a630:	81a3      	strh	r3, [r4, #12]
 800a632:	2300      	movs	r3, #0
 800a634:	6063      	str	r3, [r4, #4]
 800a636:	6923      	ldr	r3, [r4, #16]
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	f043 0308 	orr.w	r3, r3, #8
 800a640:	81a3      	strh	r3, [r4, #12]
 800a642:	6923      	ldr	r3, [r4, #16]
 800a644:	b94b      	cbnz	r3, 800a65a <__swsetup_r+0x7a>
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a64c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a650:	d003      	beq.n	800a65a <__swsetup_r+0x7a>
 800a652:	4621      	mov	r1, r4
 800a654:	4628      	mov	r0, r5
 800a656:	f001 fc75 	bl	800bf44 <__smakebuf_r>
 800a65a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a65e:	f013 0201 	ands.w	r2, r3, #1
 800a662:	d00a      	beq.n	800a67a <__swsetup_r+0x9a>
 800a664:	2200      	movs	r2, #0
 800a666:	60a2      	str	r2, [r4, #8]
 800a668:	6962      	ldr	r2, [r4, #20]
 800a66a:	4252      	negs	r2, r2
 800a66c:	61a2      	str	r2, [r4, #24]
 800a66e:	6922      	ldr	r2, [r4, #16]
 800a670:	b942      	cbnz	r2, 800a684 <__swsetup_r+0xa4>
 800a672:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a676:	d1c5      	bne.n	800a604 <__swsetup_r+0x24>
 800a678:	bd38      	pop	{r3, r4, r5, pc}
 800a67a:	0799      	lsls	r1, r3, #30
 800a67c:	bf58      	it	pl
 800a67e:	6962      	ldrpl	r2, [r4, #20]
 800a680:	60a2      	str	r2, [r4, #8]
 800a682:	e7f4      	b.n	800a66e <__swsetup_r+0x8e>
 800a684:	2000      	movs	r0, #0
 800a686:	e7f7      	b.n	800a678 <__swsetup_r+0x98>
 800a688:	24000064 	.word	0x24000064

0800a68c <memset>:
 800a68c:	4402      	add	r2, r0
 800a68e:	4603      	mov	r3, r0
 800a690:	4293      	cmp	r3, r2
 800a692:	d100      	bne.n	800a696 <memset+0xa>
 800a694:	4770      	bx	lr
 800a696:	f803 1b01 	strb.w	r1, [r3], #1
 800a69a:	e7f9      	b.n	800a690 <memset+0x4>

0800a69c <_localeconv_r>:
 800a69c:	4800      	ldr	r0, [pc, #0]	@ (800a6a0 <_localeconv_r+0x4>)
 800a69e:	4770      	bx	lr
 800a6a0:	240001a4 	.word	0x240001a4

0800a6a4 <_close_r>:
 800a6a4:	b538      	push	{r3, r4, r5, lr}
 800a6a6:	4d06      	ldr	r5, [pc, #24]	@ (800a6c0 <_close_r+0x1c>)
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	4608      	mov	r0, r1
 800a6ae:	602b      	str	r3, [r5, #0]
 800a6b0:	f7f8 fbd5 	bl	8002e5e <_close>
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	d102      	bne.n	800a6be <_close_r+0x1a>
 800a6b8:	682b      	ldr	r3, [r5, #0]
 800a6ba:	b103      	cbz	r3, 800a6be <_close_r+0x1a>
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	bd38      	pop	{r3, r4, r5, pc}
 800a6c0:	24000a5c 	.word	0x24000a5c

0800a6c4 <_lseek_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	4d07      	ldr	r5, [pc, #28]	@ (800a6e4 <_lseek_r+0x20>)
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	4608      	mov	r0, r1
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	602a      	str	r2, [r5, #0]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	f7f8 fbea 	bl	8002eac <_lseek>
 800a6d8:	1c43      	adds	r3, r0, #1
 800a6da:	d102      	bne.n	800a6e2 <_lseek_r+0x1e>
 800a6dc:	682b      	ldr	r3, [r5, #0]
 800a6de:	b103      	cbz	r3, 800a6e2 <_lseek_r+0x1e>
 800a6e0:	6023      	str	r3, [r4, #0]
 800a6e2:	bd38      	pop	{r3, r4, r5, pc}
 800a6e4:	24000a5c 	.word	0x24000a5c

0800a6e8 <_read_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d07      	ldr	r5, [pc, #28]	@ (800a708 <_read_r+0x20>)
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	4608      	mov	r0, r1
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	602a      	str	r2, [r5, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f7f8 fb78 	bl	8002dec <_read>
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	d102      	bne.n	800a706 <_read_r+0x1e>
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	b103      	cbz	r3, 800a706 <_read_r+0x1e>
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	bd38      	pop	{r3, r4, r5, pc}
 800a708:	24000a5c 	.word	0x24000a5c

0800a70c <_sbrk_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	4d06      	ldr	r5, [pc, #24]	@ (800a728 <_sbrk_r+0x1c>)
 800a710:	2300      	movs	r3, #0
 800a712:	4604      	mov	r4, r0
 800a714:	4608      	mov	r0, r1
 800a716:	602b      	str	r3, [r5, #0]
 800a718:	f7f8 fbd6 	bl	8002ec8 <_sbrk>
 800a71c:	1c43      	adds	r3, r0, #1
 800a71e:	d102      	bne.n	800a726 <_sbrk_r+0x1a>
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	b103      	cbz	r3, 800a726 <_sbrk_r+0x1a>
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	bd38      	pop	{r3, r4, r5, pc}
 800a728:	24000a5c 	.word	0x24000a5c

0800a72c <_write_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	4d07      	ldr	r5, [pc, #28]	@ (800a74c <_write_r+0x20>)
 800a730:	4604      	mov	r4, r0
 800a732:	4608      	mov	r0, r1
 800a734:	4611      	mov	r1, r2
 800a736:	2200      	movs	r2, #0
 800a738:	602a      	str	r2, [r5, #0]
 800a73a:	461a      	mov	r2, r3
 800a73c:	f7f8 fb73 	bl	8002e26 <_write>
 800a740:	1c43      	adds	r3, r0, #1
 800a742:	d102      	bne.n	800a74a <_write_r+0x1e>
 800a744:	682b      	ldr	r3, [r5, #0]
 800a746:	b103      	cbz	r3, 800a74a <_write_r+0x1e>
 800a748:	6023      	str	r3, [r4, #0]
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	24000a5c 	.word	0x24000a5c

0800a750 <__errno>:
 800a750:	4b01      	ldr	r3, [pc, #4]	@ (800a758 <__errno+0x8>)
 800a752:	6818      	ldr	r0, [r3, #0]
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	24000064 	.word	0x24000064

0800a75c <__libc_init_array>:
 800a75c:	b570      	push	{r4, r5, r6, lr}
 800a75e:	4d0d      	ldr	r5, [pc, #52]	@ (800a794 <__libc_init_array+0x38>)
 800a760:	4c0d      	ldr	r4, [pc, #52]	@ (800a798 <__libc_init_array+0x3c>)
 800a762:	1b64      	subs	r4, r4, r5
 800a764:	10a4      	asrs	r4, r4, #2
 800a766:	2600      	movs	r6, #0
 800a768:	42a6      	cmp	r6, r4
 800a76a:	d109      	bne.n	800a780 <__libc_init_array+0x24>
 800a76c:	4d0b      	ldr	r5, [pc, #44]	@ (800a79c <__libc_init_array+0x40>)
 800a76e:	4c0c      	ldr	r4, [pc, #48]	@ (800a7a0 <__libc_init_array+0x44>)
 800a770:	f001 fcf6 	bl	800c160 <_init>
 800a774:	1b64      	subs	r4, r4, r5
 800a776:	10a4      	asrs	r4, r4, #2
 800a778:	2600      	movs	r6, #0
 800a77a:	42a6      	cmp	r6, r4
 800a77c:	d105      	bne.n	800a78a <__libc_init_array+0x2e>
 800a77e:	bd70      	pop	{r4, r5, r6, pc}
 800a780:	f855 3b04 	ldr.w	r3, [r5], #4
 800a784:	4798      	blx	r3
 800a786:	3601      	adds	r6, #1
 800a788:	e7ee      	b.n	800a768 <__libc_init_array+0xc>
 800a78a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a78e:	4798      	blx	r3
 800a790:	3601      	adds	r6, #1
 800a792:	e7f2      	b.n	800a77a <__libc_init_array+0x1e>
 800a794:	0800ca10 	.word	0x0800ca10
 800a798:	0800ca10 	.word	0x0800ca10
 800a79c:	0800ca10 	.word	0x0800ca10
 800a7a0:	0800ca14 	.word	0x0800ca14

0800a7a4 <__retarget_lock_init_recursive>:
 800a7a4:	4770      	bx	lr

0800a7a6 <__retarget_lock_acquire_recursive>:
 800a7a6:	4770      	bx	lr

0800a7a8 <__retarget_lock_release_recursive>:
 800a7a8:	4770      	bx	lr

0800a7aa <memcpy>:
 800a7aa:	440a      	add	r2, r1
 800a7ac:	4291      	cmp	r1, r2
 800a7ae:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a7b2:	d100      	bne.n	800a7b6 <memcpy+0xc>
 800a7b4:	4770      	bx	lr
 800a7b6:	b510      	push	{r4, lr}
 800a7b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7c0:	4291      	cmp	r1, r2
 800a7c2:	d1f9      	bne.n	800a7b8 <memcpy+0xe>
 800a7c4:	bd10      	pop	{r4, pc}

0800a7c6 <quorem>:
 800a7c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ca:	6903      	ldr	r3, [r0, #16]
 800a7cc:	690c      	ldr	r4, [r1, #16]
 800a7ce:	42a3      	cmp	r3, r4
 800a7d0:	4607      	mov	r7, r0
 800a7d2:	db7e      	blt.n	800a8d2 <quorem+0x10c>
 800a7d4:	3c01      	subs	r4, #1
 800a7d6:	f101 0814 	add.w	r8, r1, #20
 800a7da:	00a3      	lsls	r3, r4, #2
 800a7dc:	f100 0514 	add.w	r5, r0, #20
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7e6:	9301      	str	r3, [sp, #4]
 800a7e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7fc:	d32e      	bcc.n	800a85c <quorem+0x96>
 800a7fe:	f04f 0a00 	mov.w	sl, #0
 800a802:	46c4      	mov	ip, r8
 800a804:	46ae      	mov	lr, r5
 800a806:	46d3      	mov	fp, sl
 800a808:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a80c:	b298      	uxth	r0, r3
 800a80e:	fb06 a000 	mla	r0, r6, r0, sl
 800a812:	0c02      	lsrs	r2, r0, #16
 800a814:	0c1b      	lsrs	r3, r3, #16
 800a816:	fb06 2303 	mla	r3, r6, r3, r2
 800a81a:	f8de 2000 	ldr.w	r2, [lr]
 800a81e:	b280      	uxth	r0, r0
 800a820:	b292      	uxth	r2, r2
 800a822:	1a12      	subs	r2, r2, r0
 800a824:	445a      	add	r2, fp
 800a826:	f8de 0000 	ldr.w	r0, [lr]
 800a82a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a82e:	b29b      	uxth	r3, r3
 800a830:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a834:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a838:	b292      	uxth	r2, r2
 800a83a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a83e:	45e1      	cmp	r9, ip
 800a840:	f84e 2b04 	str.w	r2, [lr], #4
 800a844:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a848:	d2de      	bcs.n	800a808 <quorem+0x42>
 800a84a:	9b00      	ldr	r3, [sp, #0]
 800a84c:	58eb      	ldr	r3, [r5, r3]
 800a84e:	b92b      	cbnz	r3, 800a85c <quorem+0x96>
 800a850:	9b01      	ldr	r3, [sp, #4]
 800a852:	3b04      	subs	r3, #4
 800a854:	429d      	cmp	r5, r3
 800a856:	461a      	mov	r2, r3
 800a858:	d32f      	bcc.n	800a8ba <quorem+0xf4>
 800a85a:	613c      	str	r4, [r7, #16]
 800a85c:	4638      	mov	r0, r7
 800a85e:	f001 f855 	bl	800b90c <__mcmp>
 800a862:	2800      	cmp	r0, #0
 800a864:	db25      	blt.n	800a8b2 <quorem+0xec>
 800a866:	4629      	mov	r1, r5
 800a868:	2000      	movs	r0, #0
 800a86a:	f858 2b04 	ldr.w	r2, [r8], #4
 800a86e:	f8d1 c000 	ldr.w	ip, [r1]
 800a872:	fa1f fe82 	uxth.w	lr, r2
 800a876:	fa1f f38c 	uxth.w	r3, ip
 800a87a:	eba3 030e 	sub.w	r3, r3, lr
 800a87e:	4403      	add	r3, r0
 800a880:	0c12      	lsrs	r2, r2, #16
 800a882:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a886:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a890:	45c1      	cmp	r9, r8
 800a892:	f841 3b04 	str.w	r3, [r1], #4
 800a896:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a89a:	d2e6      	bcs.n	800a86a <quorem+0xa4>
 800a89c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8a4:	b922      	cbnz	r2, 800a8b0 <quorem+0xea>
 800a8a6:	3b04      	subs	r3, #4
 800a8a8:	429d      	cmp	r5, r3
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	d30b      	bcc.n	800a8c6 <quorem+0x100>
 800a8ae:	613c      	str	r4, [r7, #16]
 800a8b0:	3601      	adds	r6, #1
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	b003      	add	sp, #12
 800a8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ba:	6812      	ldr	r2, [r2, #0]
 800a8bc:	3b04      	subs	r3, #4
 800a8be:	2a00      	cmp	r2, #0
 800a8c0:	d1cb      	bne.n	800a85a <quorem+0x94>
 800a8c2:	3c01      	subs	r4, #1
 800a8c4:	e7c6      	b.n	800a854 <quorem+0x8e>
 800a8c6:	6812      	ldr	r2, [r2, #0]
 800a8c8:	3b04      	subs	r3, #4
 800a8ca:	2a00      	cmp	r2, #0
 800a8cc:	d1ef      	bne.n	800a8ae <quorem+0xe8>
 800a8ce:	3c01      	subs	r4, #1
 800a8d0:	e7ea      	b.n	800a8a8 <quorem+0xe2>
 800a8d2:	2000      	movs	r0, #0
 800a8d4:	e7ee      	b.n	800a8b4 <quorem+0xee>
	...

0800a8d8 <_dtoa_r>:
 800a8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8dc:	ed2d 8b02 	vpush	{d8}
 800a8e0:	69c7      	ldr	r7, [r0, #28]
 800a8e2:	b091      	sub	sp, #68	@ 0x44
 800a8e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a8e8:	ec55 4b10 	vmov	r4, r5, d0
 800a8ec:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a8ee:	9107      	str	r1, [sp, #28]
 800a8f0:	4681      	mov	r9, r0
 800a8f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8f4:	930d      	str	r3, [sp, #52]	@ 0x34
 800a8f6:	b97f      	cbnz	r7, 800a918 <_dtoa_r+0x40>
 800a8f8:	2010      	movs	r0, #16
 800a8fa:	f7fe ffc7 	bl	800988c <malloc>
 800a8fe:	4602      	mov	r2, r0
 800a900:	f8c9 001c 	str.w	r0, [r9, #28]
 800a904:	b920      	cbnz	r0, 800a910 <_dtoa_r+0x38>
 800a906:	4ba0      	ldr	r3, [pc, #640]	@ (800ab88 <_dtoa_r+0x2b0>)
 800a908:	21ef      	movs	r1, #239	@ 0xef
 800a90a:	48a0      	ldr	r0, [pc, #640]	@ (800ab8c <_dtoa_r+0x2b4>)
 800a90c:	f001 fb78 	bl	800c000 <__assert_func>
 800a910:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a914:	6007      	str	r7, [r0, #0]
 800a916:	60c7      	str	r7, [r0, #12]
 800a918:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a91c:	6819      	ldr	r1, [r3, #0]
 800a91e:	b159      	cbz	r1, 800a938 <_dtoa_r+0x60>
 800a920:	685a      	ldr	r2, [r3, #4]
 800a922:	604a      	str	r2, [r1, #4]
 800a924:	2301      	movs	r3, #1
 800a926:	4093      	lsls	r3, r2
 800a928:	608b      	str	r3, [r1, #8]
 800a92a:	4648      	mov	r0, r9
 800a92c:	f000 fdb4 	bl	800b498 <_Bfree>
 800a930:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a934:	2200      	movs	r2, #0
 800a936:	601a      	str	r2, [r3, #0]
 800a938:	1e2b      	subs	r3, r5, #0
 800a93a:	bfbb      	ittet	lt
 800a93c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a940:	9303      	strlt	r3, [sp, #12]
 800a942:	2300      	movge	r3, #0
 800a944:	2201      	movlt	r2, #1
 800a946:	bfac      	ite	ge
 800a948:	6033      	strge	r3, [r6, #0]
 800a94a:	6032      	strlt	r2, [r6, #0]
 800a94c:	4b90      	ldr	r3, [pc, #576]	@ (800ab90 <_dtoa_r+0x2b8>)
 800a94e:	9e03      	ldr	r6, [sp, #12]
 800a950:	43b3      	bics	r3, r6
 800a952:	d110      	bne.n	800a976 <_dtoa_r+0x9e>
 800a954:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a956:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a95a:	6013      	str	r3, [r2, #0]
 800a95c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a960:	4323      	orrs	r3, r4
 800a962:	f000 84de 	beq.w	800b322 <_dtoa_r+0xa4a>
 800a966:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a968:	4f8a      	ldr	r7, [pc, #552]	@ (800ab94 <_dtoa_r+0x2bc>)
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	f000 84e0 	beq.w	800b330 <_dtoa_r+0xa58>
 800a970:	1cfb      	adds	r3, r7, #3
 800a972:	f000 bcdb 	b.w	800b32c <_dtoa_r+0xa54>
 800a976:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a97a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a982:	d10a      	bne.n	800a99a <_dtoa_r+0xc2>
 800a984:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a986:	2301      	movs	r3, #1
 800a988:	6013      	str	r3, [r2, #0]
 800a98a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a98c:	b113      	cbz	r3, 800a994 <_dtoa_r+0xbc>
 800a98e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a990:	4b81      	ldr	r3, [pc, #516]	@ (800ab98 <_dtoa_r+0x2c0>)
 800a992:	6013      	str	r3, [r2, #0]
 800a994:	4f81      	ldr	r7, [pc, #516]	@ (800ab9c <_dtoa_r+0x2c4>)
 800a996:	f000 bccb 	b.w	800b330 <_dtoa_r+0xa58>
 800a99a:	aa0e      	add	r2, sp, #56	@ 0x38
 800a99c:	a90f      	add	r1, sp, #60	@ 0x3c
 800a99e:	4648      	mov	r0, r9
 800a9a0:	eeb0 0b48 	vmov.f64	d0, d8
 800a9a4:	f001 f862 	bl	800ba6c <__d2b>
 800a9a8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a9ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9ae:	9001      	str	r0, [sp, #4]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d045      	beq.n	800aa40 <_dtoa_r+0x168>
 800a9b4:	eeb0 7b48 	vmov.f64	d7, d8
 800a9b8:	ee18 1a90 	vmov	r1, s17
 800a9bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a9c0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a9c4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a9c8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a9cc:	2500      	movs	r5, #0
 800a9ce:	ee07 1a90 	vmov	s15, r1
 800a9d2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a9d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ab70 <_dtoa_r+0x298>
 800a9da:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a9de:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ab78 <_dtoa_r+0x2a0>
 800a9e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a9e6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ab80 <_dtoa_r+0x2a8>
 800a9ea:	ee07 3a90 	vmov	s15, r3
 800a9ee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a9f2:	eeb0 7b46 	vmov.f64	d7, d6
 800a9f6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a9fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a9fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800aa02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa06:	ee16 8a90 	vmov	r8, s13
 800aa0a:	d508      	bpl.n	800aa1e <_dtoa_r+0x146>
 800aa0c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800aa10:	eeb4 6b47 	vcmp.f64	d6, d7
 800aa14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa18:	bf18      	it	ne
 800aa1a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800aa1e:	f1b8 0f16 	cmp.w	r8, #22
 800aa22:	d82b      	bhi.n	800aa7c <_dtoa_r+0x1a4>
 800aa24:	495e      	ldr	r1, [pc, #376]	@ (800aba0 <_dtoa_r+0x2c8>)
 800aa26:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800aa2a:	ed91 7b00 	vldr	d7, [r1]
 800aa2e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800aa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa36:	d501      	bpl.n	800aa3c <_dtoa_r+0x164>
 800aa38:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	e01e      	b.n	800aa7e <_dtoa_r+0x1a6>
 800aa40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa42:	4413      	add	r3, r2
 800aa44:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800aa48:	2920      	cmp	r1, #32
 800aa4a:	bfc1      	itttt	gt
 800aa4c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800aa50:	408e      	lslgt	r6, r1
 800aa52:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800aa56:	fa24 f101 	lsrgt.w	r1, r4, r1
 800aa5a:	bfd6      	itet	le
 800aa5c:	f1c1 0120 	rsble	r1, r1, #32
 800aa60:	4331      	orrgt	r1, r6
 800aa62:	fa04 f101 	lslle.w	r1, r4, r1
 800aa66:	ee07 1a90 	vmov	s15, r1
 800aa6a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	ee17 1a90 	vmov	r1, s15
 800aa74:	2501      	movs	r5, #1
 800aa76:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800aa7a:	e7a8      	b.n	800a9ce <_dtoa_r+0xf6>
 800aa7c:	2101      	movs	r1, #1
 800aa7e:	1ad2      	subs	r2, r2, r3
 800aa80:	1e53      	subs	r3, r2, #1
 800aa82:	9306      	str	r3, [sp, #24]
 800aa84:	bf45      	ittet	mi
 800aa86:	f1c2 0301 	rsbmi	r3, r2, #1
 800aa8a:	9305      	strmi	r3, [sp, #20]
 800aa8c:	2300      	movpl	r3, #0
 800aa8e:	2300      	movmi	r3, #0
 800aa90:	bf4c      	ite	mi
 800aa92:	9306      	strmi	r3, [sp, #24]
 800aa94:	9305      	strpl	r3, [sp, #20]
 800aa96:	f1b8 0f00 	cmp.w	r8, #0
 800aa9a:	910c      	str	r1, [sp, #48]	@ 0x30
 800aa9c:	db18      	blt.n	800aad0 <_dtoa_r+0x1f8>
 800aa9e:	9b06      	ldr	r3, [sp, #24]
 800aaa0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800aaa4:	4443      	add	r3, r8
 800aaa6:	9306      	str	r3, [sp, #24]
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	9a07      	ldr	r2, [sp, #28]
 800aaac:	2a09      	cmp	r2, #9
 800aaae:	d849      	bhi.n	800ab44 <_dtoa_r+0x26c>
 800aab0:	2a05      	cmp	r2, #5
 800aab2:	bfc4      	itt	gt
 800aab4:	3a04      	subgt	r2, #4
 800aab6:	9207      	strgt	r2, [sp, #28]
 800aab8:	9a07      	ldr	r2, [sp, #28]
 800aaba:	f1a2 0202 	sub.w	r2, r2, #2
 800aabe:	bfcc      	ite	gt
 800aac0:	2400      	movgt	r4, #0
 800aac2:	2401      	movle	r4, #1
 800aac4:	2a03      	cmp	r2, #3
 800aac6:	d848      	bhi.n	800ab5a <_dtoa_r+0x282>
 800aac8:	e8df f002 	tbb	[pc, r2]
 800aacc:	3a2c2e0b 	.word	0x3a2c2e0b
 800aad0:	9b05      	ldr	r3, [sp, #20]
 800aad2:	2200      	movs	r2, #0
 800aad4:	eba3 0308 	sub.w	r3, r3, r8
 800aad8:	9305      	str	r3, [sp, #20]
 800aada:	920a      	str	r2, [sp, #40]	@ 0x28
 800aadc:	f1c8 0300 	rsb	r3, r8, #0
 800aae0:	e7e3      	b.n	800aaaa <_dtoa_r+0x1d2>
 800aae2:	2200      	movs	r2, #0
 800aae4:	9208      	str	r2, [sp, #32]
 800aae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aae8:	2a00      	cmp	r2, #0
 800aaea:	dc39      	bgt.n	800ab60 <_dtoa_r+0x288>
 800aaec:	f04f 0b01 	mov.w	fp, #1
 800aaf0:	46da      	mov	sl, fp
 800aaf2:	465a      	mov	r2, fp
 800aaf4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800aaf8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800aafc:	2100      	movs	r1, #0
 800aafe:	2004      	movs	r0, #4
 800ab00:	f100 0614 	add.w	r6, r0, #20
 800ab04:	4296      	cmp	r6, r2
 800ab06:	d930      	bls.n	800ab6a <_dtoa_r+0x292>
 800ab08:	6079      	str	r1, [r7, #4]
 800ab0a:	4648      	mov	r0, r9
 800ab0c:	9304      	str	r3, [sp, #16]
 800ab0e:	f000 fc83 	bl	800b418 <_Balloc>
 800ab12:	9b04      	ldr	r3, [sp, #16]
 800ab14:	4607      	mov	r7, r0
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d146      	bne.n	800aba8 <_dtoa_r+0x2d0>
 800ab1a:	4b22      	ldr	r3, [pc, #136]	@ (800aba4 <_dtoa_r+0x2cc>)
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ab22:	e6f2      	b.n	800a90a <_dtoa_r+0x32>
 800ab24:	2201      	movs	r2, #1
 800ab26:	e7dd      	b.n	800aae4 <_dtoa_r+0x20c>
 800ab28:	2200      	movs	r2, #0
 800ab2a:	9208      	str	r2, [sp, #32]
 800ab2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab2e:	eb08 0b02 	add.w	fp, r8, r2
 800ab32:	f10b 0a01 	add.w	sl, fp, #1
 800ab36:	4652      	mov	r2, sl
 800ab38:	2a01      	cmp	r2, #1
 800ab3a:	bfb8      	it	lt
 800ab3c:	2201      	movlt	r2, #1
 800ab3e:	e7db      	b.n	800aaf8 <_dtoa_r+0x220>
 800ab40:	2201      	movs	r2, #1
 800ab42:	e7f2      	b.n	800ab2a <_dtoa_r+0x252>
 800ab44:	2401      	movs	r4, #1
 800ab46:	2200      	movs	r2, #0
 800ab48:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ab4c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800ab50:	2100      	movs	r1, #0
 800ab52:	46da      	mov	sl, fp
 800ab54:	2212      	movs	r2, #18
 800ab56:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab58:	e7ce      	b.n	800aaf8 <_dtoa_r+0x220>
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	9208      	str	r2, [sp, #32]
 800ab5e:	e7f5      	b.n	800ab4c <_dtoa_r+0x274>
 800ab60:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ab64:	46da      	mov	sl, fp
 800ab66:	465a      	mov	r2, fp
 800ab68:	e7c6      	b.n	800aaf8 <_dtoa_r+0x220>
 800ab6a:	3101      	adds	r1, #1
 800ab6c:	0040      	lsls	r0, r0, #1
 800ab6e:	e7c7      	b.n	800ab00 <_dtoa_r+0x228>
 800ab70:	636f4361 	.word	0x636f4361
 800ab74:	3fd287a7 	.word	0x3fd287a7
 800ab78:	8b60c8b3 	.word	0x8b60c8b3
 800ab7c:	3fc68a28 	.word	0x3fc68a28
 800ab80:	509f79fb 	.word	0x509f79fb
 800ab84:	3fd34413 	.word	0x3fd34413
 800ab88:	0800c6d5 	.word	0x0800c6d5
 800ab8c:	0800c6ec 	.word	0x0800c6ec
 800ab90:	7ff00000 	.word	0x7ff00000
 800ab94:	0800c6d1 	.word	0x0800c6d1
 800ab98:	0800c6a5 	.word	0x0800c6a5
 800ab9c:	0800c6a4 	.word	0x0800c6a4
 800aba0:	0800c7e8 	.word	0x0800c7e8
 800aba4:	0800c744 	.word	0x0800c744
 800aba8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800abac:	f1ba 0f0e 	cmp.w	sl, #14
 800abb0:	6010      	str	r0, [r2, #0]
 800abb2:	d86f      	bhi.n	800ac94 <_dtoa_r+0x3bc>
 800abb4:	2c00      	cmp	r4, #0
 800abb6:	d06d      	beq.n	800ac94 <_dtoa_r+0x3bc>
 800abb8:	f1b8 0f00 	cmp.w	r8, #0
 800abbc:	f340 80c2 	ble.w	800ad44 <_dtoa_r+0x46c>
 800abc0:	4aca      	ldr	r2, [pc, #808]	@ (800aeec <_dtoa_r+0x614>)
 800abc2:	f008 010f 	and.w	r1, r8, #15
 800abc6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800abca:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800abce:	ed92 7b00 	vldr	d7, [r2]
 800abd2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800abd6:	f000 80a9 	beq.w	800ad2c <_dtoa_r+0x454>
 800abda:	4ac5      	ldr	r2, [pc, #788]	@ (800aef0 <_dtoa_r+0x618>)
 800abdc:	ed92 6b08 	vldr	d6, [r2, #32]
 800abe0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800abe4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800abe8:	f001 010f 	and.w	r1, r1, #15
 800abec:	2203      	movs	r2, #3
 800abee:	48c0      	ldr	r0, [pc, #768]	@ (800aef0 <_dtoa_r+0x618>)
 800abf0:	2900      	cmp	r1, #0
 800abf2:	f040 809d 	bne.w	800ad30 <_dtoa_r+0x458>
 800abf6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800abfa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800abfe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac02:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ac04:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac08:	2900      	cmp	r1, #0
 800ac0a:	f000 80c1 	beq.w	800ad90 <_dtoa_r+0x4b8>
 800ac0e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ac12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ac16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac1a:	f140 80b9 	bpl.w	800ad90 <_dtoa_r+0x4b8>
 800ac1e:	f1ba 0f00 	cmp.w	sl, #0
 800ac22:	f000 80b5 	beq.w	800ad90 <_dtoa_r+0x4b8>
 800ac26:	f1bb 0f00 	cmp.w	fp, #0
 800ac2a:	dd31      	ble.n	800ac90 <_dtoa_r+0x3b8>
 800ac2c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ac30:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac34:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac38:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800ac3c:	9104      	str	r1, [sp, #16]
 800ac3e:	3201      	adds	r2, #1
 800ac40:	465c      	mov	r4, fp
 800ac42:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ac46:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ac4a:	ee07 2a90 	vmov	s15, r2
 800ac4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ac52:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ac56:	ee15 2a90 	vmov	r2, s11
 800ac5a:	ec51 0b15 	vmov	r0, r1, d5
 800ac5e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ac62:	2c00      	cmp	r4, #0
 800ac64:	f040 8098 	bne.w	800ad98 <_dtoa_r+0x4c0>
 800ac68:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ac6c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ac70:	ec41 0b17 	vmov	d7, r0, r1
 800ac74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac7c:	f300 8261 	bgt.w	800b142 <_dtoa_r+0x86a>
 800ac80:	eeb1 7b47 	vneg.f64	d7, d7
 800ac84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac8c:	f100 80f5 	bmi.w	800ae7a <_dtoa_r+0x5a2>
 800ac90:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ac94:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ac96:	2a00      	cmp	r2, #0
 800ac98:	f2c0 812c 	blt.w	800aef4 <_dtoa_r+0x61c>
 800ac9c:	f1b8 0f0e 	cmp.w	r8, #14
 800aca0:	f300 8128 	bgt.w	800aef4 <_dtoa_r+0x61c>
 800aca4:	4b91      	ldr	r3, [pc, #580]	@ (800aeec <_dtoa_r+0x614>)
 800aca6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800acaa:	ed93 6b00 	vldr	d6, [r3]
 800acae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	da03      	bge.n	800acbc <_dtoa_r+0x3e4>
 800acb4:	f1ba 0f00 	cmp.w	sl, #0
 800acb8:	f340 80d2 	ble.w	800ae60 <_dtoa_r+0x588>
 800acbc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800acc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800acc4:	463e      	mov	r6, r7
 800acc6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800acca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800acce:	ee15 3a10 	vmov	r3, s10
 800acd2:	3330      	adds	r3, #48	@ 0x30
 800acd4:	f806 3b01 	strb.w	r3, [r6], #1
 800acd8:	1bf3      	subs	r3, r6, r7
 800acda:	459a      	cmp	sl, r3
 800acdc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ace0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ace4:	f040 80f8 	bne.w	800aed8 <_dtoa_r+0x600>
 800ace8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800acec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800acf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf4:	f300 80dd 	bgt.w	800aeb2 <_dtoa_r+0x5da>
 800acf8:	eeb4 7b46 	vcmp.f64	d7, d6
 800acfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad00:	d104      	bne.n	800ad0c <_dtoa_r+0x434>
 800ad02:	ee15 3a10 	vmov	r3, s10
 800ad06:	07db      	lsls	r3, r3, #31
 800ad08:	f100 80d3 	bmi.w	800aeb2 <_dtoa_r+0x5da>
 800ad0c:	9901      	ldr	r1, [sp, #4]
 800ad0e:	4648      	mov	r0, r9
 800ad10:	f000 fbc2 	bl	800b498 <_Bfree>
 800ad14:	2300      	movs	r3, #0
 800ad16:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad18:	7033      	strb	r3, [r6, #0]
 800ad1a:	f108 0301 	add.w	r3, r8, #1
 800ad1e:	6013      	str	r3, [r2, #0]
 800ad20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f000 8304 	beq.w	800b330 <_dtoa_r+0xa58>
 800ad28:	601e      	str	r6, [r3, #0]
 800ad2a:	e301      	b.n	800b330 <_dtoa_r+0xa58>
 800ad2c:	2202      	movs	r2, #2
 800ad2e:	e75e      	b.n	800abee <_dtoa_r+0x316>
 800ad30:	07cc      	lsls	r4, r1, #31
 800ad32:	d504      	bpl.n	800ad3e <_dtoa_r+0x466>
 800ad34:	ed90 6b00 	vldr	d6, [r0]
 800ad38:	3201      	adds	r2, #1
 800ad3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad3e:	1049      	asrs	r1, r1, #1
 800ad40:	3008      	adds	r0, #8
 800ad42:	e755      	b.n	800abf0 <_dtoa_r+0x318>
 800ad44:	d022      	beq.n	800ad8c <_dtoa_r+0x4b4>
 800ad46:	f1c8 0100 	rsb	r1, r8, #0
 800ad4a:	4a68      	ldr	r2, [pc, #416]	@ (800aeec <_dtoa_r+0x614>)
 800ad4c:	f001 000f 	and.w	r0, r1, #15
 800ad50:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ad54:	ed92 7b00 	vldr	d7, [r2]
 800ad58:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ad5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad60:	4863      	ldr	r0, [pc, #396]	@ (800aef0 <_dtoa_r+0x618>)
 800ad62:	1109      	asrs	r1, r1, #4
 800ad64:	2400      	movs	r4, #0
 800ad66:	2202      	movs	r2, #2
 800ad68:	b929      	cbnz	r1, 800ad76 <_dtoa_r+0x49e>
 800ad6a:	2c00      	cmp	r4, #0
 800ad6c:	f43f af49 	beq.w	800ac02 <_dtoa_r+0x32a>
 800ad70:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad74:	e745      	b.n	800ac02 <_dtoa_r+0x32a>
 800ad76:	07ce      	lsls	r6, r1, #31
 800ad78:	d505      	bpl.n	800ad86 <_dtoa_r+0x4ae>
 800ad7a:	ed90 6b00 	vldr	d6, [r0]
 800ad7e:	3201      	adds	r2, #1
 800ad80:	2401      	movs	r4, #1
 800ad82:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad86:	1049      	asrs	r1, r1, #1
 800ad88:	3008      	adds	r0, #8
 800ad8a:	e7ed      	b.n	800ad68 <_dtoa_r+0x490>
 800ad8c:	2202      	movs	r2, #2
 800ad8e:	e738      	b.n	800ac02 <_dtoa_r+0x32a>
 800ad90:	f8cd 8010 	str.w	r8, [sp, #16]
 800ad94:	4654      	mov	r4, sl
 800ad96:	e754      	b.n	800ac42 <_dtoa_r+0x36a>
 800ad98:	4a54      	ldr	r2, [pc, #336]	@ (800aeec <_dtoa_r+0x614>)
 800ad9a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ad9e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ada2:	9a08      	ldr	r2, [sp, #32]
 800ada4:	ec41 0b17 	vmov	d7, r0, r1
 800ada8:	443c      	add	r4, r7
 800adaa:	b34a      	cbz	r2, 800ae00 <_dtoa_r+0x528>
 800adac:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800adb0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800adb4:	463e      	mov	r6, r7
 800adb6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800adba:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800adbe:	ee35 7b47 	vsub.f64	d7, d5, d7
 800adc2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800adc6:	ee14 2a90 	vmov	r2, s9
 800adca:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800adce:	3230      	adds	r2, #48	@ 0x30
 800add0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800add4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800add8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800addc:	f806 2b01 	strb.w	r2, [r6], #1
 800ade0:	d438      	bmi.n	800ae54 <_dtoa_r+0x57c>
 800ade2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ade6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800adea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adee:	d462      	bmi.n	800aeb6 <_dtoa_r+0x5de>
 800adf0:	42a6      	cmp	r6, r4
 800adf2:	f43f af4d 	beq.w	800ac90 <_dtoa_r+0x3b8>
 800adf6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800adfa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800adfe:	e7e0      	b.n	800adc2 <_dtoa_r+0x4ea>
 800ae00:	4621      	mov	r1, r4
 800ae02:	463e      	mov	r6, r7
 800ae04:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ae08:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ae0c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ae10:	ee14 2a90 	vmov	r2, s9
 800ae14:	3230      	adds	r2, #48	@ 0x30
 800ae16:	f806 2b01 	strb.w	r2, [r6], #1
 800ae1a:	42a6      	cmp	r6, r4
 800ae1c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ae20:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ae24:	d119      	bne.n	800ae5a <_dtoa_r+0x582>
 800ae26:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800ae2a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ae2e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ae32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae36:	dc3e      	bgt.n	800aeb6 <_dtoa_r+0x5de>
 800ae38:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ae3c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ae40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae44:	f57f af24 	bpl.w	800ac90 <_dtoa_r+0x3b8>
 800ae48:	460e      	mov	r6, r1
 800ae4a:	3901      	subs	r1, #1
 800ae4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae50:	2b30      	cmp	r3, #48	@ 0x30
 800ae52:	d0f9      	beq.n	800ae48 <_dtoa_r+0x570>
 800ae54:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ae58:	e758      	b.n	800ad0c <_dtoa_r+0x434>
 800ae5a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ae5e:	e7d5      	b.n	800ae0c <_dtoa_r+0x534>
 800ae60:	d10b      	bne.n	800ae7a <_dtoa_r+0x5a2>
 800ae62:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ae66:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ae6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ae72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae76:	f2c0 8161 	blt.w	800b13c <_dtoa_r+0x864>
 800ae7a:	2400      	movs	r4, #0
 800ae7c:	4625      	mov	r5, r4
 800ae7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae80:	43db      	mvns	r3, r3
 800ae82:	9304      	str	r3, [sp, #16]
 800ae84:	463e      	mov	r6, r7
 800ae86:	f04f 0800 	mov.w	r8, #0
 800ae8a:	4621      	mov	r1, r4
 800ae8c:	4648      	mov	r0, r9
 800ae8e:	f000 fb03 	bl	800b498 <_Bfree>
 800ae92:	2d00      	cmp	r5, #0
 800ae94:	d0de      	beq.n	800ae54 <_dtoa_r+0x57c>
 800ae96:	f1b8 0f00 	cmp.w	r8, #0
 800ae9a:	d005      	beq.n	800aea8 <_dtoa_r+0x5d0>
 800ae9c:	45a8      	cmp	r8, r5
 800ae9e:	d003      	beq.n	800aea8 <_dtoa_r+0x5d0>
 800aea0:	4641      	mov	r1, r8
 800aea2:	4648      	mov	r0, r9
 800aea4:	f000 faf8 	bl	800b498 <_Bfree>
 800aea8:	4629      	mov	r1, r5
 800aeaa:	4648      	mov	r0, r9
 800aeac:	f000 faf4 	bl	800b498 <_Bfree>
 800aeb0:	e7d0      	b.n	800ae54 <_dtoa_r+0x57c>
 800aeb2:	f8cd 8010 	str.w	r8, [sp, #16]
 800aeb6:	4633      	mov	r3, r6
 800aeb8:	461e      	mov	r6, r3
 800aeba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aebe:	2a39      	cmp	r2, #57	@ 0x39
 800aec0:	d106      	bne.n	800aed0 <_dtoa_r+0x5f8>
 800aec2:	429f      	cmp	r7, r3
 800aec4:	d1f8      	bne.n	800aeb8 <_dtoa_r+0x5e0>
 800aec6:	9a04      	ldr	r2, [sp, #16]
 800aec8:	3201      	adds	r2, #1
 800aeca:	9204      	str	r2, [sp, #16]
 800aecc:	2230      	movs	r2, #48	@ 0x30
 800aece:	703a      	strb	r2, [r7, #0]
 800aed0:	781a      	ldrb	r2, [r3, #0]
 800aed2:	3201      	adds	r2, #1
 800aed4:	701a      	strb	r2, [r3, #0]
 800aed6:	e7bd      	b.n	800ae54 <_dtoa_r+0x57c>
 800aed8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aedc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee4:	f47f aeef 	bne.w	800acc6 <_dtoa_r+0x3ee>
 800aee8:	e710      	b.n	800ad0c <_dtoa_r+0x434>
 800aeea:	bf00      	nop
 800aeec:	0800c7e8 	.word	0x0800c7e8
 800aef0:	0800c7c0 	.word	0x0800c7c0
 800aef4:	9908      	ldr	r1, [sp, #32]
 800aef6:	2900      	cmp	r1, #0
 800aef8:	f000 80e3 	beq.w	800b0c2 <_dtoa_r+0x7ea>
 800aefc:	9907      	ldr	r1, [sp, #28]
 800aefe:	2901      	cmp	r1, #1
 800af00:	f300 80c8 	bgt.w	800b094 <_dtoa_r+0x7bc>
 800af04:	2d00      	cmp	r5, #0
 800af06:	f000 80c1 	beq.w	800b08c <_dtoa_r+0x7b4>
 800af0a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800af0e:	9e05      	ldr	r6, [sp, #20]
 800af10:	461c      	mov	r4, r3
 800af12:	9304      	str	r3, [sp, #16]
 800af14:	9b05      	ldr	r3, [sp, #20]
 800af16:	4413      	add	r3, r2
 800af18:	9305      	str	r3, [sp, #20]
 800af1a:	9b06      	ldr	r3, [sp, #24]
 800af1c:	2101      	movs	r1, #1
 800af1e:	4413      	add	r3, r2
 800af20:	4648      	mov	r0, r9
 800af22:	9306      	str	r3, [sp, #24]
 800af24:	f000 fb6c 	bl	800b600 <__i2b>
 800af28:	9b04      	ldr	r3, [sp, #16]
 800af2a:	4605      	mov	r5, r0
 800af2c:	b166      	cbz	r6, 800af48 <_dtoa_r+0x670>
 800af2e:	9a06      	ldr	r2, [sp, #24]
 800af30:	2a00      	cmp	r2, #0
 800af32:	dd09      	ble.n	800af48 <_dtoa_r+0x670>
 800af34:	42b2      	cmp	r2, r6
 800af36:	9905      	ldr	r1, [sp, #20]
 800af38:	bfa8      	it	ge
 800af3a:	4632      	movge	r2, r6
 800af3c:	1a89      	subs	r1, r1, r2
 800af3e:	9105      	str	r1, [sp, #20]
 800af40:	9906      	ldr	r1, [sp, #24]
 800af42:	1ab6      	subs	r6, r6, r2
 800af44:	1a8a      	subs	r2, r1, r2
 800af46:	9206      	str	r2, [sp, #24]
 800af48:	b1fb      	cbz	r3, 800af8a <_dtoa_r+0x6b2>
 800af4a:	9a08      	ldr	r2, [sp, #32]
 800af4c:	2a00      	cmp	r2, #0
 800af4e:	f000 80bc 	beq.w	800b0ca <_dtoa_r+0x7f2>
 800af52:	b19c      	cbz	r4, 800af7c <_dtoa_r+0x6a4>
 800af54:	4629      	mov	r1, r5
 800af56:	4622      	mov	r2, r4
 800af58:	4648      	mov	r0, r9
 800af5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af5c:	f000 fc10 	bl	800b780 <__pow5mult>
 800af60:	9a01      	ldr	r2, [sp, #4]
 800af62:	4601      	mov	r1, r0
 800af64:	4605      	mov	r5, r0
 800af66:	4648      	mov	r0, r9
 800af68:	f000 fb60 	bl	800b62c <__multiply>
 800af6c:	9901      	ldr	r1, [sp, #4]
 800af6e:	9004      	str	r0, [sp, #16]
 800af70:	4648      	mov	r0, r9
 800af72:	f000 fa91 	bl	800b498 <_Bfree>
 800af76:	9a04      	ldr	r2, [sp, #16]
 800af78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af7a:	9201      	str	r2, [sp, #4]
 800af7c:	1b1a      	subs	r2, r3, r4
 800af7e:	d004      	beq.n	800af8a <_dtoa_r+0x6b2>
 800af80:	9901      	ldr	r1, [sp, #4]
 800af82:	4648      	mov	r0, r9
 800af84:	f000 fbfc 	bl	800b780 <__pow5mult>
 800af88:	9001      	str	r0, [sp, #4]
 800af8a:	2101      	movs	r1, #1
 800af8c:	4648      	mov	r0, r9
 800af8e:	f000 fb37 	bl	800b600 <__i2b>
 800af92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af94:	4604      	mov	r4, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	f000 81d0 	beq.w	800b33c <_dtoa_r+0xa64>
 800af9c:	461a      	mov	r2, r3
 800af9e:	4601      	mov	r1, r0
 800afa0:	4648      	mov	r0, r9
 800afa2:	f000 fbed 	bl	800b780 <__pow5mult>
 800afa6:	9b07      	ldr	r3, [sp, #28]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	4604      	mov	r4, r0
 800afac:	f300 8095 	bgt.w	800b0da <_dtoa_r+0x802>
 800afb0:	9b02      	ldr	r3, [sp, #8]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	f040 808b 	bne.w	800b0ce <_dtoa_r+0x7f6>
 800afb8:	9b03      	ldr	r3, [sp, #12]
 800afba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800afbe:	2a00      	cmp	r2, #0
 800afc0:	f040 8087 	bne.w	800b0d2 <_dtoa_r+0x7fa>
 800afc4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800afc8:	0d12      	lsrs	r2, r2, #20
 800afca:	0512      	lsls	r2, r2, #20
 800afcc:	2a00      	cmp	r2, #0
 800afce:	f000 8082 	beq.w	800b0d6 <_dtoa_r+0x7fe>
 800afd2:	9b05      	ldr	r3, [sp, #20]
 800afd4:	3301      	adds	r3, #1
 800afd6:	9305      	str	r3, [sp, #20]
 800afd8:	9b06      	ldr	r3, [sp, #24]
 800afda:	3301      	adds	r3, #1
 800afdc:	9306      	str	r3, [sp, #24]
 800afde:	2301      	movs	r3, #1
 800afe0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f000 81af 	beq.w	800b348 <_dtoa_r+0xa70>
 800afea:	6922      	ldr	r2, [r4, #16]
 800afec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800aff0:	6910      	ldr	r0, [r2, #16]
 800aff2:	f000 fab9 	bl	800b568 <__hi0bits>
 800aff6:	f1c0 0020 	rsb	r0, r0, #32
 800affa:	9b06      	ldr	r3, [sp, #24]
 800affc:	4418      	add	r0, r3
 800affe:	f010 001f 	ands.w	r0, r0, #31
 800b002:	d076      	beq.n	800b0f2 <_dtoa_r+0x81a>
 800b004:	f1c0 0220 	rsb	r2, r0, #32
 800b008:	2a04      	cmp	r2, #4
 800b00a:	dd69      	ble.n	800b0e0 <_dtoa_r+0x808>
 800b00c:	9b05      	ldr	r3, [sp, #20]
 800b00e:	f1c0 001c 	rsb	r0, r0, #28
 800b012:	4403      	add	r3, r0
 800b014:	9305      	str	r3, [sp, #20]
 800b016:	9b06      	ldr	r3, [sp, #24]
 800b018:	4406      	add	r6, r0
 800b01a:	4403      	add	r3, r0
 800b01c:	9306      	str	r3, [sp, #24]
 800b01e:	9b05      	ldr	r3, [sp, #20]
 800b020:	2b00      	cmp	r3, #0
 800b022:	dd05      	ble.n	800b030 <_dtoa_r+0x758>
 800b024:	9901      	ldr	r1, [sp, #4]
 800b026:	461a      	mov	r2, r3
 800b028:	4648      	mov	r0, r9
 800b02a:	f000 fc03 	bl	800b834 <__lshift>
 800b02e:	9001      	str	r0, [sp, #4]
 800b030:	9b06      	ldr	r3, [sp, #24]
 800b032:	2b00      	cmp	r3, #0
 800b034:	dd05      	ble.n	800b042 <_dtoa_r+0x76a>
 800b036:	4621      	mov	r1, r4
 800b038:	461a      	mov	r2, r3
 800b03a:	4648      	mov	r0, r9
 800b03c:	f000 fbfa 	bl	800b834 <__lshift>
 800b040:	4604      	mov	r4, r0
 800b042:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b044:	2b00      	cmp	r3, #0
 800b046:	d056      	beq.n	800b0f6 <_dtoa_r+0x81e>
 800b048:	9801      	ldr	r0, [sp, #4]
 800b04a:	4621      	mov	r1, r4
 800b04c:	f000 fc5e 	bl	800b90c <__mcmp>
 800b050:	2800      	cmp	r0, #0
 800b052:	da50      	bge.n	800b0f6 <_dtoa_r+0x81e>
 800b054:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800b058:	9304      	str	r3, [sp, #16]
 800b05a:	9901      	ldr	r1, [sp, #4]
 800b05c:	2300      	movs	r3, #0
 800b05e:	220a      	movs	r2, #10
 800b060:	4648      	mov	r0, r9
 800b062:	f000 fa3b 	bl	800b4dc <__multadd>
 800b066:	9b08      	ldr	r3, [sp, #32]
 800b068:	9001      	str	r0, [sp, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f000 816e 	beq.w	800b34c <_dtoa_r+0xa74>
 800b070:	4629      	mov	r1, r5
 800b072:	2300      	movs	r3, #0
 800b074:	220a      	movs	r2, #10
 800b076:	4648      	mov	r0, r9
 800b078:	f000 fa30 	bl	800b4dc <__multadd>
 800b07c:	f1bb 0f00 	cmp.w	fp, #0
 800b080:	4605      	mov	r5, r0
 800b082:	dc64      	bgt.n	800b14e <_dtoa_r+0x876>
 800b084:	9b07      	ldr	r3, [sp, #28]
 800b086:	2b02      	cmp	r3, #2
 800b088:	dc3e      	bgt.n	800b108 <_dtoa_r+0x830>
 800b08a:	e060      	b.n	800b14e <_dtoa_r+0x876>
 800b08c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b08e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b092:	e73c      	b.n	800af0e <_dtoa_r+0x636>
 800b094:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800b098:	42a3      	cmp	r3, r4
 800b09a:	bfbf      	itttt	lt
 800b09c:	1ae2      	sublt	r2, r4, r3
 800b09e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b0a0:	189b      	addlt	r3, r3, r2
 800b0a2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800b0a4:	bfae      	itee	ge
 800b0a6:	1b1c      	subge	r4, r3, r4
 800b0a8:	4623      	movlt	r3, r4
 800b0aa:	2400      	movlt	r4, #0
 800b0ac:	f1ba 0f00 	cmp.w	sl, #0
 800b0b0:	bfb5      	itete	lt
 800b0b2:	9a05      	ldrlt	r2, [sp, #20]
 800b0b4:	9e05      	ldrge	r6, [sp, #20]
 800b0b6:	eba2 060a 	sublt.w	r6, r2, sl
 800b0ba:	4652      	movge	r2, sl
 800b0bc:	bfb8      	it	lt
 800b0be:	2200      	movlt	r2, #0
 800b0c0:	e727      	b.n	800af12 <_dtoa_r+0x63a>
 800b0c2:	9e05      	ldr	r6, [sp, #20]
 800b0c4:	9d08      	ldr	r5, [sp, #32]
 800b0c6:	461c      	mov	r4, r3
 800b0c8:	e730      	b.n	800af2c <_dtoa_r+0x654>
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	e758      	b.n	800af80 <_dtoa_r+0x6a8>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	e786      	b.n	800afe0 <_dtoa_r+0x708>
 800b0d2:	9b02      	ldr	r3, [sp, #8]
 800b0d4:	e784      	b.n	800afe0 <_dtoa_r+0x708>
 800b0d6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b0d8:	e783      	b.n	800afe2 <_dtoa_r+0x70a>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0de:	e784      	b.n	800afea <_dtoa_r+0x712>
 800b0e0:	d09d      	beq.n	800b01e <_dtoa_r+0x746>
 800b0e2:	9b05      	ldr	r3, [sp, #20]
 800b0e4:	321c      	adds	r2, #28
 800b0e6:	4413      	add	r3, r2
 800b0e8:	9305      	str	r3, [sp, #20]
 800b0ea:	9b06      	ldr	r3, [sp, #24]
 800b0ec:	4416      	add	r6, r2
 800b0ee:	4413      	add	r3, r2
 800b0f0:	e794      	b.n	800b01c <_dtoa_r+0x744>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	e7f5      	b.n	800b0e2 <_dtoa_r+0x80a>
 800b0f6:	f1ba 0f00 	cmp.w	sl, #0
 800b0fa:	f8cd 8010 	str.w	r8, [sp, #16]
 800b0fe:	46d3      	mov	fp, sl
 800b100:	dc21      	bgt.n	800b146 <_dtoa_r+0x86e>
 800b102:	9b07      	ldr	r3, [sp, #28]
 800b104:	2b02      	cmp	r3, #2
 800b106:	dd1e      	ble.n	800b146 <_dtoa_r+0x86e>
 800b108:	f1bb 0f00 	cmp.w	fp, #0
 800b10c:	f47f aeb7 	bne.w	800ae7e <_dtoa_r+0x5a6>
 800b110:	4621      	mov	r1, r4
 800b112:	465b      	mov	r3, fp
 800b114:	2205      	movs	r2, #5
 800b116:	4648      	mov	r0, r9
 800b118:	f000 f9e0 	bl	800b4dc <__multadd>
 800b11c:	4601      	mov	r1, r0
 800b11e:	4604      	mov	r4, r0
 800b120:	9801      	ldr	r0, [sp, #4]
 800b122:	f000 fbf3 	bl	800b90c <__mcmp>
 800b126:	2800      	cmp	r0, #0
 800b128:	f77f aea9 	ble.w	800ae7e <_dtoa_r+0x5a6>
 800b12c:	463e      	mov	r6, r7
 800b12e:	2331      	movs	r3, #49	@ 0x31
 800b130:	f806 3b01 	strb.w	r3, [r6], #1
 800b134:	9b04      	ldr	r3, [sp, #16]
 800b136:	3301      	adds	r3, #1
 800b138:	9304      	str	r3, [sp, #16]
 800b13a:	e6a4      	b.n	800ae86 <_dtoa_r+0x5ae>
 800b13c:	f8cd 8010 	str.w	r8, [sp, #16]
 800b140:	4654      	mov	r4, sl
 800b142:	4625      	mov	r5, r4
 800b144:	e7f2      	b.n	800b12c <_dtoa_r+0x854>
 800b146:	9b08      	ldr	r3, [sp, #32]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f000 8103 	beq.w	800b354 <_dtoa_r+0xa7c>
 800b14e:	2e00      	cmp	r6, #0
 800b150:	dd05      	ble.n	800b15e <_dtoa_r+0x886>
 800b152:	4629      	mov	r1, r5
 800b154:	4632      	mov	r2, r6
 800b156:	4648      	mov	r0, r9
 800b158:	f000 fb6c 	bl	800b834 <__lshift>
 800b15c:	4605      	mov	r5, r0
 800b15e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b160:	2b00      	cmp	r3, #0
 800b162:	d058      	beq.n	800b216 <_dtoa_r+0x93e>
 800b164:	6869      	ldr	r1, [r5, #4]
 800b166:	4648      	mov	r0, r9
 800b168:	f000 f956 	bl	800b418 <_Balloc>
 800b16c:	4606      	mov	r6, r0
 800b16e:	b928      	cbnz	r0, 800b17c <_dtoa_r+0x8a4>
 800b170:	4b82      	ldr	r3, [pc, #520]	@ (800b37c <_dtoa_r+0xaa4>)
 800b172:	4602      	mov	r2, r0
 800b174:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b178:	f7ff bbc7 	b.w	800a90a <_dtoa_r+0x32>
 800b17c:	692a      	ldr	r2, [r5, #16]
 800b17e:	3202      	adds	r2, #2
 800b180:	0092      	lsls	r2, r2, #2
 800b182:	f105 010c 	add.w	r1, r5, #12
 800b186:	300c      	adds	r0, #12
 800b188:	f7ff fb0f 	bl	800a7aa <memcpy>
 800b18c:	2201      	movs	r2, #1
 800b18e:	4631      	mov	r1, r6
 800b190:	4648      	mov	r0, r9
 800b192:	f000 fb4f 	bl	800b834 <__lshift>
 800b196:	1c7b      	adds	r3, r7, #1
 800b198:	9305      	str	r3, [sp, #20]
 800b19a:	eb07 030b 	add.w	r3, r7, fp
 800b19e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1a0:	9b02      	ldr	r3, [sp, #8]
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	46a8      	mov	r8, r5
 800b1a8:	9308      	str	r3, [sp, #32]
 800b1aa:	4605      	mov	r5, r0
 800b1ac:	9b05      	ldr	r3, [sp, #20]
 800b1ae:	9801      	ldr	r0, [sp, #4]
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800b1b6:	f7ff fb06 	bl	800a7c6 <quorem>
 800b1ba:	4641      	mov	r1, r8
 800b1bc:	9002      	str	r0, [sp, #8]
 800b1be:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b1c2:	9801      	ldr	r0, [sp, #4]
 800b1c4:	f000 fba2 	bl	800b90c <__mcmp>
 800b1c8:	462a      	mov	r2, r5
 800b1ca:	9006      	str	r0, [sp, #24]
 800b1cc:	4621      	mov	r1, r4
 800b1ce:	4648      	mov	r0, r9
 800b1d0:	f000 fbb8 	bl	800b944 <__mdiff>
 800b1d4:	68c2      	ldr	r2, [r0, #12]
 800b1d6:	4606      	mov	r6, r0
 800b1d8:	b9fa      	cbnz	r2, 800b21a <_dtoa_r+0x942>
 800b1da:	4601      	mov	r1, r0
 800b1dc:	9801      	ldr	r0, [sp, #4]
 800b1de:	f000 fb95 	bl	800b90c <__mcmp>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	4631      	mov	r1, r6
 800b1e6:	4648      	mov	r0, r9
 800b1e8:	920a      	str	r2, [sp, #40]	@ 0x28
 800b1ea:	f000 f955 	bl	800b498 <_Bfree>
 800b1ee:	9b07      	ldr	r3, [sp, #28]
 800b1f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1f2:	9e05      	ldr	r6, [sp, #20]
 800b1f4:	ea43 0102 	orr.w	r1, r3, r2
 800b1f8:	9b08      	ldr	r3, [sp, #32]
 800b1fa:	4319      	orrs	r1, r3
 800b1fc:	d10f      	bne.n	800b21e <_dtoa_r+0x946>
 800b1fe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b202:	d028      	beq.n	800b256 <_dtoa_r+0x97e>
 800b204:	9b06      	ldr	r3, [sp, #24]
 800b206:	2b00      	cmp	r3, #0
 800b208:	dd02      	ble.n	800b210 <_dtoa_r+0x938>
 800b20a:	9b02      	ldr	r3, [sp, #8]
 800b20c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b210:	f88b a000 	strb.w	sl, [fp]
 800b214:	e639      	b.n	800ae8a <_dtoa_r+0x5b2>
 800b216:	4628      	mov	r0, r5
 800b218:	e7bd      	b.n	800b196 <_dtoa_r+0x8be>
 800b21a:	2201      	movs	r2, #1
 800b21c:	e7e2      	b.n	800b1e4 <_dtoa_r+0x90c>
 800b21e:	9b06      	ldr	r3, [sp, #24]
 800b220:	2b00      	cmp	r3, #0
 800b222:	db04      	blt.n	800b22e <_dtoa_r+0x956>
 800b224:	9907      	ldr	r1, [sp, #28]
 800b226:	430b      	orrs	r3, r1
 800b228:	9908      	ldr	r1, [sp, #32]
 800b22a:	430b      	orrs	r3, r1
 800b22c:	d120      	bne.n	800b270 <_dtoa_r+0x998>
 800b22e:	2a00      	cmp	r2, #0
 800b230:	ddee      	ble.n	800b210 <_dtoa_r+0x938>
 800b232:	9901      	ldr	r1, [sp, #4]
 800b234:	2201      	movs	r2, #1
 800b236:	4648      	mov	r0, r9
 800b238:	f000 fafc 	bl	800b834 <__lshift>
 800b23c:	4621      	mov	r1, r4
 800b23e:	9001      	str	r0, [sp, #4]
 800b240:	f000 fb64 	bl	800b90c <__mcmp>
 800b244:	2800      	cmp	r0, #0
 800b246:	dc03      	bgt.n	800b250 <_dtoa_r+0x978>
 800b248:	d1e2      	bne.n	800b210 <_dtoa_r+0x938>
 800b24a:	f01a 0f01 	tst.w	sl, #1
 800b24e:	d0df      	beq.n	800b210 <_dtoa_r+0x938>
 800b250:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b254:	d1d9      	bne.n	800b20a <_dtoa_r+0x932>
 800b256:	2339      	movs	r3, #57	@ 0x39
 800b258:	f88b 3000 	strb.w	r3, [fp]
 800b25c:	4633      	mov	r3, r6
 800b25e:	461e      	mov	r6, r3
 800b260:	3b01      	subs	r3, #1
 800b262:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b266:	2a39      	cmp	r2, #57	@ 0x39
 800b268:	d053      	beq.n	800b312 <_dtoa_r+0xa3a>
 800b26a:	3201      	adds	r2, #1
 800b26c:	701a      	strb	r2, [r3, #0]
 800b26e:	e60c      	b.n	800ae8a <_dtoa_r+0x5b2>
 800b270:	2a00      	cmp	r2, #0
 800b272:	dd07      	ble.n	800b284 <_dtoa_r+0x9ac>
 800b274:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b278:	d0ed      	beq.n	800b256 <_dtoa_r+0x97e>
 800b27a:	f10a 0301 	add.w	r3, sl, #1
 800b27e:	f88b 3000 	strb.w	r3, [fp]
 800b282:	e602      	b.n	800ae8a <_dtoa_r+0x5b2>
 800b284:	9b05      	ldr	r3, [sp, #20]
 800b286:	9a05      	ldr	r2, [sp, #20]
 800b288:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b28e:	4293      	cmp	r3, r2
 800b290:	d029      	beq.n	800b2e6 <_dtoa_r+0xa0e>
 800b292:	9901      	ldr	r1, [sp, #4]
 800b294:	2300      	movs	r3, #0
 800b296:	220a      	movs	r2, #10
 800b298:	4648      	mov	r0, r9
 800b29a:	f000 f91f 	bl	800b4dc <__multadd>
 800b29e:	45a8      	cmp	r8, r5
 800b2a0:	9001      	str	r0, [sp, #4]
 800b2a2:	f04f 0300 	mov.w	r3, #0
 800b2a6:	f04f 020a 	mov.w	r2, #10
 800b2aa:	4641      	mov	r1, r8
 800b2ac:	4648      	mov	r0, r9
 800b2ae:	d107      	bne.n	800b2c0 <_dtoa_r+0x9e8>
 800b2b0:	f000 f914 	bl	800b4dc <__multadd>
 800b2b4:	4680      	mov	r8, r0
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	9b05      	ldr	r3, [sp, #20]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	9305      	str	r3, [sp, #20]
 800b2be:	e775      	b.n	800b1ac <_dtoa_r+0x8d4>
 800b2c0:	f000 f90c 	bl	800b4dc <__multadd>
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	4680      	mov	r8, r0
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	220a      	movs	r2, #10
 800b2cc:	4648      	mov	r0, r9
 800b2ce:	f000 f905 	bl	800b4dc <__multadd>
 800b2d2:	4605      	mov	r5, r0
 800b2d4:	e7f0      	b.n	800b2b8 <_dtoa_r+0x9e0>
 800b2d6:	f1bb 0f00 	cmp.w	fp, #0
 800b2da:	bfcc      	ite	gt
 800b2dc:	465e      	movgt	r6, fp
 800b2de:	2601      	movle	r6, #1
 800b2e0:	443e      	add	r6, r7
 800b2e2:	f04f 0800 	mov.w	r8, #0
 800b2e6:	9901      	ldr	r1, [sp, #4]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	4648      	mov	r0, r9
 800b2ec:	f000 faa2 	bl	800b834 <__lshift>
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	9001      	str	r0, [sp, #4]
 800b2f4:	f000 fb0a 	bl	800b90c <__mcmp>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	dcaf      	bgt.n	800b25c <_dtoa_r+0x984>
 800b2fc:	d102      	bne.n	800b304 <_dtoa_r+0xa2c>
 800b2fe:	f01a 0f01 	tst.w	sl, #1
 800b302:	d1ab      	bne.n	800b25c <_dtoa_r+0x984>
 800b304:	4633      	mov	r3, r6
 800b306:	461e      	mov	r6, r3
 800b308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b30c:	2a30      	cmp	r2, #48	@ 0x30
 800b30e:	d0fa      	beq.n	800b306 <_dtoa_r+0xa2e>
 800b310:	e5bb      	b.n	800ae8a <_dtoa_r+0x5b2>
 800b312:	429f      	cmp	r7, r3
 800b314:	d1a3      	bne.n	800b25e <_dtoa_r+0x986>
 800b316:	9b04      	ldr	r3, [sp, #16]
 800b318:	3301      	adds	r3, #1
 800b31a:	9304      	str	r3, [sp, #16]
 800b31c:	2331      	movs	r3, #49	@ 0x31
 800b31e:	703b      	strb	r3, [r7, #0]
 800b320:	e5b3      	b.n	800ae8a <_dtoa_r+0x5b2>
 800b322:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b324:	4f16      	ldr	r7, [pc, #88]	@ (800b380 <_dtoa_r+0xaa8>)
 800b326:	b11b      	cbz	r3, 800b330 <_dtoa_r+0xa58>
 800b328:	f107 0308 	add.w	r3, r7, #8
 800b32c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b32e:	6013      	str	r3, [r2, #0]
 800b330:	4638      	mov	r0, r7
 800b332:	b011      	add	sp, #68	@ 0x44
 800b334:	ecbd 8b02 	vpop	{d8}
 800b338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33c:	9b07      	ldr	r3, [sp, #28]
 800b33e:	2b01      	cmp	r3, #1
 800b340:	f77f ae36 	ble.w	800afb0 <_dtoa_r+0x6d8>
 800b344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b346:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b348:	2001      	movs	r0, #1
 800b34a:	e656      	b.n	800affa <_dtoa_r+0x722>
 800b34c:	f1bb 0f00 	cmp.w	fp, #0
 800b350:	f77f aed7 	ble.w	800b102 <_dtoa_r+0x82a>
 800b354:	463e      	mov	r6, r7
 800b356:	9801      	ldr	r0, [sp, #4]
 800b358:	4621      	mov	r1, r4
 800b35a:	f7ff fa34 	bl	800a7c6 <quorem>
 800b35e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b362:	f806 ab01 	strb.w	sl, [r6], #1
 800b366:	1bf2      	subs	r2, r6, r7
 800b368:	4593      	cmp	fp, r2
 800b36a:	ddb4      	ble.n	800b2d6 <_dtoa_r+0x9fe>
 800b36c:	9901      	ldr	r1, [sp, #4]
 800b36e:	2300      	movs	r3, #0
 800b370:	220a      	movs	r2, #10
 800b372:	4648      	mov	r0, r9
 800b374:	f000 f8b2 	bl	800b4dc <__multadd>
 800b378:	9001      	str	r0, [sp, #4]
 800b37a:	e7ec      	b.n	800b356 <_dtoa_r+0xa7e>
 800b37c:	0800c744 	.word	0x0800c744
 800b380:	0800c6c8 	.word	0x0800c6c8

0800b384 <_free_r>:
 800b384:	b538      	push	{r3, r4, r5, lr}
 800b386:	4605      	mov	r5, r0
 800b388:	2900      	cmp	r1, #0
 800b38a:	d041      	beq.n	800b410 <_free_r+0x8c>
 800b38c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b390:	1f0c      	subs	r4, r1, #4
 800b392:	2b00      	cmp	r3, #0
 800b394:	bfb8      	it	lt
 800b396:	18e4      	addlt	r4, r4, r3
 800b398:	f7fe fb2a 	bl	80099f0 <__malloc_lock>
 800b39c:	4a1d      	ldr	r2, [pc, #116]	@ (800b414 <_free_r+0x90>)
 800b39e:	6813      	ldr	r3, [r2, #0]
 800b3a0:	b933      	cbnz	r3, 800b3b0 <_free_r+0x2c>
 800b3a2:	6063      	str	r3, [r4, #4]
 800b3a4:	6014      	str	r4, [r2, #0]
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3ac:	f7fe bb26 	b.w	80099fc <__malloc_unlock>
 800b3b0:	42a3      	cmp	r3, r4
 800b3b2:	d908      	bls.n	800b3c6 <_free_r+0x42>
 800b3b4:	6820      	ldr	r0, [r4, #0]
 800b3b6:	1821      	adds	r1, r4, r0
 800b3b8:	428b      	cmp	r3, r1
 800b3ba:	bf01      	itttt	eq
 800b3bc:	6819      	ldreq	r1, [r3, #0]
 800b3be:	685b      	ldreq	r3, [r3, #4]
 800b3c0:	1809      	addeq	r1, r1, r0
 800b3c2:	6021      	streq	r1, [r4, #0]
 800b3c4:	e7ed      	b.n	800b3a2 <_free_r+0x1e>
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	b10b      	cbz	r3, 800b3d0 <_free_r+0x4c>
 800b3cc:	42a3      	cmp	r3, r4
 800b3ce:	d9fa      	bls.n	800b3c6 <_free_r+0x42>
 800b3d0:	6811      	ldr	r1, [r2, #0]
 800b3d2:	1850      	adds	r0, r2, r1
 800b3d4:	42a0      	cmp	r0, r4
 800b3d6:	d10b      	bne.n	800b3f0 <_free_r+0x6c>
 800b3d8:	6820      	ldr	r0, [r4, #0]
 800b3da:	4401      	add	r1, r0
 800b3dc:	1850      	adds	r0, r2, r1
 800b3de:	4283      	cmp	r3, r0
 800b3e0:	6011      	str	r1, [r2, #0]
 800b3e2:	d1e0      	bne.n	800b3a6 <_free_r+0x22>
 800b3e4:	6818      	ldr	r0, [r3, #0]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	6053      	str	r3, [r2, #4]
 800b3ea:	4408      	add	r0, r1
 800b3ec:	6010      	str	r0, [r2, #0]
 800b3ee:	e7da      	b.n	800b3a6 <_free_r+0x22>
 800b3f0:	d902      	bls.n	800b3f8 <_free_r+0x74>
 800b3f2:	230c      	movs	r3, #12
 800b3f4:	602b      	str	r3, [r5, #0]
 800b3f6:	e7d6      	b.n	800b3a6 <_free_r+0x22>
 800b3f8:	6820      	ldr	r0, [r4, #0]
 800b3fa:	1821      	adds	r1, r4, r0
 800b3fc:	428b      	cmp	r3, r1
 800b3fe:	bf04      	itt	eq
 800b400:	6819      	ldreq	r1, [r3, #0]
 800b402:	685b      	ldreq	r3, [r3, #4]
 800b404:	6063      	str	r3, [r4, #4]
 800b406:	bf04      	itt	eq
 800b408:	1809      	addeq	r1, r1, r0
 800b40a:	6021      	streq	r1, [r4, #0]
 800b40c:	6054      	str	r4, [r2, #4]
 800b40e:	e7ca      	b.n	800b3a6 <_free_r+0x22>
 800b410:	bd38      	pop	{r3, r4, r5, pc}
 800b412:	bf00      	nop
 800b414:	2400091c 	.word	0x2400091c

0800b418 <_Balloc>:
 800b418:	b570      	push	{r4, r5, r6, lr}
 800b41a:	69c6      	ldr	r6, [r0, #28]
 800b41c:	4604      	mov	r4, r0
 800b41e:	460d      	mov	r5, r1
 800b420:	b976      	cbnz	r6, 800b440 <_Balloc+0x28>
 800b422:	2010      	movs	r0, #16
 800b424:	f7fe fa32 	bl	800988c <malloc>
 800b428:	4602      	mov	r2, r0
 800b42a:	61e0      	str	r0, [r4, #28]
 800b42c:	b920      	cbnz	r0, 800b438 <_Balloc+0x20>
 800b42e:	4b18      	ldr	r3, [pc, #96]	@ (800b490 <_Balloc+0x78>)
 800b430:	4818      	ldr	r0, [pc, #96]	@ (800b494 <_Balloc+0x7c>)
 800b432:	216b      	movs	r1, #107	@ 0x6b
 800b434:	f000 fde4 	bl	800c000 <__assert_func>
 800b438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b43c:	6006      	str	r6, [r0, #0]
 800b43e:	60c6      	str	r6, [r0, #12]
 800b440:	69e6      	ldr	r6, [r4, #28]
 800b442:	68f3      	ldr	r3, [r6, #12]
 800b444:	b183      	cbz	r3, 800b468 <_Balloc+0x50>
 800b446:	69e3      	ldr	r3, [r4, #28]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b44e:	b9b8      	cbnz	r0, 800b480 <_Balloc+0x68>
 800b450:	2101      	movs	r1, #1
 800b452:	fa01 f605 	lsl.w	r6, r1, r5
 800b456:	1d72      	adds	r2, r6, #5
 800b458:	0092      	lsls	r2, r2, #2
 800b45a:	4620      	mov	r0, r4
 800b45c:	f000 fdee 	bl	800c03c <_calloc_r>
 800b460:	b160      	cbz	r0, 800b47c <_Balloc+0x64>
 800b462:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b466:	e00e      	b.n	800b486 <_Balloc+0x6e>
 800b468:	2221      	movs	r2, #33	@ 0x21
 800b46a:	2104      	movs	r1, #4
 800b46c:	4620      	mov	r0, r4
 800b46e:	f000 fde5 	bl	800c03c <_calloc_r>
 800b472:	69e3      	ldr	r3, [r4, #28]
 800b474:	60f0      	str	r0, [r6, #12]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1e4      	bne.n	800b446 <_Balloc+0x2e>
 800b47c:	2000      	movs	r0, #0
 800b47e:	bd70      	pop	{r4, r5, r6, pc}
 800b480:	6802      	ldr	r2, [r0, #0]
 800b482:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b486:	2300      	movs	r3, #0
 800b488:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b48c:	e7f7      	b.n	800b47e <_Balloc+0x66>
 800b48e:	bf00      	nop
 800b490:	0800c6d5 	.word	0x0800c6d5
 800b494:	0800c755 	.word	0x0800c755

0800b498 <_Bfree>:
 800b498:	b570      	push	{r4, r5, r6, lr}
 800b49a:	69c6      	ldr	r6, [r0, #28]
 800b49c:	4605      	mov	r5, r0
 800b49e:	460c      	mov	r4, r1
 800b4a0:	b976      	cbnz	r6, 800b4c0 <_Bfree+0x28>
 800b4a2:	2010      	movs	r0, #16
 800b4a4:	f7fe f9f2 	bl	800988c <malloc>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	61e8      	str	r0, [r5, #28]
 800b4ac:	b920      	cbnz	r0, 800b4b8 <_Bfree+0x20>
 800b4ae:	4b09      	ldr	r3, [pc, #36]	@ (800b4d4 <_Bfree+0x3c>)
 800b4b0:	4809      	ldr	r0, [pc, #36]	@ (800b4d8 <_Bfree+0x40>)
 800b4b2:	218f      	movs	r1, #143	@ 0x8f
 800b4b4:	f000 fda4 	bl	800c000 <__assert_func>
 800b4b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4bc:	6006      	str	r6, [r0, #0]
 800b4be:	60c6      	str	r6, [r0, #12]
 800b4c0:	b13c      	cbz	r4, 800b4d2 <_Bfree+0x3a>
 800b4c2:	69eb      	ldr	r3, [r5, #28]
 800b4c4:	6862      	ldr	r2, [r4, #4]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4cc:	6021      	str	r1, [r4, #0]
 800b4ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4d2:	bd70      	pop	{r4, r5, r6, pc}
 800b4d4:	0800c6d5 	.word	0x0800c6d5
 800b4d8:	0800c755 	.word	0x0800c755

0800b4dc <__multadd>:
 800b4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e0:	690d      	ldr	r5, [r1, #16]
 800b4e2:	4607      	mov	r7, r0
 800b4e4:	460c      	mov	r4, r1
 800b4e6:	461e      	mov	r6, r3
 800b4e8:	f101 0c14 	add.w	ip, r1, #20
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	f8dc 3000 	ldr.w	r3, [ip]
 800b4f2:	b299      	uxth	r1, r3
 800b4f4:	fb02 6101 	mla	r1, r2, r1, r6
 800b4f8:	0c1e      	lsrs	r6, r3, #16
 800b4fa:	0c0b      	lsrs	r3, r1, #16
 800b4fc:	fb02 3306 	mla	r3, r2, r6, r3
 800b500:	b289      	uxth	r1, r1
 800b502:	3001      	adds	r0, #1
 800b504:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b508:	4285      	cmp	r5, r0
 800b50a:	f84c 1b04 	str.w	r1, [ip], #4
 800b50e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b512:	dcec      	bgt.n	800b4ee <__multadd+0x12>
 800b514:	b30e      	cbz	r6, 800b55a <__multadd+0x7e>
 800b516:	68a3      	ldr	r3, [r4, #8]
 800b518:	42ab      	cmp	r3, r5
 800b51a:	dc19      	bgt.n	800b550 <__multadd+0x74>
 800b51c:	6861      	ldr	r1, [r4, #4]
 800b51e:	4638      	mov	r0, r7
 800b520:	3101      	adds	r1, #1
 800b522:	f7ff ff79 	bl	800b418 <_Balloc>
 800b526:	4680      	mov	r8, r0
 800b528:	b928      	cbnz	r0, 800b536 <__multadd+0x5a>
 800b52a:	4602      	mov	r2, r0
 800b52c:	4b0c      	ldr	r3, [pc, #48]	@ (800b560 <__multadd+0x84>)
 800b52e:	480d      	ldr	r0, [pc, #52]	@ (800b564 <__multadd+0x88>)
 800b530:	21ba      	movs	r1, #186	@ 0xba
 800b532:	f000 fd65 	bl	800c000 <__assert_func>
 800b536:	6922      	ldr	r2, [r4, #16]
 800b538:	3202      	adds	r2, #2
 800b53a:	f104 010c 	add.w	r1, r4, #12
 800b53e:	0092      	lsls	r2, r2, #2
 800b540:	300c      	adds	r0, #12
 800b542:	f7ff f932 	bl	800a7aa <memcpy>
 800b546:	4621      	mov	r1, r4
 800b548:	4638      	mov	r0, r7
 800b54a:	f7ff ffa5 	bl	800b498 <_Bfree>
 800b54e:	4644      	mov	r4, r8
 800b550:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b554:	3501      	adds	r5, #1
 800b556:	615e      	str	r6, [r3, #20]
 800b558:	6125      	str	r5, [r4, #16]
 800b55a:	4620      	mov	r0, r4
 800b55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b560:	0800c744 	.word	0x0800c744
 800b564:	0800c755 	.word	0x0800c755

0800b568 <__hi0bits>:
 800b568:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b56c:	4603      	mov	r3, r0
 800b56e:	bf36      	itet	cc
 800b570:	0403      	lslcc	r3, r0, #16
 800b572:	2000      	movcs	r0, #0
 800b574:	2010      	movcc	r0, #16
 800b576:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b57a:	bf3c      	itt	cc
 800b57c:	021b      	lslcc	r3, r3, #8
 800b57e:	3008      	addcc	r0, #8
 800b580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b584:	bf3c      	itt	cc
 800b586:	011b      	lslcc	r3, r3, #4
 800b588:	3004      	addcc	r0, #4
 800b58a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b58e:	bf3c      	itt	cc
 800b590:	009b      	lslcc	r3, r3, #2
 800b592:	3002      	addcc	r0, #2
 800b594:	2b00      	cmp	r3, #0
 800b596:	db05      	blt.n	800b5a4 <__hi0bits+0x3c>
 800b598:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b59c:	f100 0001 	add.w	r0, r0, #1
 800b5a0:	bf08      	it	eq
 800b5a2:	2020      	moveq	r0, #32
 800b5a4:	4770      	bx	lr

0800b5a6 <__lo0bits>:
 800b5a6:	6803      	ldr	r3, [r0, #0]
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	f013 0007 	ands.w	r0, r3, #7
 800b5ae:	d00b      	beq.n	800b5c8 <__lo0bits+0x22>
 800b5b0:	07d9      	lsls	r1, r3, #31
 800b5b2:	d421      	bmi.n	800b5f8 <__lo0bits+0x52>
 800b5b4:	0798      	lsls	r0, r3, #30
 800b5b6:	bf49      	itett	mi
 800b5b8:	085b      	lsrmi	r3, r3, #1
 800b5ba:	089b      	lsrpl	r3, r3, #2
 800b5bc:	2001      	movmi	r0, #1
 800b5be:	6013      	strmi	r3, [r2, #0]
 800b5c0:	bf5c      	itt	pl
 800b5c2:	6013      	strpl	r3, [r2, #0]
 800b5c4:	2002      	movpl	r0, #2
 800b5c6:	4770      	bx	lr
 800b5c8:	b299      	uxth	r1, r3
 800b5ca:	b909      	cbnz	r1, 800b5d0 <__lo0bits+0x2a>
 800b5cc:	0c1b      	lsrs	r3, r3, #16
 800b5ce:	2010      	movs	r0, #16
 800b5d0:	b2d9      	uxtb	r1, r3
 800b5d2:	b909      	cbnz	r1, 800b5d8 <__lo0bits+0x32>
 800b5d4:	3008      	adds	r0, #8
 800b5d6:	0a1b      	lsrs	r3, r3, #8
 800b5d8:	0719      	lsls	r1, r3, #28
 800b5da:	bf04      	itt	eq
 800b5dc:	091b      	lsreq	r3, r3, #4
 800b5de:	3004      	addeq	r0, #4
 800b5e0:	0799      	lsls	r1, r3, #30
 800b5e2:	bf04      	itt	eq
 800b5e4:	089b      	lsreq	r3, r3, #2
 800b5e6:	3002      	addeq	r0, #2
 800b5e8:	07d9      	lsls	r1, r3, #31
 800b5ea:	d403      	bmi.n	800b5f4 <__lo0bits+0x4e>
 800b5ec:	085b      	lsrs	r3, r3, #1
 800b5ee:	f100 0001 	add.w	r0, r0, #1
 800b5f2:	d003      	beq.n	800b5fc <__lo0bits+0x56>
 800b5f4:	6013      	str	r3, [r2, #0]
 800b5f6:	4770      	bx	lr
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	4770      	bx	lr
 800b5fc:	2020      	movs	r0, #32
 800b5fe:	4770      	bx	lr

0800b600 <__i2b>:
 800b600:	b510      	push	{r4, lr}
 800b602:	460c      	mov	r4, r1
 800b604:	2101      	movs	r1, #1
 800b606:	f7ff ff07 	bl	800b418 <_Balloc>
 800b60a:	4602      	mov	r2, r0
 800b60c:	b928      	cbnz	r0, 800b61a <__i2b+0x1a>
 800b60e:	4b05      	ldr	r3, [pc, #20]	@ (800b624 <__i2b+0x24>)
 800b610:	4805      	ldr	r0, [pc, #20]	@ (800b628 <__i2b+0x28>)
 800b612:	f240 1145 	movw	r1, #325	@ 0x145
 800b616:	f000 fcf3 	bl	800c000 <__assert_func>
 800b61a:	2301      	movs	r3, #1
 800b61c:	6144      	str	r4, [r0, #20]
 800b61e:	6103      	str	r3, [r0, #16]
 800b620:	bd10      	pop	{r4, pc}
 800b622:	bf00      	nop
 800b624:	0800c744 	.word	0x0800c744
 800b628:	0800c755 	.word	0x0800c755

0800b62c <__multiply>:
 800b62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b630:	4614      	mov	r4, r2
 800b632:	690a      	ldr	r2, [r1, #16]
 800b634:	6923      	ldr	r3, [r4, #16]
 800b636:	429a      	cmp	r2, r3
 800b638:	bfa8      	it	ge
 800b63a:	4623      	movge	r3, r4
 800b63c:	460f      	mov	r7, r1
 800b63e:	bfa4      	itt	ge
 800b640:	460c      	movge	r4, r1
 800b642:	461f      	movge	r7, r3
 800b644:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b648:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b64c:	68a3      	ldr	r3, [r4, #8]
 800b64e:	6861      	ldr	r1, [r4, #4]
 800b650:	eb0a 0609 	add.w	r6, sl, r9
 800b654:	42b3      	cmp	r3, r6
 800b656:	b085      	sub	sp, #20
 800b658:	bfb8      	it	lt
 800b65a:	3101      	addlt	r1, #1
 800b65c:	f7ff fedc 	bl	800b418 <_Balloc>
 800b660:	b930      	cbnz	r0, 800b670 <__multiply+0x44>
 800b662:	4602      	mov	r2, r0
 800b664:	4b44      	ldr	r3, [pc, #272]	@ (800b778 <__multiply+0x14c>)
 800b666:	4845      	ldr	r0, [pc, #276]	@ (800b77c <__multiply+0x150>)
 800b668:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b66c:	f000 fcc8 	bl	800c000 <__assert_func>
 800b670:	f100 0514 	add.w	r5, r0, #20
 800b674:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b678:	462b      	mov	r3, r5
 800b67a:	2200      	movs	r2, #0
 800b67c:	4543      	cmp	r3, r8
 800b67e:	d321      	bcc.n	800b6c4 <__multiply+0x98>
 800b680:	f107 0114 	add.w	r1, r7, #20
 800b684:	f104 0214 	add.w	r2, r4, #20
 800b688:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b68c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b690:	9302      	str	r3, [sp, #8]
 800b692:	1b13      	subs	r3, r2, r4
 800b694:	3b15      	subs	r3, #21
 800b696:	f023 0303 	bic.w	r3, r3, #3
 800b69a:	3304      	adds	r3, #4
 800b69c:	f104 0715 	add.w	r7, r4, #21
 800b6a0:	42ba      	cmp	r2, r7
 800b6a2:	bf38      	it	cc
 800b6a4:	2304      	movcc	r3, #4
 800b6a6:	9301      	str	r3, [sp, #4]
 800b6a8:	9b02      	ldr	r3, [sp, #8]
 800b6aa:	9103      	str	r1, [sp, #12]
 800b6ac:	428b      	cmp	r3, r1
 800b6ae:	d80c      	bhi.n	800b6ca <__multiply+0x9e>
 800b6b0:	2e00      	cmp	r6, #0
 800b6b2:	dd03      	ble.n	800b6bc <__multiply+0x90>
 800b6b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d05b      	beq.n	800b774 <__multiply+0x148>
 800b6bc:	6106      	str	r6, [r0, #16]
 800b6be:	b005      	add	sp, #20
 800b6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c4:	f843 2b04 	str.w	r2, [r3], #4
 800b6c8:	e7d8      	b.n	800b67c <__multiply+0x50>
 800b6ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800b6ce:	f1ba 0f00 	cmp.w	sl, #0
 800b6d2:	d024      	beq.n	800b71e <__multiply+0xf2>
 800b6d4:	f104 0e14 	add.w	lr, r4, #20
 800b6d8:	46a9      	mov	r9, r5
 800b6da:	f04f 0c00 	mov.w	ip, #0
 800b6de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6e2:	f8d9 3000 	ldr.w	r3, [r9]
 800b6e6:	fa1f fb87 	uxth.w	fp, r7
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	fb0a 330b 	mla	r3, sl, fp, r3
 800b6f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b6f4:	f8d9 7000 	ldr.w	r7, [r9]
 800b6f8:	4463      	add	r3, ip
 800b6fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b6fe:	fb0a c70b 	mla	r7, sl, fp, ip
 800b702:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b706:	b29b      	uxth	r3, r3
 800b708:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b70c:	4572      	cmp	r2, lr
 800b70e:	f849 3b04 	str.w	r3, [r9], #4
 800b712:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b716:	d8e2      	bhi.n	800b6de <__multiply+0xb2>
 800b718:	9b01      	ldr	r3, [sp, #4]
 800b71a:	f845 c003 	str.w	ip, [r5, r3]
 800b71e:	9b03      	ldr	r3, [sp, #12]
 800b720:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b724:	3104      	adds	r1, #4
 800b726:	f1b9 0f00 	cmp.w	r9, #0
 800b72a:	d021      	beq.n	800b770 <__multiply+0x144>
 800b72c:	682b      	ldr	r3, [r5, #0]
 800b72e:	f104 0c14 	add.w	ip, r4, #20
 800b732:	46ae      	mov	lr, r5
 800b734:	f04f 0a00 	mov.w	sl, #0
 800b738:	f8bc b000 	ldrh.w	fp, [ip]
 800b73c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b740:	fb09 770b 	mla	r7, r9, fp, r7
 800b744:	4457      	add	r7, sl
 800b746:	b29b      	uxth	r3, r3
 800b748:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b74c:	f84e 3b04 	str.w	r3, [lr], #4
 800b750:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b754:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b758:	f8be 3000 	ldrh.w	r3, [lr]
 800b75c:	fb09 330a 	mla	r3, r9, sl, r3
 800b760:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b764:	4562      	cmp	r2, ip
 800b766:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b76a:	d8e5      	bhi.n	800b738 <__multiply+0x10c>
 800b76c:	9f01      	ldr	r7, [sp, #4]
 800b76e:	51eb      	str	r3, [r5, r7]
 800b770:	3504      	adds	r5, #4
 800b772:	e799      	b.n	800b6a8 <__multiply+0x7c>
 800b774:	3e01      	subs	r6, #1
 800b776:	e79b      	b.n	800b6b0 <__multiply+0x84>
 800b778:	0800c744 	.word	0x0800c744
 800b77c:	0800c755 	.word	0x0800c755

0800b780 <__pow5mult>:
 800b780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b784:	4615      	mov	r5, r2
 800b786:	f012 0203 	ands.w	r2, r2, #3
 800b78a:	4607      	mov	r7, r0
 800b78c:	460e      	mov	r6, r1
 800b78e:	d007      	beq.n	800b7a0 <__pow5mult+0x20>
 800b790:	4c25      	ldr	r4, [pc, #148]	@ (800b828 <__pow5mult+0xa8>)
 800b792:	3a01      	subs	r2, #1
 800b794:	2300      	movs	r3, #0
 800b796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b79a:	f7ff fe9f 	bl	800b4dc <__multadd>
 800b79e:	4606      	mov	r6, r0
 800b7a0:	10ad      	asrs	r5, r5, #2
 800b7a2:	d03d      	beq.n	800b820 <__pow5mult+0xa0>
 800b7a4:	69fc      	ldr	r4, [r7, #28]
 800b7a6:	b97c      	cbnz	r4, 800b7c8 <__pow5mult+0x48>
 800b7a8:	2010      	movs	r0, #16
 800b7aa:	f7fe f86f 	bl	800988c <malloc>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	61f8      	str	r0, [r7, #28]
 800b7b2:	b928      	cbnz	r0, 800b7c0 <__pow5mult+0x40>
 800b7b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b82c <__pow5mult+0xac>)
 800b7b6:	481e      	ldr	r0, [pc, #120]	@ (800b830 <__pow5mult+0xb0>)
 800b7b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b7bc:	f000 fc20 	bl	800c000 <__assert_func>
 800b7c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7c4:	6004      	str	r4, [r0, #0]
 800b7c6:	60c4      	str	r4, [r0, #12]
 800b7c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b7cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7d0:	b94c      	cbnz	r4, 800b7e6 <__pow5mult+0x66>
 800b7d2:	f240 2171 	movw	r1, #625	@ 0x271
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	f7ff ff12 	bl	800b600 <__i2b>
 800b7dc:	2300      	movs	r3, #0
 800b7de:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	6003      	str	r3, [r0, #0]
 800b7e6:	f04f 0900 	mov.w	r9, #0
 800b7ea:	07eb      	lsls	r3, r5, #31
 800b7ec:	d50a      	bpl.n	800b804 <__pow5mult+0x84>
 800b7ee:	4631      	mov	r1, r6
 800b7f0:	4622      	mov	r2, r4
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	f7ff ff1a 	bl	800b62c <__multiply>
 800b7f8:	4631      	mov	r1, r6
 800b7fa:	4680      	mov	r8, r0
 800b7fc:	4638      	mov	r0, r7
 800b7fe:	f7ff fe4b 	bl	800b498 <_Bfree>
 800b802:	4646      	mov	r6, r8
 800b804:	106d      	asrs	r5, r5, #1
 800b806:	d00b      	beq.n	800b820 <__pow5mult+0xa0>
 800b808:	6820      	ldr	r0, [r4, #0]
 800b80a:	b938      	cbnz	r0, 800b81c <__pow5mult+0x9c>
 800b80c:	4622      	mov	r2, r4
 800b80e:	4621      	mov	r1, r4
 800b810:	4638      	mov	r0, r7
 800b812:	f7ff ff0b 	bl	800b62c <__multiply>
 800b816:	6020      	str	r0, [r4, #0]
 800b818:	f8c0 9000 	str.w	r9, [r0]
 800b81c:	4604      	mov	r4, r0
 800b81e:	e7e4      	b.n	800b7ea <__pow5mult+0x6a>
 800b820:	4630      	mov	r0, r6
 800b822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b826:	bf00      	nop
 800b828:	0800c7b0 	.word	0x0800c7b0
 800b82c:	0800c6d5 	.word	0x0800c6d5
 800b830:	0800c755 	.word	0x0800c755

0800b834 <__lshift>:
 800b834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b838:	460c      	mov	r4, r1
 800b83a:	6849      	ldr	r1, [r1, #4]
 800b83c:	6923      	ldr	r3, [r4, #16]
 800b83e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b842:	68a3      	ldr	r3, [r4, #8]
 800b844:	4607      	mov	r7, r0
 800b846:	4691      	mov	r9, r2
 800b848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b84c:	f108 0601 	add.w	r6, r8, #1
 800b850:	42b3      	cmp	r3, r6
 800b852:	db0b      	blt.n	800b86c <__lshift+0x38>
 800b854:	4638      	mov	r0, r7
 800b856:	f7ff fddf 	bl	800b418 <_Balloc>
 800b85a:	4605      	mov	r5, r0
 800b85c:	b948      	cbnz	r0, 800b872 <__lshift+0x3e>
 800b85e:	4602      	mov	r2, r0
 800b860:	4b28      	ldr	r3, [pc, #160]	@ (800b904 <__lshift+0xd0>)
 800b862:	4829      	ldr	r0, [pc, #164]	@ (800b908 <__lshift+0xd4>)
 800b864:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b868:	f000 fbca 	bl	800c000 <__assert_func>
 800b86c:	3101      	adds	r1, #1
 800b86e:	005b      	lsls	r3, r3, #1
 800b870:	e7ee      	b.n	800b850 <__lshift+0x1c>
 800b872:	2300      	movs	r3, #0
 800b874:	f100 0114 	add.w	r1, r0, #20
 800b878:	f100 0210 	add.w	r2, r0, #16
 800b87c:	4618      	mov	r0, r3
 800b87e:	4553      	cmp	r3, sl
 800b880:	db33      	blt.n	800b8ea <__lshift+0xb6>
 800b882:	6920      	ldr	r0, [r4, #16]
 800b884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b888:	f104 0314 	add.w	r3, r4, #20
 800b88c:	f019 091f 	ands.w	r9, r9, #31
 800b890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b898:	d02b      	beq.n	800b8f2 <__lshift+0xbe>
 800b89a:	f1c9 0e20 	rsb	lr, r9, #32
 800b89e:	468a      	mov	sl, r1
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	6818      	ldr	r0, [r3, #0]
 800b8a4:	fa00 f009 	lsl.w	r0, r0, r9
 800b8a8:	4310      	orrs	r0, r2
 800b8aa:	f84a 0b04 	str.w	r0, [sl], #4
 800b8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8b2:	459c      	cmp	ip, r3
 800b8b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8b8:	d8f3      	bhi.n	800b8a2 <__lshift+0x6e>
 800b8ba:	ebac 0304 	sub.w	r3, ip, r4
 800b8be:	3b15      	subs	r3, #21
 800b8c0:	f023 0303 	bic.w	r3, r3, #3
 800b8c4:	3304      	adds	r3, #4
 800b8c6:	f104 0015 	add.w	r0, r4, #21
 800b8ca:	4584      	cmp	ip, r0
 800b8cc:	bf38      	it	cc
 800b8ce:	2304      	movcc	r3, #4
 800b8d0:	50ca      	str	r2, [r1, r3]
 800b8d2:	b10a      	cbz	r2, 800b8d8 <__lshift+0xa4>
 800b8d4:	f108 0602 	add.w	r6, r8, #2
 800b8d8:	3e01      	subs	r6, #1
 800b8da:	4638      	mov	r0, r7
 800b8dc:	612e      	str	r6, [r5, #16]
 800b8de:	4621      	mov	r1, r4
 800b8e0:	f7ff fdda 	bl	800b498 <_Bfree>
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	e7c5      	b.n	800b87e <__lshift+0x4a>
 800b8f2:	3904      	subs	r1, #4
 800b8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8fc:	459c      	cmp	ip, r3
 800b8fe:	d8f9      	bhi.n	800b8f4 <__lshift+0xc0>
 800b900:	e7ea      	b.n	800b8d8 <__lshift+0xa4>
 800b902:	bf00      	nop
 800b904:	0800c744 	.word	0x0800c744
 800b908:	0800c755 	.word	0x0800c755

0800b90c <__mcmp>:
 800b90c:	690a      	ldr	r2, [r1, #16]
 800b90e:	4603      	mov	r3, r0
 800b910:	6900      	ldr	r0, [r0, #16]
 800b912:	1a80      	subs	r0, r0, r2
 800b914:	b530      	push	{r4, r5, lr}
 800b916:	d10e      	bne.n	800b936 <__mcmp+0x2a>
 800b918:	3314      	adds	r3, #20
 800b91a:	3114      	adds	r1, #20
 800b91c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b92c:	4295      	cmp	r5, r2
 800b92e:	d003      	beq.n	800b938 <__mcmp+0x2c>
 800b930:	d205      	bcs.n	800b93e <__mcmp+0x32>
 800b932:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b936:	bd30      	pop	{r4, r5, pc}
 800b938:	42a3      	cmp	r3, r4
 800b93a:	d3f3      	bcc.n	800b924 <__mcmp+0x18>
 800b93c:	e7fb      	b.n	800b936 <__mcmp+0x2a>
 800b93e:	2001      	movs	r0, #1
 800b940:	e7f9      	b.n	800b936 <__mcmp+0x2a>
	...

0800b944 <__mdiff>:
 800b944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b948:	4689      	mov	r9, r1
 800b94a:	4606      	mov	r6, r0
 800b94c:	4611      	mov	r1, r2
 800b94e:	4648      	mov	r0, r9
 800b950:	4614      	mov	r4, r2
 800b952:	f7ff ffdb 	bl	800b90c <__mcmp>
 800b956:	1e05      	subs	r5, r0, #0
 800b958:	d112      	bne.n	800b980 <__mdiff+0x3c>
 800b95a:	4629      	mov	r1, r5
 800b95c:	4630      	mov	r0, r6
 800b95e:	f7ff fd5b 	bl	800b418 <_Balloc>
 800b962:	4602      	mov	r2, r0
 800b964:	b928      	cbnz	r0, 800b972 <__mdiff+0x2e>
 800b966:	4b3f      	ldr	r3, [pc, #252]	@ (800ba64 <__mdiff+0x120>)
 800b968:	f240 2137 	movw	r1, #567	@ 0x237
 800b96c:	483e      	ldr	r0, [pc, #248]	@ (800ba68 <__mdiff+0x124>)
 800b96e:	f000 fb47 	bl	800c000 <__assert_func>
 800b972:	2301      	movs	r3, #1
 800b974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b978:	4610      	mov	r0, r2
 800b97a:	b003      	add	sp, #12
 800b97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b980:	bfbc      	itt	lt
 800b982:	464b      	movlt	r3, r9
 800b984:	46a1      	movlt	r9, r4
 800b986:	4630      	mov	r0, r6
 800b988:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b98c:	bfba      	itte	lt
 800b98e:	461c      	movlt	r4, r3
 800b990:	2501      	movlt	r5, #1
 800b992:	2500      	movge	r5, #0
 800b994:	f7ff fd40 	bl	800b418 <_Balloc>
 800b998:	4602      	mov	r2, r0
 800b99a:	b918      	cbnz	r0, 800b9a4 <__mdiff+0x60>
 800b99c:	4b31      	ldr	r3, [pc, #196]	@ (800ba64 <__mdiff+0x120>)
 800b99e:	f240 2145 	movw	r1, #581	@ 0x245
 800b9a2:	e7e3      	b.n	800b96c <__mdiff+0x28>
 800b9a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b9a8:	6926      	ldr	r6, [r4, #16]
 800b9aa:	60c5      	str	r5, [r0, #12]
 800b9ac:	f109 0310 	add.w	r3, r9, #16
 800b9b0:	f109 0514 	add.w	r5, r9, #20
 800b9b4:	f104 0e14 	add.w	lr, r4, #20
 800b9b8:	f100 0b14 	add.w	fp, r0, #20
 800b9bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b9c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b9c4:	9301      	str	r3, [sp, #4]
 800b9c6:	46d9      	mov	r9, fp
 800b9c8:	f04f 0c00 	mov.w	ip, #0
 800b9cc:	9b01      	ldr	r3, [sp, #4]
 800b9ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b9d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b9d6:	9301      	str	r3, [sp, #4]
 800b9d8:	fa1f f38a 	uxth.w	r3, sl
 800b9dc:	4619      	mov	r1, r3
 800b9de:	b283      	uxth	r3, r0
 800b9e0:	1acb      	subs	r3, r1, r3
 800b9e2:	0c00      	lsrs	r0, r0, #16
 800b9e4:	4463      	add	r3, ip
 800b9e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b9ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b9f4:	4576      	cmp	r6, lr
 800b9f6:	f849 3b04 	str.w	r3, [r9], #4
 800b9fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b9fe:	d8e5      	bhi.n	800b9cc <__mdiff+0x88>
 800ba00:	1b33      	subs	r3, r6, r4
 800ba02:	3b15      	subs	r3, #21
 800ba04:	f023 0303 	bic.w	r3, r3, #3
 800ba08:	3415      	adds	r4, #21
 800ba0a:	3304      	adds	r3, #4
 800ba0c:	42a6      	cmp	r6, r4
 800ba0e:	bf38      	it	cc
 800ba10:	2304      	movcc	r3, #4
 800ba12:	441d      	add	r5, r3
 800ba14:	445b      	add	r3, fp
 800ba16:	461e      	mov	r6, r3
 800ba18:	462c      	mov	r4, r5
 800ba1a:	4544      	cmp	r4, r8
 800ba1c:	d30e      	bcc.n	800ba3c <__mdiff+0xf8>
 800ba1e:	f108 0103 	add.w	r1, r8, #3
 800ba22:	1b49      	subs	r1, r1, r5
 800ba24:	f021 0103 	bic.w	r1, r1, #3
 800ba28:	3d03      	subs	r5, #3
 800ba2a:	45a8      	cmp	r8, r5
 800ba2c:	bf38      	it	cc
 800ba2e:	2100      	movcc	r1, #0
 800ba30:	440b      	add	r3, r1
 800ba32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba36:	b191      	cbz	r1, 800ba5e <__mdiff+0x11a>
 800ba38:	6117      	str	r7, [r2, #16]
 800ba3a:	e79d      	b.n	800b978 <__mdiff+0x34>
 800ba3c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba40:	46e6      	mov	lr, ip
 800ba42:	0c08      	lsrs	r0, r1, #16
 800ba44:	fa1c fc81 	uxtah	ip, ip, r1
 800ba48:	4471      	add	r1, lr
 800ba4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ba4e:	b289      	uxth	r1, r1
 800ba50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba54:	f846 1b04 	str.w	r1, [r6], #4
 800ba58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba5c:	e7dd      	b.n	800ba1a <__mdiff+0xd6>
 800ba5e:	3f01      	subs	r7, #1
 800ba60:	e7e7      	b.n	800ba32 <__mdiff+0xee>
 800ba62:	bf00      	nop
 800ba64:	0800c744 	.word	0x0800c744
 800ba68:	0800c755 	.word	0x0800c755

0800ba6c <__d2b>:
 800ba6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba70:	460f      	mov	r7, r1
 800ba72:	2101      	movs	r1, #1
 800ba74:	ec59 8b10 	vmov	r8, r9, d0
 800ba78:	4616      	mov	r6, r2
 800ba7a:	f7ff fccd 	bl	800b418 <_Balloc>
 800ba7e:	4604      	mov	r4, r0
 800ba80:	b930      	cbnz	r0, 800ba90 <__d2b+0x24>
 800ba82:	4602      	mov	r2, r0
 800ba84:	4b23      	ldr	r3, [pc, #140]	@ (800bb14 <__d2b+0xa8>)
 800ba86:	4824      	ldr	r0, [pc, #144]	@ (800bb18 <__d2b+0xac>)
 800ba88:	f240 310f 	movw	r1, #783	@ 0x30f
 800ba8c:	f000 fab8 	bl	800c000 <__assert_func>
 800ba90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba98:	b10d      	cbz	r5, 800ba9e <__d2b+0x32>
 800ba9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba9e:	9301      	str	r3, [sp, #4]
 800baa0:	f1b8 0300 	subs.w	r3, r8, #0
 800baa4:	d023      	beq.n	800baee <__d2b+0x82>
 800baa6:	4668      	mov	r0, sp
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	f7ff fd7c 	bl	800b5a6 <__lo0bits>
 800baae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bab2:	b1d0      	cbz	r0, 800baea <__d2b+0x7e>
 800bab4:	f1c0 0320 	rsb	r3, r0, #32
 800bab8:	fa02 f303 	lsl.w	r3, r2, r3
 800babc:	430b      	orrs	r3, r1
 800babe:	40c2      	lsrs	r2, r0
 800bac0:	6163      	str	r3, [r4, #20]
 800bac2:	9201      	str	r2, [sp, #4]
 800bac4:	9b01      	ldr	r3, [sp, #4]
 800bac6:	61a3      	str	r3, [r4, #24]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	bf0c      	ite	eq
 800bacc:	2201      	moveq	r2, #1
 800bace:	2202      	movne	r2, #2
 800bad0:	6122      	str	r2, [r4, #16]
 800bad2:	b1a5      	cbz	r5, 800bafe <__d2b+0x92>
 800bad4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bad8:	4405      	add	r5, r0
 800bada:	603d      	str	r5, [r7, #0]
 800badc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bae0:	6030      	str	r0, [r6, #0]
 800bae2:	4620      	mov	r0, r4
 800bae4:	b003      	add	sp, #12
 800bae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baea:	6161      	str	r1, [r4, #20]
 800baec:	e7ea      	b.n	800bac4 <__d2b+0x58>
 800baee:	a801      	add	r0, sp, #4
 800baf0:	f7ff fd59 	bl	800b5a6 <__lo0bits>
 800baf4:	9b01      	ldr	r3, [sp, #4]
 800baf6:	6163      	str	r3, [r4, #20]
 800baf8:	3020      	adds	r0, #32
 800bafa:	2201      	movs	r2, #1
 800bafc:	e7e8      	b.n	800bad0 <__d2b+0x64>
 800bafe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bb06:	6038      	str	r0, [r7, #0]
 800bb08:	6918      	ldr	r0, [r3, #16]
 800bb0a:	f7ff fd2d 	bl	800b568 <__hi0bits>
 800bb0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb12:	e7e5      	b.n	800bae0 <__d2b+0x74>
 800bb14:	0800c744 	.word	0x0800c744
 800bb18:	0800c755 	.word	0x0800c755

0800bb1c <__sfputc_r>:
 800bb1c:	6893      	ldr	r3, [r2, #8]
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	b410      	push	{r4}
 800bb24:	6093      	str	r3, [r2, #8]
 800bb26:	da08      	bge.n	800bb3a <__sfputc_r+0x1e>
 800bb28:	6994      	ldr	r4, [r2, #24]
 800bb2a:	42a3      	cmp	r3, r4
 800bb2c:	db01      	blt.n	800bb32 <__sfputc_r+0x16>
 800bb2e:	290a      	cmp	r1, #10
 800bb30:	d103      	bne.n	800bb3a <__sfputc_r+0x1e>
 800bb32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb36:	f7fe bd14 	b.w	800a562 <__swbuf_r>
 800bb3a:	6813      	ldr	r3, [r2, #0]
 800bb3c:	1c58      	adds	r0, r3, #1
 800bb3e:	6010      	str	r0, [r2, #0]
 800bb40:	7019      	strb	r1, [r3, #0]
 800bb42:	4608      	mov	r0, r1
 800bb44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb48:	4770      	bx	lr

0800bb4a <__sfputs_r>:
 800bb4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4c:	4606      	mov	r6, r0
 800bb4e:	460f      	mov	r7, r1
 800bb50:	4614      	mov	r4, r2
 800bb52:	18d5      	adds	r5, r2, r3
 800bb54:	42ac      	cmp	r4, r5
 800bb56:	d101      	bne.n	800bb5c <__sfputs_r+0x12>
 800bb58:	2000      	movs	r0, #0
 800bb5a:	e007      	b.n	800bb6c <__sfputs_r+0x22>
 800bb5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb60:	463a      	mov	r2, r7
 800bb62:	4630      	mov	r0, r6
 800bb64:	f7ff ffda 	bl	800bb1c <__sfputc_r>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d1f3      	bne.n	800bb54 <__sfputs_r+0xa>
 800bb6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb70 <_vfiprintf_r>:
 800bb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	460d      	mov	r5, r1
 800bb76:	b09d      	sub	sp, #116	@ 0x74
 800bb78:	4614      	mov	r4, r2
 800bb7a:	4698      	mov	r8, r3
 800bb7c:	4606      	mov	r6, r0
 800bb7e:	b118      	cbz	r0, 800bb88 <_vfiprintf_r+0x18>
 800bb80:	6a03      	ldr	r3, [r0, #32]
 800bb82:	b90b      	cbnz	r3, 800bb88 <_vfiprintf_r+0x18>
 800bb84:	f7fe fc04 	bl	800a390 <__sinit>
 800bb88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb8a:	07d9      	lsls	r1, r3, #31
 800bb8c:	d405      	bmi.n	800bb9a <_vfiprintf_r+0x2a>
 800bb8e:	89ab      	ldrh	r3, [r5, #12]
 800bb90:	059a      	lsls	r2, r3, #22
 800bb92:	d402      	bmi.n	800bb9a <_vfiprintf_r+0x2a>
 800bb94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb96:	f7fe fe06 	bl	800a7a6 <__retarget_lock_acquire_recursive>
 800bb9a:	89ab      	ldrh	r3, [r5, #12]
 800bb9c:	071b      	lsls	r3, r3, #28
 800bb9e:	d501      	bpl.n	800bba4 <_vfiprintf_r+0x34>
 800bba0:	692b      	ldr	r3, [r5, #16]
 800bba2:	b99b      	cbnz	r3, 800bbcc <_vfiprintf_r+0x5c>
 800bba4:	4629      	mov	r1, r5
 800bba6:	4630      	mov	r0, r6
 800bba8:	f7fe fd1a 	bl	800a5e0 <__swsetup_r>
 800bbac:	b170      	cbz	r0, 800bbcc <_vfiprintf_r+0x5c>
 800bbae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbb0:	07dc      	lsls	r4, r3, #31
 800bbb2:	d504      	bpl.n	800bbbe <_vfiprintf_r+0x4e>
 800bbb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbb8:	b01d      	add	sp, #116	@ 0x74
 800bbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbbe:	89ab      	ldrh	r3, [r5, #12]
 800bbc0:	0598      	lsls	r0, r3, #22
 800bbc2:	d4f7      	bmi.n	800bbb4 <_vfiprintf_r+0x44>
 800bbc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbc6:	f7fe fdef 	bl	800a7a8 <__retarget_lock_release_recursive>
 800bbca:	e7f3      	b.n	800bbb4 <_vfiprintf_r+0x44>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbd0:	2320      	movs	r3, #32
 800bbd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbda:	2330      	movs	r3, #48	@ 0x30
 800bbdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd8c <_vfiprintf_r+0x21c>
 800bbe0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbe4:	f04f 0901 	mov.w	r9, #1
 800bbe8:	4623      	mov	r3, r4
 800bbea:	469a      	mov	sl, r3
 800bbec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbf0:	b10a      	cbz	r2, 800bbf6 <_vfiprintf_r+0x86>
 800bbf2:	2a25      	cmp	r2, #37	@ 0x25
 800bbf4:	d1f9      	bne.n	800bbea <_vfiprintf_r+0x7a>
 800bbf6:	ebba 0b04 	subs.w	fp, sl, r4
 800bbfa:	d00b      	beq.n	800bc14 <_vfiprintf_r+0xa4>
 800bbfc:	465b      	mov	r3, fp
 800bbfe:	4622      	mov	r2, r4
 800bc00:	4629      	mov	r1, r5
 800bc02:	4630      	mov	r0, r6
 800bc04:	f7ff ffa1 	bl	800bb4a <__sfputs_r>
 800bc08:	3001      	adds	r0, #1
 800bc0a:	f000 80a7 	beq.w	800bd5c <_vfiprintf_r+0x1ec>
 800bc0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc10:	445a      	add	r2, fp
 800bc12:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc14:	f89a 3000 	ldrb.w	r3, [sl]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f000 809f 	beq.w	800bd5c <_vfiprintf_r+0x1ec>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc28:	f10a 0a01 	add.w	sl, sl, #1
 800bc2c:	9304      	str	r3, [sp, #16]
 800bc2e:	9307      	str	r3, [sp, #28]
 800bc30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc34:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc36:	4654      	mov	r4, sl
 800bc38:	2205      	movs	r2, #5
 800bc3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc3e:	4853      	ldr	r0, [pc, #332]	@ (800bd8c <_vfiprintf_r+0x21c>)
 800bc40:	f7f4 fb4e 	bl	80002e0 <memchr>
 800bc44:	9a04      	ldr	r2, [sp, #16]
 800bc46:	b9d8      	cbnz	r0, 800bc80 <_vfiprintf_r+0x110>
 800bc48:	06d1      	lsls	r1, r2, #27
 800bc4a:	bf44      	itt	mi
 800bc4c:	2320      	movmi	r3, #32
 800bc4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc52:	0713      	lsls	r3, r2, #28
 800bc54:	bf44      	itt	mi
 800bc56:	232b      	movmi	r3, #43	@ 0x2b
 800bc58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc5c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc60:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc62:	d015      	beq.n	800bc90 <_vfiprintf_r+0x120>
 800bc64:	9a07      	ldr	r2, [sp, #28]
 800bc66:	4654      	mov	r4, sl
 800bc68:	2000      	movs	r0, #0
 800bc6a:	f04f 0c0a 	mov.w	ip, #10
 800bc6e:	4621      	mov	r1, r4
 800bc70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc74:	3b30      	subs	r3, #48	@ 0x30
 800bc76:	2b09      	cmp	r3, #9
 800bc78:	d94b      	bls.n	800bd12 <_vfiprintf_r+0x1a2>
 800bc7a:	b1b0      	cbz	r0, 800bcaa <_vfiprintf_r+0x13a>
 800bc7c:	9207      	str	r2, [sp, #28]
 800bc7e:	e014      	b.n	800bcaa <_vfiprintf_r+0x13a>
 800bc80:	eba0 0308 	sub.w	r3, r0, r8
 800bc84:	fa09 f303 	lsl.w	r3, r9, r3
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	9304      	str	r3, [sp, #16]
 800bc8c:	46a2      	mov	sl, r4
 800bc8e:	e7d2      	b.n	800bc36 <_vfiprintf_r+0xc6>
 800bc90:	9b03      	ldr	r3, [sp, #12]
 800bc92:	1d19      	adds	r1, r3, #4
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	9103      	str	r1, [sp, #12]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	bfbb      	ittet	lt
 800bc9c:	425b      	neglt	r3, r3
 800bc9e:	f042 0202 	orrlt.w	r2, r2, #2
 800bca2:	9307      	strge	r3, [sp, #28]
 800bca4:	9307      	strlt	r3, [sp, #28]
 800bca6:	bfb8      	it	lt
 800bca8:	9204      	strlt	r2, [sp, #16]
 800bcaa:	7823      	ldrb	r3, [r4, #0]
 800bcac:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcae:	d10a      	bne.n	800bcc6 <_vfiprintf_r+0x156>
 800bcb0:	7863      	ldrb	r3, [r4, #1]
 800bcb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcb4:	d132      	bne.n	800bd1c <_vfiprintf_r+0x1ac>
 800bcb6:	9b03      	ldr	r3, [sp, #12]
 800bcb8:	1d1a      	adds	r2, r3, #4
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	9203      	str	r2, [sp, #12]
 800bcbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcc2:	3402      	adds	r4, #2
 800bcc4:	9305      	str	r3, [sp, #20]
 800bcc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd9c <_vfiprintf_r+0x22c>
 800bcca:	7821      	ldrb	r1, [r4, #0]
 800bccc:	2203      	movs	r2, #3
 800bcce:	4650      	mov	r0, sl
 800bcd0:	f7f4 fb06 	bl	80002e0 <memchr>
 800bcd4:	b138      	cbz	r0, 800bce6 <_vfiprintf_r+0x176>
 800bcd6:	9b04      	ldr	r3, [sp, #16]
 800bcd8:	eba0 000a 	sub.w	r0, r0, sl
 800bcdc:	2240      	movs	r2, #64	@ 0x40
 800bcde:	4082      	lsls	r2, r0
 800bce0:	4313      	orrs	r3, r2
 800bce2:	3401      	adds	r4, #1
 800bce4:	9304      	str	r3, [sp, #16]
 800bce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcea:	4829      	ldr	r0, [pc, #164]	@ (800bd90 <_vfiprintf_r+0x220>)
 800bcec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bcf0:	2206      	movs	r2, #6
 800bcf2:	f7f4 faf5 	bl	80002e0 <memchr>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d03f      	beq.n	800bd7a <_vfiprintf_r+0x20a>
 800bcfa:	4b26      	ldr	r3, [pc, #152]	@ (800bd94 <_vfiprintf_r+0x224>)
 800bcfc:	bb1b      	cbnz	r3, 800bd46 <_vfiprintf_r+0x1d6>
 800bcfe:	9b03      	ldr	r3, [sp, #12]
 800bd00:	3307      	adds	r3, #7
 800bd02:	f023 0307 	bic.w	r3, r3, #7
 800bd06:	3308      	adds	r3, #8
 800bd08:	9303      	str	r3, [sp, #12]
 800bd0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd0c:	443b      	add	r3, r7
 800bd0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd10:	e76a      	b.n	800bbe8 <_vfiprintf_r+0x78>
 800bd12:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd16:	460c      	mov	r4, r1
 800bd18:	2001      	movs	r0, #1
 800bd1a:	e7a8      	b.n	800bc6e <_vfiprintf_r+0xfe>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	3401      	adds	r4, #1
 800bd20:	9305      	str	r3, [sp, #20]
 800bd22:	4619      	mov	r1, r3
 800bd24:	f04f 0c0a 	mov.w	ip, #10
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd2e:	3a30      	subs	r2, #48	@ 0x30
 800bd30:	2a09      	cmp	r2, #9
 800bd32:	d903      	bls.n	800bd3c <_vfiprintf_r+0x1cc>
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d0c6      	beq.n	800bcc6 <_vfiprintf_r+0x156>
 800bd38:	9105      	str	r1, [sp, #20]
 800bd3a:	e7c4      	b.n	800bcc6 <_vfiprintf_r+0x156>
 800bd3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd40:	4604      	mov	r4, r0
 800bd42:	2301      	movs	r3, #1
 800bd44:	e7f0      	b.n	800bd28 <_vfiprintf_r+0x1b8>
 800bd46:	ab03      	add	r3, sp, #12
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	462a      	mov	r2, r5
 800bd4c:	4b12      	ldr	r3, [pc, #72]	@ (800bd98 <_vfiprintf_r+0x228>)
 800bd4e:	a904      	add	r1, sp, #16
 800bd50:	4630      	mov	r0, r6
 800bd52:	f7fd fee9 	bl	8009b28 <_printf_float>
 800bd56:	4607      	mov	r7, r0
 800bd58:	1c78      	adds	r0, r7, #1
 800bd5a:	d1d6      	bne.n	800bd0a <_vfiprintf_r+0x19a>
 800bd5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd5e:	07d9      	lsls	r1, r3, #31
 800bd60:	d405      	bmi.n	800bd6e <_vfiprintf_r+0x1fe>
 800bd62:	89ab      	ldrh	r3, [r5, #12]
 800bd64:	059a      	lsls	r2, r3, #22
 800bd66:	d402      	bmi.n	800bd6e <_vfiprintf_r+0x1fe>
 800bd68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd6a:	f7fe fd1d 	bl	800a7a8 <__retarget_lock_release_recursive>
 800bd6e:	89ab      	ldrh	r3, [r5, #12]
 800bd70:	065b      	lsls	r3, r3, #25
 800bd72:	f53f af1f 	bmi.w	800bbb4 <_vfiprintf_r+0x44>
 800bd76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd78:	e71e      	b.n	800bbb8 <_vfiprintf_r+0x48>
 800bd7a:	ab03      	add	r3, sp, #12
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	462a      	mov	r2, r5
 800bd80:	4b05      	ldr	r3, [pc, #20]	@ (800bd98 <_vfiprintf_r+0x228>)
 800bd82:	a904      	add	r1, sp, #16
 800bd84:	4630      	mov	r0, r6
 800bd86:	f7fe f957 	bl	800a038 <_printf_i>
 800bd8a:	e7e4      	b.n	800bd56 <_vfiprintf_r+0x1e6>
 800bd8c:	0800c8b0 	.word	0x0800c8b0
 800bd90:	0800c8ba 	.word	0x0800c8ba
 800bd94:	08009b29 	.word	0x08009b29
 800bd98:	0800bb4b 	.word	0x0800bb4b
 800bd9c:	0800c8b6 	.word	0x0800c8b6

0800bda0 <__sflush_r>:
 800bda0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda8:	0716      	lsls	r6, r2, #28
 800bdaa:	4605      	mov	r5, r0
 800bdac:	460c      	mov	r4, r1
 800bdae:	d454      	bmi.n	800be5a <__sflush_r+0xba>
 800bdb0:	684b      	ldr	r3, [r1, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	dc02      	bgt.n	800bdbc <__sflush_r+0x1c>
 800bdb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	dd48      	ble.n	800be4e <__sflush_r+0xae>
 800bdbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdbe:	2e00      	cmp	r6, #0
 800bdc0:	d045      	beq.n	800be4e <__sflush_r+0xae>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bdc8:	682f      	ldr	r7, [r5, #0]
 800bdca:	6a21      	ldr	r1, [r4, #32]
 800bdcc:	602b      	str	r3, [r5, #0]
 800bdce:	d030      	beq.n	800be32 <__sflush_r+0x92>
 800bdd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	0759      	lsls	r1, r3, #29
 800bdd6:	d505      	bpl.n	800bde4 <__sflush_r+0x44>
 800bdd8:	6863      	ldr	r3, [r4, #4]
 800bdda:	1ad2      	subs	r2, r2, r3
 800bddc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bdde:	b10b      	cbz	r3, 800bde4 <__sflush_r+0x44>
 800bde0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bde2:	1ad2      	subs	r2, r2, r3
 800bde4:	2300      	movs	r3, #0
 800bde6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bde8:	6a21      	ldr	r1, [r4, #32]
 800bdea:	4628      	mov	r0, r5
 800bdec:	47b0      	blx	r6
 800bdee:	1c43      	adds	r3, r0, #1
 800bdf0:	89a3      	ldrh	r3, [r4, #12]
 800bdf2:	d106      	bne.n	800be02 <__sflush_r+0x62>
 800bdf4:	6829      	ldr	r1, [r5, #0]
 800bdf6:	291d      	cmp	r1, #29
 800bdf8:	d82b      	bhi.n	800be52 <__sflush_r+0xb2>
 800bdfa:	4a2a      	ldr	r2, [pc, #168]	@ (800bea4 <__sflush_r+0x104>)
 800bdfc:	410a      	asrs	r2, r1
 800bdfe:	07d6      	lsls	r6, r2, #31
 800be00:	d427      	bmi.n	800be52 <__sflush_r+0xb2>
 800be02:	2200      	movs	r2, #0
 800be04:	6062      	str	r2, [r4, #4]
 800be06:	04d9      	lsls	r1, r3, #19
 800be08:	6922      	ldr	r2, [r4, #16]
 800be0a:	6022      	str	r2, [r4, #0]
 800be0c:	d504      	bpl.n	800be18 <__sflush_r+0x78>
 800be0e:	1c42      	adds	r2, r0, #1
 800be10:	d101      	bne.n	800be16 <__sflush_r+0x76>
 800be12:	682b      	ldr	r3, [r5, #0]
 800be14:	b903      	cbnz	r3, 800be18 <__sflush_r+0x78>
 800be16:	6560      	str	r0, [r4, #84]	@ 0x54
 800be18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be1a:	602f      	str	r7, [r5, #0]
 800be1c:	b1b9      	cbz	r1, 800be4e <__sflush_r+0xae>
 800be1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be22:	4299      	cmp	r1, r3
 800be24:	d002      	beq.n	800be2c <__sflush_r+0x8c>
 800be26:	4628      	mov	r0, r5
 800be28:	f7ff faac 	bl	800b384 <_free_r>
 800be2c:	2300      	movs	r3, #0
 800be2e:	6363      	str	r3, [r4, #52]	@ 0x34
 800be30:	e00d      	b.n	800be4e <__sflush_r+0xae>
 800be32:	2301      	movs	r3, #1
 800be34:	4628      	mov	r0, r5
 800be36:	47b0      	blx	r6
 800be38:	4602      	mov	r2, r0
 800be3a:	1c50      	adds	r0, r2, #1
 800be3c:	d1c9      	bne.n	800bdd2 <__sflush_r+0x32>
 800be3e:	682b      	ldr	r3, [r5, #0]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d0c6      	beq.n	800bdd2 <__sflush_r+0x32>
 800be44:	2b1d      	cmp	r3, #29
 800be46:	d001      	beq.n	800be4c <__sflush_r+0xac>
 800be48:	2b16      	cmp	r3, #22
 800be4a:	d11e      	bne.n	800be8a <__sflush_r+0xea>
 800be4c:	602f      	str	r7, [r5, #0]
 800be4e:	2000      	movs	r0, #0
 800be50:	e022      	b.n	800be98 <__sflush_r+0xf8>
 800be52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be56:	b21b      	sxth	r3, r3
 800be58:	e01b      	b.n	800be92 <__sflush_r+0xf2>
 800be5a:	690f      	ldr	r7, [r1, #16]
 800be5c:	2f00      	cmp	r7, #0
 800be5e:	d0f6      	beq.n	800be4e <__sflush_r+0xae>
 800be60:	0793      	lsls	r3, r2, #30
 800be62:	680e      	ldr	r6, [r1, #0]
 800be64:	bf08      	it	eq
 800be66:	694b      	ldreq	r3, [r1, #20]
 800be68:	600f      	str	r7, [r1, #0]
 800be6a:	bf18      	it	ne
 800be6c:	2300      	movne	r3, #0
 800be6e:	eba6 0807 	sub.w	r8, r6, r7
 800be72:	608b      	str	r3, [r1, #8]
 800be74:	f1b8 0f00 	cmp.w	r8, #0
 800be78:	dde9      	ble.n	800be4e <__sflush_r+0xae>
 800be7a:	6a21      	ldr	r1, [r4, #32]
 800be7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800be7e:	4643      	mov	r3, r8
 800be80:	463a      	mov	r2, r7
 800be82:	4628      	mov	r0, r5
 800be84:	47b0      	blx	r6
 800be86:	2800      	cmp	r0, #0
 800be88:	dc08      	bgt.n	800be9c <__sflush_r+0xfc>
 800be8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be92:	81a3      	strh	r3, [r4, #12]
 800be94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be9c:	4407      	add	r7, r0
 800be9e:	eba8 0800 	sub.w	r8, r8, r0
 800bea2:	e7e7      	b.n	800be74 <__sflush_r+0xd4>
 800bea4:	dfbffffe 	.word	0xdfbffffe

0800bea8 <_fflush_r>:
 800bea8:	b538      	push	{r3, r4, r5, lr}
 800beaa:	690b      	ldr	r3, [r1, #16]
 800beac:	4605      	mov	r5, r0
 800beae:	460c      	mov	r4, r1
 800beb0:	b913      	cbnz	r3, 800beb8 <_fflush_r+0x10>
 800beb2:	2500      	movs	r5, #0
 800beb4:	4628      	mov	r0, r5
 800beb6:	bd38      	pop	{r3, r4, r5, pc}
 800beb8:	b118      	cbz	r0, 800bec2 <_fflush_r+0x1a>
 800beba:	6a03      	ldr	r3, [r0, #32]
 800bebc:	b90b      	cbnz	r3, 800bec2 <_fflush_r+0x1a>
 800bebe:	f7fe fa67 	bl	800a390 <__sinit>
 800bec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d0f3      	beq.n	800beb2 <_fflush_r+0xa>
 800beca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800becc:	07d0      	lsls	r0, r2, #31
 800bece:	d404      	bmi.n	800beda <_fflush_r+0x32>
 800bed0:	0599      	lsls	r1, r3, #22
 800bed2:	d402      	bmi.n	800beda <_fflush_r+0x32>
 800bed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bed6:	f7fe fc66 	bl	800a7a6 <__retarget_lock_acquire_recursive>
 800beda:	4628      	mov	r0, r5
 800bedc:	4621      	mov	r1, r4
 800bede:	f7ff ff5f 	bl	800bda0 <__sflush_r>
 800bee2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bee4:	07da      	lsls	r2, r3, #31
 800bee6:	4605      	mov	r5, r0
 800bee8:	d4e4      	bmi.n	800beb4 <_fflush_r+0xc>
 800beea:	89a3      	ldrh	r3, [r4, #12]
 800beec:	059b      	lsls	r3, r3, #22
 800beee:	d4e1      	bmi.n	800beb4 <_fflush_r+0xc>
 800bef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bef2:	f7fe fc59 	bl	800a7a8 <__retarget_lock_release_recursive>
 800bef6:	e7dd      	b.n	800beb4 <_fflush_r+0xc>

0800bef8 <__swhatbuf_r>:
 800bef8:	b570      	push	{r4, r5, r6, lr}
 800befa:	460c      	mov	r4, r1
 800befc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf00:	2900      	cmp	r1, #0
 800bf02:	b096      	sub	sp, #88	@ 0x58
 800bf04:	4615      	mov	r5, r2
 800bf06:	461e      	mov	r6, r3
 800bf08:	da0d      	bge.n	800bf26 <__swhatbuf_r+0x2e>
 800bf0a:	89a3      	ldrh	r3, [r4, #12]
 800bf0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf10:	f04f 0100 	mov.w	r1, #0
 800bf14:	bf14      	ite	ne
 800bf16:	2340      	movne	r3, #64	@ 0x40
 800bf18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	6031      	str	r1, [r6, #0]
 800bf20:	602b      	str	r3, [r5, #0]
 800bf22:	b016      	add	sp, #88	@ 0x58
 800bf24:	bd70      	pop	{r4, r5, r6, pc}
 800bf26:	466a      	mov	r2, sp
 800bf28:	f000 f848 	bl	800bfbc <_fstat_r>
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	dbec      	blt.n	800bf0a <__swhatbuf_r+0x12>
 800bf30:	9901      	ldr	r1, [sp, #4]
 800bf32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf3a:	4259      	negs	r1, r3
 800bf3c:	4159      	adcs	r1, r3
 800bf3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf42:	e7eb      	b.n	800bf1c <__swhatbuf_r+0x24>

0800bf44 <__smakebuf_r>:
 800bf44:	898b      	ldrh	r3, [r1, #12]
 800bf46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf48:	079d      	lsls	r5, r3, #30
 800bf4a:	4606      	mov	r6, r0
 800bf4c:	460c      	mov	r4, r1
 800bf4e:	d507      	bpl.n	800bf60 <__smakebuf_r+0x1c>
 800bf50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	6123      	str	r3, [r4, #16]
 800bf58:	2301      	movs	r3, #1
 800bf5a:	6163      	str	r3, [r4, #20]
 800bf5c:	b003      	add	sp, #12
 800bf5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf60:	ab01      	add	r3, sp, #4
 800bf62:	466a      	mov	r2, sp
 800bf64:	f7ff ffc8 	bl	800bef8 <__swhatbuf_r>
 800bf68:	9f00      	ldr	r7, [sp, #0]
 800bf6a:	4605      	mov	r5, r0
 800bf6c:	4639      	mov	r1, r7
 800bf6e:	4630      	mov	r0, r6
 800bf70:	f7fd fcbe 	bl	80098f0 <_malloc_r>
 800bf74:	b948      	cbnz	r0, 800bf8a <__smakebuf_r+0x46>
 800bf76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf7a:	059a      	lsls	r2, r3, #22
 800bf7c:	d4ee      	bmi.n	800bf5c <__smakebuf_r+0x18>
 800bf7e:	f023 0303 	bic.w	r3, r3, #3
 800bf82:	f043 0302 	orr.w	r3, r3, #2
 800bf86:	81a3      	strh	r3, [r4, #12]
 800bf88:	e7e2      	b.n	800bf50 <__smakebuf_r+0xc>
 800bf8a:	89a3      	ldrh	r3, [r4, #12]
 800bf8c:	6020      	str	r0, [r4, #0]
 800bf8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf92:	81a3      	strh	r3, [r4, #12]
 800bf94:	9b01      	ldr	r3, [sp, #4]
 800bf96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf9a:	b15b      	cbz	r3, 800bfb4 <__smakebuf_r+0x70>
 800bf9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	f000 f81d 	bl	800bfe0 <_isatty_r>
 800bfa6:	b128      	cbz	r0, 800bfb4 <__smakebuf_r+0x70>
 800bfa8:	89a3      	ldrh	r3, [r4, #12]
 800bfaa:	f023 0303 	bic.w	r3, r3, #3
 800bfae:	f043 0301 	orr.w	r3, r3, #1
 800bfb2:	81a3      	strh	r3, [r4, #12]
 800bfb4:	89a3      	ldrh	r3, [r4, #12]
 800bfb6:	431d      	orrs	r5, r3
 800bfb8:	81a5      	strh	r5, [r4, #12]
 800bfba:	e7cf      	b.n	800bf5c <__smakebuf_r+0x18>

0800bfbc <_fstat_r>:
 800bfbc:	b538      	push	{r3, r4, r5, lr}
 800bfbe:	4d07      	ldr	r5, [pc, #28]	@ (800bfdc <_fstat_r+0x20>)
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	4604      	mov	r4, r0
 800bfc4:	4608      	mov	r0, r1
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	602b      	str	r3, [r5, #0]
 800bfca:	f7f6 ff54 	bl	8002e76 <_fstat>
 800bfce:	1c43      	adds	r3, r0, #1
 800bfd0:	d102      	bne.n	800bfd8 <_fstat_r+0x1c>
 800bfd2:	682b      	ldr	r3, [r5, #0]
 800bfd4:	b103      	cbz	r3, 800bfd8 <_fstat_r+0x1c>
 800bfd6:	6023      	str	r3, [r4, #0]
 800bfd8:	bd38      	pop	{r3, r4, r5, pc}
 800bfda:	bf00      	nop
 800bfdc:	24000a5c 	.word	0x24000a5c

0800bfe0 <_isatty_r>:
 800bfe0:	b538      	push	{r3, r4, r5, lr}
 800bfe2:	4d06      	ldr	r5, [pc, #24]	@ (800bffc <_isatty_r+0x1c>)
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	4608      	mov	r0, r1
 800bfea:	602b      	str	r3, [r5, #0]
 800bfec:	f7f6 ff53 	bl	8002e96 <_isatty>
 800bff0:	1c43      	adds	r3, r0, #1
 800bff2:	d102      	bne.n	800bffa <_isatty_r+0x1a>
 800bff4:	682b      	ldr	r3, [r5, #0]
 800bff6:	b103      	cbz	r3, 800bffa <_isatty_r+0x1a>
 800bff8:	6023      	str	r3, [r4, #0]
 800bffa:	bd38      	pop	{r3, r4, r5, pc}
 800bffc:	24000a5c 	.word	0x24000a5c

0800c000 <__assert_func>:
 800c000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c002:	4614      	mov	r4, r2
 800c004:	461a      	mov	r2, r3
 800c006:	4b09      	ldr	r3, [pc, #36]	@ (800c02c <__assert_func+0x2c>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4605      	mov	r5, r0
 800c00c:	68d8      	ldr	r0, [r3, #12]
 800c00e:	b954      	cbnz	r4, 800c026 <__assert_func+0x26>
 800c010:	4b07      	ldr	r3, [pc, #28]	@ (800c030 <__assert_func+0x30>)
 800c012:	461c      	mov	r4, r3
 800c014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c018:	9100      	str	r1, [sp, #0]
 800c01a:	462b      	mov	r3, r5
 800c01c:	4905      	ldr	r1, [pc, #20]	@ (800c034 <__assert_func+0x34>)
 800c01e:	f000 f841 	bl	800c0a4 <fiprintf>
 800c022:	f000 f851 	bl	800c0c8 <abort>
 800c026:	4b04      	ldr	r3, [pc, #16]	@ (800c038 <__assert_func+0x38>)
 800c028:	e7f4      	b.n	800c014 <__assert_func+0x14>
 800c02a:	bf00      	nop
 800c02c:	24000064 	.word	0x24000064
 800c030:	0800c906 	.word	0x0800c906
 800c034:	0800c8d8 	.word	0x0800c8d8
 800c038:	0800c8cb 	.word	0x0800c8cb

0800c03c <_calloc_r>:
 800c03c:	b570      	push	{r4, r5, r6, lr}
 800c03e:	fba1 5402 	umull	r5, r4, r1, r2
 800c042:	b93c      	cbnz	r4, 800c054 <_calloc_r+0x18>
 800c044:	4629      	mov	r1, r5
 800c046:	f7fd fc53 	bl	80098f0 <_malloc_r>
 800c04a:	4606      	mov	r6, r0
 800c04c:	b928      	cbnz	r0, 800c05a <_calloc_r+0x1e>
 800c04e:	2600      	movs	r6, #0
 800c050:	4630      	mov	r0, r6
 800c052:	bd70      	pop	{r4, r5, r6, pc}
 800c054:	220c      	movs	r2, #12
 800c056:	6002      	str	r2, [r0, #0]
 800c058:	e7f9      	b.n	800c04e <_calloc_r+0x12>
 800c05a:	462a      	mov	r2, r5
 800c05c:	4621      	mov	r1, r4
 800c05e:	f7fe fb15 	bl	800a68c <memset>
 800c062:	e7f5      	b.n	800c050 <_calloc_r+0x14>

0800c064 <__ascii_mbtowc>:
 800c064:	b082      	sub	sp, #8
 800c066:	b901      	cbnz	r1, 800c06a <__ascii_mbtowc+0x6>
 800c068:	a901      	add	r1, sp, #4
 800c06a:	b142      	cbz	r2, 800c07e <__ascii_mbtowc+0x1a>
 800c06c:	b14b      	cbz	r3, 800c082 <__ascii_mbtowc+0x1e>
 800c06e:	7813      	ldrb	r3, [r2, #0]
 800c070:	600b      	str	r3, [r1, #0]
 800c072:	7812      	ldrb	r2, [r2, #0]
 800c074:	1e10      	subs	r0, r2, #0
 800c076:	bf18      	it	ne
 800c078:	2001      	movne	r0, #1
 800c07a:	b002      	add	sp, #8
 800c07c:	4770      	bx	lr
 800c07e:	4610      	mov	r0, r2
 800c080:	e7fb      	b.n	800c07a <__ascii_mbtowc+0x16>
 800c082:	f06f 0001 	mvn.w	r0, #1
 800c086:	e7f8      	b.n	800c07a <__ascii_mbtowc+0x16>

0800c088 <__ascii_wctomb>:
 800c088:	4603      	mov	r3, r0
 800c08a:	4608      	mov	r0, r1
 800c08c:	b141      	cbz	r1, 800c0a0 <__ascii_wctomb+0x18>
 800c08e:	2aff      	cmp	r2, #255	@ 0xff
 800c090:	d904      	bls.n	800c09c <__ascii_wctomb+0x14>
 800c092:	228a      	movs	r2, #138	@ 0x8a
 800c094:	601a      	str	r2, [r3, #0]
 800c096:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c09a:	4770      	bx	lr
 800c09c:	700a      	strb	r2, [r1, #0]
 800c09e:	2001      	movs	r0, #1
 800c0a0:	4770      	bx	lr
	...

0800c0a4 <fiprintf>:
 800c0a4:	b40e      	push	{r1, r2, r3}
 800c0a6:	b503      	push	{r0, r1, lr}
 800c0a8:	4601      	mov	r1, r0
 800c0aa:	ab03      	add	r3, sp, #12
 800c0ac:	4805      	ldr	r0, [pc, #20]	@ (800c0c4 <fiprintf+0x20>)
 800c0ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0b2:	6800      	ldr	r0, [r0, #0]
 800c0b4:	9301      	str	r3, [sp, #4]
 800c0b6:	f7ff fd5b 	bl	800bb70 <_vfiprintf_r>
 800c0ba:	b002      	add	sp, #8
 800c0bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0c0:	b003      	add	sp, #12
 800c0c2:	4770      	bx	lr
 800c0c4:	24000064 	.word	0x24000064

0800c0c8 <abort>:
 800c0c8:	b508      	push	{r3, lr}
 800c0ca:	2006      	movs	r0, #6
 800c0cc:	f000 f82c 	bl	800c128 <raise>
 800c0d0:	2001      	movs	r0, #1
 800c0d2:	f7f6 fe80 	bl	8002dd6 <_exit>

0800c0d6 <_raise_r>:
 800c0d6:	291f      	cmp	r1, #31
 800c0d8:	b538      	push	{r3, r4, r5, lr}
 800c0da:	4605      	mov	r5, r0
 800c0dc:	460c      	mov	r4, r1
 800c0de:	d904      	bls.n	800c0ea <_raise_r+0x14>
 800c0e0:	2316      	movs	r3, #22
 800c0e2:	6003      	str	r3, [r0, #0]
 800c0e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0e8:	bd38      	pop	{r3, r4, r5, pc}
 800c0ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c0ec:	b112      	cbz	r2, 800c0f4 <_raise_r+0x1e>
 800c0ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0f2:	b94b      	cbnz	r3, 800c108 <_raise_r+0x32>
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	f000 f831 	bl	800c15c <_getpid_r>
 800c0fa:	4622      	mov	r2, r4
 800c0fc:	4601      	mov	r1, r0
 800c0fe:	4628      	mov	r0, r5
 800c100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c104:	f000 b818 	b.w	800c138 <_kill_r>
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d00a      	beq.n	800c122 <_raise_r+0x4c>
 800c10c:	1c59      	adds	r1, r3, #1
 800c10e:	d103      	bne.n	800c118 <_raise_r+0x42>
 800c110:	2316      	movs	r3, #22
 800c112:	6003      	str	r3, [r0, #0]
 800c114:	2001      	movs	r0, #1
 800c116:	e7e7      	b.n	800c0e8 <_raise_r+0x12>
 800c118:	2100      	movs	r1, #0
 800c11a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c11e:	4620      	mov	r0, r4
 800c120:	4798      	blx	r3
 800c122:	2000      	movs	r0, #0
 800c124:	e7e0      	b.n	800c0e8 <_raise_r+0x12>
	...

0800c128 <raise>:
 800c128:	4b02      	ldr	r3, [pc, #8]	@ (800c134 <raise+0xc>)
 800c12a:	4601      	mov	r1, r0
 800c12c:	6818      	ldr	r0, [r3, #0]
 800c12e:	f7ff bfd2 	b.w	800c0d6 <_raise_r>
 800c132:	bf00      	nop
 800c134:	24000064 	.word	0x24000064

0800c138 <_kill_r>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4d07      	ldr	r5, [pc, #28]	@ (800c158 <_kill_r+0x20>)
 800c13c:	2300      	movs	r3, #0
 800c13e:	4604      	mov	r4, r0
 800c140:	4608      	mov	r0, r1
 800c142:	4611      	mov	r1, r2
 800c144:	602b      	str	r3, [r5, #0]
 800c146:	f7f6 fe36 	bl	8002db6 <_kill>
 800c14a:	1c43      	adds	r3, r0, #1
 800c14c:	d102      	bne.n	800c154 <_kill_r+0x1c>
 800c14e:	682b      	ldr	r3, [r5, #0]
 800c150:	b103      	cbz	r3, 800c154 <_kill_r+0x1c>
 800c152:	6023      	str	r3, [r4, #0]
 800c154:	bd38      	pop	{r3, r4, r5, pc}
 800c156:	bf00      	nop
 800c158:	24000a5c 	.word	0x24000a5c

0800c15c <_getpid_r>:
 800c15c:	f7f6 be23 	b.w	8002da6 <_getpid>

0800c160 <_init>:
 800c160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c162:	bf00      	nop
 800c164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c166:	bc08      	pop	{r3}
 800c168:	469e      	mov	lr, r3
 800c16a:	4770      	bx	lr

0800c16c <_fini>:
 800c16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16e:	bf00      	nop
 800c170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c172:	bc08      	pop	{r3}
 800c174:	469e      	mov	lr, r3
 800c176:	4770      	bx	lr
